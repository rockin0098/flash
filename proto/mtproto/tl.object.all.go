package mtproto

import "fmt"

// resPQ#05162463
type TL_resPQ struct {
	M_classID                        int32
	M_nonce                          []byte
	M_server_nonce                   []byte
	M_pq                             string
	M_server_public_key_fingerprints []int64
}

func (t *TL_resPQ) ClassID() int32 {
	return t.M_classID
}

func (t *TL_resPQ) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_resPQ) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_resPQ) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_resPQ) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_resPQ) Set_pq(M_pq string) {
	t.M_pq = M_pq
}

func (t *TL_resPQ) Get_pq() string {
	return t.M_pq
}

func (t *TL_resPQ) Set_server_public_key_fingerprints(M_server_public_key_fingerprints []int64) {
	t.M_server_public_key_fingerprints = M_server_public_key_fingerprints
}

func (t *TL_resPQ) Get_server_public_key_fingerprints() []int64 {
	return t.M_server_public_key_fingerprints
}

func New_TL_resPQ() *TL_resPQ {
	return &TL_resPQ{
		M_classID: TL_CLASS_resPQ,
	}
}

func (t *TL_resPQ) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_resPQ))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.String(t.Get_pq())
	ec.VectorLong(t.Get_server_public_key_fingerprints())

	return ec.GetBuffer()
}

func (t *TL_resPQ) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_pq = dc.String()
	t.M_server_public_key_fingerprints = dc.VectorLong()

	return dc.err
}

func (t *TL_resPQ) String() string {
	return fmt.Sprintf("- resPQ#05162463\n-- nonce : %v\n-- server_nonce : %v\n-- pq : %v\n-- server_public_key_fingerprints : %v\n", t.M_nonce, t.M_server_nonce, t.M_pq, t.M_server_public_key_fingerprints)
}

// p_q_inner_data#83c95aec
type TL_p_q_inner_data struct {
	M_classID      int32
	M_pq           string
	M_p            string
	M_q            string
	M_nonce        []byte
	M_server_nonce []byte
	M_new_nonce    []byte
}

func (t *TL_p_q_inner_data) ClassID() int32 {
	return t.M_classID
}

func (t *TL_p_q_inner_data) Set_pq(M_pq string) {
	t.M_pq = M_pq
}

func (t *TL_p_q_inner_data) Get_pq() string {
	return t.M_pq
}

func (t *TL_p_q_inner_data) Set_p(M_p string) {
	t.M_p = M_p
}

func (t *TL_p_q_inner_data) Get_p() string {
	return t.M_p
}

func (t *TL_p_q_inner_data) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_p_q_inner_data) Get_q() string {
	return t.M_q
}

func (t *TL_p_q_inner_data) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_p_q_inner_data) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_p_q_inner_data) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_p_q_inner_data) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_p_q_inner_data) Set_new_nonce(M_new_nonce []byte) {
	t.M_new_nonce = M_new_nonce
}

func (t *TL_p_q_inner_data) Get_new_nonce() []byte {
	return t.M_new_nonce
}

func New_TL_p_q_inner_data() *TL_p_q_inner_data {
	return &TL_p_q_inner_data{
		M_classID: TL_CLASS_p_q_inner_data,
	}
}

func (t *TL_p_q_inner_data) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_p_q_inner_data))
	ec.String(t.Get_pq())
	ec.String(t.Get_p())
	ec.String(t.Get_q())
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.Bytes(t.Get_new_nonce())

	return ec.GetBuffer()
}

func (t *TL_p_q_inner_data) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pq = dc.String()
	t.M_p = dc.String()
	t.M_q = dc.String()
	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_new_nonce = dc.Bytes(32)

	return dc.err
}

func (t *TL_p_q_inner_data) String() string {
	return fmt.Sprintf("- p_q_inner_data#83c95aec\n-- pq : %v\n-- p : %v\n-- q : %v\n-- nonce : %v\n-- server_nonce : %v\n-- new_nonce : %v\n", t.M_pq, t.M_p, t.M_q, t.M_nonce, t.M_server_nonce, t.M_new_nonce)
}

// server_DH_params_fail#79cb045d
type TL_server_DH_params_fail struct {
	M_classID        int32
	M_nonce          []byte
	M_server_nonce   []byte
	M_new_nonce_hash []byte
}

func (t *TL_server_DH_params_fail) ClassID() int32 {
	return t.M_classID
}

func (t *TL_server_DH_params_fail) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_server_DH_params_fail) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_server_DH_params_fail) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_server_DH_params_fail) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_server_DH_params_fail) Set_new_nonce_hash(M_new_nonce_hash []byte) {
	t.M_new_nonce_hash = M_new_nonce_hash
}

func (t *TL_server_DH_params_fail) Get_new_nonce_hash() []byte {
	return t.M_new_nonce_hash
}

func New_TL_server_DH_params_fail() *TL_server_DH_params_fail {
	return &TL_server_DH_params_fail{
		M_classID: TL_CLASS_server_DH_params_fail,
	}
}

func (t *TL_server_DH_params_fail) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_server_DH_params_fail))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.Bytes(t.Get_new_nonce_hash())

	return ec.GetBuffer()
}

func (t *TL_server_DH_params_fail) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_new_nonce_hash = dc.Bytes(16)

	return dc.err
}

func (t *TL_server_DH_params_fail) String() string {
	return fmt.Sprintf("- server_DH_params_fail#79cb045d\n-- nonce : %v\n-- server_nonce : %v\n-- new_nonce_hash : %v\n", t.M_nonce, t.M_server_nonce, t.M_new_nonce_hash)
}

// server_DH_params_ok#d0e8075c
type TL_server_DH_params_ok struct {
	M_classID          int32
	M_nonce            []byte
	M_server_nonce     []byte
	M_encrypted_answer string
}

func (t *TL_server_DH_params_ok) ClassID() int32 {
	return t.M_classID
}

func (t *TL_server_DH_params_ok) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_server_DH_params_ok) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_server_DH_params_ok) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_server_DH_params_ok) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_server_DH_params_ok) Set_encrypted_answer(M_encrypted_answer string) {
	t.M_encrypted_answer = M_encrypted_answer
}

func (t *TL_server_DH_params_ok) Get_encrypted_answer() string {
	return t.M_encrypted_answer
}

func New_TL_server_DH_params_ok() *TL_server_DH_params_ok {
	return &TL_server_DH_params_ok{
		M_classID: TL_CLASS_server_DH_params_ok,
	}
}

func (t *TL_server_DH_params_ok) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_server_DH_params_ok))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.String(t.Get_encrypted_answer())

	return ec.GetBuffer()
}

func (t *TL_server_DH_params_ok) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_encrypted_answer = dc.String()

	return dc.err
}

func (t *TL_server_DH_params_ok) String() string {
	return fmt.Sprintf("- server_DH_params_ok#d0e8075c\n-- nonce : %v\n-- server_nonce : %v\n-- encrypted_answer : %v\n", t.M_nonce, t.M_server_nonce, t.M_encrypted_answer)
}

// server_DH_inner_data#b5890dba
type TL_server_DH_inner_data struct {
	M_classID      int32
	M_nonce        []byte
	M_server_nonce []byte
	M_g            int32
	M_dh_prime     string
	M_g_a          string
	M_server_time  int32
}

func (t *TL_server_DH_inner_data) ClassID() int32 {
	return t.M_classID
}

func (t *TL_server_DH_inner_data) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_server_DH_inner_data) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_server_DH_inner_data) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_server_DH_inner_data) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_server_DH_inner_data) Set_g(M_g int32) {
	t.M_g = M_g
}

func (t *TL_server_DH_inner_data) Get_g() int32 {
	return t.M_g
}

func (t *TL_server_DH_inner_data) Set_dh_prime(M_dh_prime string) {
	t.M_dh_prime = M_dh_prime
}

func (t *TL_server_DH_inner_data) Get_dh_prime() string {
	return t.M_dh_prime
}

func (t *TL_server_DH_inner_data) Set_g_a(M_g_a string) {
	t.M_g_a = M_g_a
}

func (t *TL_server_DH_inner_data) Get_g_a() string {
	return t.M_g_a
}

func (t *TL_server_DH_inner_data) Set_server_time(M_server_time int32) {
	t.M_server_time = M_server_time
}

func (t *TL_server_DH_inner_data) Get_server_time() int32 {
	return t.M_server_time
}

func New_TL_server_DH_inner_data() *TL_server_DH_inner_data {
	return &TL_server_DH_inner_data{
		M_classID: TL_CLASS_server_DH_inner_data,
	}
}

func (t *TL_server_DH_inner_data) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_server_DH_inner_data))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.Int(t.Get_g())
	ec.String(t.Get_dh_prime())
	ec.String(t.Get_g_a())
	ec.Int(t.Get_server_time())

	return ec.GetBuffer()
}

func (t *TL_server_DH_inner_data) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_g = dc.Int()
	t.M_dh_prime = dc.String()
	t.M_g_a = dc.String()
	t.M_server_time = dc.Int()

	return dc.err
}

func (t *TL_server_DH_inner_data) String() string {
	return fmt.Sprintf("- server_DH_inner_data#b5890dba\n-- nonce : %v\n-- server_nonce : %v\n-- g : %v\n-- dh_prime : %v\n-- g_a : %v\n-- server_time : %v\n", t.M_nonce, t.M_server_nonce, t.M_g, t.M_dh_prime, t.M_g_a, t.M_server_time)
}

// client_DH_inner_data#6643b654
type TL_client_DH_inner_data struct {
	M_classID      int32
	M_nonce        []byte
	M_server_nonce []byte
	M_retry_id     int64
	M_g_b          string
}

func (t *TL_client_DH_inner_data) ClassID() int32 {
	return t.M_classID
}

func (t *TL_client_DH_inner_data) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_client_DH_inner_data) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_client_DH_inner_data) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_client_DH_inner_data) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_client_DH_inner_data) Set_retry_id(M_retry_id int64) {
	t.M_retry_id = M_retry_id
}

func (t *TL_client_DH_inner_data) Get_retry_id() int64 {
	return t.M_retry_id
}

func (t *TL_client_DH_inner_data) Set_g_b(M_g_b string) {
	t.M_g_b = M_g_b
}

func (t *TL_client_DH_inner_data) Get_g_b() string {
	return t.M_g_b
}

func New_TL_client_DH_inner_data() *TL_client_DH_inner_data {
	return &TL_client_DH_inner_data{
		M_classID: TL_CLASS_client_DH_inner_data,
	}
}

func (t *TL_client_DH_inner_data) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_client_DH_inner_data))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.Long(t.Get_retry_id())
	ec.String(t.Get_g_b())

	return ec.GetBuffer()
}

func (t *TL_client_DH_inner_data) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_retry_id = dc.Long()
	t.M_g_b = dc.String()

	return dc.err
}

func (t *TL_client_DH_inner_data) String() string {
	return fmt.Sprintf("- client_DH_inner_data#6643b654\n-- nonce : %v\n-- server_nonce : %v\n-- retry_id : %v\n-- g_b : %v\n", t.M_nonce, t.M_server_nonce, t.M_retry_id, t.M_g_b)
}

// dh_gen_ok#3bcbf734
type TL_dh_gen_ok struct {
	M_classID         int32
	M_nonce           []byte
	M_server_nonce    []byte
	M_new_nonce_hash1 []byte
}

func (t *TL_dh_gen_ok) ClassID() int32 {
	return t.M_classID
}

func (t *TL_dh_gen_ok) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_dh_gen_ok) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_dh_gen_ok) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_dh_gen_ok) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_dh_gen_ok) Set_new_nonce_hash1(M_new_nonce_hash1 []byte) {
	t.M_new_nonce_hash1 = M_new_nonce_hash1
}

func (t *TL_dh_gen_ok) Get_new_nonce_hash1() []byte {
	return t.M_new_nonce_hash1
}

func New_TL_dh_gen_ok() *TL_dh_gen_ok {
	return &TL_dh_gen_ok{
		M_classID: TL_CLASS_dh_gen_ok,
	}
}

func (t *TL_dh_gen_ok) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_dh_gen_ok))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.Bytes(t.Get_new_nonce_hash1())

	return ec.GetBuffer()
}

func (t *TL_dh_gen_ok) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_new_nonce_hash1 = dc.Bytes(16)

	return dc.err
}

func (t *TL_dh_gen_ok) String() string {
	return fmt.Sprintf("- dh_gen_ok#3bcbf734\n-- nonce : %v\n-- server_nonce : %v\n-- new_nonce_hash1 : %v\n", t.M_nonce, t.M_server_nonce, t.M_new_nonce_hash1)
}

// dh_gen_retry#46dc1fb9
type TL_dh_gen_retry struct {
	M_classID         int32
	M_nonce           []byte
	M_server_nonce    []byte
	M_new_nonce_hash2 []byte
}

func (t *TL_dh_gen_retry) ClassID() int32 {
	return t.M_classID
}

func (t *TL_dh_gen_retry) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_dh_gen_retry) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_dh_gen_retry) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_dh_gen_retry) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_dh_gen_retry) Set_new_nonce_hash2(M_new_nonce_hash2 []byte) {
	t.M_new_nonce_hash2 = M_new_nonce_hash2
}

func (t *TL_dh_gen_retry) Get_new_nonce_hash2() []byte {
	return t.M_new_nonce_hash2
}

func New_TL_dh_gen_retry() *TL_dh_gen_retry {
	return &TL_dh_gen_retry{
		M_classID: TL_CLASS_dh_gen_retry,
	}
}

func (t *TL_dh_gen_retry) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_dh_gen_retry))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.Bytes(t.Get_new_nonce_hash2())

	return ec.GetBuffer()
}

func (t *TL_dh_gen_retry) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_new_nonce_hash2 = dc.Bytes(16)

	return dc.err
}

func (t *TL_dh_gen_retry) String() string {
	return fmt.Sprintf("- dh_gen_retry#46dc1fb9\n-- nonce : %v\n-- server_nonce : %v\n-- new_nonce_hash2 : %v\n", t.M_nonce, t.M_server_nonce, t.M_new_nonce_hash2)
}

// dh_gen_fail#a69dae02
type TL_dh_gen_fail struct {
	M_classID         int32
	M_nonce           []byte
	M_server_nonce    []byte
	M_new_nonce_hash3 []byte
}

func (t *TL_dh_gen_fail) ClassID() int32 {
	return t.M_classID
}

func (t *TL_dh_gen_fail) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_dh_gen_fail) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_dh_gen_fail) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_dh_gen_fail) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_dh_gen_fail) Set_new_nonce_hash3(M_new_nonce_hash3 []byte) {
	t.M_new_nonce_hash3 = M_new_nonce_hash3
}

func (t *TL_dh_gen_fail) Get_new_nonce_hash3() []byte {
	return t.M_new_nonce_hash3
}

func New_TL_dh_gen_fail() *TL_dh_gen_fail {
	return &TL_dh_gen_fail{
		M_classID: TL_CLASS_dh_gen_fail,
	}
}

func (t *TL_dh_gen_fail) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_dh_gen_fail))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.Bytes(t.Get_new_nonce_hash3())

	return ec.GetBuffer()
}

func (t *TL_dh_gen_fail) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_new_nonce_hash3 = dc.Bytes(16)

	return dc.err
}

func (t *TL_dh_gen_fail) String() string {
	return fmt.Sprintf("- dh_gen_fail#a69dae02\n-- nonce : %v\n-- server_nonce : %v\n-- new_nonce_hash3 : %v\n", t.M_nonce, t.M_server_nonce, t.M_new_nonce_hash3)
}

// destroy_auth_key_ok#f660e1d4
type TL_destroy_auth_key_ok struct {
	M_classID int32
}

func (t *TL_destroy_auth_key_ok) ClassID() int32 {
	return t.M_classID
}

func New_TL_destroy_auth_key_ok() *TL_destroy_auth_key_ok {
	return &TL_destroy_auth_key_ok{
		M_classID: TL_CLASS_destroy_auth_key_ok,
	}
}

func (t *TL_destroy_auth_key_ok) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_destroy_auth_key_ok))

	return ec.GetBuffer()
}

func (t *TL_destroy_auth_key_ok) Decode(b []byte) error {
	return nil
}

func (t *TL_destroy_auth_key_ok) String() string {
	return fmt.Sprintf("- destroy_auth_key_ok#f660e1d4\n")
}

// destroy_auth_key_none#0a9f2259
type TL_destroy_auth_key_none struct {
	M_classID int32
}

func (t *TL_destroy_auth_key_none) ClassID() int32 {
	return t.M_classID
}

func New_TL_destroy_auth_key_none() *TL_destroy_auth_key_none {
	return &TL_destroy_auth_key_none{
		M_classID: TL_CLASS_destroy_auth_key_none,
	}
}

func (t *TL_destroy_auth_key_none) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_destroy_auth_key_none))

	return ec.GetBuffer()
}

func (t *TL_destroy_auth_key_none) Decode(b []byte) error {
	return nil
}

func (t *TL_destroy_auth_key_none) String() string {
	return fmt.Sprintf("- destroy_auth_key_none#0a9f2259\n")
}

// destroy_auth_key_fail#ea109b13
type TL_destroy_auth_key_fail struct {
	M_classID int32
}

func (t *TL_destroy_auth_key_fail) ClassID() int32 {
	return t.M_classID
}

func New_TL_destroy_auth_key_fail() *TL_destroy_auth_key_fail {
	return &TL_destroy_auth_key_fail{
		M_classID: TL_CLASS_destroy_auth_key_fail,
	}
}

func (t *TL_destroy_auth_key_fail) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_destroy_auth_key_fail))

	return ec.GetBuffer()
}

func (t *TL_destroy_auth_key_fail) Decode(b []byte) error {
	return nil
}

func (t *TL_destroy_auth_key_fail) String() string {
	return fmt.Sprintf("- destroy_auth_key_fail#ea109b13\n")
}

// req_pq#60469778
type TL_req_pq struct {
	M_classID int32
	M_nonce   []byte
}

func (t *TL_req_pq) ClassID() int32 {
	return t.M_classID
}

func (t *TL_req_pq) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_req_pq) Get_nonce() []byte {
	return t.M_nonce
}

func New_TL_req_pq() *TL_req_pq {
	return &TL_req_pq{
		M_classID: TL_CLASS_req_pq,
	}
}

func (t *TL_req_pq) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_req_pq))
	ec.Bytes(t.Get_nonce())

	return ec.GetBuffer()
}

func (t *TL_req_pq) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)

	return dc.err
}

func (t *TL_req_pq) String() string {
	return fmt.Sprintf("- req_pq#60469778\n-- nonce : %v\n", t.M_nonce)
}

// req_DH_params#d712e4be
type TL_req_DH_params struct {
	M_classID                int32
	M_nonce                  []byte
	M_server_nonce           []byte
	M_p                      string
	M_q                      string
	M_public_key_fingerprint int64
	M_encrypted_data         string
}

func (t *TL_req_DH_params) ClassID() int32 {
	return t.M_classID
}

func (t *TL_req_DH_params) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_req_DH_params) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_req_DH_params) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_req_DH_params) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_req_DH_params) Set_p(M_p string) {
	t.M_p = M_p
}

func (t *TL_req_DH_params) Get_p() string {
	return t.M_p
}

func (t *TL_req_DH_params) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_req_DH_params) Get_q() string {
	return t.M_q
}

func (t *TL_req_DH_params) Set_public_key_fingerprint(M_public_key_fingerprint int64) {
	t.M_public_key_fingerprint = M_public_key_fingerprint
}

func (t *TL_req_DH_params) Get_public_key_fingerprint() int64 {
	return t.M_public_key_fingerprint
}

func (t *TL_req_DH_params) Set_encrypted_data(M_encrypted_data string) {
	t.M_encrypted_data = M_encrypted_data
}

func (t *TL_req_DH_params) Get_encrypted_data() string {
	return t.M_encrypted_data
}

func New_TL_req_DH_params() *TL_req_DH_params {
	return &TL_req_DH_params{
		M_classID: TL_CLASS_req_DH_params,
	}
}

func (t *TL_req_DH_params) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_req_DH_params))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.String(t.Get_p())
	ec.String(t.Get_q())
	ec.Long(t.Get_public_key_fingerprint())
	ec.String(t.Get_encrypted_data())

	return ec.GetBuffer()
}

func (t *TL_req_DH_params) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_p = dc.String()
	t.M_q = dc.String()
	t.M_public_key_fingerprint = dc.Long()
	t.M_encrypted_data = dc.String()

	return dc.err
}

func (t *TL_req_DH_params) String() string {
	return fmt.Sprintf("- req_DH_params#d712e4be\n-- nonce : %v\n-- server_nonce : %v\n-- p : %v\n-- q : %v\n-- public_key_fingerprint : %v\n-- encrypted_data : %v\n", t.M_nonce, t.M_server_nonce, t.M_p, t.M_q, t.M_public_key_fingerprint, t.M_encrypted_data)
}

// set_client_DH_params#f5045f1f
type TL_set_client_DH_params struct {
	M_classID        int32
	M_nonce          []byte
	M_server_nonce   []byte
	M_encrypted_data string
}

func (t *TL_set_client_DH_params) ClassID() int32 {
	return t.M_classID
}

func (t *TL_set_client_DH_params) Set_nonce(M_nonce []byte) {
	t.M_nonce = M_nonce
}

func (t *TL_set_client_DH_params) Get_nonce() []byte {
	return t.M_nonce
}

func (t *TL_set_client_DH_params) Set_server_nonce(M_server_nonce []byte) {
	t.M_server_nonce = M_server_nonce
}

func (t *TL_set_client_DH_params) Get_server_nonce() []byte {
	return t.M_server_nonce
}

func (t *TL_set_client_DH_params) Set_encrypted_data(M_encrypted_data string) {
	t.M_encrypted_data = M_encrypted_data
}

func (t *TL_set_client_DH_params) Get_encrypted_data() string {
	return t.M_encrypted_data
}

func New_TL_set_client_DH_params() *TL_set_client_DH_params {
	return &TL_set_client_DH_params{
		M_classID: TL_CLASS_set_client_DH_params,
	}
}

func (t *TL_set_client_DH_params) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_set_client_DH_params))
	ec.Bytes(t.Get_nonce())
	ec.Bytes(t.Get_server_nonce())
	ec.String(t.Get_encrypted_data())

	return ec.GetBuffer()
}

func (t *TL_set_client_DH_params) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nonce = dc.Bytes(16)
	t.M_server_nonce = dc.Bytes(16)
	t.M_encrypted_data = dc.String()

	return dc.err
}

func (t *TL_set_client_DH_params) String() string {
	return fmt.Sprintf("- set_client_DH_params#f5045f1f\n-- nonce : %v\n-- server_nonce : %v\n-- encrypted_data : %v\n", t.M_nonce, t.M_server_nonce, t.M_encrypted_data)
}

// destroy_auth_key#d1435160
type TL_destroy_auth_key struct {
	M_classID int32
}

func (t *TL_destroy_auth_key) ClassID() int32 {
	return t.M_classID
}

func New_TL_destroy_auth_key() *TL_destroy_auth_key {
	return &TL_destroy_auth_key{
		M_classID: TL_CLASS_destroy_auth_key,
	}
}

func (t *TL_destroy_auth_key) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_destroy_auth_key))

	return ec.GetBuffer()
}

func (t *TL_destroy_auth_key) Decode(b []byte) error {
	return nil
}

func (t *TL_destroy_auth_key) String() string {
	return fmt.Sprintf("- destroy_auth_key#d1435160\n")
}

// msgs_ack#62d6b459
type TL_msgs_ack struct {
	M_classID int32
	M_msg_ids []int64
}

func (t *TL_msgs_ack) ClassID() int32 {
	return t.M_classID
}

func (t *TL_msgs_ack) Set_msg_ids(M_msg_ids []int64) {
	t.M_msg_ids = M_msg_ids
}

func (t *TL_msgs_ack) Get_msg_ids() []int64 {
	return t.M_msg_ids
}

func New_TL_msgs_ack() *TL_msgs_ack {
	return &TL_msgs_ack{
		M_classID: TL_CLASS_msgs_ack,
	}
}

func (t *TL_msgs_ack) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_msgs_ack))
	ec.VectorLong(t.Get_msg_ids())

	return ec.GetBuffer()
}

func (t *TL_msgs_ack) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_ids = dc.VectorLong()

	return dc.err
}

func (t *TL_msgs_ack) String() string {
	return fmt.Sprintf("- msgs_ack#62d6b459\n-- msg_ids : %v\n", t.M_msg_ids)
}

// bad_msg_notification#a7eff811
type TL_bad_msg_notification struct {
	M_classID       int32
	M_bad_msg_id    int64
	M_bad_msg_seqno int32
	M_error_code    int32
}

func (t *TL_bad_msg_notification) ClassID() int32 {
	return t.M_classID
}

func (t *TL_bad_msg_notification) Set_bad_msg_id(M_bad_msg_id int64) {
	t.M_bad_msg_id = M_bad_msg_id
}

func (t *TL_bad_msg_notification) Get_bad_msg_id() int64 {
	return t.M_bad_msg_id
}

func (t *TL_bad_msg_notification) Set_bad_msg_seqno(M_bad_msg_seqno int32) {
	t.M_bad_msg_seqno = M_bad_msg_seqno
}

func (t *TL_bad_msg_notification) Get_bad_msg_seqno() int32 {
	return t.M_bad_msg_seqno
}

func (t *TL_bad_msg_notification) Set_error_code(M_error_code int32) {
	t.M_error_code = M_error_code
}

func (t *TL_bad_msg_notification) Get_error_code() int32 {
	return t.M_error_code
}

func New_TL_bad_msg_notification() *TL_bad_msg_notification {
	return &TL_bad_msg_notification{
		M_classID: TL_CLASS_bad_msg_notification,
	}
}

func (t *TL_bad_msg_notification) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_bad_msg_notification))
	ec.Long(t.Get_bad_msg_id())
	ec.Int(t.Get_bad_msg_seqno())
	ec.Int(t.Get_error_code())

	return ec.GetBuffer()
}

func (t *TL_bad_msg_notification) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_bad_msg_id = dc.Long()
	t.M_bad_msg_seqno = dc.Int()
	t.M_error_code = dc.Int()

	return dc.err
}

func (t *TL_bad_msg_notification) String() string {
	return fmt.Sprintf("- bad_msg_notification#a7eff811\n-- bad_msg_id : %v\n-- bad_msg_seqno : %v\n-- error_code : %v\n", t.M_bad_msg_id, t.M_bad_msg_seqno, t.M_error_code)
}

// bad_server_salt#edab447b
type TL_bad_server_salt struct {
	M_classID         int32
	M_bad_msg_id      int64
	M_bad_msg_seqno   int32
	M_error_code      int32
	M_new_server_salt int64
}

func (t *TL_bad_server_salt) ClassID() int32 {
	return t.M_classID
}

func (t *TL_bad_server_salt) Set_bad_msg_id(M_bad_msg_id int64) {
	t.M_bad_msg_id = M_bad_msg_id
}

func (t *TL_bad_server_salt) Get_bad_msg_id() int64 {
	return t.M_bad_msg_id
}

func (t *TL_bad_server_salt) Set_bad_msg_seqno(M_bad_msg_seqno int32) {
	t.M_bad_msg_seqno = M_bad_msg_seqno
}

func (t *TL_bad_server_salt) Get_bad_msg_seqno() int32 {
	return t.M_bad_msg_seqno
}

func (t *TL_bad_server_salt) Set_error_code(M_error_code int32) {
	t.M_error_code = M_error_code
}

func (t *TL_bad_server_salt) Get_error_code() int32 {
	return t.M_error_code
}

func (t *TL_bad_server_salt) Set_new_server_salt(M_new_server_salt int64) {
	t.M_new_server_salt = M_new_server_salt
}

func (t *TL_bad_server_salt) Get_new_server_salt() int64 {
	return t.M_new_server_salt
}

func New_TL_bad_server_salt() *TL_bad_server_salt {
	return &TL_bad_server_salt{
		M_classID: TL_CLASS_bad_server_salt,
	}
}

func (t *TL_bad_server_salt) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_bad_server_salt))
	ec.Long(t.Get_bad_msg_id())
	ec.Int(t.Get_bad_msg_seqno())
	ec.Int(t.Get_error_code())
	ec.Long(t.Get_new_server_salt())

	return ec.GetBuffer()
}

func (t *TL_bad_server_salt) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_bad_msg_id = dc.Long()
	t.M_bad_msg_seqno = dc.Int()
	t.M_error_code = dc.Int()
	t.M_new_server_salt = dc.Long()

	return dc.err
}

func (t *TL_bad_server_salt) String() string {
	return fmt.Sprintf("- bad_server_salt#edab447b\n-- bad_msg_id : %v\n-- bad_msg_seqno : %v\n-- error_code : %v\n-- new_server_salt : %v\n", t.M_bad_msg_id, t.M_bad_msg_seqno, t.M_error_code, t.M_new_server_salt)
}

// msgs_state_req#da69fb52
type TL_msgs_state_req struct {
	M_classID int32
	M_msg_ids []int64
}

func (t *TL_msgs_state_req) ClassID() int32 {
	return t.M_classID
}

func (t *TL_msgs_state_req) Set_msg_ids(M_msg_ids []int64) {
	t.M_msg_ids = M_msg_ids
}

func (t *TL_msgs_state_req) Get_msg_ids() []int64 {
	return t.M_msg_ids
}

func New_TL_msgs_state_req() *TL_msgs_state_req {
	return &TL_msgs_state_req{
		M_classID: TL_CLASS_msgs_state_req,
	}
}

func (t *TL_msgs_state_req) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_msgs_state_req))
	ec.VectorLong(t.Get_msg_ids())

	return ec.GetBuffer()
}

func (t *TL_msgs_state_req) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_ids = dc.VectorLong()

	return dc.err
}

func (t *TL_msgs_state_req) String() string {
	return fmt.Sprintf("- msgs_state_req#da69fb52\n-- msg_ids : %v\n", t.M_msg_ids)
}

// msgs_state_info#04deb57d
type TL_msgs_state_info struct {
	M_classID    int32
	M_req_msg_id int64
	M_info       string
}

func (t *TL_msgs_state_info) ClassID() int32 {
	return t.M_classID
}

func (t *TL_msgs_state_info) Set_req_msg_id(M_req_msg_id int64) {
	t.M_req_msg_id = M_req_msg_id
}

func (t *TL_msgs_state_info) Get_req_msg_id() int64 {
	return t.M_req_msg_id
}

func (t *TL_msgs_state_info) Set_info(M_info string) {
	t.M_info = M_info
}

func (t *TL_msgs_state_info) Get_info() string {
	return t.M_info
}

func New_TL_msgs_state_info() *TL_msgs_state_info {
	return &TL_msgs_state_info{
		M_classID: TL_CLASS_msgs_state_info,
	}
}

func (t *TL_msgs_state_info) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_msgs_state_info))
	ec.Long(t.Get_req_msg_id())
	ec.String(t.Get_info())

	return ec.GetBuffer()
}

func (t *TL_msgs_state_info) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_req_msg_id = dc.Long()
	t.M_info = dc.String()

	return dc.err
}

func (t *TL_msgs_state_info) String() string {
	return fmt.Sprintf("- msgs_state_info#04deb57d\n-- req_msg_id : %v\n-- info : %v\n", t.M_req_msg_id, t.M_info)
}

// msgs_all_info#8cc0d131
type TL_msgs_all_info struct {
	M_classID int32
	M_msg_ids []int64
	M_info    string
}

func (t *TL_msgs_all_info) ClassID() int32 {
	return t.M_classID
}

func (t *TL_msgs_all_info) Set_msg_ids(M_msg_ids []int64) {
	t.M_msg_ids = M_msg_ids
}

func (t *TL_msgs_all_info) Get_msg_ids() []int64 {
	return t.M_msg_ids
}

func (t *TL_msgs_all_info) Set_info(M_info string) {
	t.M_info = M_info
}

func (t *TL_msgs_all_info) Get_info() string {
	return t.M_info
}

func New_TL_msgs_all_info() *TL_msgs_all_info {
	return &TL_msgs_all_info{
		M_classID: TL_CLASS_msgs_all_info,
	}
}

func (t *TL_msgs_all_info) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_msgs_all_info))
	ec.VectorLong(t.Get_msg_ids())
	ec.String(t.Get_info())

	return ec.GetBuffer()
}

func (t *TL_msgs_all_info) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_ids = dc.VectorLong()
	t.M_info = dc.String()

	return dc.err
}

func (t *TL_msgs_all_info) String() string {
	return fmt.Sprintf("- msgs_all_info#8cc0d131\n-- msg_ids : %v\n-- info : %v\n", t.M_msg_ids, t.M_info)
}

// msg_detailed_info#276d3ec6
type TL_msg_detailed_info struct {
	M_classID       int32
	M_msg_id        int64
	M_answer_msg_id int64
	M_bytes         int32
	M_status        int32
}

func (t *TL_msg_detailed_info) ClassID() int32 {
	return t.M_classID
}

func (t *TL_msg_detailed_info) Set_msg_id(M_msg_id int64) {
	t.M_msg_id = M_msg_id
}

func (t *TL_msg_detailed_info) Get_msg_id() int64 {
	return t.M_msg_id
}

func (t *TL_msg_detailed_info) Set_answer_msg_id(M_answer_msg_id int64) {
	t.M_answer_msg_id = M_answer_msg_id
}

func (t *TL_msg_detailed_info) Get_answer_msg_id() int64 {
	return t.M_answer_msg_id
}

func (t *TL_msg_detailed_info) Set_bytes(M_bytes int32) {
	t.M_bytes = M_bytes
}

func (t *TL_msg_detailed_info) Get_bytes() int32 {
	return t.M_bytes
}

func (t *TL_msg_detailed_info) Set_status(M_status int32) {
	t.M_status = M_status
}

func (t *TL_msg_detailed_info) Get_status() int32 {
	return t.M_status
}

func New_TL_msg_detailed_info() *TL_msg_detailed_info {
	return &TL_msg_detailed_info{
		M_classID: TL_CLASS_msg_detailed_info,
	}
}

func (t *TL_msg_detailed_info) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_msg_detailed_info))
	ec.Long(t.Get_msg_id())
	ec.Long(t.Get_answer_msg_id())
	ec.Int(t.Get_bytes())
	ec.Int(t.Get_status())

	return ec.GetBuffer()
}

func (t *TL_msg_detailed_info) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_id = dc.Long()
	t.M_answer_msg_id = dc.Long()
	t.M_bytes = dc.Int()
	t.M_status = dc.Int()

	return dc.err
}

func (t *TL_msg_detailed_info) String() string {
	return fmt.Sprintf("- msg_detailed_info#276d3ec6\n-- msg_id : %v\n-- answer_msg_id : %v\n-- bytes : %v\n-- status : %v\n", t.M_msg_id, t.M_answer_msg_id, t.M_bytes, t.M_status)
}

// msg_new_detailed_info#809db6df
type TL_msg_new_detailed_info struct {
	M_classID       int32
	M_answer_msg_id int64
	M_bytes         int32
	M_status        int32
}

func (t *TL_msg_new_detailed_info) ClassID() int32 {
	return t.M_classID
}

func (t *TL_msg_new_detailed_info) Set_answer_msg_id(M_answer_msg_id int64) {
	t.M_answer_msg_id = M_answer_msg_id
}

func (t *TL_msg_new_detailed_info) Get_answer_msg_id() int64 {
	return t.M_answer_msg_id
}

func (t *TL_msg_new_detailed_info) Set_bytes(M_bytes int32) {
	t.M_bytes = M_bytes
}

func (t *TL_msg_new_detailed_info) Get_bytes() int32 {
	return t.M_bytes
}

func (t *TL_msg_new_detailed_info) Set_status(M_status int32) {
	t.M_status = M_status
}

func (t *TL_msg_new_detailed_info) Get_status() int32 {
	return t.M_status
}

func New_TL_msg_new_detailed_info() *TL_msg_new_detailed_info {
	return &TL_msg_new_detailed_info{
		M_classID: TL_CLASS_msg_new_detailed_info,
	}
}

func (t *TL_msg_new_detailed_info) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_msg_new_detailed_info))
	ec.Long(t.Get_answer_msg_id())
	ec.Int(t.Get_bytes())
	ec.Int(t.Get_status())

	return ec.GetBuffer()
}

func (t *TL_msg_new_detailed_info) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_answer_msg_id = dc.Long()
	t.M_bytes = dc.Int()
	t.M_status = dc.Int()

	return dc.err
}

func (t *TL_msg_new_detailed_info) String() string {
	return fmt.Sprintf("- msg_new_detailed_info#809db6df\n-- answer_msg_id : %v\n-- bytes : %v\n-- status : %v\n", t.M_answer_msg_id, t.M_bytes, t.M_status)
}

// msg_resend_req#7d861a08
type TL_msg_resend_req struct {
	M_classID int32
	M_msg_ids []int64
}

func (t *TL_msg_resend_req) ClassID() int32 {
	return t.M_classID
}

func (t *TL_msg_resend_req) Set_msg_ids(M_msg_ids []int64) {
	t.M_msg_ids = M_msg_ids
}

func (t *TL_msg_resend_req) Get_msg_ids() []int64 {
	return t.M_msg_ids
}

func New_TL_msg_resend_req() *TL_msg_resend_req {
	return &TL_msg_resend_req{
		M_classID: TL_CLASS_msg_resend_req,
	}
}

func (t *TL_msg_resend_req) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_msg_resend_req))
	ec.VectorLong(t.Get_msg_ids())

	return ec.GetBuffer()
}

func (t *TL_msg_resend_req) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_ids = dc.VectorLong()

	return dc.err
}

func (t *TL_msg_resend_req) String() string {
	return fmt.Sprintf("- msg_resend_req#7d861a08\n-- msg_ids : %v\n", t.M_msg_ids)
}

// rpc_error#2144ca19
type TL_rpc_error struct {
	M_classID       int32
	M_error_code    int32
	M_error_message string
}

func (t *TL_rpc_error) ClassID() int32 {
	return t.M_classID
}

func (t *TL_rpc_error) Set_error_code(M_error_code int32) {
	t.M_error_code = M_error_code
}

func (t *TL_rpc_error) Get_error_code() int32 {
	return t.M_error_code
}

func (t *TL_rpc_error) Set_error_message(M_error_message string) {
	t.M_error_message = M_error_message
}

func (t *TL_rpc_error) Get_error_message() string {
	return t.M_error_message
}

func New_TL_rpc_error() *TL_rpc_error {
	return &TL_rpc_error{
		M_classID: TL_CLASS_rpc_error,
	}
}

func (t *TL_rpc_error) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_rpc_error))
	ec.Int(t.Get_error_code())
	ec.String(t.Get_error_message())

	return ec.GetBuffer()
}

func (t *TL_rpc_error) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_error_code = dc.Int()
	t.M_error_message = dc.String()

	return dc.err
}

func (t *TL_rpc_error) String() string {
	return fmt.Sprintf("- rpc_error#2144ca19\n-- error_code : %v\n-- error_message : %v\n", t.M_error_code, t.M_error_message)
}

// rpc_answer_unknown#5e2ad36e
type TL_rpc_answer_unknown struct {
	M_classID int32
}

func (t *TL_rpc_answer_unknown) ClassID() int32 {
	return t.M_classID
}

func New_TL_rpc_answer_unknown() *TL_rpc_answer_unknown {
	return &TL_rpc_answer_unknown{
		M_classID: TL_CLASS_rpc_answer_unknown,
	}
}

func (t *TL_rpc_answer_unknown) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_rpc_answer_unknown))

	return ec.GetBuffer()
}

func (t *TL_rpc_answer_unknown) Decode(b []byte) error {
	return nil
}

func (t *TL_rpc_answer_unknown) String() string {
	return fmt.Sprintf("- rpc_answer_unknown#5e2ad36e\n")
}

// rpc_answer_dropped_running#cd78e586
type TL_rpc_answer_dropped_running struct {
	M_classID int32
}

func (t *TL_rpc_answer_dropped_running) ClassID() int32 {
	return t.M_classID
}

func New_TL_rpc_answer_dropped_running() *TL_rpc_answer_dropped_running {
	return &TL_rpc_answer_dropped_running{
		M_classID: TL_CLASS_rpc_answer_dropped_running,
	}
}

func (t *TL_rpc_answer_dropped_running) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_rpc_answer_dropped_running))

	return ec.GetBuffer()
}

func (t *TL_rpc_answer_dropped_running) Decode(b []byte) error {
	return nil
}

func (t *TL_rpc_answer_dropped_running) String() string {
	return fmt.Sprintf("- rpc_answer_dropped_running#cd78e586\n")
}

// rpc_answer_dropped#a43ad8b7
type TL_rpc_answer_dropped struct {
	M_classID int32
	M_msg_id  int64
	M_seq_no  int32
	M_bytes   int32
}

func (t *TL_rpc_answer_dropped) ClassID() int32 {
	return t.M_classID
}

func (t *TL_rpc_answer_dropped) Set_msg_id(M_msg_id int64) {
	t.M_msg_id = M_msg_id
}

func (t *TL_rpc_answer_dropped) Get_msg_id() int64 {
	return t.M_msg_id
}

func (t *TL_rpc_answer_dropped) Set_seq_no(M_seq_no int32) {
	t.M_seq_no = M_seq_no
}

func (t *TL_rpc_answer_dropped) Get_seq_no() int32 {
	return t.M_seq_no
}

func (t *TL_rpc_answer_dropped) Set_bytes(M_bytes int32) {
	t.M_bytes = M_bytes
}

func (t *TL_rpc_answer_dropped) Get_bytes() int32 {
	return t.M_bytes
}

func New_TL_rpc_answer_dropped() *TL_rpc_answer_dropped {
	return &TL_rpc_answer_dropped{
		M_classID: TL_CLASS_rpc_answer_dropped,
	}
}

func (t *TL_rpc_answer_dropped) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_rpc_answer_dropped))
	ec.Long(t.Get_msg_id())
	ec.Int(t.Get_seq_no())
	ec.Int(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_rpc_answer_dropped) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_id = dc.Long()
	t.M_seq_no = dc.Int()
	t.M_bytes = dc.Int()

	return dc.err
}

func (t *TL_rpc_answer_dropped) String() string {
	return fmt.Sprintf("- rpc_answer_dropped#a43ad8b7\n-- msg_id : %v\n-- seq_no : %v\n-- bytes : %v\n", t.M_msg_id, t.M_seq_no, t.M_bytes)
}

// future_salt#0949d9dc
type TL_future_salt struct {
	M_classID     int32
	M_valid_since int32
	M_valid_until int32
	M_salt        int64
}

func (t *TL_future_salt) ClassID() int32 {
	return t.M_classID
}

func (t *TL_future_salt) Set_valid_since(M_valid_since int32) {
	t.M_valid_since = M_valid_since
}

func (t *TL_future_salt) Get_valid_since() int32 {
	return t.M_valid_since
}

func (t *TL_future_salt) Set_valid_until(M_valid_until int32) {
	t.M_valid_until = M_valid_until
}

func (t *TL_future_salt) Get_valid_until() int32 {
	return t.M_valid_until
}

func (t *TL_future_salt) Set_salt(M_salt int64) {
	t.M_salt = M_salt
}

func (t *TL_future_salt) Get_salt() int64 {
	return t.M_salt
}

func New_TL_future_salt() *TL_future_salt {
	return &TL_future_salt{
		M_classID: TL_CLASS_future_salt,
	}
}

func (t *TL_future_salt) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_future_salt))
	ec.Int(t.Get_valid_since())
	ec.Int(t.Get_valid_until())
	ec.Long(t.Get_salt())

	return ec.GetBuffer()
}

func (t *TL_future_salt) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_valid_since = dc.Int()
	t.M_valid_until = dc.Int()
	t.M_salt = dc.Long()

	return dc.err
}

func (t *TL_future_salt) String() string {
	return fmt.Sprintf("- future_salt#0949d9dc\n-- valid_since : %v\n-- valid_until : %v\n-- salt : %v\n", t.M_valid_since, t.M_valid_until, t.M_salt)
}

// future_salts#ae500895
type TL_future_salts struct {
	M_classID    int32
	M_req_msg_id int64
	M_now        int32
	M_salts      []TLObject
}

func (t *TL_future_salts) ClassID() int32 {
	return t.M_classID
}

func (t *TL_future_salts) Set_req_msg_id(M_req_msg_id int64) {
	t.M_req_msg_id = M_req_msg_id
}

func (t *TL_future_salts) Get_req_msg_id() int64 {
	return t.M_req_msg_id
}

func (t *TL_future_salts) Set_now(M_now int32) {
	t.M_now = M_now
}

func (t *TL_future_salts) Get_now() int32 {
	return t.M_now
}

func (t *TL_future_salts) Set_salts(M_salts []TLObject) {
	t.M_salts = M_salts
}

func (t *TL_future_salts) Get_salts() []TLObject {
	return t.M_salts
}

func New_TL_future_salts() *TL_future_salts {
	return &TL_future_salts{
		M_classID: TL_CLASS_future_salts,
	}
}

func (t *TL_future_salts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_future_salts))
	ec.Long(t.Get_req_msg_id())
	ec.Int(t.Get_now())
	ec.Vector(t.Get_salts())

	return ec.GetBuffer()
}

func (t *TL_future_salts) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_req_msg_id = dc.Long()
	t.M_now = dc.Int()
	t.M_salts = dc.Vector()

	return dc.err
}

func (t *TL_future_salts) String() string {
	return fmt.Sprintf("- future_salts#ae500895\n-- req_msg_id : %v\n-- now : %v\n-- salts : %v\n", t.M_req_msg_id, t.M_now, t.M_salts)
}

// pong#347773c5
type TL_pong struct {
	M_classID int32
	M_msg_id  int64
	M_ping_id int64
}

func (t *TL_pong) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pong) Set_msg_id(M_msg_id int64) {
	t.M_msg_id = M_msg_id
}

func (t *TL_pong) Get_msg_id() int64 {
	return t.M_msg_id
}

func (t *TL_pong) Set_ping_id(M_ping_id int64) {
	t.M_ping_id = M_ping_id
}

func (t *TL_pong) Get_ping_id() int64 {
	return t.M_ping_id
}

func New_TL_pong() *TL_pong {
	return &TL_pong{
		M_classID: TL_CLASS_pong,
	}
}

func (t *TL_pong) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pong))
	ec.Long(t.Get_msg_id())
	ec.Long(t.Get_ping_id())

	return ec.GetBuffer()
}

func (t *TL_pong) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_id = dc.Long()
	t.M_ping_id = dc.Long()

	return dc.err
}

func (t *TL_pong) String() string {
	return fmt.Sprintf("- pong#347773c5\n-- msg_id : %v\n-- ping_id : %v\n", t.M_msg_id, t.M_ping_id)
}

// destroy_session_ok#e22045fc
type TL_destroy_session_ok struct {
	M_classID    int32
	M_session_id int64
}

func (t *TL_destroy_session_ok) ClassID() int32 {
	return t.M_classID
}

func (t *TL_destroy_session_ok) Set_session_id(M_session_id int64) {
	t.M_session_id = M_session_id
}

func (t *TL_destroy_session_ok) Get_session_id() int64 {
	return t.M_session_id
}

func New_TL_destroy_session_ok() *TL_destroy_session_ok {
	return &TL_destroy_session_ok{
		M_classID: TL_CLASS_destroy_session_ok,
	}
}

func (t *TL_destroy_session_ok) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_destroy_session_ok))
	ec.Long(t.Get_session_id())

	return ec.GetBuffer()
}

func (t *TL_destroy_session_ok) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_session_id = dc.Long()

	return dc.err
}

func (t *TL_destroy_session_ok) String() string {
	return fmt.Sprintf("- destroy_session_ok#e22045fc\n-- session_id : %v\n", t.M_session_id)
}

// destroy_session_none#62d350c9
type TL_destroy_session_none struct {
	M_classID    int32
	M_session_id int64
}

func (t *TL_destroy_session_none) ClassID() int32 {
	return t.M_classID
}

func (t *TL_destroy_session_none) Set_session_id(M_session_id int64) {
	t.M_session_id = M_session_id
}

func (t *TL_destroy_session_none) Get_session_id() int64 {
	return t.M_session_id
}

func New_TL_destroy_session_none() *TL_destroy_session_none {
	return &TL_destroy_session_none{
		M_classID: TL_CLASS_destroy_session_none,
	}
}

func (t *TL_destroy_session_none) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_destroy_session_none))
	ec.Long(t.Get_session_id())

	return ec.GetBuffer()
}

func (t *TL_destroy_session_none) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_session_id = dc.Long()

	return dc.err
}

func (t *TL_destroy_session_none) String() string {
	return fmt.Sprintf("- destroy_session_none#62d350c9\n-- session_id : %v\n", t.M_session_id)
}

// new_session_created#9ec20908
type TL_new_session_created struct {
	M_classID      int32
	M_first_msg_id int64
	M_unique_id    int64
	M_server_salt  int64
}

func (t *TL_new_session_created) ClassID() int32 {
	return t.M_classID
}

func (t *TL_new_session_created) Set_first_msg_id(M_first_msg_id int64) {
	t.M_first_msg_id = M_first_msg_id
}

func (t *TL_new_session_created) Get_first_msg_id() int64 {
	return t.M_first_msg_id
}

func (t *TL_new_session_created) Set_unique_id(M_unique_id int64) {
	t.M_unique_id = M_unique_id
}

func (t *TL_new_session_created) Get_unique_id() int64 {
	return t.M_unique_id
}

func (t *TL_new_session_created) Set_server_salt(M_server_salt int64) {
	t.M_server_salt = M_server_salt
}

func (t *TL_new_session_created) Get_server_salt() int64 {
	return t.M_server_salt
}

func New_TL_new_session_created() *TL_new_session_created {
	return &TL_new_session_created{
		M_classID: TL_CLASS_new_session_created,
	}
}

func (t *TL_new_session_created) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_new_session_created))
	ec.Long(t.Get_first_msg_id())
	ec.Long(t.Get_unique_id())
	ec.Long(t.Get_server_salt())

	return ec.GetBuffer()
}

func (t *TL_new_session_created) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_first_msg_id = dc.Long()
	t.M_unique_id = dc.Long()
	t.M_server_salt = dc.Long()

	return dc.err
}

func (t *TL_new_session_created) String() string {
	return fmt.Sprintf("- new_session_created#9ec20908\n-- first_msg_id : %v\n-- unique_id : %v\n-- server_salt : %v\n", t.M_first_msg_id, t.M_unique_id, t.M_server_salt)
}

// http_wait#9299359f
type TL_http_wait struct {
	M_classID    int32
	M_max_delay  int32
	M_wait_after int32
	M_max_wait   int32
}

func (t *TL_http_wait) ClassID() int32 {
	return t.M_classID
}

func (t *TL_http_wait) Set_max_delay(M_max_delay int32) {
	t.M_max_delay = M_max_delay
}

func (t *TL_http_wait) Get_max_delay() int32 {
	return t.M_max_delay
}

func (t *TL_http_wait) Set_wait_after(M_wait_after int32) {
	t.M_wait_after = M_wait_after
}

func (t *TL_http_wait) Get_wait_after() int32 {
	return t.M_wait_after
}

func (t *TL_http_wait) Set_max_wait(M_max_wait int32) {
	t.M_max_wait = M_max_wait
}

func (t *TL_http_wait) Get_max_wait() int32 {
	return t.M_max_wait
}

func New_TL_http_wait() *TL_http_wait {
	return &TL_http_wait{
		M_classID: TL_CLASS_http_wait,
	}
}

func (t *TL_http_wait) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_http_wait))
	ec.Int(t.Get_max_delay())
	ec.Int(t.Get_wait_after())
	ec.Int(t.Get_max_wait())

	return ec.GetBuffer()
}

func (t *TL_http_wait) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_max_delay = dc.Int()
	t.M_wait_after = dc.Int()
	t.M_max_wait = dc.Int()

	return dc.err
}

func (t *TL_http_wait) String() string {
	return fmt.Sprintf("- http_wait#9299359f\n-- max_delay : %v\n-- wait_after : %v\n-- max_wait : %v\n", t.M_max_delay, t.M_wait_after, t.M_max_wait)
}

// ipPort#d433ad73
type TL_ipPort struct {
	M_classID int32
	M_ipv4    int32
	M_port    int32
}

func (t *TL_ipPort) ClassID() int32 {
	return t.M_classID
}

func (t *TL_ipPort) Set_ipv4(M_ipv4 int32) {
	t.M_ipv4 = M_ipv4
}

func (t *TL_ipPort) Get_ipv4() int32 {
	return t.M_ipv4
}

func (t *TL_ipPort) Set_port(M_port int32) {
	t.M_port = M_port
}

func (t *TL_ipPort) Get_port() int32 {
	return t.M_port
}

func New_TL_ipPort() *TL_ipPort {
	return &TL_ipPort{
		M_classID: TL_CLASS_ipPort,
	}
}

func (t *TL_ipPort) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_ipPort))
	ec.Int(t.Get_ipv4())
	ec.Int(t.Get_port())

	return ec.GetBuffer()
}

func (t *TL_ipPort) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_ipv4 = dc.Int()
	t.M_port = dc.Int()

	return dc.err
}

func (t *TL_ipPort) String() string {
	return fmt.Sprintf("- ipPort#d433ad73\n-- ipv4 : %v\n-- port : %v\n", t.M_ipv4, t.M_port)
}

// help_configSimple#d997c3c5
type TL_help_configSimple struct {
	M_classID      int32
	M_date         int32
	M_expires      int32
	M_dc_id        int32
	M_ip_port_list []TLObject
}

func (t *TL_help_configSimple) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_configSimple) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_help_configSimple) Get_date() int32 {
	return t.M_date
}

func (t *TL_help_configSimple) Set_expires(M_expires int32) {
	t.M_expires = M_expires
}

func (t *TL_help_configSimple) Get_expires() int32 {
	return t.M_expires
}

func (t *TL_help_configSimple) Set_dc_id(M_dc_id int32) {
	t.M_dc_id = M_dc_id
}

func (t *TL_help_configSimple) Get_dc_id() int32 {
	return t.M_dc_id
}

func (t *TL_help_configSimple) Set_ip_port_list(M_ip_port_list []TLObject) {
	t.M_ip_port_list = M_ip_port_list
}

func (t *TL_help_configSimple) Get_ip_port_list() []TLObject {
	return t.M_ip_port_list
}

func New_TL_help_configSimple() *TL_help_configSimple {
	return &TL_help_configSimple{
		M_classID: TL_CLASS_help_configSimple,
	}
}

func (t *TL_help_configSimple) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_configSimple))
	ec.Int(t.Get_date())
	ec.Int(t.Get_expires())
	ec.Int(t.Get_dc_id())
	ec.Vector(t.Get_ip_port_list())

	return ec.GetBuffer()
}

func (t *TL_help_configSimple) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_date = dc.Int()
	t.M_expires = dc.Int()
	t.M_dc_id = dc.Int()
	t.M_ip_port_list = dc.Vector()

	return dc.err
}

func (t *TL_help_configSimple) String() string {
	return fmt.Sprintf("- help_configSimple#d997c3c5\n-- date : %v\n-- expires : %v\n-- dc_id : %v\n-- ip_port_list : %v\n", t.M_date, t.M_expires, t.M_dc_id, t.M_ip_port_list)
}

// rpc_drop_answer#58e4a740
type TL_rpc_drop_answer struct {
	M_classID    int32
	M_req_msg_id int64
}

func (t *TL_rpc_drop_answer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_rpc_drop_answer) Set_req_msg_id(M_req_msg_id int64) {
	t.M_req_msg_id = M_req_msg_id
}

func (t *TL_rpc_drop_answer) Get_req_msg_id() int64 {
	return t.M_req_msg_id
}

func New_TL_rpc_drop_answer() *TL_rpc_drop_answer {
	return &TL_rpc_drop_answer{
		M_classID: TL_CLASS_rpc_drop_answer,
	}
}

func (t *TL_rpc_drop_answer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_rpc_drop_answer))
	ec.Long(t.Get_req_msg_id())

	return ec.GetBuffer()
}

func (t *TL_rpc_drop_answer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_req_msg_id = dc.Long()

	return dc.err
}

func (t *TL_rpc_drop_answer) String() string {
	return fmt.Sprintf("- rpc_drop_answer#58e4a740\n-- req_msg_id : %v\n", t.M_req_msg_id)
}

// get_future_salts#b921bd04
type TL_get_future_salts struct {
	M_classID int32
	M_num     int32
}

func (t *TL_get_future_salts) ClassID() int32 {
	return t.M_classID
}

func (t *TL_get_future_salts) Set_num(M_num int32) {
	t.M_num = M_num
}

func (t *TL_get_future_salts) Get_num() int32 {
	return t.M_num
}

func New_TL_get_future_salts() *TL_get_future_salts {
	return &TL_get_future_salts{
		M_classID: TL_CLASS_get_future_salts,
	}
}

func (t *TL_get_future_salts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_get_future_salts))
	ec.Int(t.Get_num())

	return ec.GetBuffer()
}

func (t *TL_get_future_salts) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_num = dc.Int()

	return dc.err
}

func (t *TL_get_future_salts) String() string {
	return fmt.Sprintf("- get_future_salts#b921bd04\n-- num : %v\n", t.M_num)
}

// ping#7abe77ec
type TL_ping struct {
	M_classID int32
	M_ping_id int64
}

func (t *TL_ping) ClassID() int32 {
	return t.M_classID
}

func (t *TL_ping) Set_ping_id(M_ping_id int64) {
	t.M_ping_id = M_ping_id
}

func (t *TL_ping) Get_ping_id() int64 {
	return t.M_ping_id
}

func New_TL_ping() *TL_ping {
	return &TL_ping{
		M_classID: TL_CLASS_ping,
	}
}

func (t *TL_ping) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_ping))
	ec.Long(t.Get_ping_id())

	return ec.GetBuffer()
}

func (t *TL_ping) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_ping_id = dc.Long()

	return dc.err
}

func (t *TL_ping) String() string {
	return fmt.Sprintf("- ping#7abe77ec\n-- ping_id : %v\n", t.M_ping_id)
}

// ping_delay_disconnect#f3427b8c
type TL_ping_delay_disconnect struct {
	M_classID          int32
	M_ping_id          int64
	M_disconnect_delay int32
}

func (t *TL_ping_delay_disconnect) ClassID() int32 {
	return t.M_classID
}

func (t *TL_ping_delay_disconnect) Set_ping_id(M_ping_id int64) {
	t.M_ping_id = M_ping_id
}

func (t *TL_ping_delay_disconnect) Get_ping_id() int64 {
	return t.M_ping_id
}

func (t *TL_ping_delay_disconnect) Set_disconnect_delay(M_disconnect_delay int32) {
	t.M_disconnect_delay = M_disconnect_delay
}

func (t *TL_ping_delay_disconnect) Get_disconnect_delay() int32 {
	return t.M_disconnect_delay
}

func New_TL_ping_delay_disconnect() *TL_ping_delay_disconnect {
	return &TL_ping_delay_disconnect{
		M_classID: TL_CLASS_ping_delay_disconnect,
	}
}

func (t *TL_ping_delay_disconnect) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_ping_delay_disconnect))
	ec.Long(t.Get_ping_id())
	ec.Int(t.Get_disconnect_delay())

	return ec.GetBuffer()
}

func (t *TL_ping_delay_disconnect) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_ping_id = dc.Long()
	t.M_disconnect_delay = dc.Int()

	return dc.err
}

func (t *TL_ping_delay_disconnect) String() string {
	return fmt.Sprintf("- ping_delay_disconnect#f3427b8c\n-- ping_id : %v\n-- disconnect_delay : %v\n", t.M_ping_id, t.M_disconnect_delay)
}

// destroy_session#e7512126
type TL_destroy_session struct {
	M_classID    int32
	M_session_id int64
}

func (t *TL_destroy_session) ClassID() int32 {
	return t.M_classID
}

func (t *TL_destroy_session) Set_session_id(M_session_id int64) {
	t.M_session_id = M_session_id
}

func (t *TL_destroy_session) Get_session_id() int64 {
	return t.M_session_id
}

func New_TL_destroy_session() *TL_destroy_session {
	return &TL_destroy_session{
		M_classID: TL_CLASS_destroy_session,
	}
}

func (t *TL_destroy_session) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_destroy_session))
	ec.Long(t.Get_session_id())

	return ec.GetBuffer()
}

func (t *TL_destroy_session) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_session_id = dc.Long()

	return dc.err
}

func (t *TL_destroy_session) String() string {
	return fmt.Sprintf("- destroy_session#e7512126\n-- session_id : %v\n", t.M_session_id)
}

// contest_saveDeveloperInfo#9a5f6e95
type TL_contest_saveDeveloperInfo struct {
	M_classID      int32
	M_vk_id        int32
	M_name         string
	M_phone_number string
	M_age          int32
	M_city         string
}

func (t *TL_contest_saveDeveloperInfo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contest_saveDeveloperInfo) Set_vk_id(M_vk_id int32) {
	t.M_vk_id = M_vk_id
}

func (t *TL_contest_saveDeveloperInfo) Get_vk_id() int32 {
	return t.M_vk_id
}

func (t *TL_contest_saveDeveloperInfo) Set_name(M_name string) {
	t.M_name = M_name
}

func (t *TL_contest_saveDeveloperInfo) Get_name() string {
	return t.M_name
}

func (t *TL_contest_saveDeveloperInfo) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_contest_saveDeveloperInfo) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_contest_saveDeveloperInfo) Set_age(M_age int32) {
	t.M_age = M_age
}

func (t *TL_contest_saveDeveloperInfo) Get_age() int32 {
	return t.M_age
}

func (t *TL_contest_saveDeveloperInfo) Set_city(M_city string) {
	t.M_city = M_city
}

func (t *TL_contest_saveDeveloperInfo) Get_city() string {
	return t.M_city
}

func New_TL_contest_saveDeveloperInfo() *TL_contest_saveDeveloperInfo {
	return &TL_contest_saveDeveloperInfo{
		M_classID: TL_CLASS_contest_saveDeveloperInfo,
	}
}

func (t *TL_contest_saveDeveloperInfo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contest_saveDeveloperInfo))
	ec.Int(t.Get_vk_id())
	ec.String(t.Get_name())
	ec.String(t.Get_phone_number())
	ec.Int(t.Get_age())
	ec.String(t.Get_city())

	return ec.GetBuffer()
}

func (t *TL_contest_saveDeveloperInfo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_vk_id = dc.Int()
	t.M_name = dc.String()
	t.M_phone_number = dc.String()
	t.M_age = dc.Int()
	t.M_city = dc.String()

	return dc.err
}

func (t *TL_contest_saveDeveloperInfo) String() string {
	return fmt.Sprintf("- contest_saveDeveloperInfo#9a5f6e95\n-- vk_id : %v\n-- name : %v\n-- phone_number : %v\n-- age : %v\n-- city : %v\n", t.M_vk_id, t.M_name, t.M_phone_number, t.M_age, t.M_city)
}

// boolFalse#bc799737
type TL_boolFalse struct {
	M_classID int32
}

func (t *TL_boolFalse) ClassID() int32 {
	return t.M_classID
}

func New_TL_boolFalse() *TL_boolFalse {
	return &TL_boolFalse{
		M_classID: TL_CLASS_boolFalse,
	}
}

func (t *TL_boolFalse) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_boolFalse))

	return ec.GetBuffer()
}

func (t *TL_boolFalse) Decode(b []byte) error {
	return nil
}

func (t *TL_boolFalse) String() string {
	return fmt.Sprintf("- boolFalse#bc799737\n")
}

// boolTrue#997275b5
type TL_boolTrue struct {
	M_classID int32
}

func (t *TL_boolTrue) ClassID() int32 {
	return t.M_classID
}

func New_TL_boolTrue() *TL_boolTrue {
	return &TL_boolTrue{
		M_classID: TL_CLASS_boolTrue,
	}
}

func (t *TL_boolTrue) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_boolTrue))

	return ec.GetBuffer()
}

func (t *TL_boolTrue) Decode(b []byte) error {
	return nil
}

func (t *TL_boolTrue) String() string {
	return fmt.Sprintf("- boolTrue#997275b5\n")
}

// true#3fedd339
type TL_true struct {
	M_classID int32
}

func (t *TL_true) ClassID() int32 {
	return t.M_classID
}

func New_TL_true() *TL_true {
	return &TL_true{
		M_classID: TL_CLASS_true,
	}
}

func (t *TL_true) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_true))

	return ec.GetBuffer()
}

func (t *TL_true) Decode(b []byte) error {
	return nil
}

func (t *TL_true) String() string {
	return fmt.Sprintf("- true#3fedd339\n")
}

// vector#1cb5c415
type TL_vector struct {
	M_classID int32
}

func (t *TL_vector) ClassID() int32 {
	return t.M_classID
}

func New_TL_vector() *TL_vector {
	return &TL_vector{
		M_classID: TL_CLASS_vector,
	}
}

func (t *TL_vector) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_vector))

	return ec.GetBuffer()
}

func (t *TL_vector) Decode(b []byte) error {
	return nil
}

func (t *TL_vector) String() string {
	return fmt.Sprintf("- vector#1cb5c415\n")
}

// error#c4b9f9bb
type TL_error struct {
	M_classID int32
	M_code    int32
	M_text    string
}

func (t *TL_error) ClassID() int32 {
	return t.M_classID
}

func (t *TL_error) Set_code(M_code int32) {
	t.M_code = M_code
}

func (t *TL_error) Get_code() int32 {
	return t.M_code
}

func (t *TL_error) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_error) Get_text() string {
	return t.M_text
}

func New_TL_error() *TL_error {
	return &TL_error{
		M_classID: TL_CLASS_error,
	}
}

func (t *TL_error) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_error))
	ec.Int(t.Get_code())
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_error) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_code = dc.Int()
	t.M_text = dc.String()

	return dc.err
}

func (t *TL_error) String() string {
	return fmt.Sprintf("- error#c4b9f9bb\n-- code : %v\n-- text : %v\n", t.M_code, t.M_text)
}

// null#56730bcc
type TL_null struct {
	M_classID int32
}

func (t *TL_null) ClassID() int32 {
	return t.M_classID
}

func New_TL_null() *TL_null {
	return &TL_null{
		M_classID: TL_CLASS_null,
	}
}

func (t *TL_null) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_null))

	return ec.GetBuffer()
}

func (t *TL_null) Decode(b []byte) error {
	return nil
}

func (t *TL_null) String() string {
	return fmt.Sprintf("- null#56730bcc\n")
}

// inputPeerEmpty#7f3b18ea
type TL_inputPeerEmpty struct {
	M_classID int32
}

func (t *TL_inputPeerEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPeerEmpty() *TL_inputPeerEmpty {
	return &TL_inputPeerEmpty{
		M_classID: TL_CLASS_inputPeerEmpty,
	}
}

func (t *TL_inputPeerEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPeerEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputPeerEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPeerEmpty) String() string {
	return fmt.Sprintf("- inputPeerEmpty#7f3b18ea\n")
}

// inputPeerSelf#7da07ec9
type TL_inputPeerSelf struct {
	M_classID int32
}

func (t *TL_inputPeerSelf) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPeerSelf() *TL_inputPeerSelf {
	return &TL_inputPeerSelf{
		M_classID: TL_CLASS_inputPeerSelf,
	}
}

func (t *TL_inputPeerSelf) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPeerSelf))

	return ec.GetBuffer()
}

func (t *TL_inputPeerSelf) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPeerSelf) String() string {
	return fmt.Sprintf("- inputPeerSelf#7da07ec9\n")
}

// inputPeerChat#179be863
type TL_inputPeerChat struct {
	M_classID int32
	M_chat_id int32
}

func (t *TL_inputPeerChat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPeerChat) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_inputPeerChat) Get_chat_id() int32 {
	return t.M_chat_id
}

func New_TL_inputPeerChat() *TL_inputPeerChat {
	return &TL_inputPeerChat{
		M_classID: TL_CLASS_inputPeerChat,
	}
}

func (t *TL_inputPeerChat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPeerChat))
	ec.Int(t.Get_chat_id())

	return ec.GetBuffer()
}

func (t *TL_inputPeerChat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()

	return dc.err
}

func (t *TL_inputPeerChat) String() string {
	return fmt.Sprintf("- inputPeerChat#179be863\n-- chat_id : %v\n", t.M_chat_id)
}

// inputPeerUser#7b8e7de6
type TL_inputPeerUser struct {
	M_classID     int32
	M_user_id     int32
	M_access_hash int64
}

func (t *TL_inputPeerUser) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPeerUser) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_inputPeerUser) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_inputPeerUser) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputPeerUser) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputPeerUser() *TL_inputPeerUser {
	return &TL_inputPeerUser{
		M_classID: TL_CLASS_inputPeerUser,
	}
}

func (t *TL_inputPeerUser) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPeerUser))
	ec.Int(t.Get_user_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputPeerUser) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputPeerUser) String() string {
	return fmt.Sprintf("- inputPeerUser#7b8e7de6\n-- user_id : %v\n-- access_hash : %v\n", t.M_user_id, t.M_access_hash)
}

// inputPeerChannel#20adaef8
type TL_inputPeerChannel struct {
	M_classID     int32
	M_channel_id  int32
	M_access_hash int64
}

func (t *TL_inputPeerChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPeerChannel) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_inputPeerChannel) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_inputPeerChannel) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputPeerChannel) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputPeerChannel() *TL_inputPeerChannel {
	return &TL_inputPeerChannel{
		M_classID: TL_CLASS_inputPeerChannel,
	}
}

func (t *TL_inputPeerChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPeerChannel))
	ec.Int(t.Get_channel_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputPeerChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputPeerChannel) String() string {
	return fmt.Sprintf("- inputPeerChannel#20adaef8\n-- channel_id : %v\n-- access_hash : %v\n", t.M_channel_id, t.M_access_hash)
}

// inputUserEmpty#b98886cf
type TL_inputUserEmpty struct {
	M_classID int32
}

func (t *TL_inputUserEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputUserEmpty() *TL_inputUserEmpty {
	return &TL_inputUserEmpty{
		M_classID: TL_CLASS_inputUserEmpty,
	}
}

func (t *TL_inputUserEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputUserEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputUserEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputUserEmpty) String() string {
	return fmt.Sprintf("- inputUserEmpty#b98886cf\n")
}

// inputUserSelf#f7c1b13f
type TL_inputUserSelf struct {
	M_classID int32
}

func (t *TL_inputUserSelf) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputUserSelf() *TL_inputUserSelf {
	return &TL_inputUserSelf{
		M_classID: TL_CLASS_inputUserSelf,
	}
}

func (t *TL_inputUserSelf) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputUserSelf))

	return ec.GetBuffer()
}

func (t *TL_inputUserSelf) Decode(b []byte) error {
	return nil
}

func (t *TL_inputUserSelf) String() string {
	return fmt.Sprintf("- inputUserSelf#f7c1b13f\n")
}

// inputUser#d8292816
type TL_inputUser struct {
	M_classID     int32
	M_user_id     int32
	M_access_hash int64
}

func (t *TL_inputUser) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputUser) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_inputUser) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_inputUser) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputUser) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputUser() *TL_inputUser {
	return &TL_inputUser{
		M_classID: TL_CLASS_inputUser,
	}
}

func (t *TL_inputUser) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputUser))
	ec.Int(t.Get_user_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputUser) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputUser) String() string {
	return fmt.Sprintf("- inputUser#d8292816\n-- user_id : %v\n-- access_hash : %v\n", t.M_user_id, t.M_access_hash)
}

// inputPhoneContact#f392b7f4
type TL_inputPhoneContact struct {
	M_classID    int32
	M_client_id  int64
	M_phone      string
	M_first_name string
	M_last_name  string
}

func (t *TL_inputPhoneContact) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPhoneContact) Set_client_id(M_client_id int64) {
	t.M_client_id = M_client_id
}

func (t *TL_inputPhoneContact) Get_client_id() int64 {
	return t.M_client_id
}

func (t *TL_inputPhoneContact) Set_phone(M_phone string) {
	t.M_phone = M_phone
}

func (t *TL_inputPhoneContact) Get_phone() string {
	return t.M_phone
}

func (t *TL_inputPhoneContact) Set_first_name(M_first_name string) {
	t.M_first_name = M_first_name
}

func (t *TL_inputPhoneContact) Get_first_name() string {
	return t.M_first_name
}

func (t *TL_inputPhoneContact) Set_last_name(M_last_name string) {
	t.M_last_name = M_last_name
}

func (t *TL_inputPhoneContact) Get_last_name() string {
	return t.M_last_name
}

func New_TL_inputPhoneContact() *TL_inputPhoneContact {
	return &TL_inputPhoneContact{
		M_classID: TL_CLASS_inputPhoneContact,
	}
}

func (t *TL_inputPhoneContact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPhoneContact))
	ec.Long(t.Get_client_id())
	ec.String(t.Get_phone())
	ec.String(t.Get_first_name())
	ec.String(t.Get_last_name())

	return ec.GetBuffer()
}

func (t *TL_inputPhoneContact) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_client_id = dc.Long()
	t.M_phone = dc.String()
	t.M_first_name = dc.String()
	t.M_last_name = dc.String()

	return dc.err
}

func (t *TL_inputPhoneContact) String() string {
	return fmt.Sprintf("- inputPhoneContact#f392b7f4\n-- client_id : %v\n-- phone : %v\n-- first_name : %v\n-- last_name : %v\n", t.M_client_id, t.M_phone, t.M_first_name, t.M_last_name)
}

// inputFile#f52ff27f
type TL_inputFile struct {
	M_classID      int32
	M_id           int64
	M_parts        int32
	M_name         string
	M_md5_checksum string
}

func (t *TL_inputFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputFile) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputFile) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputFile) Set_parts(M_parts int32) {
	t.M_parts = M_parts
}

func (t *TL_inputFile) Get_parts() int32 {
	return t.M_parts
}

func (t *TL_inputFile) Set_name(M_name string) {
	t.M_name = M_name
}

func (t *TL_inputFile) Get_name() string {
	return t.M_name
}

func (t *TL_inputFile) Set_md5_checksum(M_md5_checksum string) {
	t.M_md5_checksum = M_md5_checksum
}

func (t *TL_inputFile) Get_md5_checksum() string {
	return t.M_md5_checksum
}

func New_TL_inputFile() *TL_inputFile {
	return &TL_inputFile{
		M_classID: TL_CLASS_inputFile,
	}
}

func (t *TL_inputFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputFile))
	ec.Long(t.Get_id())
	ec.Int(t.Get_parts())
	ec.String(t.Get_name())
	ec.String(t.Get_md5_checksum())

	return ec.GetBuffer()
}

func (t *TL_inputFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_parts = dc.Int()
	t.M_name = dc.String()
	t.M_md5_checksum = dc.String()

	return dc.err
}

func (t *TL_inputFile) String() string {
	return fmt.Sprintf("- inputFile#f52ff27f\n-- id : %v\n-- parts : %v\n-- name : %v\n-- md5_checksum : %v\n", t.M_id, t.M_parts, t.M_name, t.M_md5_checksum)
}

// inputFileBig#fa4f0bb5
type TL_inputFileBig struct {
	M_classID int32
	M_id      int64
	M_parts   int32
	M_name    string
}

func (t *TL_inputFileBig) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputFileBig) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputFileBig) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputFileBig) Set_parts(M_parts int32) {
	t.M_parts = M_parts
}

func (t *TL_inputFileBig) Get_parts() int32 {
	return t.M_parts
}

func (t *TL_inputFileBig) Set_name(M_name string) {
	t.M_name = M_name
}

func (t *TL_inputFileBig) Get_name() string {
	return t.M_name
}

func New_TL_inputFileBig() *TL_inputFileBig {
	return &TL_inputFileBig{
		M_classID: TL_CLASS_inputFileBig,
	}
}

func (t *TL_inputFileBig) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputFileBig))
	ec.Long(t.Get_id())
	ec.Int(t.Get_parts())
	ec.String(t.Get_name())

	return ec.GetBuffer()
}

func (t *TL_inputFileBig) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_parts = dc.Int()
	t.M_name = dc.String()

	return dc.err
}

func (t *TL_inputFileBig) String() string {
	return fmt.Sprintf("- inputFileBig#fa4f0bb5\n-- id : %v\n-- parts : %v\n-- name : %v\n", t.M_id, t.M_parts, t.M_name)
}

// inputMediaEmpty#9664f57f
type TL_inputMediaEmpty struct {
	M_classID int32
}

func (t *TL_inputMediaEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMediaEmpty() *TL_inputMediaEmpty {
	return &TL_inputMediaEmpty{
		M_classID: TL_CLASS_inputMediaEmpty,
	}
}

func (t *TL_inputMediaEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputMediaEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMediaEmpty) String() string {
	return fmt.Sprintf("- inputMediaEmpty#9664f57f\n")
}

// inputMediaUploadedPhoto#2f37e231
type TL_inputMediaUploadedPhoto struct {
	M_classID     int32
	M_flags       TLObject
	M_file        TLObject
	M_caption     string
	M_stickers    []TLObject
	M_ttl_seconds TLObject
}

func (t *TL_inputMediaUploadedPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaUploadedPhoto) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputMediaUploadedPhoto) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputMediaUploadedPhoto) Set_file(M_file TLObject) {
	t.M_file = M_file
}

func (t *TL_inputMediaUploadedPhoto) Get_file() TLObject {
	return t.M_file
}

func (t *TL_inputMediaUploadedPhoto) Set_caption(M_caption string) {
	t.M_caption = M_caption
}

func (t *TL_inputMediaUploadedPhoto) Get_caption() string {
	return t.M_caption
}

func (t *TL_inputMediaUploadedPhoto) Set_stickers(M_stickers []TLObject) {
	t.M_stickers = M_stickers
}

func (t *TL_inputMediaUploadedPhoto) Get_stickers() []TLObject {
	return t.M_stickers
}

func (t *TL_inputMediaUploadedPhoto) Set_ttl_seconds(M_ttl_seconds TLObject) {
	t.M_ttl_seconds = M_ttl_seconds
}

func (t *TL_inputMediaUploadedPhoto) Get_ttl_seconds() TLObject {
	return t.M_ttl_seconds
}

func New_TL_inputMediaUploadedPhoto() *TL_inputMediaUploadedPhoto {
	return &TL_inputMediaUploadedPhoto{
		M_classID: TL_CLASS_inputMediaUploadedPhoto,
	}
}

func (t *TL_inputMediaUploadedPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaUploadedPhoto))
	ec.TLObject(t.Get_file())
	ec.String(t.Get_caption())
	ec.Vector(t.Get_stickers())
	ec.TLObject(t.Get_ttl_seconds())

	return ec.GetBuffer()
}

func (t *TL_inputMediaUploadedPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_file = dc.TLObject()
	t.M_caption = dc.String()
	t.M_stickers = dc.Vector()
	t.M_ttl_seconds = dc.TLObject()

	return dc.err
}

func (t *TL_inputMediaUploadedPhoto) String() string {
	return fmt.Sprintf("- inputMediaUploadedPhoto#2f37e231\n-- flags : %v\n-- file : %v\n-- caption : %v\n-- stickers : %v\n-- ttl_seconds : %v\n", t.M_flags, t.M_file, t.M_caption, t.M_stickers, t.M_ttl_seconds)
}

// inputMediaPhoto#81fa373a
type TL_inputMediaPhoto struct {
	M_classID     int32
	M_flags       TLObject
	M_id          TLObject
	M_caption     string
	M_ttl_seconds TLObject
}

func (t *TL_inputMediaPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaPhoto) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputMediaPhoto) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputMediaPhoto) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_inputMediaPhoto) Get_id() TLObject {
	return t.M_id
}

func (t *TL_inputMediaPhoto) Set_caption(M_caption string) {
	t.M_caption = M_caption
}

func (t *TL_inputMediaPhoto) Get_caption() string {
	return t.M_caption
}

func (t *TL_inputMediaPhoto) Set_ttl_seconds(M_ttl_seconds TLObject) {
	t.M_ttl_seconds = M_ttl_seconds
}

func (t *TL_inputMediaPhoto) Get_ttl_seconds() TLObject {
	return t.M_ttl_seconds
}

func New_TL_inputMediaPhoto() *TL_inputMediaPhoto {
	return &TL_inputMediaPhoto{
		M_classID: TL_CLASS_inputMediaPhoto,
	}
}

func (t *TL_inputMediaPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaPhoto))
	ec.TLObject(t.Get_id())
	ec.String(t.Get_caption())
	ec.TLObject(t.Get_ttl_seconds())

	return ec.GetBuffer()
}

func (t *TL_inputMediaPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()
	t.M_caption = dc.String()
	t.M_ttl_seconds = dc.TLObject()

	return dc.err
}

func (t *TL_inputMediaPhoto) String() string {
	return fmt.Sprintf("- inputMediaPhoto#81fa373a\n-- flags : %v\n-- id : %v\n-- caption : %v\n-- ttl_seconds : %v\n", t.M_flags, t.M_id, t.M_caption, t.M_ttl_seconds)
}

// inputMediaGeoPoint#f9c44144
type TL_inputMediaGeoPoint struct {
	M_classID   int32
	M_geo_point TLObject
}

func (t *TL_inputMediaGeoPoint) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaGeoPoint) Set_geo_point(M_geo_point TLObject) {
	t.M_geo_point = M_geo_point
}

func (t *TL_inputMediaGeoPoint) Get_geo_point() TLObject {
	return t.M_geo_point
}

func New_TL_inputMediaGeoPoint() *TL_inputMediaGeoPoint {
	return &TL_inputMediaGeoPoint{
		M_classID: TL_CLASS_inputMediaGeoPoint,
	}
}

func (t *TL_inputMediaGeoPoint) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaGeoPoint))
	ec.TLObject(t.Get_geo_point())

	return ec.GetBuffer()
}

func (t *TL_inputMediaGeoPoint) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo_point = dc.TLObject()

	return dc.err
}

func (t *TL_inputMediaGeoPoint) String() string {
	return fmt.Sprintf("- inputMediaGeoPoint#f9c44144\n-- geo_point : %v\n", t.M_geo_point)
}

// inputMediaContact#a6e45987
type TL_inputMediaContact struct {
	M_classID      int32
	M_phone_number string
	M_first_name   string
	M_last_name    string
}

func (t *TL_inputMediaContact) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaContact) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_inputMediaContact) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_inputMediaContact) Set_first_name(M_first_name string) {
	t.M_first_name = M_first_name
}

func (t *TL_inputMediaContact) Get_first_name() string {
	return t.M_first_name
}

func (t *TL_inputMediaContact) Set_last_name(M_last_name string) {
	t.M_last_name = M_last_name
}

func (t *TL_inputMediaContact) Get_last_name() string {
	return t.M_last_name
}

func New_TL_inputMediaContact() *TL_inputMediaContact {
	return &TL_inputMediaContact{
		M_classID: TL_CLASS_inputMediaContact,
	}
}

func (t *TL_inputMediaContact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaContact))
	ec.String(t.Get_phone_number())
	ec.String(t.Get_first_name())
	ec.String(t.Get_last_name())

	return ec.GetBuffer()
}

func (t *TL_inputMediaContact) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_first_name = dc.String()
	t.M_last_name = dc.String()

	return dc.err
}

func (t *TL_inputMediaContact) String() string {
	return fmt.Sprintf("- inputMediaContact#a6e45987\n-- phone_number : %v\n-- first_name : %v\n-- last_name : %v\n", t.M_phone_number, t.M_first_name, t.M_last_name)
}

// inputMediaUploadedDocument#e39621fd
type TL_inputMediaUploadedDocument struct {
	M_classID       int32
	M_flags         TLObject
	M_nosound_video TLObject
	M_file          TLObject
	M_thumb         TLObject
	M_mime_type     string
	M_attributes    []TLObject
	M_caption       string
	M_stickers      []TLObject
	M_ttl_seconds   TLObject
}

func (t *TL_inputMediaUploadedDocument) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaUploadedDocument) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputMediaUploadedDocument) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputMediaUploadedDocument) Set_nosound_video(M_nosound_video TLObject) {
	t.M_nosound_video = M_nosound_video
}

func (t *TL_inputMediaUploadedDocument) Get_nosound_video() TLObject {
	return t.M_nosound_video
}

func (t *TL_inputMediaUploadedDocument) Set_file(M_file TLObject) {
	t.M_file = M_file
}

func (t *TL_inputMediaUploadedDocument) Get_file() TLObject {
	return t.M_file
}

func (t *TL_inputMediaUploadedDocument) Set_thumb(M_thumb TLObject) {
	t.M_thumb = M_thumb
}

func (t *TL_inputMediaUploadedDocument) Get_thumb() TLObject {
	return t.M_thumb
}

func (t *TL_inputMediaUploadedDocument) Set_mime_type(M_mime_type string) {
	t.M_mime_type = M_mime_type
}

func (t *TL_inputMediaUploadedDocument) Get_mime_type() string {
	return t.M_mime_type
}

func (t *TL_inputMediaUploadedDocument) Set_attributes(M_attributes []TLObject) {
	t.M_attributes = M_attributes
}

func (t *TL_inputMediaUploadedDocument) Get_attributes() []TLObject {
	return t.M_attributes
}

func (t *TL_inputMediaUploadedDocument) Set_caption(M_caption string) {
	t.M_caption = M_caption
}

func (t *TL_inputMediaUploadedDocument) Get_caption() string {
	return t.M_caption
}

func (t *TL_inputMediaUploadedDocument) Set_stickers(M_stickers []TLObject) {
	t.M_stickers = M_stickers
}

func (t *TL_inputMediaUploadedDocument) Get_stickers() []TLObject {
	return t.M_stickers
}

func (t *TL_inputMediaUploadedDocument) Set_ttl_seconds(M_ttl_seconds TLObject) {
	t.M_ttl_seconds = M_ttl_seconds
}

func (t *TL_inputMediaUploadedDocument) Get_ttl_seconds() TLObject {
	return t.M_ttl_seconds
}

func New_TL_inputMediaUploadedDocument() *TL_inputMediaUploadedDocument {
	return &TL_inputMediaUploadedDocument{
		M_classID: TL_CLASS_inputMediaUploadedDocument,
	}
}

func (t *TL_inputMediaUploadedDocument) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaUploadedDocument))
	ec.TLObject(t.Get_nosound_video())
	ec.TLObject(t.Get_file())
	ec.TLObject(t.Get_thumb())
	ec.String(t.Get_mime_type())
	ec.Vector(t.Get_attributes())
	ec.String(t.Get_caption())
	ec.Vector(t.Get_stickers())
	ec.TLObject(t.Get_ttl_seconds())

	return ec.GetBuffer()
}

func (t *TL_inputMediaUploadedDocument) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_nosound_video = dc.TLObject()
	t.M_file = dc.TLObject()
	t.M_thumb = dc.TLObject()
	t.M_mime_type = dc.String()
	t.M_attributes = dc.Vector()
	t.M_caption = dc.String()
	t.M_stickers = dc.Vector()
	t.M_ttl_seconds = dc.TLObject()

	return dc.err
}

func (t *TL_inputMediaUploadedDocument) String() string {
	return fmt.Sprintf("- inputMediaUploadedDocument#e39621fd\n-- flags : %v\n-- nosound_video : %v\n-- file : %v\n-- thumb : %v\n-- mime_type : %v\n-- attributes : %v\n-- caption : %v\n-- stickers : %v\n-- ttl_seconds : %v\n", t.M_flags, t.M_nosound_video, t.M_file, t.M_thumb, t.M_mime_type, t.M_attributes, t.M_caption, t.M_stickers, t.M_ttl_seconds)
}

// inputMediaDocument#5acb668e
type TL_inputMediaDocument struct {
	M_classID     int32
	M_flags       TLObject
	M_id          TLObject
	M_caption     string
	M_ttl_seconds TLObject
}

func (t *TL_inputMediaDocument) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaDocument) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputMediaDocument) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputMediaDocument) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_inputMediaDocument) Get_id() TLObject {
	return t.M_id
}

func (t *TL_inputMediaDocument) Set_caption(M_caption string) {
	t.M_caption = M_caption
}

func (t *TL_inputMediaDocument) Get_caption() string {
	return t.M_caption
}

func (t *TL_inputMediaDocument) Set_ttl_seconds(M_ttl_seconds TLObject) {
	t.M_ttl_seconds = M_ttl_seconds
}

func (t *TL_inputMediaDocument) Get_ttl_seconds() TLObject {
	return t.M_ttl_seconds
}

func New_TL_inputMediaDocument() *TL_inputMediaDocument {
	return &TL_inputMediaDocument{
		M_classID: TL_CLASS_inputMediaDocument,
	}
}

func (t *TL_inputMediaDocument) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaDocument))
	ec.TLObject(t.Get_id())
	ec.String(t.Get_caption())
	ec.TLObject(t.Get_ttl_seconds())

	return ec.GetBuffer()
}

func (t *TL_inputMediaDocument) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()
	t.M_caption = dc.String()
	t.M_ttl_seconds = dc.TLObject()

	return dc.err
}

func (t *TL_inputMediaDocument) String() string {
	return fmt.Sprintf("- inputMediaDocument#5acb668e\n-- flags : %v\n-- id : %v\n-- caption : %v\n-- ttl_seconds : %v\n", t.M_flags, t.M_id, t.M_caption, t.M_ttl_seconds)
}

// inputMediaVenue#c13d1c11
type TL_inputMediaVenue struct {
	M_classID    int32
	M_geo_point  TLObject
	M_title      string
	M_address    string
	M_provider   string
	M_venue_id   string
	M_venue_type string
}

func (t *TL_inputMediaVenue) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaVenue) Set_geo_point(M_geo_point TLObject) {
	t.M_geo_point = M_geo_point
}

func (t *TL_inputMediaVenue) Get_geo_point() TLObject {
	return t.M_geo_point
}

func (t *TL_inputMediaVenue) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_inputMediaVenue) Get_title() string {
	return t.M_title
}

func (t *TL_inputMediaVenue) Set_address(M_address string) {
	t.M_address = M_address
}

func (t *TL_inputMediaVenue) Get_address() string {
	return t.M_address
}

func (t *TL_inputMediaVenue) Set_provider(M_provider string) {
	t.M_provider = M_provider
}

func (t *TL_inputMediaVenue) Get_provider() string {
	return t.M_provider
}

func (t *TL_inputMediaVenue) Set_venue_id(M_venue_id string) {
	t.M_venue_id = M_venue_id
}

func (t *TL_inputMediaVenue) Get_venue_id() string {
	return t.M_venue_id
}

func (t *TL_inputMediaVenue) Set_venue_type(M_venue_type string) {
	t.M_venue_type = M_venue_type
}

func (t *TL_inputMediaVenue) Get_venue_type() string {
	return t.M_venue_type
}

func New_TL_inputMediaVenue() *TL_inputMediaVenue {
	return &TL_inputMediaVenue{
		M_classID: TL_CLASS_inputMediaVenue,
	}
}

func (t *TL_inputMediaVenue) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaVenue))
	ec.TLObject(t.Get_geo_point())
	ec.String(t.Get_title())
	ec.String(t.Get_address())
	ec.String(t.Get_provider())
	ec.String(t.Get_venue_id())
	ec.String(t.Get_venue_type())

	return ec.GetBuffer()
}

func (t *TL_inputMediaVenue) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo_point = dc.TLObject()
	t.M_title = dc.String()
	t.M_address = dc.String()
	t.M_provider = dc.String()
	t.M_venue_id = dc.String()
	t.M_venue_type = dc.String()

	return dc.err
}

func (t *TL_inputMediaVenue) String() string {
	return fmt.Sprintf("- inputMediaVenue#c13d1c11\n-- geo_point : %v\n-- title : %v\n-- address : %v\n-- provider : %v\n-- venue_id : %v\n-- venue_type : %v\n", t.M_geo_point, t.M_title, t.M_address, t.M_provider, t.M_venue_id, t.M_venue_type)
}

// inputMediaGifExternal#4843b0fd
type TL_inputMediaGifExternal struct {
	M_classID int32
	M_url     string
	M_q       string
}

func (t *TL_inputMediaGifExternal) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaGifExternal) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_inputMediaGifExternal) Get_url() string {
	return t.M_url
}

func (t *TL_inputMediaGifExternal) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_inputMediaGifExternal) Get_q() string {
	return t.M_q
}

func New_TL_inputMediaGifExternal() *TL_inputMediaGifExternal {
	return &TL_inputMediaGifExternal{
		M_classID: TL_CLASS_inputMediaGifExternal,
	}
}

func (t *TL_inputMediaGifExternal) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaGifExternal))
	ec.String(t.Get_url())
	ec.String(t.Get_q())

	return ec.GetBuffer()
}

func (t *TL_inputMediaGifExternal) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_q = dc.String()

	return dc.err
}

func (t *TL_inputMediaGifExternal) String() string {
	return fmt.Sprintf("- inputMediaGifExternal#4843b0fd\n-- url : %v\n-- q : %v\n", t.M_url, t.M_q)
}

// inputMediaPhotoExternal#922aec1
type TL_inputMediaPhotoExternal struct {
	M_classID     int32
	M_flags       TLObject
	M_url         string
	M_caption     string
	M_ttl_seconds TLObject
}

func (t *TL_inputMediaPhotoExternal) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaPhotoExternal) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputMediaPhotoExternal) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputMediaPhotoExternal) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_inputMediaPhotoExternal) Get_url() string {
	return t.M_url
}

func (t *TL_inputMediaPhotoExternal) Set_caption(M_caption string) {
	t.M_caption = M_caption
}

func (t *TL_inputMediaPhotoExternal) Get_caption() string {
	return t.M_caption
}

func (t *TL_inputMediaPhotoExternal) Set_ttl_seconds(M_ttl_seconds TLObject) {
	t.M_ttl_seconds = M_ttl_seconds
}

func (t *TL_inputMediaPhotoExternal) Get_ttl_seconds() TLObject {
	return t.M_ttl_seconds
}

func New_TL_inputMediaPhotoExternal() *TL_inputMediaPhotoExternal {
	return &TL_inputMediaPhotoExternal{
		M_classID: TL_CLASS_inputMediaPhotoExternal,
	}
}

func (t *TL_inputMediaPhotoExternal) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaPhotoExternal))
	ec.String(t.Get_url())
	ec.String(t.Get_caption())
	ec.TLObject(t.Get_ttl_seconds())

	return ec.GetBuffer()
}

func (t *TL_inputMediaPhotoExternal) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_caption = dc.String()
	t.M_ttl_seconds = dc.TLObject()

	return dc.err
}

func (t *TL_inputMediaPhotoExternal) String() string {
	return fmt.Sprintf("- inputMediaPhotoExternal#922aec1\n-- flags : %v\n-- url : %v\n-- caption : %v\n-- ttl_seconds : %v\n", t.M_flags, t.M_url, t.M_caption, t.M_ttl_seconds)
}

// inputMediaDocumentExternal#b6f74335
type TL_inputMediaDocumentExternal struct {
	M_classID     int32
	M_flags       TLObject
	M_url         string
	M_caption     string
	M_ttl_seconds TLObject
}

func (t *TL_inputMediaDocumentExternal) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaDocumentExternal) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputMediaDocumentExternal) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputMediaDocumentExternal) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_inputMediaDocumentExternal) Get_url() string {
	return t.M_url
}

func (t *TL_inputMediaDocumentExternal) Set_caption(M_caption string) {
	t.M_caption = M_caption
}

func (t *TL_inputMediaDocumentExternal) Get_caption() string {
	return t.M_caption
}

func (t *TL_inputMediaDocumentExternal) Set_ttl_seconds(M_ttl_seconds TLObject) {
	t.M_ttl_seconds = M_ttl_seconds
}

func (t *TL_inputMediaDocumentExternal) Get_ttl_seconds() TLObject {
	return t.M_ttl_seconds
}

func New_TL_inputMediaDocumentExternal() *TL_inputMediaDocumentExternal {
	return &TL_inputMediaDocumentExternal{
		M_classID: TL_CLASS_inputMediaDocumentExternal,
	}
}

func (t *TL_inputMediaDocumentExternal) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaDocumentExternal))
	ec.String(t.Get_url())
	ec.String(t.Get_caption())
	ec.TLObject(t.Get_ttl_seconds())

	return ec.GetBuffer()
}

func (t *TL_inputMediaDocumentExternal) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_caption = dc.String()
	t.M_ttl_seconds = dc.TLObject()

	return dc.err
}

func (t *TL_inputMediaDocumentExternal) String() string {
	return fmt.Sprintf("- inputMediaDocumentExternal#b6f74335\n-- flags : %v\n-- url : %v\n-- caption : %v\n-- ttl_seconds : %v\n", t.M_flags, t.M_url, t.M_caption, t.M_ttl_seconds)
}

// inputMediaGame#d33f43f3
type TL_inputMediaGame struct {
	M_classID int32
	M_id      TLObject
}

func (t *TL_inputMediaGame) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaGame) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_inputMediaGame) Get_id() TLObject {
	return t.M_id
}

func New_TL_inputMediaGame() *TL_inputMediaGame {
	return &TL_inputMediaGame{
		M_classID: TL_CLASS_inputMediaGame,
	}
}

func (t *TL_inputMediaGame) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaGame))
	ec.TLObject(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_inputMediaGame) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()

	return dc.err
}

func (t *TL_inputMediaGame) String() string {
	return fmt.Sprintf("- inputMediaGame#d33f43f3\n-- id : %v\n", t.M_id)
}

// inputMediaInvoice#f4e096c3
type TL_inputMediaInvoice struct {
	M_classID       int32
	M_flags         TLObject
	M_title         string
	M_description   string
	M_photo         TLObject
	M_invoice       TLObject
	M_payload       TLObject
	M_provider      string
	M_provider_data TLObject
	M_start_param   string
}

func (t *TL_inputMediaInvoice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaInvoice) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputMediaInvoice) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputMediaInvoice) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_inputMediaInvoice) Get_title() string {
	return t.M_title
}

func (t *TL_inputMediaInvoice) Set_description(M_description string) {
	t.M_description = M_description
}

func (t *TL_inputMediaInvoice) Get_description() string {
	return t.M_description
}

func (t *TL_inputMediaInvoice) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_inputMediaInvoice) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_inputMediaInvoice) Set_invoice(M_invoice TLObject) {
	t.M_invoice = M_invoice
}

func (t *TL_inputMediaInvoice) Get_invoice() TLObject {
	return t.M_invoice
}

func (t *TL_inputMediaInvoice) Set_payload(M_payload TLObject) {
	t.M_payload = M_payload
}

func (t *TL_inputMediaInvoice) Get_payload() TLObject {
	return t.M_payload
}

func (t *TL_inputMediaInvoice) Set_provider(M_provider string) {
	t.M_provider = M_provider
}

func (t *TL_inputMediaInvoice) Get_provider() string {
	return t.M_provider
}

func (t *TL_inputMediaInvoice) Set_provider_data(M_provider_data TLObject) {
	t.M_provider_data = M_provider_data
}

func (t *TL_inputMediaInvoice) Get_provider_data() TLObject {
	return t.M_provider_data
}

func (t *TL_inputMediaInvoice) Set_start_param(M_start_param string) {
	t.M_start_param = M_start_param
}

func (t *TL_inputMediaInvoice) Get_start_param() string {
	return t.M_start_param
}

func New_TL_inputMediaInvoice() *TL_inputMediaInvoice {
	return &TL_inputMediaInvoice{
		M_classID: TL_CLASS_inputMediaInvoice,
	}
}

func (t *TL_inputMediaInvoice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaInvoice))
	ec.String(t.Get_title())
	ec.String(t.Get_description())
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_invoice())
	ec.TLObject(t.Get_payload())
	ec.String(t.Get_provider())
	ec.TLObject(t.Get_provider_data())
	ec.String(t.Get_start_param())

	return ec.GetBuffer()
}

func (t *TL_inputMediaInvoice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_title = dc.String()
	t.M_description = dc.String()
	t.M_photo = dc.TLObject()
	t.M_invoice = dc.TLObject()
	t.M_payload = dc.TLObject()
	t.M_provider = dc.String()
	t.M_provider_data = dc.TLObject()
	t.M_start_param = dc.String()

	return dc.err
}

func (t *TL_inputMediaInvoice) String() string {
	return fmt.Sprintf("- inputMediaInvoice#f4e096c3\n-- flags : %v\n-- title : %v\n-- description : %v\n-- photo : %v\n-- invoice : %v\n-- payload : %v\n-- provider : %v\n-- provider_data : %v\n-- start_param : %v\n", t.M_flags, t.M_title, t.M_description, t.M_photo, t.M_invoice, t.M_payload, t.M_provider, t.M_provider_data, t.M_start_param)
}

// inputMediaGeoLive#7b1a118f
type TL_inputMediaGeoLive struct {
	M_classID   int32
	M_geo_point TLObject
	M_period    int32
}

func (t *TL_inputMediaGeoLive) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMediaGeoLive) Set_geo_point(M_geo_point TLObject) {
	t.M_geo_point = M_geo_point
}

func (t *TL_inputMediaGeoLive) Get_geo_point() TLObject {
	return t.M_geo_point
}

func (t *TL_inputMediaGeoLive) Set_period(M_period int32) {
	t.M_period = M_period
}

func (t *TL_inputMediaGeoLive) Get_period() int32 {
	return t.M_period
}

func New_TL_inputMediaGeoLive() *TL_inputMediaGeoLive {
	return &TL_inputMediaGeoLive{
		M_classID: TL_CLASS_inputMediaGeoLive,
	}
}

func (t *TL_inputMediaGeoLive) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMediaGeoLive))
	ec.TLObject(t.Get_geo_point())
	ec.Int(t.Get_period())

	return ec.GetBuffer()
}

func (t *TL_inputMediaGeoLive) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo_point = dc.TLObject()
	t.M_period = dc.Int()

	return dc.err
}

func (t *TL_inputMediaGeoLive) String() string {
	return fmt.Sprintf("- inputMediaGeoLive#7b1a118f\n-- geo_point : %v\n-- period : %v\n", t.M_geo_point, t.M_period)
}

// inputChatPhotoEmpty#1ca48f57
type TL_inputChatPhotoEmpty struct {
	M_classID int32
}

func (t *TL_inputChatPhotoEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputChatPhotoEmpty() *TL_inputChatPhotoEmpty {
	return &TL_inputChatPhotoEmpty{
		M_classID: TL_CLASS_inputChatPhotoEmpty,
	}
}

func (t *TL_inputChatPhotoEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputChatPhotoEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputChatPhotoEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputChatPhotoEmpty) String() string {
	return fmt.Sprintf("- inputChatPhotoEmpty#1ca48f57\n")
}

// inputChatUploadedPhoto#927c55b4
type TL_inputChatUploadedPhoto struct {
	M_classID int32
	M_file    TLObject
}

func (t *TL_inputChatUploadedPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputChatUploadedPhoto) Set_file(M_file TLObject) {
	t.M_file = M_file
}

func (t *TL_inputChatUploadedPhoto) Get_file() TLObject {
	return t.M_file
}

func New_TL_inputChatUploadedPhoto() *TL_inputChatUploadedPhoto {
	return &TL_inputChatUploadedPhoto{
		M_classID: TL_CLASS_inputChatUploadedPhoto,
	}
}

func (t *TL_inputChatUploadedPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputChatUploadedPhoto))
	ec.TLObject(t.Get_file())

	return ec.GetBuffer()
}

func (t *TL_inputChatUploadedPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_file = dc.TLObject()

	return dc.err
}

func (t *TL_inputChatUploadedPhoto) String() string {
	return fmt.Sprintf("- inputChatUploadedPhoto#927c55b4\n-- file : %v\n", t.M_file)
}

// inputChatPhoto#8953ad37
type TL_inputChatPhoto struct {
	M_classID int32
	M_id      TLObject
}

func (t *TL_inputChatPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputChatPhoto) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_inputChatPhoto) Get_id() TLObject {
	return t.M_id
}

func New_TL_inputChatPhoto() *TL_inputChatPhoto {
	return &TL_inputChatPhoto{
		M_classID: TL_CLASS_inputChatPhoto,
	}
}

func (t *TL_inputChatPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputChatPhoto))
	ec.TLObject(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_inputChatPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()

	return dc.err
}

func (t *TL_inputChatPhoto) String() string {
	return fmt.Sprintf("- inputChatPhoto#8953ad37\n-- id : %v\n", t.M_id)
}

// inputGeoPointEmpty#e4c123d6
type TL_inputGeoPointEmpty struct {
	M_classID int32
}

func (t *TL_inputGeoPointEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputGeoPointEmpty() *TL_inputGeoPointEmpty {
	return &TL_inputGeoPointEmpty{
		M_classID: TL_CLASS_inputGeoPointEmpty,
	}
}

func (t *TL_inputGeoPointEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputGeoPointEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputGeoPointEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputGeoPointEmpty) String() string {
	return fmt.Sprintf("- inputGeoPointEmpty#e4c123d6\n")
}

// inputGeoPoint#f3b7acc9
type TL_inputGeoPoint struct {
	M_classID int32
	M_lat     float64
	M_long    float64
}

func (t *TL_inputGeoPoint) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputGeoPoint) Set_lat(M_lat float64) {
	t.M_lat = M_lat
}

func (t *TL_inputGeoPoint) Get_lat() float64 {
	return t.M_lat
}

func (t *TL_inputGeoPoint) Set_long(M_long float64) {
	t.M_long = M_long
}

func (t *TL_inputGeoPoint) Get_long() float64 {
	return t.M_long
}

func New_TL_inputGeoPoint() *TL_inputGeoPoint {
	return &TL_inputGeoPoint{
		M_classID: TL_CLASS_inputGeoPoint,
	}
}

func (t *TL_inputGeoPoint) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputGeoPoint))
	ec.Double(t.Get_lat())
	ec.Double(t.Get_long())

	return ec.GetBuffer()
}

func (t *TL_inputGeoPoint) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_lat = dc.Double()
	t.M_long = dc.Double()

	return dc.err
}

func (t *TL_inputGeoPoint) String() string {
	return fmt.Sprintf("- inputGeoPoint#f3b7acc9\n-- lat : %v\n-- long : %v\n", t.M_lat, t.M_long)
}

// inputPhotoEmpty#1cd7bf0d
type TL_inputPhotoEmpty struct {
	M_classID int32
}

func (t *TL_inputPhotoEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPhotoEmpty() *TL_inputPhotoEmpty {
	return &TL_inputPhotoEmpty{
		M_classID: TL_CLASS_inputPhotoEmpty,
	}
}

func (t *TL_inputPhotoEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPhotoEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputPhotoEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPhotoEmpty) String() string {
	return fmt.Sprintf("- inputPhotoEmpty#1cd7bf0d\n")
}

// inputPhoto#fb95c6c4
type TL_inputPhoto struct {
	M_classID     int32
	M_id          int64
	M_access_hash int64
}

func (t *TL_inputPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPhoto) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputPhoto) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputPhoto) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputPhoto) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputPhoto() *TL_inputPhoto {
	return &TL_inputPhoto{
		M_classID: TL_CLASS_inputPhoto,
	}
}

func (t *TL_inputPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPhoto))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputPhoto) String() string {
	return fmt.Sprintf("- inputPhoto#fb95c6c4\n-- id : %v\n-- access_hash : %v\n", t.M_id, t.M_access_hash)
}

// inputFileLocation#14637196
type TL_inputFileLocation struct {
	M_classID   int32
	M_volume_id int64
	M_local_id  int32
	M_secret    int64
}

func (t *TL_inputFileLocation) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputFileLocation) Set_volume_id(M_volume_id int64) {
	t.M_volume_id = M_volume_id
}

func (t *TL_inputFileLocation) Get_volume_id() int64 {
	return t.M_volume_id
}

func (t *TL_inputFileLocation) Set_local_id(M_local_id int32) {
	t.M_local_id = M_local_id
}

func (t *TL_inputFileLocation) Get_local_id() int32 {
	return t.M_local_id
}

func (t *TL_inputFileLocation) Set_secret(M_secret int64) {
	t.M_secret = M_secret
}

func (t *TL_inputFileLocation) Get_secret() int64 {
	return t.M_secret
}

func New_TL_inputFileLocation() *TL_inputFileLocation {
	return &TL_inputFileLocation{
		M_classID: TL_CLASS_inputFileLocation,
	}
}

func (t *TL_inputFileLocation) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputFileLocation))
	ec.Long(t.Get_volume_id())
	ec.Int(t.Get_local_id())
	ec.Long(t.Get_secret())

	return ec.GetBuffer()
}

func (t *TL_inputFileLocation) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_volume_id = dc.Long()
	t.M_local_id = dc.Int()
	t.M_secret = dc.Long()

	return dc.err
}

func (t *TL_inputFileLocation) String() string {
	return fmt.Sprintf("- inputFileLocation#14637196\n-- volume_id : %v\n-- local_id : %v\n-- secret : %v\n", t.M_volume_id, t.M_local_id, t.M_secret)
}

// inputEncryptedFileLocation#f5235d55
type TL_inputEncryptedFileLocation struct {
	M_classID     int32
	M_id          int64
	M_access_hash int64
}

func (t *TL_inputEncryptedFileLocation) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputEncryptedFileLocation) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputEncryptedFileLocation) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputEncryptedFileLocation) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputEncryptedFileLocation) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputEncryptedFileLocation() *TL_inputEncryptedFileLocation {
	return &TL_inputEncryptedFileLocation{
		M_classID: TL_CLASS_inputEncryptedFileLocation,
	}
}

func (t *TL_inputEncryptedFileLocation) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputEncryptedFileLocation))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputEncryptedFileLocation) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputEncryptedFileLocation) String() string {
	return fmt.Sprintf("- inputEncryptedFileLocation#f5235d55\n-- id : %v\n-- access_hash : %v\n", t.M_id, t.M_access_hash)
}

// inputDocumentFileLocation#430f0724
type TL_inputDocumentFileLocation struct {
	M_classID     int32
	M_id          int64
	M_access_hash int64
	M_version     int32
}

func (t *TL_inputDocumentFileLocation) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputDocumentFileLocation) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputDocumentFileLocation) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputDocumentFileLocation) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputDocumentFileLocation) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_inputDocumentFileLocation) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_inputDocumentFileLocation) Get_version() int32 {
	return t.M_version
}

func New_TL_inputDocumentFileLocation() *TL_inputDocumentFileLocation {
	return &TL_inputDocumentFileLocation{
		M_classID: TL_CLASS_inputDocumentFileLocation,
	}
}

func (t *TL_inputDocumentFileLocation) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputDocumentFileLocation))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_version())

	return ec.GetBuffer()
}

func (t *TL_inputDocumentFileLocation) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_version = dc.Int()

	return dc.err
}

func (t *TL_inputDocumentFileLocation) String() string {
	return fmt.Sprintf("- inputDocumentFileLocation#430f0724\n-- id : %v\n-- access_hash : %v\n-- version : %v\n", t.M_id, t.M_access_hash, t.M_version)
}

// inputAppEvent#770656a8
type TL_inputAppEvent struct {
	M_classID int32
	M_time    float64
	M_type    string
	M_peer    int64
	M_data    string
}

func (t *TL_inputAppEvent) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputAppEvent) Set_time(M_time float64) {
	t.M_time = M_time
}

func (t *TL_inputAppEvent) Get_time() float64 {
	return t.M_time
}

func (t *TL_inputAppEvent) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_inputAppEvent) Get_type() string {
	return t.M_type
}

func (t *TL_inputAppEvent) Set_peer(M_peer int64) {
	t.M_peer = M_peer
}

func (t *TL_inputAppEvent) Get_peer() int64 {
	return t.M_peer
}

func (t *TL_inputAppEvent) Set_data(M_data string) {
	t.M_data = M_data
}

func (t *TL_inputAppEvent) Get_data() string {
	return t.M_data
}

func New_TL_inputAppEvent() *TL_inputAppEvent {
	return &TL_inputAppEvent{
		M_classID: TL_CLASS_inputAppEvent,
	}
}

func (t *TL_inputAppEvent) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputAppEvent))
	ec.Double(t.Get_time())
	ec.String(t.Get_type())
	ec.Long(t.Get_peer())
	ec.String(t.Get_data())

	return ec.GetBuffer()
}

func (t *TL_inputAppEvent) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_time = dc.Double()
	t.M_type = dc.String()
	t.M_peer = dc.Long()
	t.M_data = dc.String()

	return dc.err
}

func (t *TL_inputAppEvent) String() string {
	return fmt.Sprintf("- inputAppEvent#770656a8\n-- time : %v\n-- type : %v\n-- peer : %v\n-- data : %v\n", t.M_time, t.M_type, t.M_peer, t.M_data)
}

// peerUser#9db1bc6d
type TL_peerUser struct {
	M_classID int32
	M_user_id int32
}

func (t *TL_peerUser) ClassID() int32 {
	return t.M_classID
}

func (t *TL_peerUser) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_peerUser) Get_user_id() int32 {
	return t.M_user_id
}

func New_TL_peerUser() *TL_peerUser {
	return &TL_peerUser{
		M_classID: TL_CLASS_peerUser,
	}
}

func (t *TL_peerUser) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_peerUser))
	ec.Int(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_peerUser) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()

	return dc.err
}

func (t *TL_peerUser) String() string {
	return fmt.Sprintf("- peerUser#9db1bc6d\n-- user_id : %v\n", t.M_user_id)
}

// peerChat#bad0e5bb
type TL_peerChat struct {
	M_classID int32
	M_chat_id int32
}

func (t *TL_peerChat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_peerChat) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_peerChat) Get_chat_id() int32 {
	return t.M_chat_id
}

func New_TL_peerChat() *TL_peerChat {
	return &TL_peerChat{
		M_classID: TL_CLASS_peerChat,
	}
}

func (t *TL_peerChat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_peerChat))
	ec.Int(t.Get_chat_id())

	return ec.GetBuffer()
}

func (t *TL_peerChat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()

	return dc.err
}

func (t *TL_peerChat) String() string {
	return fmt.Sprintf("- peerChat#bad0e5bb\n-- chat_id : %v\n", t.M_chat_id)
}

// peerChannel#bddde532
type TL_peerChannel struct {
	M_classID    int32
	M_channel_id int32
}

func (t *TL_peerChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_peerChannel) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_peerChannel) Get_channel_id() int32 {
	return t.M_channel_id
}

func New_TL_peerChannel() *TL_peerChannel {
	return &TL_peerChannel{
		M_classID: TL_CLASS_peerChannel,
	}
}

func (t *TL_peerChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_peerChannel))
	ec.Int(t.Get_channel_id())

	return ec.GetBuffer()
}

func (t *TL_peerChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()

	return dc.err
}

func (t *TL_peerChannel) String() string {
	return fmt.Sprintf("- peerChannel#bddde532\n-- channel_id : %v\n", t.M_channel_id)
}

// storage_fileUnknown#aa963b05
type TL_storage_fileUnknown struct {
	M_classID int32
}

func (t *TL_storage_fileUnknown) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_fileUnknown() *TL_storage_fileUnknown {
	return &TL_storage_fileUnknown{
		M_classID: TL_CLASS_storage_fileUnknown,
	}
}

func (t *TL_storage_fileUnknown) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_fileUnknown))

	return ec.GetBuffer()
}

func (t *TL_storage_fileUnknown) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_fileUnknown) String() string {
	return fmt.Sprintf("- storage_fileUnknown#aa963b05\n")
}

// storage_filePartial#40bc6f52
type TL_storage_filePartial struct {
	M_classID int32
}

func (t *TL_storage_filePartial) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_filePartial() *TL_storage_filePartial {
	return &TL_storage_filePartial{
		M_classID: TL_CLASS_storage_filePartial,
	}
}

func (t *TL_storage_filePartial) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_filePartial))

	return ec.GetBuffer()
}

func (t *TL_storage_filePartial) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_filePartial) String() string {
	return fmt.Sprintf("- storage_filePartial#40bc6f52\n")
}

// storage_fileJpeg#7efe0e
type TL_storage_fileJpeg struct {
	M_classID int32
}

func (t *TL_storage_fileJpeg) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_fileJpeg() *TL_storage_fileJpeg {
	return &TL_storage_fileJpeg{
		M_classID: TL_CLASS_storage_fileJpeg,
	}
}

func (t *TL_storage_fileJpeg) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_fileJpeg))

	return ec.GetBuffer()
}

func (t *TL_storage_fileJpeg) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_fileJpeg) String() string {
	return fmt.Sprintf("- storage_fileJpeg#7efe0e\n")
}

// storage_fileGif#cae1aadf
type TL_storage_fileGif struct {
	M_classID int32
}

func (t *TL_storage_fileGif) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_fileGif() *TL_storage_fileGif {
	return &TL_storage_fileGif{
		M_classID: TL_CLASS_storage_fileGif,
	}
}

func (t *TL_storage_fileGif) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_fileGif))

	return ec.GetBuffer()
}

func (t *TL_storage_fileGif) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_fileGif) String() string {
	return fmt.Sprintf("- storage_fileGif#cae1aadf\n")
}

// storage_filePng#a4f63c0
type TL_storage_filePng struct {
	M_classID int32
}

func (t *TL_storage_filePng) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_filePng() *TL_storage_filePng {
	return &TL_storage_filePng{
		M_classID: TL_CLASS_storage_filePng,
	}
}

func (t *TL_storage_filePng) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_filePng))

	return ec.GetBuffer()
}

func (t *TL_storage_filePng) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_filePng) String() string {
	return fmt.Sprintf("- storage_filePng#a4f63c0\n")
}

// storage_filePdf#ae1e508d
type TL_storage_filePdf struct {
	M_classID int32
}

func (t *TL_storage_filePdf) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_filePdf() *TL_storage_filePdf {
	return &TL_storage_filePdf{
		M_classID: TL_CLASS_storage_filePdf,
	}
}

func (t *TL_storage_filePdf) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_filePdf))

	return ec.GetBuffer()
}

func (t *TL_storage_filePdf) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_filePdf) String() string {
	return fmt.Sprintf("- storage_filePdf#ae1e508d\n")
}

// storage_fileMp3#528a0677
type TL_storage_fileMp3 struct {
	M_classID int32
}

func (t *TL_storage_fileMp3) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_fileMp3() *TL_storage_fileMp3 {
	return &TL_storage_fileMp3{
		M_classID: TL_CLASS_storage_fileMp3,
	}
}

func (t *TL_storage_fileMp3) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_fileMp3))

	return ec.GetBuffer()
}

func (t *TL_storage_fileMp3) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_fileMp3) String() string {
	return fmt.Sprintf("- storage_fileMp3#528a0677\n")
}

// storage_fileMov#4b09ebbc
type TL_storage_fileMov struct {
	M_classID int32
}

func (t *TL_storage_fileMov) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_fileMov() *TL_storage_fileMov {
	return &TL_storage_fileMov{
		M_classID: TL_CLASS_storage_fileMov,
	}
}

func (t *TL_storage_fileMov) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_fileMov))

	return ec.GetBuffer()
}

func (t *TL_storage_fileMov) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_fileMov) String() string {
	return fmt.Sprintf("- storage_fileMov#4b09ebbc\n")
}

// storage_fileMp4#b3cea0e4
type TL_storage_fileMp4 struct {
	M_classID int32
}

func (t *TL_storage_fileMp4) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_fileMp4() *TL_storage_fileMp4 {
	return &TL_storage_fileMp4{
		M_classID: TL_CLASS_storage_fileMp4,
	}
}

func (t *TL_storage_fileMp4) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_fileMp4))

	return ec.GetBuffer()
}

func (t *TL_storage_fileMp4) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_fileMp4) String() string {
	return fmt.Sprintf("- storage_fileMp4#b3cea0e4\n")
}

// storage_fileWebp#1081464c
type TL_storage_fileWebp struct {
	M_classID int32
}

func (t *TL_storage_fileWebp) ClassID() int32 {
	return t.M_classID
}

func New_TL_storage_fileWebp() *TL_storage_fileWebp {
	return &TL_storage_fileWebp{
		M_classID: TL_CLASS_storage_fileWebp,
	}
}

func (t *TL_storage_fileWebp) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_storage_fileWebp))

	return ec.GetBuffer()
}

func (t *TL_storage_fileWebp) Decode(b []byte) error {
	return nil
}

func (t *TL_storage_fileWebp) String() string {
	return fmt.Sprintf("- storage_fileWebp#1081464c\n")
}

// fileLocationUnavailable#7c596b46
type TL_fileLocationUnavailable struct {
	M_classID   int32
	M_volume_id int64
	M_local_id  int32
	M_secret    int64
}

func (t *TL_fileLocationUnavailable) ClassID() int32 {
	return t.M_classID
}

func (t *TL_fileLocationUnavailable) Set_volume_id(M_volume_id int64) {
	t.M_volume_id = M_volume_id
}

func (t *TL_fileLocationUnavailable) Get_volume_id() int64 {
	return t.M_volume_id
}

func (t *TL_fileLocationUnavailable) Set_local_id(M_local_id int32) {
	t.M_local_id = M_local_id
}

func (t *TL_fileLocationUnavailable) Get_local_id() int32 {
	return t.M_local_id
}

func (t *TL_fileLocationUnavailable) Set_secret(M_secret int64) {
	t.M_secret = M_secret
}

func (t *TL_fileLocationUnavailable) Get_secret() int64 {
	return t.M_secret
}

func New_TL_fileLocationUnavailable() *TL_fileLocationUnavailable {
	return &TL_fileLocationUnavailable{
		M_classID: TL_CLASS_fileLocationUnavailable,
	}
}

func (t *TL_fileLocationUnavailable) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_fileLocationUnavailable))
	ec.Long(t.Get_volume_id())
	ec.Int(t.Get_local_id())
	ec.Long(t.Get_secret())

	return ec.GetBuffer()
}

func (t *TL_fileLocationUnavailable) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_volume_id = dc.Long()
	t.M_local_id = dc.Int()
	t.M_secret = dc.Long()

	return dc.err
}

func (t *TL_fileLocationUnavailable) String() string {
	return fmt.Sprintf("- fileLocationUnavailable#7c596b46\n-- volume_id : %v\n-- local_id : %v\n-- secret : %v\n", t.M_volume_id, t.M_local_id, t.M_secret)
}

// fileLocation#53d69076
type TL_fileLocation struct {
	M_classID   int32
	M_dc_id     int32
	M_volume_id int64
	M_local_id  int32
	M_secret    int64
}

func (t *TL_fileLocation) ClassID() int32 {
	return t.M_classID
}

func (t *TL_fileLocation) Set_dc_id(M_dc_id int32) {
	t.M_dc_id = M_dc_id
}

func (t *TL_fileLocation) Get_dc_id() int32 {
	return t.M_dc_id
}

func (t *TL_fileLocation) Set_volume_id(M_volume_id int64) {
	t.M_volume_id = M_volume_id
}

func (t *TL_fileLocation) Get_volume_id() int64 {
	return t.M_volume_id
}

func (t *TL_fileLocation) Set_local_id(M_local_id int32) {
	t.M_local_id = M_local_id
}

func (t *TL_fileLocation) Get_local_id() int32 {
	return t.M_local_id
}

func (t *TL_fileLocation) Set_secret(M_secret int64) {
	t.M_secret = M_secret
}

func (t *TL_fileLocation) Get_secret() int64 {
	return t.M_secret
}

func New_TL_fileLocation() *TL_fileLocation {
	return &TL_fileLocation{
		M_classID: TL_CLASS_fileLocation,
	}
}

func (t *TL_fileLocation) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_fileLocation))
	ec.Int(t.Get_dc_id())
	ec.Long(t.Get_volume_id())
	ec.Int(t.Get_local_id())
	ec.Long(t.Get_secret())

	return ec.GetBuffer()
}

func (t *TL_fileLocation) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_dc_id = dc.Int()
	t.M_volume_id = dc.Long()
	t.M_local_id = dc.Int()
	t.M_secret = dc.Long()

	return dc.err
}

func (t *TL_fileLocation) String() string {
	return fmt.Sprintf("- fileLocation#53d69076\n-- dc_id : %v\n-- volume_id : %v\n-- local_id : %v\n-- secret : %v\n", t.M_dc_id, t.M_volume_id, t.M_local_id, t.M_secret)
}

// userEmpty#200250ba
type TL_userEmpty struct {
	M_classID int32
	M_id      int32
}

func (t *TL_userEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_userEmpty) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_userEmpty) Get_id() int32 {
	return t.M_id
}

func New_TL_userEmpty() *TL_userEmpty {
	return &TL_userEmpty{
		M_classID: TL_CLASS_userEmpty,
	}
}

func (t *TL_userEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userEmpty))
	ec.Int(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_userEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()

	return dc.err
}

func (t *TL_userEmpty) String() string {
	return fmt.Sprintf("- userEmpty#200250ba\n-- id : %v\n", t.M_id)
}

// user#2e13f4c3
type TL_user struct {
	M_classID                int32
	M_flags                  TLObject
	M_self                   TLObject
	M_contact                TLObject
	M_mutual_contact         TLObject
	M_deleted                TLObject
	M_bot                    TLObject
	M_bot_chat_history       TLObject
	M_bot_nochats            TLObject
	M_verified               TLObject
	M_restricted             TLObject
	M_min                    TLObject
	M_bot_inline_geo         TLObject
	M_id                     int32
	M_access_hash            TLObject
	M_first_name             TLObject
	M_last_name              TLObject
	M_username               TLObject
	M_phone                  TLObject
	M_photo                  TLObject
	M_status                 TLObject
	M_bot_info_version       TLObject
	M_restriction_reason     TLObject
	M_bot_inline_placeholder TLObject
	M_lang_code              TLObject
}

func (t *TL_user) ClassID() int32 {
	return t.M_classID
}

func (t *TL_user) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_user) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_user) Set_self(M_self TLObject) {
	t.M_self = M_self
}

func (t *TL_user) Get_self() TLObject {
	return t.M_self
}

func (t *TL_user) Set_contact(M_contact TLObject) {
	t.M_contact = M_contact
}

func (t *TL_user) Get_contact() TLObject {
	return t.M_contact
}

func (t *TL_user) Set_mutual_contact(M_mutual_contact TLObject) {
	t.M_mutual_contact = M_mutual_contact
}

func (t *TL_user) Get_mutual_contact() TLObject {
	return t.M_mutual_contact
}

func (t *TL_user) Set_deleted(M_deleted TLObject) {
	t.M_deleted = M_deleted
}

func (t *TL_user) Get_deleted() TLObject {
	return t.M_deleted
}

func (t *TL_user) Set_bot(M_bot TLObject) {
	t.M_bot = M_bot
}

func (t *TL_user) Get_bot() TLObject {
	return t.M_bot
}

func (t *TL_user) Set_bot_chat_history(M_bot_chat_history TLObject) {
	t.M_bot_chat_history = M_bot_chat_history
}

func (t *TL_user) Get_bot_chat_history() TLObject {
	return t.M_bot_chat_history
}

func (t *TL_user) Set_bot_nochats(M_bot_nochats TLObject) {
	t.M_bot_nochats = M_bot_nochats
}

func (t *TL_user) Get_bot_nochats() TLObject {
	return t.M_bot_nochats
}

func (t *TL_user) Set_verified(M_verified TLObject) {
	t.M_verified = M_verified
}

func (t *TL_user) Get_verified() TLObject {
	return t.M_verified
}

func (t *TL_user) Set_restricted(M_restricted TLObject) {
	t.M_restricted = M_restricted
}

func (t *TL_user) Get_restricted() TLObject {
	return t.M_restricted
}

func (t *TL_user) Set_min(M_min TLObject) {
	t.M_min = M_min
}

func (t *TL_user) Get_min() TLObject {
	return t.M_min
}

func (t *TL_user) Set_bot_inline_geo(M_bot_inline_geo TLObject) {
	t.M_bot_inline_geo = M_bot_inline_geo
}

func (t *TL_user) Get_bot_inline_geo() TLObject {
	return t.M_bot_inline_geo
}

func (t *TL_user) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_user) Get_id() int32 {
	return t.M_id
}

func (t *TL_user) Set_access_hash(M_access_hash TLObject) {
	t.M_access_hash = M_access_hash
}

func (t *TL_user) Get_access_hash() TLObject {
	return t.M_access_hash
}

func (t *TL_user) Set_first_name(M_first_name TLObject) {
	t.M_first_name = M_first_name
}

func (t *TL_user) Get_first_name() TLObject {
	return t.M_first_name
}

func (t *TL_user) Set_last_name(M_last_name TLObject) {
	t.M_last_name = M_last_name
}

func (t *TL_user) Get_last_name() TLObject {
	return t.M_last_name
}

func (t *TL_user) Set_username(M_username TLObject) {
	t.M_username = M_username
}

func (t *TL_user) Get_username() TLObject {
	return t.M_username
}

func (t *TL_user) Set_phone(M_phone TLObject) {
	t.M_phone = M_phone
}

func (t *TL_user) Get_phone() TLObject {
	return t.M_phone
}

func (t *TL_user) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_user) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_user) Set_status(M_status TLObject) {
	t.M_status = M_status
}

func (t *TL_user) Get_status() TLObject {
	return t.M_status
}

func (t *TL_user) Set_bot_info_version(M_bot_info_version TLObject) {
	t.M_bot_info_version = M_bot_info_version
}

func (t *TL_user) Get_bot_info_version() TLObject {
	return t.M_bot_info_version
}

func (t *TL_user) Set_restriction_reason(M_restriction_reason TLObject) {
	t.M_restriction_reason = M_restriction_reason
}

func (t *TL_user) Get_restriction_reason() TLObject {
	return t.M_restriction_reason
}

func (t *TL_user) Set_bot_inline_placeholder(M_bot_inline_placeholder TLObject) {
	t.M_bot_inline_placeholder = M_bot_inline_placeholder
}

func (t *TL_user) Get_bot_inline_placeholder() TLObject {
	return t.M_bot_inline_placeholder
}

func (t *TL_user) Set_lang_code(M_lang_code TLObject) {
	t.M_lang_code = M_lang_code
}

func (t *TL_user) Get_lang_code() TLObject {
	return t.M_lang_code
}

func New_TL_user() *TL_user {
	return &TL_user{
		M_classID: TL_CLASS_user,
	}
}

func (t *TL_user) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_user))
	ec.TLObject(t.Get_self())
	ec.TLObject(t.Get_contact())
	ec.TLObject(t.Get_mutual_contact())
	ec.TLObject(t.Get_deleted())
	ec.TLObject(t.Get_bot())
	ec.TLObject(t.Get_bot_chat_history())
	ec.TLObject(t.Get_bot_nochats())
	ec.TLObject(t.Get_verified())
	ec.TLObject(t.Get_restricted())
	ec.TLObject(t.Get_min())
	ec.TLObject(t.Get_bot_inline_geo())
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_access_hash())
	ec.TLObject(t.Get_first_name())
	ec.TLObject(t.Get_last_name())
	ec.TLObject(t.Get_username())
	ec.TLObject(t.Get_phone())
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_status())
	ec.TLObject(t.Get_bot_info_version())
	ec.TLObject(t.Get_restriction_reason())
	ec.TLObject(t.Get_bot_inline_placeholder())
	ec.TLObject(t.Get_lang_code())

	return ec.GetBuffer()
}

func (t *TL_user) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_self = dc.TLObject()
	t.M_contact = dc.TLObject()
	t.M_mutual_contact = dc.TLObject()
	t.M_deleted = dc.TLObject()
	t.M_bot = dc.TLObject()
	t.M_bot_chat_history = dc.TLObject()
	t.M_bot_nochats = dc.TLObject()
	t.M_verified = dc.TLObject()
	t.M_restricted = dc.TLObject()
	t.M_min = dc.TLObject()
	t.M_bot_inline_geo = dc.TLObject()
	t.M_id = dc.Int()
	t.M_access_hash = dc.TLObject()
	t.M_first_name = dc.TLObject()
	t.M_last_name = dc.TLObject()
	t.M_username = dc.TLObject()
	t.M_phone = dc.TLObject()
	t.M_photo = dc.TLObject()
	t.M_status = dc.TLObject()
	t.M_bot_info_version = dc.TLObject()
	t.M_restriction_reason = dc.TLObject()
	t.M_bot_inline_placeholder = dc.TLObject()
	t.M_lang_code = dc.TLObject()

	return dc.err
}

func (t *TL_user) String() string {
	return fmt.Sprintf("- user#2e13f4c3\n-- flags : %v\n-- self : %v\n-- contact : %v\n-- mutual_contact : %v\n-- deleted : %v\n-- bot : %v\n-- bot_chat_history : %v\n-- bot_nochats : %v\n-- verified : %v\n-- restricted : %v\n-- min : %v\n-- bot_inline_geo : %v\n-- id : %v\n-- access_hash : %v\n-- first_name : %v\n-- last_name : %v\n-- username : %v\n-- phone : %v\n-- photo : %v\n-- status : %v\n-- bot_info_version : %v\n-- restriction_reason : %v\n-- bot_inline_placeholder : %v\n-- lang_code : %v\n", t.M_flags, t.M_self, t.M_contact, t.M_mutual_contact, t.M_deleted, t.M_bot, t.M_bot_chat_history, t.M_bot_nochats, t.M_verified, t.M_restricted, t.M_min, t.M_bot_inline_geo, t.M_id, t.M_access_hash, t.M_first_name, t.M_last_name, t.M_username, t.M_phone, t.M_photo, t.M_status, t.M_bot_info_version, t.M_restriction_reason, t.M_bot_inline_placeholder, t.M_lang_code)
}

// userProfilePhotoEmpty#4f11bae1
type TL_userProfilePhotoEmpty struct {
	M_classID int32
}

func (t *TL_userProfilePhotoEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_userProfilePhotoEmpty() *TL_userProfilePhotoEmpty {
	return &TL_userProfilePhotoEmpty{
		M_classID: TL_CLASS_userProfilePhotoEmpty,
	}
}

func (t *TL_userProfilePhotoEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userProfilePhotoEmpty))

	return ec.GetBuffer()
}

func (t *TL_userProfilePhotoEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_userProfilePhotoEmpty) String() string {
	return fmt.Sprintf("- userProfilePhotoEmpty#4f11bae1\n")
}

// userProfilePhoto#d559d8c8
type TL_userProfilePhoto struct {
	M_classID     int32
	M_photo_id    int64
	M_photo_small TLObject
	M_photo_big   TLObject
}

func (t *TL_userProfilePhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_userProfilePhoto) Set_photo_id(M_photo_id int64) {
	t.M_photo_id = M_photo_id
}

func (t *TL_userProfilePhoto) Get_photo_id() int64 {
	return t.M_photo_id
}

func (t *TL_userProfilePhoto) Set_photo_small(M_photo_small TLObject) {
	t.M_photo_small = M_photo_small
}

func (t *TL_userProfilePhoto) Get_photo_small() TLObject {
	return t.M_photo_small
}

func (t *TL_userProfilePhoto) Set_photo_big(M_photo_big TLObject) {
	t.M_photo_big = M_photo_big
}

func (t *TL_userProfilePhoto) Get_photo_big() TLObject {
	return t.M_photo_big
}

func New_TL_userProfilePhoto() *TL_userProfilePhoto {
	return &TL_userProfilePhoto{
		M_classID: TL_CLASS_userProfilePhoto,
	}
}

func (t *TL_userProfilePhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userProfilePhoto))
	ec.Long(t.Get_photo_id())
	ec.TLObject(t.Get_photo_small())
	ec.TLObject(t.Get_photo_big())

	return ec.GetBuffer()
}

func (t *TL_userProfilePhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_photo_id = dc.Long()
	t.M_photo_small = dc.TLObject()
	t.M_photo_big = dc.TLObject()

	return dc.err
}

func (t *TL_userProfilePhoto) String() string {
	return fmt.Sprintf("- userProfilePhoto#d559d8c8\n-- photo_id : %v\n-- photo_small : %v\n-- photo_big : %v\n", t.M_photo_id, t.M_photo_small, t.M_photo_big)
}

// userStatusEmpty#9d05049
type TL_userStatusEmpty struct {
	M_classID int32
}

func (t *TL_userStatusEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_userStatusEmpty() *TL_userStatusEmpty {
	return &TL_userStatusEmpty{
		M_classID: TL_CLASS_userStatusEmpty,
	}
}

func (t *TL_userStatusEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userStatusEmpty))

	return ec.GetBuffer()
}

func (t *TL_userStatusEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_userStatusEmpty) String() string {
	return fmt.Sprintf("- userStatusEmpty#9d05049\n")
}

// userStatusOnline#edb93949
type TL_userStatusOnline struct {
	M_classID int32
	M_expires int32
}

func (t *TL_userStatusOnline) ClassID() int32 {
	return t.M_classID
}

func (t *TL_userStatusOnline) Set_expires(M_expires int32) {
	t.M_expires = M_expires
}

func (t *TL_userStatusOnline) Get_expires() int32 {
	return t.M_expires
}

func New_TL_userStatusOnline() *TL_userStatusOnline {
	return &TL_userStatusOnline{
		M_classID: TL_CLASS_userStatusOnline,
	}
}

func (t *TL_userStatusOnline) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userStatusOnline))
	ec.Int(t.Get_expires())

	return ec.GetBuffer()
}

func (t *TL_userStatusOnline) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_expires = dc.Int()

	return dc.err
}

func (t *TL_userStatusOnline) String() string {
	return fmt.Sprintf("- userStatusOnline#edb93949\n-- expires : %v\n", t.M_expires)
}

// userStatusOffline#8c703f
type TL_userStatusOffline struct {
	M_classID    int32
	M_was_online int32
}

func (t *TL_userStatusOffline) ClassID() int32 {
	return t.M_classID
}

func (t *TL_userStatusOffline) Set_was_online(M_was_online int32) {
	t.M_was_online = M_was_online
}

func (t *TL_userStatusOffline) Get_was_online() int32 {
	return t.M_was_online
}

func New_TL_userStatusOffline() *TL_userStatusOffline {
	return &TL_userStatusOffline{
		M_classID: TL_CLASS_userStatusOffline,
	}
}

func (t *TL_userStatusOffline) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userStatusOffline))
	ec.Int(t.Get_was_online())

	return ec.GetBuffer()
}

func (t *TL_userStatusOffline) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_was_online = dc.Int()

	return dc.err
}

func (t *TL_userStatusOffline) String() string {
	return fmt.Sprintf("- userStatusOffline#8c703f\n-- was_online : %v\n", t.M_was_online)
}

// userStatusRecently#e26f42f1
type TL_userStatusRecently struct {
	M_classID int32
}

func (t *TL_userStatusRecently) ClassID() int32 {
	return t.M_classID
}

func New_TL_userStatusRecently() *TL_userStatusRecently {
	return &TL_userStatusRecently{
		M_classID: TL_CLASS_userStatusRecently,
	}
}

func (t *TL_userStatusRecently) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userStatusRecently))

	return ec.GetBuffer()
}

func (t *TL_userStatusRecently) Decode(b []byte) error {
	return nil
}

func (t *TL_userStatusRecently) String() string {
	return fmt.Sprintf("- userStatusRecently#e26f42f1\n")
}

// userStatusLastWeek#7bf09fc
type TL_userStatusLastWeek struct {
	M_classID int32
}

func (t *TL_userStatusLastWeek) ClassID() int32 {
	return t.M_classID
}

func New_TL_userStatusLastWeek() *TL_userStatusLastWeek {
	return &TL_userStatusLastWeek{
		M_classID: TL_CLASS_userStatusLastWeek,
	}
}

func (t *TL_userStatusLastWeek) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userStatusLastWeek))

	return ec.GetBuffer()
}

func (t *TL_userStatusLastWeek) Decode(b []byte) error {
	return nil
}

func (t *TL_userStatusLastWeek) String() string {
	return fmt.Sprintf("- userStatusLastWeek#7bf09fc\n")
}

// userStatusLastMonth#77ebc742
type TL_userStatusLastMonth struct {
	M_classID int32
}

func (t *TL_userStatusLastMonth) ClassID() int32 {
	return t.M_classID
}

func New_TL_userStatusLastMonth() *TL_userStatusLastMonth {
	return &TL_userStatusLastMonth{
		M_classID: TL_CLASS_userStatusLastMonth,
	}
}

func (t *TL_userStatusLastMonth) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userStatusLastMonth))

	return ec.GetBuffer()
}

func (t *TL_userStatusLastMonth) Decode(b []byte) error {
	return nil
}

func (t *TL_userStatusLastMonth) String() string {
	return fmt.Sprintf("- userStatusLastMonth#77ebc742\n")
}

// chatEmpty#9ba2d800
type TL_chatEmpty struct {
	M_classID int32
	M_id      int32
}

func (t *TL_chatEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatEmpty) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_chatEmpty) Get_id() int32 {
	return t.M_id
}

func New_TL_chatEmpty() *TL_chatEmpty {
	return &TL_chatEmpty{
		M_classID: TL_CLASS_chatEmpty,
	}
}

func (t *TL_chatEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatEmpty))
	ec.Int(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_chatEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()

	return dc.err
}

func (t *TL_chatEmpty) String() string {
	return fmt.Sprintf("- chatEmpty#9ba2d800\n-- id : %v\n", t.M_id)
}

// chat#d91cdd54
type TL_chat struct {
	M_classID            int32
	M_flags              TLObject
	M_creator            TLObject
	M_kicked             TLObject
	M_left               TLObject
	M_admins_enabled     TLObject
	M_admin              TLObject
	M_deactivated        TLObject
	M_id                 int32
	M_title              string
	M_photo              TLObject
	M_participants_count int32
	M_date               int32
	M_version            int32
	M_migrated_to        TLObject
}

func (t *TL_chat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chat) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_chat) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_chat) Set_creator(M_creator TLObject) {
	t.M_creator = M_creator
}

func (t *TL_chat) Get_creator() TLObject {
	return t.M_creator
}

func (t *TL_chat) Set_kicked(M_kicked TLObject) {
	t.M_kicked = M_kicked
}

func (t *TL_chat) Get_kicked() TLObject {
	return t.M_kicked
}

func (t *TL_chat) Set_left(M_left TLObject) {
	t.M_left = M_left
}

func (t *TL_chat) Get_left() TLObject {
	return t.M_left
}

func (t *TL_chat) Set_admins_enabled(M_admins_enabled TLObject) {
	t.M_admins_enabled = M_admins_enabled
}

func (t *TL_chat) Get_admins_enabled() TLObject {
	return t.M_admins_enabled
}

func (t *TL_chat) Set_admin(M_admin TLObject) {
	t.M_admin = M_admin
}

func (t *TL_chat) Get_admin() TLObject {
	return t.M_admin
}

func (t *TL_chat) Set_deactivated(M_deactivated TLObject) {
	t.M_deactivated = M_deactivated
}

func (t *TL_chat) Get_deactivated() TLObject {
	return t.M_deactivated
}

func (t *TL_chat) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_chat) Get_id() int32 {
	return t.M_id
}

func (t *TL_chat) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_chat) Get_title() string {
	return t.M_title
}

func (t *TL_chat) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_chat) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_chat) Set_participants_count(M_participants_count int32) {
	t.M_participants_count = M_participants_count
}

func (t *TL_chat) Get_participants_count() int32 {
	return t.M_participants_count
}

func (t *TL_chat) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_chat) Get_date() int32 {
	return t.M_date
}

func (t *TL_chat) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_chat) Get_version() int32 {
	return t.M_version
}

func (t *TL_chat) Set_migrated_to(M_migrated_to TLObject) {
	t.M_migrated_to = M_migrated_to
}

func (t *TL_chat) Get_migrated_to() TLObject {
	return t.M_migrated_to
}

func New_TL_chat() *TL_chat {
	return &TL_chat{
		M_classID: TL_CLASS_chat,
	}
}

func (t *TL_chat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chat))
	ec.TLObject(t.Get_creator())
	ec.TLObject(t.Get_kicked())
	ec.TLObject(t.Get_left())
	ec.TLObject(t.Get_admins_enabled())
	ec.TLObject(t.Get_admin())
	ec.TLObject(t.Get_deactivated())
	ec.Int(t.Get_id())
	ec.String(t.Get_title())
	ec.TLObject(t.Get_photo())
	ec.Int(t.Get_participants_count())
	ec.Int(t.Get_date())
	ec.Int(t.Get_version())
	ec.TLObject(t.Get_migrated_to())

	return ec.GetBuffer()
}

func (t *TL_chat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_creator = dc.TLObject()
	t.M_kicked = dc.TLObject()
	t.M_left = dc.TLObject()
	t.M_admins_enabled = dc.TLObject()
	t.M_admin = dc.TLObject()
	t.M_deactivated = dc.TLObject()
	t.M_id = dc.Int()
	t.M_title = dc.String()
	t.M_photo = dc.TLObject()
	t.M_participants_count = dc.Int()
	t.M_date = dc.Int()
	t.M_version = dc.Int()
	t.M_migrated_to = dc.TLObject()

	return dc.err
}

func (t *TL_chat) String() string {
	return fmt.Sprintf("- chat#d91cdd54\n-- flags : %v\n-- creator : %v\n-- kicked : %v\n-- left : %v\n-- admins_enabled : %v\n-- admin : %v\n-- deactivated : %v\n-- id : %v\n-- title : %v\n-- photo : %v\n-- participants_count : %v\n-- date : %v\n-- version : %v\n-- migrated_to : %v\n", t.M_flags, t.M_creator, t.M_kicked, t.M_left, t.M_admins_enabled, t.M_admin, t.M_deactivated, t.M_id, t.M_title, t.M_photo, t.M_participants_count, t.M_date, t.M_version, t.M_migrated_to)
}

// chatForbidden#7328bdb
type TL_chatForbidden struct {
	M_classID int32
	M_id      int32
	M_title   string
}

func (t *TL_chatForbidden) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatForbidden) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_chatForbidden) Get_id() int32 {
	return t.M_id
}

func (t *TL_chatForbidden) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_chatForbidden) Get_title() string {
	return t.M_title
}

func New_TL_chatForbidden() *TL_chatForbidden {
	return &TL_chatForbidden{
		M_classID: TL_CLASS_chatForbidden,
	}
}

func (t *TL_chatForbidden) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatForbidden))
	ec.Int(t.Get_id())
	ec.String(t.Get_title())

	return ec.GetBuffer()
}

func (t *TL_chatForbidden) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_title = dc.String()

	return dc.err
}

func (t *TL_chatForbidden) String() string {
	return fmt.Sprintf("- chatForbidden#7328bdb\n-- id : %v\n-- title : %v\n", t.M_id, t.M_title)
}

// channel#450b7115
type TL_channel struct {
	M_classID            int32
	M_flags              TLObject
	M_creator            TLObject
	M_left               TLObject
	M_editor             TLObject
	M_broadcast          TLObject
	M_verified           TLObject
	M_megagroup          TLObject
	M_restricted         TLObject
	M_democracy          TLObject
	M_signatures         TLObject
	M_min                TLObject
	M_id                 int32
	M_access_hash        TLObject
	M_title              string
	M_username           TLObject
	M_photo              TLObject
	M_date               int32
	M_version            int32
	M_restriction_reason TLObject
	M_admin_rights       TLObject
	M_banned_rights      TLObject
	M_participants_count TLObject
}

func (t *TL_channel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channel) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channel) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channel) Set_creator(M_creator TLObject) {
	t.M_creator = M_creator
}

func (t *TL_channel) Get_creator() TLObject {
	return t.M_creator
}

func (t *TL_channel) Set_left(M_left TLObject) {
	t.M_left = M_left
}

func (t *TL_channel) Get_left() TLObject {
	return t.M_left
}

func (t *TL_channel) Set_editor(M_editor TLObject) {
	t.M_editor = M_editor
}

func (t *TL_channel) Get_editor() TLObject {
	return t.M_editor
}

func (t *TL_channel) Set_broadcast(M_broadcast TLObject) {
	t.M_broadcast = M_broadcast
}

func (t *TL_channel) Get_broadcast() TLObject {
	return t.M_broadcast
}

func (t *TL_channel) Set_verified(M_verified TLObject) {
	t.M_verified = M_verified
}

func (t *TL_channel) Get_verified() TLObject {
	return t.M_verified
}

func (t *TL_channel) Set_megagroup(M_megagroup TLObject) {
	t.M_megagroup = M_megagroup
}

func (t *TL_channel) Get_megagroup() TLObject {
	return t.M_megagroup
}

func (t *TL_channel) Set_restricted(M_restricted TLObject) {
	t.M_restricted = M_restricted
}

func (t *TL_channel) Get_restricted() TLObject {
	return t.M_restricted
}

func (t *TL_channel) Set_democracy(M_democracy TLObject) {
	t.M_democracy = M_democracy
}

func (t *TL_channel) Get_democracy() TLObject {
	return t.M_democracy
}

func (t *TL_channel) Set_signatures(M_signatures TLObject) {
	t.M_signatures = M_signatures
}

func (t *TL_channel) Get_signatures() TLObject {
	return t.M_signatures
}

func (t *TL_channel) Set_min(M_min TLObject) {
	t.M_min = M_min
}

func (t *TL_channel) Get_min() TLObject {
	return t.M_min
}

func (t *TL_channel) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_channel) Get_id() int32 {
	return t.M_id
}

func (t *TL_channel) Set_access_hash(M_access_hash TLObject) {
	t.M_access_hash = M_access_hash
}

func (t *TL_channel) Get_access_hash() TLObject {
	return t.M_access_hash
}

func (t *TL_channel) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_channel) Get_title() string {
	return t.M_title
}

func (t *TL_channel) Set_username(M_username TLObject) {
	t.M_username = M_username
}

func (t *TL_channel) Get_username() TLObject {
	return t.M_username
}

func (t *TL_channel) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_channel) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_channel) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_channel) Get_date() int32 {
	return t.M_date
}

func (t *TL_channel) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_channel) Get_version() int32 {
	return t.M_version
}

func (t *TL_channel) Set_restriction_reason(M_restriction_reason TLObject) {
	t.M_restriction_reason = M_restriction_reason
}

func (t *TL_channel) Get_restriction_reason() TLObject {
	return t.M_restriction_reason
}

func (t *TL_channel) Set_admin_rights(M_admin_rights TLObject) {
	t.M_admin_rights = M_admin_rights
}

func (t *TL_channel) Get_admin_rights() TLObject {
	return t.M_admin_rights
}

func (t *TL_channel) Set_banned_rights(M_banned_rights TLObject) {
	t.M_banned_rights = M_banned_rights
}

func (t *TL_channel) Get_banned_rights() TLObject {
	return t.M_banned_rights
}

func (t *TL_channel) Set_participants_count(M_participants_count TLObject) {
	t.M_participants_count = M_participants_count
}

func (t *TL_channel) Get_participants_count() TLObject {
	return t.M_participants_count
}

func New_TL_channel() *TL_channel {
	return &TL_channel{
		M_classID: TL_CLASS_channel,
	}
}

func (t *TL_channel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channel))
	ec.TLObject(t.Get_creator())
	ec.TLObject(t.Get_left())
	ec.TLObject(t.Get_editor())
	ec.TLObject(t.Get_broadcast())
	ec.TLObject(t.Get_verified())
	ec.TLObject(t.Get_megagroup())
	ec.TLObject(t.Get_restricted())
	ec.TLObject(t.Get_democracy())
	ec.TLObject(t.Get_signatures())
	ec.TLObject(t.Get_min())
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_access_hash())
	ec.String(t.Get_title())
	ec.TLObject(t.Get_username())
	ec.TLObject(t.Get_photo())
	ec.Int(t.Get_date())
	ec.Int(t.Get_version())
	ec.TLObject(t.Get_restriction_reason())
	ec.TLObject(t.Get_admin_rights())
	ec.TLObject(t.Get_banned_rights())
	ec.TLObject(t.Get_participants_count())

	return ec.GetBuffer()
}

func (t *TL_channel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_creator = dc.TLObject()
	t.M_left = dc.TLObject()
	t.M_editor = dc.TLObject()
	t.M_broadcast = dc.TLObject()
	t.M_verified = dc.TLObject()
	t.M_megagroup = dc.TLObject()
	t.M_restricted = dc.TLObject()
	t.M_democracy = dc.TLObject()
	t.M_signatures = dc.TLObject()
	t.M_min = dc.TLObject()
	t.M_id = dc.Int()
	t.M_access_hash = dc.TLObject()
	t.M_title = dc.String()
	t.M_username = dc.TLObject()
	t.M_photo = dc.TLObject()
	t.M_date = dc.Int()
	t.M_version = dc.Int()
	t.M_restriction_reason = dc.TLObject()
	t.M_admin_rights = dc.TLObject()
	t.M_banned_rights = dc.TLObject()
	t.M_participants_count = dc.TLObject()

	return dc.err
}

func (t *TL_channel) String() string {
	return fmt.Sprintf("- channel#450b7115\n-- flags : %v\n-- creator : %v\n-- left : %v\n-- editor : %v\n-- broadcast : %v\n-- verified : %v\n-- megagroup : %v\n-- restricted : %v\n-- democracy : %v\n-- signatures : %v\n-- min : %v\n-- id : %v\n-- access_hash : %v\n-- title : %v\n-- username : %v\n-- photo : %v\n-- date : %v\n-- version : %v\n-- restriction_reason : %v\n-- admin_rights : %v\n-- banned_rights : %v\n-- participants_count : %v\n", t.M_flags, t.M_creator, t.M_left, t.M_editor, t.M_broadcast, t.M_verified, t.M_megagroup, t.M_restricted, t.M_democracy, t.M_signatures, t.M_min, t.M_id, t.M_access_hash, t.M_title, t.M_username, t.M_photo, t.M_date, t.M_version, t.M_restriction_reason, t.M_admin_rights, t.M_banned_rights, t.M_participants_count)
}

// channelForbidden#289da732
type TL_channelForbidden struct {
	M_classID     int32
	M_flags       TLObject
	M_broadcast   TLObject
	M_megagroup   TLObject
	M_id          int32
	M_access_hash int64
	M_title       string
	M_until_date  TLObject
}

func (t *TL_channelForbidden) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelForbidden) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channelForbidden) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channelForbidden) Set_broadcast(M_broadcast TLObject) {
	t.M_broadcast = M_broadcast
}

func (t *TL_channelForbidden) Get_broadcast() TLObject {
	return t.M_broadcast
}

func (t *TL_channelForbidden) Set_megagroup(M_megagroup TLObject) {
	t.M_megagroup = M_megagroup
}

func (t *TL_channelForbidden) Get_megagroup() TLObject {
	return t.M_megagroup
}

func (t *TL_channelForbidden) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_channelForbidden) Get_id() int32 {
	return t.M_id
}

func (t *TL_channelForbidden) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_channelForbidden) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_channelForbidden) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_channelForbidden) Get_title() string {
	return t.M_title
}

func (t *TL_channelForbidden) Set_until_date(M_until_date TLObject) {
	t.M_until_date = M_until_date
}

func (t *TL_channelForbidden) Get_until_date() TLObject {
	return t.M_until_date
}

func New_TL_channelForbidden() *TL_channelForbidden {
	return &TL_channelForbidden{
		M_classID: TL_CLASS_channelForbidden,
	}
}

func (t *TL_channelForbidden) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelForbidden))
	ec.TLObject(t.Get_broadcast())
	ec.TLObject(t.Get_megagroup())
	ec.Int(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.String(t.Get_title())
	ec.TLObject(t.Get_until_date())

	return ec.GetBuffer()
}

func (t *TL_channelForbidden) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_broadcast = dc.TLObject()
	t.M_megagroup = dc.TLObject()
	t.M_id = dc.Int()
	t.M_access_hash = dc.Long()
	t.M_title = dc.String()
	t.M_until_date = dc.TLObject()

	return dc.err
}

func (t *TL_channelForbidden) String() string {
	return fmt.Sprintf("- channelForbidden#289da732\n-- flags : %v\n-- broadcast : %v\n-- megagroup : %v\n-- id : %v\n-- access_hash : %v\n-- title : %v\n-- until_date : %v\n", t.M_flags, t.M_broadcast, t.M_megagroup, t.M_id, t.M_access_hash, t.M_title, t.M_until_date)
}

// chatFull#2e02a614
type TL_chatFull struct {
	M_classID         int32
	M_id              int32
	M_participants    TLObject
	M_chat_photo      TLObject
	M_notify_settings TLObject
	M_exported_invite TLObject
	M_bot_info        []TLObject
}

func (t *TL_chatFull) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatFull) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_chatFull) Get_id() int32 {
	return t.M_id
}

func (t *TL_chatFull) Set_participants(M_participants TLObject) {
	t.M_participants = M_participants
}

func (t *TL_chatFull) Get_participants() TLObject {
	return t.M_participants
}

func (t *TL_chatFull) Set_chat_photo(M_chat_photo TLObject) {
	t.M_chat_photo = M_chat_photo
}

func (t *TL_chatFull) Get_chat_photo() TLObject {
	return t.M_chat_photo
}

func (t *TL_chatFull) Set_notify_settings(M_notify_settings TLObject) {
	t.M_notify_settings = M_notify_settings
}

func (t *TL_chatFull) Get_notify_settings() TLObject {
	return t.M_notify_settings
}

func (t *TL_chatFull) Set_exported_invite(M_exported_invite TLObject) {
	t.M_exported_invite = M_exported_invite
}

func (t *TL_chatFull) Get_exported_invite() TLObject {
	return t.M_exported_invite
}

func (t *TL_chatFull) Set_bot_info(M_bot_info []TLObject) {
	t.M_bot_info = M_bot_info
}

func (t *TL_chatFull) Get_bot_info() []TLObject {
	return t.M_bot_info
}

func New_TL_chatFull() *TL_chatFull {
	return &TL_chatFull{
		M_classID: TL_CLASS_chatFull,
	}
}

func (t *TL_chatFull) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatFull))
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_participants())
	ec.TLObject(t.Get_chat_photo())
	ec.TLObject(t.Get_notify_settings())
	ec.TLObject(t.Get_exported_invite())
	ec.Vector(t.Get_bot_info())

	return ec.GetBuffer()
}

func (t *TL_chatFull) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_participants = dc.TLObject()
	t.M_chat_photo = dc.TLObject()
	t.M_notify_settings = dc.TLObject()
	t.M_exported_invite = dc.TLObject()
	t.M_bot_info = dc.Vector()

	return dc.err
}

func (t *TL_chatFull) String() string {
	return fmt.Sprintf("- chatFull#2e02a614\n-- id : %v\n-- participants : %v\n-- chat_photo : %v\n-- notify_settings : %v\n-- exported_invite : %v\n-- bot_info : %v\n", t.M_id, t.M_participants, t.M_chat_photo, t.M_notify_settings, t.M_exported_invite, t.M_bot_info)
}

// channelFull#76af5481
type TL_channelFull struct {
	M_classID               int32
	M_flags                 TLObject
	M_can_view_participants TLObject
	M_can_set_username      TLObject
	M_can_set_stickers      TLObject
	M_hidden_prehistory     TLObject
	M_id                    int32
	M_about                 string
	M_participants_count    TLObject
	M_admins_count          TLObject
	M_kicked_count          TLObject
	M_banned_count          TLObject
	M_read_inbox_max_id     int32
	M_read_outbox_max_id    int32
	M_unread_count          int32
	M_chat_photo            TLObject
	M_notify_settings       TLObject
	M_exported_invite       TLObject
	M_bot_info              []TLObject
	M_migrated_from_chat_id TLObject
	M_migrated_from_max_id  TLObject
	M_pinned_msg_id         TLObject
	M_stickerset            TLObject
	M_available_min_id      TLObject
}

func (t *TL_channelFull) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelFull) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channelFull) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channelFull) Set_can_view_participants(M_can_view_participants TLObject) {
	t.M_can_view_participants = M_can_view_participants
}

func (t *TL_channelFull) Get_can_view_participants() TLObject {
	return t.M_can_view_participants
}

func (t *TL_channelFull) Set_can_set_username(M_can_set_username TLObject) {
	t.M_can_set_username = M_can_set_username
}

func (t *TL_channelFull) Get_can_set_username() TLObject {
	return t.M_can_set_username
}

func (t *TL_channelFull) Set_can_set_stickers(M_can_set_stickers TLObject) {
	t.M_can_set_stickers = M_can_set_stickers
}

func (t *TL_channelFull) Get_can_set_stickers() TLObject {
	return t.M_can_set_stickers
}

func (t *TL_channelFull) Set_hidden_prehistory(M_hidden_prehistory TLObject) {
	t.M_hidden_prehistory = M_hidden_prehistory
}

func (t *TL_channelFull) Get_hidden_prehistory() TLObject {
	return t.M_hidden_prehistory
}

func (t *TL_channelFull) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_channelFull) Get_id() int32 {
	return t.M_id
}

func (t *TL_channelFull) Set_about(M_about string) {
	t.M_about = M_about
}

func (t *TL_channelFull) Get_about() string {
	return t.M_about
}

func (t *TL_channelFull) Set_participants_count(M_participants_count TLObject) {
	t.M_participants_count = M_participants_count
}

func (t *TL_channelFull) Get_participants_count() TLObject {
	return t.M_participants_count
}

func (t *TL_channelFull) Set_admins_count(M_admins_count TLObject) {
	t.M_admins_count = M_admins_count
}

func (t *TL_channelFull) Get_admins_count() TLObject {
	return t.M_admins_count
}

func (t *TL_channelFull) Set_kicked_count(M_kicked_count TLObject) {
	t.M_kicked_count = M_kicked_count
}

func (t *TL_channelFull) Get_kicked_count() TLObject {
	return t.M_kicked_count
}

func (t *TL_channelFull) Set_banned_count(M_banned_count TLObject) {
	t.M_banned_count = M_banned_count
}

func (t *TL_channelFull) Get_banned_count() TLObject {
	return t.M_banned_count
}

func (t *TL_channelFull) Set_read_inbox_max_id(M_read_inbox_max_id int32) {
	t.M_read_inbox_max_id = M_read_inbox_max_id
}

func (t *TL_channelFull) Get_read_inbox_max_id() int32 {
	return t.M_read_inbox_max_id
}

func (t *TL_channelFull) Set_read_outbox_max_id(M_read_outbox_max_id int32) {
	t.M_read_outbox_max_id = M_read_outbox_max_id
}

func (t *TL_channelFull) Get_read_outbox_max_id() int32 {
	return t.M_read_outbox_max_id
}

func (t *TL_channelFull) Set_unread_count(M_unread_count int32) {
	t.M_unread_count = M_unread_count
}

func (t *TL_channelFull) Get_unread_count() int32 {
	return t.M_unread_count
}

func (t *TL_channelFull) Set_chat_photo(M_chat_photo TLObject) {
	t.M_chat_photo = M_chat_photo
}

func (t *TL_channelFull) Get_chat_photo() TLObject {
	return t.M_chat_photo
}

func (t *TL_channelFull) Set_notify_settings(M_notify_settings TLObject) {
	t.M_notify_settings = M_notify_settings
}

func (t *TL_channelFull) Get_notify_settings() TLObject {
	return t.M_notify_settings
}

func (t *TL_channelFull) Set_exported_invite(M_exported_invite TLObject) {
	t.M_exported_invite = M_exported_invite
}

func (t *TL_channelFull) Get_exported_invite() TLObject {
	return t.M_exported_invite
}

func (t *TL_channelFull) Set_bot_info(M_bot_info []TLObject) {
	t.M_bot_info = M_bot_info
}

func (t *TL_channelFull) Get_bot_info() []TLObject {
	return t.M_bot_info
}

func (t *TL_channelFull) Set_migrated_from_chat_id(M_migrated_from_chat_id TLObject) {
	t.M_migrated_from_chat_id = M_migrated_from_chat_id
}

func (t *TL_channelFull) Get_migrated_from_chat_id() TLObject {
	return t.M_migrated_from_chat_id
}

func (t *TL_channelFull) Set_migrated_from_max_id(M_migrated_from_max_id TLObject) {
	t.M_migrated_from_max_id = M_migrated_from_max_id
}

func (t *TL_channelFull) Get_migrated_from_max_id() TLObject {
	return t.M_migrated_from_max_id
}

func (t *TL_channelFull) Set_pinned_msg_id(M_pinned_msg_id TLObject) {
	t.M_pinned_msg_id = M_pinned_msg_id
}

func (t *TL_channelFull) Get_pinned_msg_id() TLObject {
	return t.M_pinned_msg_id
}

func (t *TL_channelFull) Set_stickerset(M_stickerset TLObject) {
	t.M_stickerset = M_stickerset
}

func (t *TL_channelFull) Get_stickerset() TLObject {
	return t.M_stickerset
}

func (t *TL_channelFull) Set_available_min_id(M_available_min_id TLObject) {
	t.M_available_min_id = M_available_min_id
}

func (t *TL_channelFull) Get_available_min_id() TLObject {
	return t.M_available_min_id
}

func New_TL_channelFull() *TL_channelFull {
	return &TL_channelFull{
		M_classID: TL_CLASS_channelFull,
	}
}

func (t *TL_channelFull) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelFull))
	ec.TLObject(t.Get_can_view_participants())
	ec.TLObject(t.Get_can_set_username())
	ec.TLObject(t.Get_can_set_stickers())
	ec.TLObject(t.Get_hidden_prehistory())
	ec.Int(t.Get_id())
	ec.String(t.Get_about())
	ec.TLObject(t.Get_participants_count())
	ec.TLObject(t.Get_admins_count())
	ec.TLObject(t.Get_kicked_count())
	ec.TLObject(t.Get_banned_count())
	ec.Int(t.Get_read_inbox_max_id())
	ec.Int(t.Get_read_outbox_max_id())
	ec.Int(t.Get_unread_count())
	ec.TLObject(t.Get_chat_photo())
	ec.TLObject(t.Get_notify_settings())
	ec.TLObject(t.Get_exported_invite())
	ec.Vector(t.Get_bot_info())
	ec.TLObject(t.Get_migrated_from_chat_id())
	ec.TLObject(t.Get_migrated_from_max_id())
	ec.TLObject(t.Get_pinned_msg_id())
	ec.TLObject(t.Get_stickerset())
	ec.TLObject(t.Get_available_min_id())

	return ec.GetBuffer()
}

func (t *TL_channelFull) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_can_view_participants = dc.TLObject()
	t.M_can_set_username = dc.TLObject()
	t.M_can_set_stickers = dc.TLObject()
	t.M_hidden_prehistory = dc.TLObject()
	t.M_id = dc.Int()
	t.M_about = dc.String()
	t.M_participants_count = dc.TLObject()
	t.M_admins_count = dc.TLObject()
	t.M_kicked_count = dc.TLObject()
	t.M_banned_count = dc.TLObject()
	t.M_read_inbox_max_id = dc.Int()
	t.M_read_outbox_max_id = dc.Int()
	t.M_unread_count = dc.Int()
	t.M_chat_photo = dc.TLObject()
	t.M_notify_settings = dc.TLObject()
	t.M_exported_invite = dc.TLObject()
	t.M_bot_info = dc.Vector()
	t.M_migrated_from_chat_id = dc.TLObject()
	t.M_migrated_from_max_id = dc.TLObject()
	t.M_pinned_msg_id = dc.TLObject()
	t.M_stickerset = dc.TLObject()
	t.M_available_min_id = dc.TLObject()

	return dc.err
}

func (t *TL_channelFull) String() string {
	return fmt.Sprintf("- channelFull#76af5481\n-- flags : %v\n-- can_view_participants : %v\n-- can_set_username : %v\n-- can_set_stickers : %v\n-- hidden_prehistory : %v\n-- id : %v\n-- about : %v\n-- participants_count : %v\n-- admins_count : %v\n-- kicked_count : %v\n-- banned_count : %v\n-- read_inbox_max_id : %v\n-- read_outbox_max_id : %v\n-- unread_count : %v\n-- chat_photo : %v\n-- notify_settings : %v\n-- exported_invite : %v\n-- bot_info : %v\n-- migrated_from_chat_id : %v\n-- migrated_from_max_id : %v\n-- pinned_msg_id : %v\n-- stickerset : %v\n-- available_min_id : %v\n", t.M_flags, t.M_can_view_participants, t.M_can_set_username, t.M_can_set_stickers, t.M_hidden_prehistory, t.M_id, t.M_about, t.M_participants_count, t.M_admins_count, t.M_kicked_count, t.M_banned_count, t.M_read_inbox_max_id, t.M_read_outbox_max_id, t.M_unread_count, t.M_chat_photo, t.M_notify_settings, t.M_exported_invite, t.M_bot_info, t.M_migrated_from_chat_id, t.M_migrated_from_max_id, t.M_pinned_msg_id, t.M_stickerset, t.M_available_min_id)
}

// chatParticipant#c8d7493e
type TL_chatParticipant struct {
	M_classID    int32
	M_user_id    int32
	M_inviter_id int32
	M_date       int32
}

func (t *TL_chatParticipant) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatParticipant) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_chatParticipant) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_chatParticipant) Set_inviter_id(M_inviter_id int32) {
	t.M_inviter_id = M_inviter_id
}

func (t *TL_chatParticipant) Get_inviter_id() int32 {
	return t.M_inviter_id
}

func (t *TL_chatParticipant) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_chatParticipant) Get_date() int32 {
	return t.M_date
}

func New_TL_chatParticipant() *TL_chatParticipant {
	return &TL_chatParticipant{
		M_classID: TL_CLASS_chatParticipant,
	}
}

func (t *TL_chatParticipant) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatParticipant))
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_inviter_id())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_chatParticipant) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_inviter_id = dc.Int()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_chatParticipant) String() string {
	return fmt.Sprintf("- chatParticipant#c8d7493e\n-- user_id : %v\n-- inviter_id : %v\n-- date : %v\n", t.M_user_id, t.M_inviter_id, t.M_date)
}

// chatParticipantCreator#da13538a
type TL_chatParticipantCreator struct {
	M_classID int32
	M_user_id int32
}

func (t *TL_chatParticipantCreator) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatParticipantCreator) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_chatParticipantCreator) Get_user_id() int32 {
	return t.M_user_id
}

func New_TL_chatParticipantCreator() *TL_chatParticipantCreator {
	return &TL_chatParticipantCreator{
		M_classID: TL_CLASS_chatParticipantCreator,
	}
}

func (t *TL_chatParticipantCreator) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatParticipantCreator))
	ec.Int(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_chatParticipantCreator) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()

	return dc.err
}

func (t *TL_chatParticipantCreator) String() string {
	return fmt.Sprintf("- chatParticipantCreator#da13538a\n-- user_id : %v\n", t.M_user_id)
}

// chatParticipantAdmin#e2d6e436
type TL_chatParticipantAdmin struct {
	M_classID    int32
	M_user_id    int32
	M_inviter_id int32
	M_date       int32
}

func (t *TL_chatParticipantAdmin) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatParticipantAdmin) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_chatParticipantAdmin) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_chatParticipantAdmin) Set_inviter_id(M_inviter_id int32) {
	t.M_inviter_id = M_inviter_id
}

func (t *TL_chatParticipantAdmin) Get_inviter_id() int32 {
	return t.M_inviter_id
}

func (t *TL_chatParticipantAdmin) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_chatParticipantAdmin) Get_date() int32 {
	return t.M_date
}

func New_TL_chatParticipantAdmin() *TL_chatParticipantAdmin {
	return &TL_chatParticipantAdmin{
		M_classID: TL_CLASS_chatParticipantAdmin,
	}
}

func (t *TL_chatParticipantAdmin) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatParticipantAdmin))
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_inviter_id())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_chatParticipantAdmin) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_inviter_id = dc.Int()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_chatParticipantAdmin) String() string {
	return fmt.Sprintf("- chatParticipantAdmin#e2d6e436\n-- user_id : %v\n-- inviter_id : %v\n-- date : %v\n", t.M_user_id, t.M_inviter_id, t.M_date)
}

// chatParticipantsForbidden#fc900c2b
type TL_chatParticipantsForbidden struct {
	M_classID          int32
	M_flags            TLObject
	M_chat_id          int32
	M_self_participant TLObject
}

func (t *TL_chatParticipantsForbidden) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatParticipantsForbidden) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_chatParticipantsForbidden) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_chatParticipantsForbidden) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_chatParticipantsForbidden) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_chatParticipantsForbidden) Set_self_participant(M_self_participant TLObject) {
	t.M_self_participant = M_self_participant
}

func (t *TL_chatParticipantsForbidden) Get_self_participant() TLObject {
	return t.M_self_participant
}

func New_TL_chatParticipantsForbidden() *TL_chatParticipantsForbidden {
	return &TL_chatParticipantsForbidden{
		M_classID: TL_CLASS_chatParticipantsForbidden,
	}
}

func (t *TL_chatParticipantsForbidden) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatParticipantsForbidden))
	ec.Int(t.Get_chat_id())
	ec.TLObject(t.Get_self_participant())

	return ec.GetBuffer()
}

func (t *TL_chatParticipantsForbidden) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_self_participant = dc.TLObject()

	return dc.err
}

func (t *TL_chatParticipantsForbidden) String() string {
	return fmt.Sprintf("- chatParticipantsForbidden#fc900c2b\n-- flags : %v\n-- chat_id : %v\n-- self_participant : %v\n", t.M_flags, t.M_chat_id, t.M_self_participant)
}

// chatParticipants#3f460fed
type TL_chatParticipants struct {
	M_classID      int32
	M_chat_id      int32
	M_participants []TLObject
	M_version      int32
}

func (t *TL_chatParticipants) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatParticipants) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_chatParticipants) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_chatParticipants) Set_participants(M_participants []TLObject) {
	t.M_participants = M_participants
}

func (t *TL_chatParticipants) Get_participants() []TLObject {
	return t.M_participants
}

func (t *TL_chatParticipants) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_chatParticipants) Get_version() int32 {
	return t.M_version
}

func New_TL_chatParticipants() *TL_chatParticipants {
	return &TL_chatParticipants{
		M_classID: TL_CLASS_chatParticipants,
	}
}

func (t *TL_chatParticipants) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatParticipants))
	ec.Int(t.Get_chat_id())
	ec.Vector(t.Get_participants())
	ec.Int(t.Get_version())

	return ec.GetBuffer()
}

func (t *TL_chatParticipants) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_participants = dc.Vector()
	t.M_version = dc.Int()

	return dc.err
}

func (t *TL_chatParticipants) String() string {
	return fmt.Sprintf("- chatParticipants#3f460fed\n-- chat_id : %v\n-- participants : %v\n-- version : %v\n", t.M_chat_id, t.M_participants, t.M_version)
}

// chatPhotoEmpty#37c1011c
type TL_chatPhotoEmpty struct {
	M_classID int32
}

func (t *TL_chatPhotoEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_chatPhotoEmpty() *TL_chatPhotoEmpty {
	return &TL_chatPhotoEmpty{
		M_classID: TL_CLASS_chatPhotoEmpty,
	}
}

func (t *TL_chatPhotoEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatPhotoEmpty))

	return ec.GetBuffer()
}

func (t *TL_chatPhotoEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_chatPhotoEmpty) String() string {
	return fmt.Sprintf("- chatPhotoEmpty#37c1011c\n")
}

// chatPhoto#6153276a
type TL_chatPhoto struct {
	M_classID     int32
	M_photo_small TLObject
	M_photo_big   TLObject
}

func (t *TL_chatPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatPhoto) Set_photo_small(M_photo_small TLObject) {
	t.M_photo_small = M_photo_small
}

func (t *TL_chatPhoto) Get_photo_small() TLObject {
	return t.M_photo_small
}

func (t *TL_chatPhoto) Set_photo_big(M_photo_big TLObject) {
	t.M_photo_big = M_photo_big
}

func (t *TL_chatPhoto) Get_photo_big() TLObject {
	return t.M_photo_big
}

func New_TL_chatPhoto() *TL_chatPhoto {
	return &TL_chatPhoto{
		M_classID: TL_CLASS_chatPhoto,
	}
}

func (t *TL_chatPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatPhoto))
	ec.TLObject(t.Get_photo_small())
	ec.TLObject(t.Get_photo_big())

	return ec.GetBuffer()
}

func (t *TL_chatPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_photo_small = dc.TLObject()
	t.M_photo_big = dc.TLObject()

	return dc.err
}

func (t *TL_chatPhoto) String() string {
	return fmt.Sprintf("- chatPhoto#6153276a\n-- photo_small : %v\n-- photo_big : %v\n", t.M_photo_small, t.M_photo_big)
}

// messageEmpty#83e5de54
type TL_messageEmpty struct {
	M_classID int32
	M_id      int32
}

func (t *TL_messageEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEmpty) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_messageEmpty) Get_id() int32 {
	return t.M_id
}

func New_TL_messageEmpty() *TL_messageEmpty {
	return &TL_messageEmpty{
		M_classID: TL_CLASS_messageEmpty,
	}
}

func (t *TL_messageEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEmpty))
	ec.Int(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_messageEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()

	return dc.err
}

func (t *TL_messageEmpty) String() string {
	return fmt.Sprintf("- messageEmpty#83e5de54\n-- id : %v\n", t.M_id)
}

// message#44f9b43d
type TL_message struct {
	M_classID         int32
	M_flags           TLObject
	M_out             TLObject
	M_mentioned       TLObject
	M_media_unread    TLObject
	M_silent          TLObject
	M_post            TLObject
	M_id              int32
	M_from_id         TLObject
	M_to_id           TLObject
	M_fwd_from        TLObject
	M_via_bot_id      TLObject
	M_reply_to_msg_id TLObject
	M_date            int32
	M_message         string
	M_media           TLObject
	M_reply_markup    TLObject
	M_entities        []TLObject
	M_views           TLObject
	M_edit_date       TLObject
	M_post_author     TLObject
	M_grouped_id      TLObject
}

func (t *TL_message) ClassID() int32 {
	return t.M_classID
}

func (t *TL_message) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_message) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_message) Set_out(M_out TLObject) {
	t.M_out = M_out
}

func (t *TL_message) Get_out() TLObject {
	return t.M_out
}

func (t *TL_message) Set_mentioned(M_mentioned TLObject) {
	t.M_mentioned = M_mentioned
}

func (t *TL_message) Get_mentioned() TLObject {
	return t.M_mentioned
}

func (t *TL_message) Set_media_unread(M_media_unread TLObject) {
	t.M_media_unread = M_media_unread
}

func (t *TL_message) Get_media_unread() TLObject {
	return t.M_media_unread
}

func (t *TL_message) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_message) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_message) Set_post(M_post TLObject) {
	t.M_post = M_post
}

func (t *TL_message) Get_post() TLObject {
	return t.M_post
}

func (t *TL_message) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_message) Get_id() int32 {
	return t.M_id
}

func (t *TL_message) Set_from_id(M_from_id TLObject) {
	t.M_from_id = M_from_id
}

func (t *TL_message) Get_from_id() TLObject {
	return t.M_from_id
}

func (t *TL_message) Set_to_id(M_to_id TLObject) {
	t.M_to_id = M_to_id
}

func (t *TL_message) Get_to_id() TLObject {
	return t.M_to_id
}

func (t *TL_message) Set_fwd_from(M_fwd_from TLObject) {
	t.M_fwd_from = M_fwd_from
}

func (t *TL_message) Get_fwd_from() TLObject {
	return t.M_fwd_from
}

func (t *TL_message) Set_via_bot_id(M_via_bot_id TLObject) {
	t.M_via_bot_id = M_via_bot_id
}

func (t *TL_message) Get_via_bot_id() TLObject {
	return t.M_via_bot_id
}

func (t *TL_message) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_message) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_message) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_message) Get_date() int32 {
	return t.M_date
}

func (t *TL_message) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_message) Get_message() string {
	return t.M_message
}

func (t *TL_message) Set_media(M_media TLObject) {
	t.M_media = M_media
}

func (t *TL_message) Get_media() TLObject {
	return t.M_media
}

func (t *TL_message) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_message) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func (t *TL_message) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_message) Get_entities() []TLObject {
	return t.M_entities
}

func (t *TL_message) Set_views(M_views TLObject) {
	t.M_views = M_views
}

func (t *TL_message) Get_views() TLObject {
	return t.M_views
}

func (t *TL_message) Set_edit_date(M_edit_date TLObject) {
	t.M_edit_date = M_edit_date
}

func (t *TL_message) Get_edit_date() TLObject {
	return t.M_edit_date
}

func (t *TL_message) Set_post_author(M_post_author TLObject) {
	t.M_post_author = M_post_author
}

func (t *TL_message) Get_post_author() TLObject {
	return t.M_post_author
}

func (t *TL_message) Set_grouped_id(M_grouped_id TLObject) {
	t.M_grouped_id = M_grouped_id
}

func (t *TL_message) Get_grouped_id() TLObject {
	return t.M_grouped_id
}

func New_TL_message() *TL_message {
	return &TL_message{
		M_classID: TL_CLASS_message,
	}
}

func (t *TL_message) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_message))
	ec.TLObject(t.Get_out())
	ec.TLObject(t.Get_mentioned())
	ec.TLObject(t.Get_media_unread())
	ec.TLObject(t.Get_silent())
	ec.TLObject(t.Get_post())
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_from_id())
	ec.TLObject(t.Get_to_id())
	ec.TLObject(t.Get_fwd_from())
	ec.TLObject(t.Get_via_bot_id())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.Int(t.Get_date())
	ec.String(t.Get_message())
	ec.TLObject(t.Get_media())
	ec.TLObject(t.Get_reply_markup())
	ec.Vector(t.Get_entities())
	ec.TLObject(t.Get_views())
	ec.TLObject(t.Get_edit_date())
	ec.TLObject(t.Get_post_author())
	ec.TLObject(t.Get_grouped_id())

	return ec.GetBuffer()
}

func (t *TL_message) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_out = dc.TLObject()
	t.M_mentioned = dc.TLObject()
	t.M_media_unread = dc.TLObject()
	t.M_silent = dc.TLObject()
	t.M_post = dc.TLObject()
	t.M_id = dc.Int()
	t.M_from_id = dc.TLObject()
	t.M_to_id = dc.TLObject()
	t.M_fwd_from = dc.TLObject()
	t.M_via_bot_id = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_date = dc.Int()
	t.M_message = dc.String()
	t.M_media = dc.TLObject()
	t.M_reply_markup = dc.TLObject()
	t.M_entities = dc.Vector()
	t.M_views = dc.TLObject()
	t.M_edit_date = dc.TLObject()
	t.M_post_author = dc.TLObject()
	t.M_grouped_id = dc.TLObject()

	return dc.err
}

func (t *TL_message) String() string {
	return fmt.Sprintf("- message#44f9b43d\n-- flags : %v\n-- out : %v\n-- mentioned : %v\n-- media_unread : %v\n-- silent : %v\n-- post : %v\n-- id : %v\n-- from_id : %v\n-- to_id : %v\n-- fwd_from : %v\n-- via_bot_id : %v\n-- reply_to_msg_id : %v\n-- date : %v\n-- message : %v\n-- media : %v\n-- reply_markup : %v\n-- entities : %v\n-- views : %v\n-- edit_date : %v\n-- post_author : %v\n-- grouped_id : %v\n", t.M_flags, t.M_out, t.M_mentioned, t.M_media_unread, t.M_silent, t.M_post, t.M_id, t.M_from_id, t.M_to_id, t.M_fwd_from, t.M_via_bot_id, t.M_reply_to_msg_id, t.M_date, t.M_message, t.M_media, t.M_reply_markup, t.M_entities, t.M_views, t.M_edit_date, t.M_post_author, t.M_grouped_id)
}

// messageService#9e19a1f6
type TL_messageService struct {
	M_classID         int32
	M_flags           TLObject
	M_out             TLObject
	M_mentioned       TLObject
	M_media_unread    TLObject
	M_silent          TLObject
	M_post            TLObject
	M_id              int32
	M_from_id         TLObject
	M_to_id           TLObject
	M_reply_to_msg_id TLObject
	M_date            int32
	M_action          TLObject
}

func (t *TL_messageService) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageService) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messageService) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messageService) Set_out(M_out TLObject) {
	t.M_out = M_out
}

func (t *TL_messageService) Get_out() TLObject {
	return t.M_out
}

func (t *TL_messageService) Set_mentioned(M_mentioned TLObject) {
	t.M_mentioned = M_mentioned
}

func (t *TL_messageService) Get_mentioned() TLObject {
	return t.M_mentioned
}

func (t *TL_messageService) Set_media_unread(M_media_unread TLObject) {
	t.M_media_unread = M_media_unread
}

func (t *TL_messageService) Get_media_unread() TLObject {
	return t.M_media_unread
}

func (t *TL_messageService) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_messageService) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_messageService) Set_post(M_post TLObject) {
	t.M_post = M_post
}

func (t *TL_messageService) Get_post() TLObject {
	return t.M_post
}

func (t *TL_messageService) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_messageService) Get_id() int32 {
	return t.M_id
}

func (t *TL_messageService) Set_from_id(M_from_id TLObject) {
	t.M_from_id = M_from_id
}

func (t *TL_messageService) Get_from_id() TLObject {
	return t.M_from_id
}

func (t *TL_messageService) Set_to_id(M_to_id TLObject) {
	t.M_to_id = M_to_id
}

func (t *TL_messageService) Get_to_id() TLObject {
	return t.M_to_id
}

func (t *TL_messageService) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_messageService) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_messageService) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_messageService) Get_date() int32 {
	return t.M_date
}

func (t *TL_messageService) Set_action(M_action TLObject) {
	t.M_action = M_action
}

func (t *TL_messageService) Get_action() TLObject {
	return t.M_action
}

func New_TL_messageService() *TL_messageService {
	return &TL_messageService{
		M_classID: TL_CLASS_messageService,
	}
}

func (t *TL_messageService) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageService))
	ec.TLObject(t.Get_out())
	ec.TLObject(t.Get_mentioned())
	ec.TLObject(t.Get_media_unread())
	ec.TLObject(t.Get_silent())
	ec.TLObject(t.Get_post())
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_from_id())
	ec.TLObject(t.Get_to_id())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_action())

	return ec.GetBuffer()
}

func (t *TL_messageService) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_out = dc.TLObject()
	t.M_mentioned = dc.TLObject()
	t.M_media_unread = dc.TLObject()
	t.M_silent = dc.TLObject()
	t.M_post = dc.TLObject()
	t.M_id = dc.Int()
	t.M_from_id = dc.TLObject()
	t.M_to_id = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_date = dc.Int()
	t.M_action = dc.TLObject()

	return dc.err
}

func (t *TL_messageService) String() string {
	return fmt.Sprintf("- messageService#9e19a1f6\n-- flags : %v\n-- out : %v\n-- mentioned : %v\n-- media_unread : %v\n-- silent : %v\n-- post : %v\n-- id : %v\n-- from_id : %v\n-- to_id : %v\n-- reply_to_msg_id : %v\n-- date : %v\n-- action : %v\n", t.M_flags, t.M_out, t.M_mentioned, t.M_media_unread, t.M_silent, t.M_post, t.M_id, t.M_from_id, t.M_to_id, t.M_reply_to_msg_id, t.M_date, t.M_action)
}

// messageMediaEmpty#3ded6320
type TL_messageMediaEmpty struct {
	M_classID int32
}

func (t *TL_messageMediaEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_messageMediaEmpty() *TL_messageMediaEmpty {
	return &TL_messageMediaEmpty{
		M_classID: TL_CLASS_messageMediaEmpty,
	}
}

func (t *TL_messageMediaEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaEmpty))

	return ec.GetBuffer()
}

func (t *TL_messageMediaEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_messageMediaEmpty) String() string {
	return fmt.Sprintf("- messageMediaEmpty#3ded6320\n")
}

// messageMediaPhoto#b5223b0f
type TL_messageMediaPhoto struct {
	M_classID     int32
	M_flags       TLObject
	M_photo       TLObject
	M_caption     TLObject
	M_ttl_seconds TLObject
}

func (t *TL_messageMediaPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageMediaPhoto) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messageMediaPhoto) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messageMediaPhoto) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_messageMediaPhoto) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_messageMediaPhoto) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_messageMediaPhoto) Get_caption() TLObject {
	return t.M_caption
}

func (t *TL_messageMediaPhoto) Set_ttl_seconds(M_ttl_seconds TLObject) {
	t.M_ttl_seconds = M_ttl_seconds
}

func (t *TL_messageMediaPhoto) Get_ttl_seconds() TLObject {
	return t.M_ttl_seconds
}

func New_TL_messageMediaPhoto() *TL_messageMediaPhoto {
	return &TL_messageMediaPhoto{
		M_classID: TL_CLASS_messageMediaPhoto,
	}
}

func (t *TL_messageMediaPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaPhoto))
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_caption())
	ec.TLObject(t.Get_ttl_seconds())

	return ec.GetBuffer()
}

func (t *TL_messageMediaPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_photo = dc.TLObject()
	t.M_caption = dc.TLObject()
	t.M_ttl_seconds = dc.TLObject()

	return dc.err
}

func (t *TL_messageMediaPhoto) String() string {
	return fmt.Sprintf("- messageMediaPhoto#b5223b0f\n-- flags : %v\n-- photo : %v\n-- caption : %v\n-- ttl_seconds : %v\n", t.M_flags, t.M_photo, t.M_caption, t.M_ttl_seconds)
}

// messageMediaGeo#56e0d474
type TL_messageMediaGeo struct {
	M_classID int32
	M_geo     TLObject
}

func (t *TL_messageMediaGeo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageMediaGeo) Set_geo(M_geo TLObject) {
	t.M_geo = M_geo
}

func (t *TL_messageMediaGeo) Get_geo() TLObject {
	return t.M_geo
}

func New_TL_messageMediaGeo() *TL_messageMediaGeo {
	return &TL_messageMediaGeo{
		M_classID: TL_CLASS_messageMediaGeo,
	}
}

func (t *TL_messageMediaGeo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaGeo))
	ec.TLObject(t.Get_geo())

	return ec.GetBuffer()
}

func (t *TL_messageMediaGeo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo = dc.TLObject()

	return dc.err
}

func (t *TL_messageMediaGeo) String() string {
	return fmt.Sprintf("- messageMediaGeo#56e0d474\n-- geo : %v\n", t.M_geo)
}

// messageMediaContact#5e7d2f39
type TL_messageMediaContact struct {
	M_classID      int32
	M_phone_number string
	M_first_name   string
	M_last_name    string
	M_user_id      int32
}

func (t *TL_messageMediaContact) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageMediaContact) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_messageMediaContact) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_messageMediaContact) Set_first_name(M_first_name string) {
	t.M_first_name = M_first_name
}

func (t *TL_messageMediaContact) Get_first_name() string {
	return t.M_first_name
}

func (t *TL_messageMediaContact) Set_last_name(M_last_name string) {
	t.M_last_name = M_last_name
}

func (t *TL_messageMediaContact) Get_last_name() string {
	return t.M_last_name
}

func (t *TL_messageMediaContact) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_messageMediaContact) Get_user_id() int32 {
	return t.M_user_id
}

func New_TL_messageMediaContact() *TL_messageMediaContact {
	return &TL_messageMediaContact{
		M_classID: TL_CLASS_messageMediaContact,
	}
}

func (t *TL_messageMediaContact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaContact))
	ec.String(t.Get_phone_number())
	ec.String(t.Get_first_name())
	ec.String(t.Get_last_name())
	ec.Int(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_messageMediaContact) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_first_name = dc.String()
	t.M_last_name = dc.String()
	t.M_user_id = dc.Int()

	return dc.err
}

func (t *TL_messageMediaContact) String() string {
	return fmt.Sprintf("- messageMediaContact#5e7d2f39\n-- phone_number : %v\n-- first_name : %v\n-- last_name : %v\n-- user_id : %v\n", t.M_phone_number, t.M_first_name, t.M_last_name, t.M_user_id)
}

// messageMediaUnsupported#9f84f49e
type TL_messageMediaUnsupported struct {
	M_classID int32
}

func (t *TL_messageMediaUnsupported) ClassID() int32 {
	return t.M_classID
}

func New_TL_messageMediaUnsupported() *TL_messageMediaUnsupported {
	return &TL_messageMediaUnsupported{
		M_classID: TL_CLASS_messageMediaUnsupported,
	}
}

func (t *TL_messageMediaUnsupported) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaUnsupported))

	return ec.GetBuffer()
}

func (t *TL_messageMediaUnsupported) Decode(b []byte) error {
	return nil
}

func (t *TL_messageMediaUnsupported) String() string {
	return fmt.Sprintf("- messageMediaUnsupported#9f84f49e\n")
}

// messageMediaDocument#7c4414d3
type TL_messageMediaDocument struct {
	M_classID     int32
	M_flags       TLObject
	M_document    TLObject
	M_caption     TLObject
	M_ttl_seconds TLObject
}

func (t *TL_messageMediaDocument) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageMediaDocument) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messageMediaDocument) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messageMediaDocument) Set_document(M_document TLObject) {
	t.M_document = M_document
}

func (t *TL_messageMediaDocument) Get_document() TLObject {
	return t.M_document
}

func (t *TL_messageMediaDocument) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_messageMediaDocument) Get_caption() TLObject {
	return t.M_caption
}

func (t *TL_messageMediaDocument) Set_ttl_seconds(M_ttl_seconds TLObject) {
	t.M_ttl_seconds = M_ttl_seconds
}

func (t *TL_messageMediaDocument) Get_ttl_seconds() TLObject {
	return t.M_ttl_seconds
}

func New_TL_messageMediaDocument() *TL_messageMediaDocument {
	return &TL_messageMediaDocument{
		M_classID: TL_CLASS_messageMediaDocument,
	}
}

func (t *TL_messageMediaDocument) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaDocument))
	ec.TLObject(t.Get_document())
	ec.TLObject(t.Get_caption())
	ec.TLObject(t.Get_ttl_seconds())

	return ec.GetBuffer()
}

func (t *TL_messageMediaDocument) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_document = dc.TLObject()
	t.M_caption = dc.TLObject()
	t.M_ttl_seconds = dc.TLObject()

	return dc.err
}

func (t *TL_messageMediaDocument) String() string {
	return fmt.Sprintf("- messageMediaDocument#7c4414d3\n-- flags : %v\n-- document : %v\n-- caption : %v\n-- ttl_seconds : %v\n", t.M_flags, t.M_document, t.M_caption, t.M_ttl_seconds)
}

// messageMediaWebPage#a32dd600
type TL_messageMediaWebPage struct {
	M_classID int32
	M_webpage TLObject
}

func (t *TL_messageMediaWebPage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageMediaWebPage) Set_webpage(M_webpage TLObject) {
	t.M_webpage = M_webpage
}

func (t *TL_messageMediaWebPage) Get_webpage() TLObject {
	return t.M_webpage
}

func New_TL_messageMediaWebPage() *TL_messageMediaWebPage {
	return &TL_messageMediaWebPage{
		M_classID: TL_CLASS_messageMediaWebPage,
	}
}

func (t *TL_messageMediaWebPage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaWebPage))
	ec.TLObject(t.Get_webpage())

	return ec.GetBuffer()
}

func (t *TL_messageMediaWebPage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_webpage = dc.TLObject()

	return dc.err
}

func (t *TL_messageMediaWebPage) String() string {
	return fmt.Sprintf("- messageMediaWebPage#a32dd600\n-- webpage : %v\n", t.M_webpage)
}

// messageMediaVenue#2ec0533f
type TL_messageMediaVenue struct {
	M_classID    int32
	M_geo        TLObject
	M_title      string
	M_address    string
	M_provider   string
	M_venue_id   string
	M_venue_type string
}

func (t *TL_messageMediaVenue) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageMediaVenue) Set_geo(M_geo TLObject) {
	t.M_geo = M_geo
}

func (t *TL_messageMediaVenue) Get_geo() TLObject {
	return t.M_geo
}

func (t *TL_messageMediaVenue) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_messageMediaVenue) Get_title() string {
	return t.M_title
}

func (t *TL_messageMediaVenue) Set_address(M_address string) {
	t.M_address = M_address
}

func (t *TL_messageMediaVenue) Get_address() string {
	return t.M_address
}

func (t *TL_messageMediaVenue) Set_provider(M_provider string) {
	t.M_provider = M_provider
}

func (t *TL_messageMediaVenue) Get_provider() string {
	return t.M_provider
}

func (t *TL_messageMediaVenue) Set_venue_id(M_venue_id string) {
	t.M_venue_id = M_venue_id
}

func (t *TL_messageMediaVenue) Get_venue_id() string {
	return t.M_venue_id
}

func (t *TL_messageMediaVenue) Set_venue_type(M_venue_type string) {
	t.M_venue_type = M_venue_type
}

func (t *TL_messageMediaVenue) Get_venue_type() string {
	return t.M_venue_type
}

func New_TL_messageMediaVenue() *TL_messageMediaVenue {
	return &TL_messageMediaVenue{
		M_classID: TL_CLASS_messageMediaVenue,
	}
}

func (t *TL_messageMediaVenue) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaVenue))
	ec.TLObject(t.Get_geo())
	ec.String(t.Get_title())
	ec.String(t.Get_address())
	ec.String(t.Get_provider())
	ec.String(t.Get_venue_id())
	ec.String(t.Get_venue_type())

	return ec.GetBuffer()
}

func (t *TL_messageMediaVenue) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo = dc.TLObject()
	t.M_title = dc.String()
	t.M_address = dc.String()
	t.M_provider = dc.String()
	t.M_venue_id = dc.String()
	t.M_venue_type = dc.String()

	return dc.err
}

func (t *TL_messageMediaVenue) String() string {
	return fmt.Sprintf("- messageMediaVenue#2ec0533f\n-- geo : %v\n-- title : %v\n-- address : %v\n-- provider : %v\n-- venue_id : %v\n-- venue_type : %v\n", t.M_geo, t.M_title, t.M_address, t.M_provider, t.M_venue_id, t.M_venue_type)
}

// messageMediaGame#fdb19008
type TL_messageMediaGame struct {
	M_classID int32
	M_game    TLObject
}

func (t *TL_messageMediaGame) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageMediaGame) Set_game(M_game TLObject) {
	t.M_game = M_game
}

func (t *TL_messageMediaGame) Get_game() TLObject {
	return t.M_game
}

func New_TL_messageMediaGame() *TL_messageMediaGame {
	return &TL_messageMediaGame{
		M_classID: TL_CLASS_messageMediaGame,
	}
}

func (t *TL_messageMediaGame) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaGame))
	ec.TLObject(t.Get_game())

	return ec.GetBuffer()
}

func (t *TL_messageMediaGame) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_game = dc.TLObject()

	return dc.err
}

func (t *TL_messageMediaGame) String() string {
	return fmt.Sprintf("- messageMediaGame#fdb19008\n-- game : %v\n", t.M_game)
}

// messageMediaInvoice#84551347
type TL_messageMediaInvoice struct {
	M_classID                    int32
	M_flags                      TLObject
	M_shipping_address_requested TLObject
	M_test                       TLObject
	M_title                      string
	M_description                string
	M_photo                      TLObject
	M_receipt_msg_id             TLObject
	M_currency                   string
	M_total_amount               int64
	M_start_param                string
}

func (t *TL_messageMediaInvoice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageMediaInvoice) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messageMediaInvoice) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messageMediaInvoice) Set_shipping_address_requested(M_shipping_address_requested TLObject) {
	t.M_shipping_address_requested = M_shipping_address_requested
}

func (t *TL_messageMediaInvoice) Get_shipping_address_requested() TLObject {
	return t.M_shipping_address_requested
}

func (t *TL_messageMediaInvoice) Set_test(M_test TLObject) {
	t.M_test = M_test
}

func (t *TL_messageMediaInvoice) Get_test() TLObject {
	return t.M_test
}

func (t *TL_messageMediaInvoice) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_messageMediaInvoice) Get_title() string {
	return t.M_title
}

func (t *TL_messageMediaInvoice) Set_description(M_description string) {
	t.M_description = M_description
}

func (t *TL_messageMediaInvoice) Get_description() string {
	return t.M_description
}

func (t *TL_messageMediaInvoice) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_messageMediaInvoice) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_messageMediaInvoice) Set_receipt_msg_id(M_receipt_msg_id TLObject) {
	t.M_receipt_msg_id = M_receipt_msg_id
}

func (t *TL_messageMediaInvoice) Get_receipt_msg_id() TLObject {
	return t.M_receipt_msg_id
}

func (t *TL_messageMediaInvoice) Set_currency(M_currency string) {
	t.M_currency = M_currency
}

func (t *TL_messageMediaInvoice) Get_currency() string {
	return t.M_currency
}

func (t *TL_messageMediaInvoice) Set_total_amount(M_total_amount int64) {
	t.M_total_amount = M_total_amount
}

func (t *TL_messageMediaInvoice) Get_total_amount() int64 {
	return t.M_total_amount
}

func (t *TL_messageMediaInvoice) Set_start_param(M_start_param string) {
	t.M_start_param = M_start_param
}

func (t *TL_messageMediaInvoice) Get_start_param() string {
	return t.M_start_param
}

func New_TL_messageMediaInvoice() *TL_messageMediaInvoice {
	return &TL_messageMediaInvoice{
		M_classID: TL_CLASS_messageMediaInvoice,
	}
}

func (t *TL_messageMediaInvoice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaInvoice))
	ec.TLObject(t.Get_shipping_address_requested())
	ec.TLObject(t.Get_test())
	ec.String(t.Get_title())
	ec.String(t.Get_description())
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_receipt_msg_id())
	ec.String(t.Get_currency())
	ec.Long(t.Get_total_amount())
	ec.String(t.Get_start_param())

	return ec.GetBuffer()
}

func (t *TL_messageMediaInvoice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_shipping_address_requested = dc.TLObject()
	t.M_test = dc.TLObject()
	t.M_title = dc.String()
	t.M_description = dc.String()
	t.M_photo = dc.TLObject()
	t.M_receipt_msg_id = dc.TLObject()
	t.M_currency = dc.String()
	t.M_total_amount = dc.Long()
	t.M_start_param = dc.String()

	return dc.err
}

func (t *TL_messageMediaInvoice) String() string {
	return fmt.Sprintf("- messageMediaInvoice#84551347\n-- flags : %v\n-- shipping_address_requested : %v\n-- test : %v\n-- title : %v\n-- description : %v\n-- photo : %v\n-- receipt_msg_id : %v\n-- currency : %v\n-- total_amount : %v\n-- start_param : %v\n", t.M_flags, t.M_shipping_address_requested, t.M_test, t.M_title, t.M_description, t.M_photo, t.M_receipt_msg_id, t.M_currency, t.M_total_amount, t.M_start_param)
}

// messageMediaGeoLive#7c3c2609
type TL_messageMediaGeoLive struct {
	M_classID int32
	M_geo     TLObject
	M_period  int32
}

func (t *TL_messageMediaGeoLive) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageMediaGeoLive) Set_geo(M_geo TLObject) {
	t.M_geo = M_geo
}

func (t *TL_messageMediaGeoLive) Get_geo() TLObject {
	return t.M_geo
}

func (t *TL_messageMediaGeoLive) Set_period(M_period int32) {
	t.M_period = M_period
}

func (t *TL_messageMediaGeoLive) Get_period() int32 {
	return t.M_period
}

func New_TL_messageMediaGeoLive() *TL_messageMediaGeoLive {
	return &TL_messageMediaGeoLive{
		M_classID: TL_CLASS_messageMediaGeoLive,
	}
}

func (t *TL_messageMediaGeoLive) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageMediaGeoLive))
	ec.TLObject(t.Get_geo())
	ec.Int(t.Get_period())

	return ec.GetBuffer()
}

func (t *TL_messageMediaGeoLive) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo = dc.TLObject()
	t.M_period = dc.Int()

	return dc.err
}

func (t *TL_messageMediaGeoLive) String() string {
	return fmt.Sprintf("- messageMediaGeoLive#7c3c2609\n-- geo : %v\n-- period : %v\n", t.M_geo, t.M_period)
}

// messageActionEmpty#b6aef7b0
type TL_messageActionEmpty struct {
	M_classID int32
}

func (t *TL_messageActionEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_messageActionEmpty() *TL_messageActionEmpty {
	return &TL_messageActionEmpty{
		M_classID: TL_CLASS_messageActionEmpty,
	}
}

func (t *TL_messageActionEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionEmpty))

	return ec.GetBuffer()
}

func (t *TL_messageActionEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_messageActionEmpty) String() string {
	return fmt.Sprintf("- messageActionEmpty#b6aef7b0\n")
}

// messageActionChatCreate#a6638b9a
type TL_messageActionChatCreate struct {
	M_classID int32
	M_title   string
	M_users   []int32
}

func (t *TL_messageActionChatCreate) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionChatCreate) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_messageActionChatCreate) Get_title() string {
	return t.M_title
}

func (t *TL_messageActionChatCreate) Set_users(M_users []int32) {
	t.M_users = M_users
}

func (t *TL_messageActionChatCreate) Get_users() []int32 {
	return t.M_users
}

func New_TL_messageActionChatCreate() *TL_messageActionChatCreate {
	return &TL_messageActionChatCreate{
		M_classID: TL_CLASS_messageActionChatCreate,
	}
}

func (t *TL_messageActionChatCreate) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChatCreate))
	ec.String(t.Get_title())
	ec.VectorInt(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messageActionChatCreate) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_title = dc.String()
	t.M_users = dc.VectorInt()

	return dc.err
}

func (t *TL_messageActionChatCreate) String() string {
	return fmt.Sprintf("- messageActionChatCreate#a6638b9a\n-- title : %v\n-- users : %v\n", t.M_title, t.M_users)
}

// messageActionChatEditTitle#b5a1ce5a
type TL_messageActionChatEditTitle struct {
	M_classID int32
	M_title   string
}

func (t *TL_messageActionChatEditTitle) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionChatEditTitle) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_messageActionChatEditTitle) Get_title() string {
	return t.M_title
}

func New_TL_messageActionChatEditTitle() *TL_messageActionChatEditTitle {
	return &TL_messageActionChatEditTitle{
		M_classID: TL_CLASS_messageActionChatEditTitle,
	}
}

func (t *TL_messageActionChatEditTitle) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChatEditTitle))
	ec.String(t.Get_title())

	return ec.GetBuffer()
}

func (t *TL_messageActionChatEditTitle) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_title = dc.String()

	return dc.err
}

func (t *TL_messageActionChatEditTitle) String() string {
	return fmt.Sprintf("- messageActionChatEditTitle#b5a1ce5a\n-- title : %v\n", t.M_title)
}

// messageActionChatEditPhoto#7fcb13a8
type TL_messageActionChatEditPhoto struct {
	M_classID int32
	M_photo   TLObject
}

func (t *TL_messageActionChatEditPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionChatEditPhoto) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_messageActionChatEditPhoto) Get_photo() TLObject {
	return t.M_photo
}

func New_TL_messageActionChatEditPhoto() *TL_messageActionChatEditPhoto {
	return &TL_messageActionChatEditPhoto{
		M_classID: TL_CLASS_messageActionChatEditPhoto,
	}
}

func (t *TL_messageActionChatEditPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChatEditPhoto))
	ec.TLObject(t.Get_photo())

	return ec.GetBuffer()
}

func (t *TL_messageActionChatEditPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_photo = dc.TLObject()

	return dc.err
}

func (t *TL_messageActionChatEditPhoto) String() string {
	return fmt.Sprintf("- messageActionChatEditPhoto#7fcb13a8\n-- photo : %v\n", t.M_photo)
}

// messageActionChatDeletePhoto#95e3fbef
type TL_messageActionChatDeletePhoto struct {
	M_classID int32
}

func (t *TL_messageActionChatDeletePhoto) ClassID() int32 {
	return t.M_classID
}

func New_TL_messageActionChatDeletePhoto() *TL_messageActionChatDeletePhoto {
	return &TL_messageActionChatDeletePhoto{
		M_classID: TL_CLASS_messageActionChatDeletePhoto,
	}
}

func (t *TL_messageActionChatDeletePhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChatDeletePhoto))

	return ec.GetBuffer()
}

func (t *TL_messageActionChatDeletePhoto) Decode(b []byte) error {
	return nil
}

func (t *TL_messageActionChatDeletePhoto) String() string {
	return fmt.Sprintf("- messageActionChatDeletePhoto#95e3fbef\n")
}

// messageActionChatAddUser#488a7337
type TL_messageActionChatAddUser struct {
	M_classID int32
	M_users   []int32
}

func (t *TL_messageActionChatAddUser) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionChatAddUser) Set_users(M_users []int32) {
	t.M_users = M_users
}

func (t *TL_messageActionChatAddUser) Get_users() []int32 {
	return t.M_users
}

func New_TL_messageActionChatAddUser() *TL_messageActionChatAddUser {
	return &TL_messageActionChatAddUser{
		M_classID: TL_CLASS_messageActionChatAddUser,
	}
}

func (t *TL_messageActionChatAddUser) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChatAddUser))
	ec.VectorInt(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messageActionChatAddUser) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_users = dc.VectorInt()

	return dc.err
}

func (t *TL_messageActionChatAddUser) String() string {
	return fmt.Sprintf("- messageActionChatAddUser#488a7337\n-- users : %v\n", t.M_users)
}

// messageActionChatDeleteUser#b2ae9b0c
type TL_messageActionChatDeleteUser struct {
	M_classID int32
	M_user_id int32
}

func (t *TL_messageActionChatDeleteUser) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionChatDeleteUser) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_messageActionChatDeleteUser) Get_user_id() int32 {
	return t.M_user_id
}

func New_TL_messageActionChatDeleteUser() *TL_messageActionChatDeleteUser {
	return &TL_messageActionChatDeleteUser{
		M_classID: TL_CLASS_messageActionChatDeleteUser,
	}
}

func (t *TL_messageActionChatDeleteUser) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChatDeleteUser))
	ec.Int(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_messageActionChatDeleteUser) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()

	return dc.err
}

func (t *TL_messageActionChatDeleteUser) String() string {
	return fmt.Sprintf("- messageActionChatDeleteUser#b2ae9b0c\n-- user_id : %v\n", t.M_user_id)
}

// messageActionChatJoinedByLink#f89cf5e8
type TL_messageActionChatJoinedByLink struct {
	M_classID    int32
	M_inviter_id int32
}

func (t *TL_messageActionChatJoinedByLink) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionChatJoinedByLink) Set_inviter_id(M_inviter_id int32) {
	t.M_inviter_id = M_inviter_id
}

func (t *TL_messageActionChatJoinedByLink) Get_inviter_id() int32 {
	return t.M_inviter_id
}

func New_TL_messageActionChatJoinedByLink() *TL_messageActionChatJoinedByLink {
	return &TL_messageActionChatJoinedByLink{
		M_classID: TL_CLASS_messageActionChatJoinedByLink,
	}
}

func (t *TL_messageActionChatJoinedByLink) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChatJoinedByLink))
	ec.Int(t.Get_inviter_id())

	return ec.GetBuffer()
}

func (t *TL_messageActionChatJoinedByLink) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_inviter_id = dc.Int()

	return dc.err
}

func (t *TL_messageActionChatJoinedByLink) String() string {
	return fmt.Sprintf("- messageActionChatJoinedByLink#f89cf5e8\n-- inviter_id : %v\n", t.M_inviter_id)
}

// messageActionChannelCreate#95d2ac92
type TL_messageActionChannelCreate struct {
	M_classID int32
	M_title   string
}

func (t *TL_messageActionChannelCreate) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionChannelCreate) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_messageActionChannelCreate) Get_title() string {
	return t.M_title
}

func New_TL_messageActionChannelCreate() *TL_messageActionChannelCreate {
	return &TL_messageActionChannelCreate{
		M_classID: TL_CLASS_messageActionChannelCreate,
	}
}

func (t *TL_messageActionChannelCreate) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChannelCreate))
	ec.String(t.Get_title())

	return ec.GetBuffer()
}

func (t *TL_messageActionChannelCreate) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_title = dc.String()

	return dc.err
}

func (t *TL_messageActionChannelCreate) String() string {
	return fmt.Sprintf("- messageActionChannelCreate#95d2ac92\n-- title : %v\n", t.M_title)
}

// messageActionChatMigrateTo#51bdb021
type TL_messageActionChatMigrateTo struct {
	M_classID    int32
	M_channel_id int32
}

func (t *TL_messageActionChatMigrateTo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionChatMigrateTo) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_messageActionChatMigrateTo) Get_channel_id() int32 {
	return t.M_channel_id
}

func New_TL_messageActionChatMigrateTo() *TL_messageActionChatMigrateTo {
	return &TL_messageActionChatMigrateTo{
		M_classID: TL_CLASS_messageActionChatMigrateTo,
	}
}

func (t *TL_messageActionChatMigrateTo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChatMigrateTo))
	ec.Int(t.Get_channel_id())

	return ec.GetBuffer()
}

func (t *TL_messageActionChatMigrateTo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()

	return dc.err
}

func (t *TL_messageActionChatMigrateTo) String() string {
	return fmt.Sprintf("- messageActionChatMigrateTo#51bdb021\n-- channel_id : %v\n", t.M_channel_id)
}

// messageActionChannelMigrateFrom#b055eaee
type TL_messageActionChannelMigrateFrom struct {
	M_classID int32
	M_title   string
	M_chat_id int32
}

func (t *TL_messageActionChannelMigrateFrom) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionChannelMigrateFrom) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_messageActionChannelMigrateFrom) Get_title() string {
	return t.M_title
}

func (t *TL_messageActionChannelMigrateFrom) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messageActionChannelMigrateFrom) Get_chat_id() int32 {
	return t.M_chat_id
}

func New_TL_messageActionChannelMigrateFrom() *TL_messageActionChannelMigrateFrom {
	return &TL_messageActionChannelMigrateFrom{
		M_classID: TL_CLASS_messageActionChannelMigrateFrom,
	}
}

func (t *TL_messageActionChannelMigrateFrom) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionChannelMigrateFrom))
	ec.String(t.Get_title())
	ec.Int(t.Get_chat_id())

	return ec.GetBuffer()
}

func (t *TL_messageActionChannelMigrateFrom) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_title = dc.String()
	t.M_chat_id = dc.Int()

	return dc.err
}

func (t *TL_messageActionChannelMigrateFrom) String() string {
	return fmt.Sprintf("- messageActionChannelMigrateFrom#b055eaee\n-- title : %v\n-- chat_id : %v\n", t.M_title, t.M_chat_id)
}

// messageActionPinMessage#94bd38ed
type TL_messageActionPinMessage struct {
	M_classID int32
}

func (t *TL_messageActionPinMessage) ClassID() int32 {
	return t.M_classID
}

func New_TL_messageActionPinMessage() *TL_messageActionPinMessage {
	return &TL_messageActionPinMessage{
		M_classID: TL_CLASS_messageActionPinMessage,
	}
}

func (t *TL_messageActionPinMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionPinMessage))

	return ec.GetBuffer()
}

func (t *TL_messageActionPinMessage) Decode(b []byte) error {
	return nil
}

func (t *TL_messageActionPinMessage) String() string {
	return fmt.Sprintf("- messageActionPinMessage#94bd38ed\n")
}

// messageActionHistoryClear#9fbab604
type TL_messageActionHistoryClear struct {
	M_classID int32
}

func (t *TL_messageActionHistoryClear) ClassID() int32 {
	return t.M_classID
}

func New_TL_messageActionHistoryClear() *TL_messageActionHistoryClear {
	return &TL_messageActionHistoryClear{
		M_classID: TL_CLASS_messageActionHistoryClear,
	}
}

func (t *TL_messageActionHistoryClear) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionHistoryClear))

	return ec.GetBuffer()
}

func (t *TL_messageActionHistoryClear) Decode(b []byte) error {
	return nil
}

func (t *TL_messageActionHistoryClear) String() string {
	return fmt.Sprintf("- messageActionHistoryClear#9fbab604\n")
}

// messageActionGameScore#92a72876
type TL_messageActionGameScore struct {
	M_classID int32
	M_game_id int64
	M_score   int32
}

func (t *TL_messageActionGameScore) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionGameScore) Set_game_id(M_game_id int64) {
	t.M_game_id = M_game_id
}

func (t *TL_messageActionGameScore) Get_game_id() int64 {
	return t.M_game_id
}

func (t *TL_messageActionGameScore) Set_score(M_score int32) {
	t.M_score = M_score
}

func (t *TL_messageActionGameScore) Get_score() int32 {
	return t.M_score
}

func New_TL_messageActionGameScore() *TL_messageActionGameScore {
	return &TL_messageActionGameScore{
		M_classID: TL_CLASS_messageActionGameScore,
	}
}

func (t *TL_messageActionGameScore) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionGameScore))
	ec.Long(t.Get_game_id())
	ec.Int(t.Get_score())

	return ec.GetBuffer()
}

func (t *TL_messageActionGameScore) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_game_id = dc.Long()
	t.M_score = dc.Int()

	return dc.err
}

func (t *TL_messageActionGameScore) String() string {
	return fmt.Sprintf("- messageActionGameScore#92a72876\n-- game_id : %v\n-- score : %v\n", t.M_game_id, t.M_score)
}

// messageActionPaymentSentMe#8f31b327
type TL_messageActionPaymentSentMe struct {
	M_classID            int32
	M_flags              TLObject
	M_currency           string
	M_total_amount       int64
	M_payload            TLObject
	M_info               TLObject
	M_shipping_option_id TLObject
	M_charge             TLObject
}

func (t *TL_messageActionPaymentSentMe) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionPaymentSentMe) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messageActionPaymentSentMe) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messageActionPaymentSentMe) Set_currency(M_currency string) {
	t.M_currency = M_currency
}

func (t *TL_messageActionPaymentSentMe) Get_currency() string {
	return t.M_currency
}

func (t *TL_messageActionPaymentSentMe) Set_total_amount(M_total_amount int64) {
	t.M_total_amount = M_total_amount
}

func (t *TL_messageActionPaymentSentMe) Get_total_amount() int64 {
	return t.M_total_amount
}

func (t *TL_messageActionPaymentSentMe) Set_payload(M_payload TLObject) {
	t.M_payload = M_payload
}

func (t *TL_messageActionPaymentSentMe) Get_payload() TLObject {
	return t.M_payload
}

func (t *TL_messageActionPaymentSentMe) Set_info(M_info TLObject) {
	t.M_info = M_info
}

func (t *TL_messageActionPaymentSentMe) Get_info() TLObject {
	return t.M_info
}

func (t *TL_messageActionPaymentSentMe) Set_shipping_option_id(M_shipping_option_id TLObject) {
	t.M_shipping_option_id = M_shipping_option_id
}

func (t *TL_messageActionPaymentSentMe) Get_shipping_option_id() TLObject {
	return t.M_shipping_option_id
}

func (t *TL_messageActionPaymentSentMe) Set_charge(M_charge TLObject) {
	t.M_charge = M_charge
}

func (t *TL_messageActionPaymentSentMe) Get_charge() TLObject {
	return t.M_charge
}

func New_TL_messageActionPaymentSentMe() *TL_messageActionPaymentSentMe {
	return &TL_messageActionPaymentSentMe{
		M_classID: TL_CLASS_messageActionPaymentSentMe,
	}
}

func (t *TL_messageActionPaymentSentMe) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionPaymentSentMe))
	ec.String(t.Get_currency())
	ec.Long(t.Get_total_amount())
	ec.TLObject(t.Get_payload())
	ec.TLObject(t.Get_info())
	ec.TLObject(t.Get_shipping_option_id())
	ec.TLObject(t.Get_charge())

	return ec.GetBuffer()
}

func (t *TL_messageActionPaymentSentMe) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_currency = dc.String()
	t.M_total_amount = dc.Long()
	t.M_payload = dc.TLObject()
	t.M_info = dc.TLObject()
	t.M_shipping_option_id = dc.TLObject()
	t.M_charge = dc.TLObject()

	return dc.err
}

func (t *TL_messageActionPaymentSentMe) String() string {
	return fmt.Sprintf("- messageActionPaymentSentMe#8f31b327\n-- flags : %v\n-- currency : %v\n-- total_amount : %v\n-- payload : %v\n-- info : %v\n-- shipping_option_id : %v\n-- charge : %v\n", t.M_flags, t.M_currency, t.M_total_amount, t.M_payload, t.M_info, t.M_shipping_option_id, t.M_charge)
}

// messageActionPaymentSent#40699cd0
type TL_messageActionPaymentSent struct {
	M_classID      int32
	M_currency     string
	M_total_amount int64
}

func (t *TL_messageActionPaymentSent) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionPaymentSent) Set_currency(M_currency string) {
	t.M_currency = M_currency
}

func (t *TL_messageActionPaymentSent) Get_currency() string {
	return t.M_currency
}

func (t *TL_messageActionPaymentSent) Set_total_amount(M_total_amount int64) {
	t.M_total_amount = M_total_amount
}

func (t *TL_messageActionPaymentSent) Get_total_amount() int64 {
	return t.M_total_amount
}

func New_TL_messageActionPaymentSent() *TL_messageActionPaymentSent {
	return &TL_messageActionPaymentSent{
		M_classID: TL_CLASS_messageActionPaymentSent,
	}
}

func (t *TL_messageActionPaymentSent) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionPaymentSent))
	ec.String(t.Get_currency())
	ec.Long(t.Get_total_amount())

	return ec.GetBuffer()
}

func (t *TL_messageActionPaymentSent) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_currency = dc.String()
	t.M_total_amount = dc.Long()

	return dc.err
}

func (t *TL_messageActionPaymentSent) String() string {
	return fmt.Sprintf("- messageActionPaymentSent#40699cd0\n-- currency : %v\n-- total_amount : %v\n", t.M_currency, t.M_total_amount)
}

// messageActionPhoneCall#80e11a7f
type TL_messageActionPhoneCall struct {
	M_classID  int32
	M_flags    TLObject
	M_call_id  int64
	M_reason   TLObject
	M_duration TLObject
}

func (t *TL_messageActionPhoneCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionPhoneCall) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messageActionPhoneCall) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messageActionPhoneCall) Set_call_id(M_call_id int64) {
	t.M_call_id = M_call_id
}

func (t *TL_messageActionPhoneCall) Get_call_id() int64 {
	return t.M_call_id
}

func (t *TL_messageActionPhoneCall) Set_reason(M_reason TLObject) {
	t.M_reason = M_reason
}

func (t *TL_messageActionPhoneCall) Get_reason() TLObject {
	return t.M_reason
}

func (t *TL_messageActionPhoneCall) Set_duration(M_duration TLObject) {
	t.M_duration = M_duration
}

func (t *TL_messageActionPhoneCall) Get_duration() TLObject {
	return t.M_duration
}

func New_TL_messageActionPhoneCall() *TL_messageActionPhoneCall {
	return &TL_messageActionPhoneCall{
		M_classID: TL_CLASS_messageActionPhoneCall,
	}
}

func (t *TL_messageActionPhoneCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionPhoneCall))
	ec.Long(t.Get_call_id())
	ec.TLObject(t.Get_reason())
	ec.TLObject(t.Get_duration())

	return ec.GetBuffer()
}

func (t *TL_messageActionPhoneCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_call_id = dc.Long()
	t.M_reason = dc.TLObject()
	t.M_duration = dc.TLObject()

	return dc.err
}

func (t *TL_messageActionPhoneCall) String() string {
	return fmt.Sprintf("- messageActionPhoneCall#80e11a7f\n-- flags : %v\n-- call_id : %v\n-- reason : %v\n-- duration : %v\n", t.M_flags, t.M_call_id, t.M_reason, t.M_duration)
}

// messageActionScreenshotTaken#4792929b
type TL_messageActionScreenshotTaken struct {
	M_classID int32
}

func (t *TL_messageActionScreenshotTaken) ClassID() int32 {
	return t.M_classID
}

func New_TL_messageActionScreenshotTaken() *TL_messageActionScreenshotTaken {
	return &TL_messageActionScreenshotTaken{
		M_classID: TL_CLASS_messageActionScreenshotTaken,
	}
}

func (t *TL_messageActionScreenshotTaken) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionScreenshotTaken))

	return ec.GetBuffer()
}

func (t *TL_messageActionScreenshotTaken) Decode(b []byte) error {
	return nil
}

func (t *TL_messageActionScreenshotTaken) String() string {
	return fmt.Sprintf("- messageActionScreenshotTaken#4792929b\n")
}

// messageActionCustomAction#fae69f56
type TL_messageActionCustomAction struct {
	M_classID int32
	M_message string
}

func (t *TL_messageActionCustomAction) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageActionCustomAction) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_messageActionCustomAction) Get_message() string {
	return t.M_message
}

func New_TL_messageActionCustomAction() *TL_messageActionCustomAction {
	return &TL_messageActionCustomAction{
		M_classID: TL_CLASS_messageActionCustomAction,
	}
}

func (t *TL_messageActionCustomAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageActionCustomAction))
	ec.String(t.Get_message())

	return ec.GetBuffer()
}

func (t *TL_messageActionCustomAction) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.String()

	return dc.err
}

func (t *TL_messageActionCustomAction) String() string {
	return fmt.Sprintf("- messageActionCustomAction#fae69f56\n-- message : %v\n", t.M_message)
}

// dialog#e4def5db
type TL_dialog struct {
	M_classID               int32
	M_flags                 TLObject
	M_pinned                TLObject
	M_peer                  TLObject
	M_top_message           int32
	M_read_inbox_max_id     int32
	M_read_outbox_max_id    int32
	M_unread_count          int32
	M_unread_mentions_count int32
	M_notify_settings       TLObject
	M_pts                   TLObject
	M_draft                 TLObject
}

func (t *TL_dialog) ClassID() int32 {
	return t.M_classID
}

func (t *TL_dialog) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_dialog) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_dialog) Set_pinned(M_pinned TLObject) {
	t.M_pinned = M_pinned
}

func (t *TL_dialog) Get_pinned() TLObject {
	return t.M_pinned
}

func (t *TL_dialog) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_dialog) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_dialog) Set_top_message(M_top_message int32) {
	t.M_top_message = M_top_message
}

func (t *TL_dialog) Get_top_message() int32 {
	return t.M_top_message
}

func (t *TL_dialog) Set_read_inbox_max_id(M_read_inbox_max_id int32) {
	t.M_read_inbox_max_id = M_read_inbox_max_id
}

func (t *TL_dialog) Get_read_inbox_max_id() int32 {
	return t.M_read_inbox_max_id
}

func (t *TL_dialog) Set_read_outbox_max_id(M_read_outbox_max_id int32) {
	t.M_read_outbox_max_id = M_read_outbox_max_id
}

func (t *TL_dialog) Get_read_outbox_max_id() int32 {
	return t.M_read_outbox_max_id
}

func (t *TL_dialog) Set_unread_count(M_unread_count int32) {
	t.M_unread_count = M_unread_count
}

func (t *TL_dialog) Get_unread_count() int32 {
	return t.M_unread_count
}

func (t *TL_dialog) Set_unread_mentions_count(M_unread_mentions_count int32) {
	t.M_unread_mentions_count = M_unread_mentions_count
}

func (t *TL_dialog) Get_unread_mentions_count() int32 {
	return t.M_unread_mentions_count
}

func (t *TL_dialog) Set_notify_settings(M_notify_settings TLObject) {
	t.M_notify_settings = M_notify_settings
}

func (t *TL_dialog) Get_notify_settings() TLObject {
	return t.M_notify_settings
}

func (t *TL_dialog) Set_pts(M_pts TLObject) {
	t.M_pts = M_pts
}

func (t *TL_dialog) Get_pts() TLObject {
	return t.M_pts
}

func (t *TL_dialog) Set_draft(M_draft TLObject) {
	t.M_draft = M_draft
}

func (t *TL_dialog) Get_draft() TLObject {
	return t.M_draft
}

func New_TL_dialog() *TL_dialog {
	return &TL_dialog{
		M_classID: TL_CLASS_dialog,
	}
}

func (t *TL_dialog) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_dialog))
	ec.TLObject(t.Get_pinned())
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_top_message())
	ec.Int(t.Get_read_inbox_max_id())
	ec.Int(t.Get_read_outbox_max_id())
	ec.Int(t.Get_unread_count())
	ec.Int(t.Get_unread_mentions_count())
	ec.TLObject(t.Get_notify_settings())
	ec.TLObject(t.Get_pts())
	ec.TLObject(t.Get_draft())

	return ec.GetBuffer()
}

func (t *TL_dialog) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pinned = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_top_message = dc.Int()
	t.M_read_inbox_max_id = dc.Int()
	t.M_read_outbox_max_id = dc.Int()
	t.M_unread_count = dc.Int()
	t.M_unread_mentions_count = dc.Int()
	t.M_notify_settings = dc.TLObject()
	t.M_pts = dc.TLObject()
	t.M_draft = dc.TLObject()

	return dc.err
}

func (t *TL_dialog) String() string {
	return fmt.Sprintf("- dialog#e4def5db\n-- flags : %v\n-- pinned : %v\n-- peer : %v\n-- top_message : %v\n-- read_inbox_max_id : %v\n-- read_outbox_max_id : %v\n-- unread_count : %v\n-- unread_mentions_count : %v\n-- notify_settings : %v\n-- pts : %v\n-- draft : %v\n", t.M_flags, t.M_pinned, t.M_peer, t.M_top_message, t.M_read_inbox_max_id, t.M_read_outbox_max_id, t.M_unread_count, t.M_unread_mentions_count, t.M_notify_settings, t.M_pts, t.M_draft)
}

// photoEmpty#2331b22d
type TL_photoEmpty struct {
	M_classID int32
	M_id      int64
}

func (t *TL_photoEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photoEmpty) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_photoEmpty) Get_id() int64 {
	return t.M_id
}

func New_TL_photoEmpty() *TL_photoEmpty {
	return &TL_photoEmpty{
		M_classID: TL_CLASS_photoEmpty,
	}
}

func (t *TL_photoEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photoEmpty))
	ec.Long(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_photoEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()

	return dc.err
}

func (t *TL_photoEmpty) String() string {
	return fmt.Sprintf("- photoEmpty#2331b22d\n-- id : %v\n", t.M_id)
}

// photo#9288dd29
type TL_photo struct {
	M_classID      int32
	M_flags        TLObject
	M_has_stickers TLObject
	M_id           int64
	M_access_hash  int64
	M_date         int32
	M_sizes        []TLObject
}

func (t *TL_photo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_photo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_photo) Set_has_stickers(M_has_stickers TLObject) {
	t.M_has_stickers = M_has_stickers
}

func (t *TL_photo) Get_has_stickers() TLObject {
	return t.M_has_stickers
}

func (t *TL_photo) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_photo) Get_id() int64 {
	return t.M_id
}

func (t *TL_photo) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_photo) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_photo) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_photo) Get_date() int32 {
	return t.M_date
}

func (t *TL_photo) Set_sizes(M_sizes []TLObject) {
	t.M_sizes = M_sizes
}

func (t *TL_photo) Get_sizes() []TLObject {
	return t.M_sizes
}

func New_TL_photo() *TL_photo {
	return &TL_photo{
		M_classID: TL_CLASS_photo,
	}
}

func (t *TL_photo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photo))
	ec.TLObject(t.Get_has_stickers())
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_date())
	ec.Vector(t.Get_sizes())

	return ec.GetBuffer()
}

func (t *TL_photo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_has_stickers = dc.TLObject()
	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_date = dc.Int()
	t.M_sizes = dc.Vector()

	return dc.err
}

func (t *TL_photo) String() string {
	return fmt.Sprintf("- photo#9288dd29\n-- flags : %v\n-- has_stickers : %v\n-- id : %v\n-- access_hash : %v\n-- date : %v\n-- sizes : %v\n", t.M_flags, t.M_has_stickers, t.M_id, t.M_access_hash, t.M_date, t.M_sizes)
}

// photoSizeEmpty#e17e23c
type TL_photoSizeEmpty struct {
	M_classID int32
	M_type    string
}

func (t *TL_photoSizeEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photoSizeEmpty) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_photoSizeEmpty) Get_type() string {
	return t.M_type
}

func New_TL_photoSizeEmpty() *TL_photoSizeEmpty {
	return &TL_photoSizeEmpty{
		M_classID: TL_CLASS_photoSizeEmpty,
	}
}

func (t *TL_photoSizeEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photoSizeEmpty))
	ec.String(t.Get_type())

	return ec.GetBuffer()
}

func (t *TL_photoSizeEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_type = dc.String()

	return dc.err
}

func (t *TL_photoSizeEmpty) String() string {
	return fmt.Sprintf("- photoSizeEmpty#e17e23c\n-- type : %v\n", t.M_type)
}

// photoSize#77bfb61b
type TL_photoSize struct {
	M_classID  int32
	M_type     string
	M_location TLObject
	M_w        int32
	M_h        int32
	M_size     int32
}

func (t *TL_photoSize) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photoSize) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_photoSize) Get_type() string {
	return t.M_type
}

func (t *TL_photoSize) Set_location(M_location TLObject) {
	t.M_location = M_location
}

func (t *TL_photoSize) Get_location() TLObject {
	return t.M_location
}

func (t *TL_photoSize) Set_w(M_w int32) {
	t.M_w = M_w
}

func (t *TL_photoSize) Get_w() int32 {
	return t.M_w
}

func (t *TL_photoSize) Set_h(M_h int32) {
	t.M_h = M_h
}

func (t *TL_photoSize) Get_h() int32 {
	return t.M_h
}

func (t *TL_photoSize) Set_size(M_size int32) {
	t.M_size = M_size
}

func (t *TL_photoSize) Get_size() int32 {
	return t.M_size
}

func New_TL_photoSize() *TL_photoSize {
	return &TL_photoSize{
		M_classID: TL_CLASS_photoSize,
	}
}

func (t *TL_photoSize) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photoSize))
	ec.String(t.Get_type())
	ec.TLObject(t.Get_location())
	ec.Int(t.Get_w())
	ec.Int(t.Get_h())
	ec.Int(t.Get_size())

	return ec.GetBuffer()
}

func (t *TL_photoSize) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_type = dc.String()
	t.M_location = dc.TLObject()
	t.M_w = dc.Int()
	t.M_h = dc.Int()
	t.M_size = dc.Int()

	return dc.err
}

func (t *TL_photoSize) String() string {
	return fmt.Sprintf("- photoSize#77bfb61b\n-- type : %v\n-- location : %v\n-- w : %v\n-- h : %v\n-- size : %v\n", t.M_type, t.M_location, t.M_w, t.M_h, t.M_size)
}

// photoCachedSize#e9a734fa
type TL_photoCachedSize struct {
	M_classID  int32
	M_type     string
	M_location TLObject
	M_w        int32
	M_h        int32
	M_bytes    TLObject
}

func (t *TL_photoCachedSize) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photoCachedSize) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_photoCachedSize) Get_type() string {
	return t.M_type
}

func (t *TL_photoCachedSize) Set_location(M_location TLObject) {
	t.M_location = M_location
}

func (t *TL_photoCachedSize) Get_location() TLObject {
	return t.M_location
}

func (t *TL_photoCachedSize) Set_w(M_w int32) {
	t.M_w = M_w
}

func (t *TL_photoCachedSize) Get_w() int32 {
	return t.M_w
}

func (t *TL_photoCachedSize) Set_h(M_h int32) {
	t.M_h = M_h
}

func (t *TL_photoCachedSize) Get_h() int32 {
	return t.M_h
}

func (t *TL_photoCachedSize) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_photoCachedSize) Get_bytes() TLObject {
	return t.M_bytes
}

func New_TL_photoCachedSize() *TL_photoCachedSize {
	return &TL_photoCachedSize{
		M_classID: TL_CLASS_photoCachedSize,
	}
}

func (t *TL_photoCachedSize) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photoCachedSize))
	ec.String(t.Get_type())
	ec.TLObject(t.Get_location())
	ec.Int(t.Get_w())
	ec.Int(t.Get_h())
	ec.TLObject(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_photoCachedSize) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_type = dc.String()
	t.M_location = dc.TLObject()
	t.M_w = dc.Int()
	t.M_h = dc.Int()
	t.M_bytes = dc.TLObject()

	return dc.err
}

func (t *TL_photoCachedSize) String() string {
	return fmt.Sprintf("- photoCachedSize#e9a734fa\n-- type : %v\n-- location : %v\n-- w : %v\n-- h : %v\n-- bytes : %v\n", t.M_type, t.M_location, t.M_w, t.M_h, t.M_bytes)
}

// geoPointEmpty#1117dd5f
type TL_geoPointEmpty struct {
	M_classID int32
}

func (t *TL_geoPointEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_geoPointEmpty() *TL_geoPointEmpty {
	return &TL_geoPointEmpty{
		M_classID: TL_CLASS_geoPointEmpty,
	}
}

func (t *TL_geoPointEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_geoPointEmpty))

	return ec.GetBuffer()
}

func (t *TL_geoPointEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_geoPointEmpty) String() string {
	return fmt.Sprintf("- geoPointEmpty#1117dd5f\n")
}

// geoPoint#2049d70c
type TL_geoPoint struct {
	M_classID int32
	M_long    float64
	M_lat     float64
}

func (t *TL_geoPoint) ClassID() int32 {
	return t.M_classID
}

func (t *TL_geoPoint) Set_long(M_long float64) {
	t.M_long = M_long
}

func (t *TL_geoPoint) Get_long() float64 {
	return t.M_long
}

func (t *TL_geoPoint) Set_lat(M_lat float64) {
	t.M_lat = M_lat
}

func (t *TL_geoPoint) Get_lat() float64 {
	return t.M_lat
}

func New_TL_geoPoint() *TL_geoPoint {
	return &TL_geoPoint{
		M_classID: TL_CLASS_geoPoint,
	}
}

func (t *TL_geoPoint) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_geoPoint))
	ec.Double(t.Get_long())
	ec.Double(t.Get_lat())

	return ec.GetBuffer()
}

func (t *TL_geoPoint) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_long = dc.Double()
	t.M_lat = dc.Double()

	return dc.err
}

func (t *TL_geoPoint) String() string {
	return fmt.Sprintf("- geoPoint#2049d70c\n-- long : %v\n-- lat : %v\n", t.M_long, t.M_lat)
}

// auth_checkedPhone#811ea28e
type TL_auth_checkedPhone struct {
	M_classID          int32
	M_phone_registered TLObject
}

func (t *TL_auth_checkedPhone) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_checkedPhone) Set_phone_registered(M_phone_registered TLObject) {
	t.M_phone_registered = M_phone_registered
}

func (t *TL_auth_checkedPhone) Get_phone_registered() TLObject {
	return t.M_phone_registered
}

func New_TL_auth_checkedPhone() *TL_auth_checkedPhone {
	return &TL_auth_checkedPhone{
		M_classID: TL_CLASS_auth_checkedPhone,
	}
}

func (t *TL_auth_checkedPhone) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_checkedPhone))
	ec.TLObject(t.Get_phone_registered())

	return ec.GetBuffer()
}

func (t *TL_auth_checkedPhone) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_registered = dc.TLObject()

	return dc.err
}

func (t *TL_auth_checkedPhone) String() string {
	return fmt.Sprintf("- auth_checkedPhone#811ea28e\n-- phone_registered : %v\n", t.M_phone_registered)
}

// auth_sentCode#5e002502
type TL_auth_sentCode struct {
	M_classID          int32
	M_flags            TLObject
	M_phone_registered TLObject
	M_type             TLObject
	M_phone_code_hash  string
	M_next_type        TLObject
	M_timeout          TLObject
}

func (t *TL_auth_sentCode) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_sentCode) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_auth_sentCode) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_auth_sentCode) Set_phone_registered(M_phone_registered TLObject) {
	t.M_phone_registered = M_phone_registered
}

func (t *TL_auth_sentCode) Get_phone_registered() TLObject {
	return t.M_phone_registered
}

func (t *TL_auth_sentCode) Set_type(M_type TLObject) {
	t.M_type = M_type
}

func (t *TL_auth_sentCode) Get_type() TLObject {
	return t.M_type
}

func (t *TL_auth_sentCode) Set_phone_code_hash(M_phone_code_hash string) {
	t.M_phone_code_hash = M_phone_code_hash
}

func (t *TL_auth_sentCode) Get_phone_code_hash() string {
	return t.M_phone_code_hash
}

func (t *TL_auth_sentCode) Set_next_type(M_next_type TLObject) {
	t.M_next_type = M_next_type
}

func (t *TL_auth_sentCode) Get_next_type() TLObject {
	return t.M_next_type
}

func (t *TL_auth_sentCode) Set_timeout(M_timeout TLObject) {
	t.M_timeout = M_timeout
}

func (t *TL_auth_sentCode) Get_timeout() TLObject {
	return t.M_timeout
}

func New_TL_auth_sentCode() *TL_auth_sentCode {
	return &TL_auth_sentCode{
		M_classID: TL_CLASS_auth_sentCode,
	}
}

func (t *TL_auth_sentCode) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_sentCode))
	ec.TLObject(t.Get_phone_registered())
	ec.TLObject(t.Get_type())
	ec.String(t.Get_phone_code_hash())
	ec.TLObject(t.Get_next_type())
	ec.TLObject(t.Get_timeout())

	return ec.GetBuffer()
}

func (t *TL_auth_sentCode) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_registered = dc.TLObject()
	t.M_type = dc.TLObject()
	t.M_phone_code_hash = dc.String()
	t.M_next_type = dc.TLObject()
	t.M_timeout = dc.TLObject()

	return dc.err
}

func (t *TL_auth_sentCode) String() string {
	return fmt.Sprintf("- auth_sentCode#5e002502\n-- flags : %v\n-- phone_registered : %v\n-- type : %v\n-- phone_code_hash : %v\n-- next_type : %v\n-- timeout : %v\n", t.M_flags, t.M_phone_registered, t.M_type, t.M_phone_code_hash, t.M_next_type, t.M_timeout)
}

// auth_authorization#cd050916
type TL_auth_authorization struct {
	M_classID      int32
	M_flags        TLObject
	M_tmp_sessions TLObject
	M_user         TLObject
}

func (t *TL_auth_authorization) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_authorization) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_auth_authorization) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_auth_authorization) Set_tmp_sessions(M_tmp_sessions TLObject) {
	t.M_tmp_sessions = M_tmp_sessions
}

func (t *TL_auth_authorization) Get_tmp_sessions() TLObject {
	return t.M_tmp_sessions
}

func (t *TL_auth_authorization) Set_user(M_user TLObject) {
	t.M_user = M_user
}

func (t *TL_auth_authorization) Get_user() TLObject {
	return t.M_user
}

func New_TL_auth_authorization() *TL_auth_authorization {
	return &TL_auth_authorization{
		M_classID: TL_CLASS_auth_authorization,
	}
}

func (t *TL_auth_authorization) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_authorization))
	ec.TLObject(t.Get_tmp_sessions())
	ec.TLObject(t.Get_user())

	return ec.GetBuffer()
}

func (t *TL_auth_authorization) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_tmp_sessions = dc.TLObject()
	t.M_user = dc.TLObject()

	return dc.err
}

func (t *TL_auth_authorization) String() string {
	return fmt.Sprintf("- auth_authorization#cd050916\n-- flags : %v\n-- tmp_sessions : %v\n-- user : %v\n", t.M_flags, t.M_tmp_sessions, t.M_user)
}

// auth_exportedAuthorization#df969c2d
type TL_auth_exportedAuthorization struct {
	M_classID int32
	M_id      int32
	M_bytes   TLObject
}

func (t *TL_auth_exportedAuthorization) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_exportedAuthorization) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_auth_exportedAuthorization) Get_id() int32 {
	return t.M_id
}

func (t *TL_auth_exportedAuthorization) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_auth_exportedAuthorization) Get_bytes() TLObject {
	return t.M_bytes
}

func New_TL_auth_exportedAuthorization() *TL_auth_exportedAuthorization {
	return &TL_auth_exportedAuthorization{
		M_classID: TL_CLASS_auth_exportedAuthorization,
	}
}

func (t *TL_auth_exportedAuthorization) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_exportedAuthorization))
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_auth_exportedAuthorization) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_bytes = dc.TLObject()

	return dc.err
}

func (t *TL_auth_exportedAuthorization) String() string {
	return fmt.Sprintf("- auth_exportedAuthorization#df969c2d\n-- id : %v\n-- bytes : %v\n", t.M_id, t.M_bytes)
}

// inputNotifyPeer#b8bc5b0c
type TL_inputNotifyPeer struct {
	M_classID int32
	M_peer    TLObject
}

func (t *TL_inputNotifyPeer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputNotifyPeer) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_inputNotifyPeer) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_inputNotifyPeer() *TL_inputNotifyPeer {
	return &TL_inputNotifyPeer{
		M_classID: TL_CLASS_inputNotifyPeer,
	}
}

func (t *TL_inputNotifyPeer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputNotifyPeer))
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_inputNotifyPeer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_inputNotifyPeer) String() string {
	return fmt.Sprintf("- inputNotifyPeer#b8bc5b0c\n-- peer : %v\n", t.M_peer)
}

// inputNotifyUsers#193b4417
type TL_inputNotifyUsers struct {
	M_classID int32
}

func (t *TL_inputNotifyUsers) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputNotifyUsers() *TL_inputNotifyUsers {
	return &TL_inputNotifyUsers{
		M_classID: TL_CLASS_inputNotifyUsers,
	}
}

func (t *TL_inputNotifyUsers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputNotifyUsers))

	return ec.GetBuffer()
}

func (t *TL_inputNotifyUsers) Decode(b []byte) error {
	return nil
}

func (t *TL_inputNotifyUsers) String() string {
	return fmt.Sprintf("- inputNotifyUsers#193b4417\n")
}

// inputNotifyChats#4a95e84e
type TL_inputNotifyChats struct {
	M_classID int32
}

func (t *TL_inputNotifyChats) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputNotifyChats() *TL_inputNotifyChats {
	return &TL_inputNotifyChats{
		M_classID: TL_CLASS_inputNotifyChats,
	}
}

func (t *TL_inputNotifyChats) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputNotifyChats))

	return ec.GetBuffer()
}

func (t *TL_inputNotifyChats) Decode(b []byte) error {
	return nil
}

func (t *TL_inputNotifyChats) String() string {
	return fmt.Sprintf("- inputNotifyChats#4a95e84e\n")
}

// inputNotifyAll#a429b886
type TL_inputNotifyAll struct {
	M_classID int32
}

func (t *TL_inputNotifyAll) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputNotifyAll() *TL_inputNotifyAll {
	return &TL_inputNotifyAll{
		M_classID: TL_CLASS_inputNotifyAll,
	}
}

func (t *TL_inputNotifyAll) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputNotifyAll))

	return ec.GetBuffer()
}

func (t *TL_inputNotifyAll) Decode(b []byte) error {
	return nil
}

func (t *TL_inputNotifyAll) String() string {
	return fmt.Sprintf("- inputNotifyAll#a429b886\n")
}

// inputPeerNotifyEventsEmpty#f03064d8
type TL_inputPeerNotifyEventsEmpty struct {
	M_classID int32
}

func (t *TL_inputPeerNotifyEventsEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPeerNotifyEventsEmpty() *TL_inputPeerNotifyEventsEmpty {
	return &TL_inputPeerNotifyEventsEmpty{
		M_classID: TL_CLASS_inputPeerNotifyEventsEmpty,
	}
}

func (t *TL_inputPeerNotifyEventsEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPeerNotifyEventsEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputPeerNotifyEventsEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPeerNotifyEventsEmpty) String() string {
	return fmt.Sprintf("- inputPeerNotifyEventsEmpty#f03064d8\n")
}

// inputPeerNotifyEventsAll#e86a2c74
type TL_inputPeerNotifyEventsAll struct {
	M_classID int32
}

func (t *TL_inputPeerNotifyEventsAll) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPeerNotifyEventsAll() *TL_inputPeerNotifyEventsAll {
	return &TL_inputPeerNotifyEventsAll{
		M_classID: TL_CLASS_inputPeerNotifyEventsAll,
	}
}

func (t *TL_inputPeerNotifyEventsAll) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPeerNotifyEventsAll))

	return ec.GetBuffer()
}

func (t *TL_inputPeerNotifyEventsAll) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPeerNotifyEventsAll) String() string {
	return fmt.Sprintf("- inputPeerNotifyEventsAll#e86a2c74\n")
}

// inputPeerNotifySettings#38935eb2
type TL_inputPeerNotifySettings struct {
	M_classID       int32
	M_flags         TLObject
	M_show_previews TLObject
	M_silent        TLObject
	M_mute_until    int32
	M_sound         string
}

func (t *TL_inputPeerNotifySettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPeerNotifySettings) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputPeerNotifySettings) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputPeerNotifySettings) Set_show_previews(M_show_previews TLObject) {
	t.M_show_previews = M_show_previews
}

func (t *TL_inputPeerNotifySettings) Get_show_previews() TLObject {
	return t.M_show_previews
}

func (t *TL_inputPeerNotifySettings) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_inputPeerNotifySettings) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_inputPeerNotifySettings) Set_mute_until(M_mute_until int32) {
	t.M_mute_until = M_mute_until
}

func (t *TL_inputPeerNotifySettings) Get_mute_until() int32 {
	return t.M_mute_until
}

func (t *TL_inputPeerNotifySettings) Set_sound(M_sound string) {
	t.M_sound = M_sound
}

func (t *TL_inputPeerNotifySettings) Get_sound() string {
	return t.M_sound
}

func New_TL_inputPeerNotifySettings() *TL_inputPeerNotifySettings {
	return &TL_inputPeerNotifySettings{
		M_classID: TL_CLASS_inputPeerNotifySettings,
	}
}

func (t *TL_inputPeerNotifySettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPeerNotifySettings))
	ec.TLObject(t.Get_show_previews())
	ec.TLObject(t.Get_silent())
	ec.Int(t.Get_mute_until())
	ec.String(t.Get_sound())

	return ec.GetBuffer()
}

func (t *TL_inputPeerNotifySettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_show_previews = dc.TLObject()
	t.M_silent = dc.TLObject()
	t.M_mute_until = dc.Int()
	t.M_sound = dc.String()

	return dc.err
}

func (t *TL_inputPeerNotifySettings) String() string {
	return fmt.Sprintf("- inputPeerNotifySettings#38935eb2\n-- flags : %v\n-- show_previews : %v\n-- silent : %v\n-- mute_until : %v\n-- sound : %v\n", t.M_flags, t.M_show_previews, t.M_silent, t.M_mute_until, t.M_sound)
}

// peerNotifyEventsEmpty#add53cb3
type TL_peerNotifyEventsEmpty struct {
	M_classID int32
}

func (t *TL_peerNotifyEventsEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_peerNotifyEventsEmpty() *TL_peerNotifyEventsEmpty {
	return &TL_peerNotifyEventsEmpty{
		M_classID: TL_CLASS_peerNotifyEventsEmpty,
	}
}

func (t *TL_peerNotifyEventsEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_peerNotifyEventsEmpty))

	return ec.GetBuffer()
}

func (t *TL_peerNotifyEventsEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_peerNotifyEventsEmpty) String() string {
	return fmt.Sprintf("- peerNotifyEventsEmpty#add53cb3\n")
}

// peerNotifyEventsAll#6d1ded88
type TL_peerNotifyEventsAll struct {
	M_classID int32
}

func (t *TL_peerNotifyEventsAll) ClassID() int32 {
	return t.M_classID
}

func New_TL_peerNotifyEventsAll() *TL_peerNotifyEventsAll {
	return &TL_peerNotifyEventsAll{
		M_classID: TL_CLASS_peerNotifyEventsAll,
	}
}

func (t *TL_peerNotifyEventsAll) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_peerNotifyEventsAll))

	return ec.GetBuffer()
}

func (t *TL_peerNotifyEventsAll) Decode(b []byte) error {
	return nil
}

func (t *TL_peerNotifyEventsAll) String() string {
	return fmt.Sprintf("- peerNotifyEventsAll#6d1ded88\n")
}

// peerNotifySettingsEmpty#70a68512
type TL_peerNotifySettingsEmpty struct {
	M_classID int32
}

func (t *TL_peerNotifySettingsEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_peerNotifySettingsEmpty() *TL_peerNotifySettingsEmpty {
	return &TL_peerNotifySettingsEmpty{
		M_classID: TL_CLASS_peerNotifySettingsEmpty,
	}
}

func (t *TL_peerNotifySettingsEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_peerNotifySettingsEmpty))

	return ec.GetBuffer()
}

func (t *TL_peerNotifySettingsEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_peerNotifySettingsEmpty) String() string {
	return fmt.Sprintf("- peerNotifySettingsEmpty#70a68512\n")
}

// peerNotifySettings#9acda4c0
type TL_peerNotifySettings struct {
	M_classID       int32
	M_flags         TLObject
	M_show_previews TLObject
	M_silent        TLObject
	M_mute_until    int32
	M_sound         string
}

func (t *TL_peerNotifySettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_peerNotifySettings) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_peerNotifySettings) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_peerNotifySettings) Set_show_previews(M_show_previews TLObject) {
	t.M_show_previews = M_show_previews
}

func (t *TL_peerNotifySettings) Get_show_previews() TLObject {
	return t.M_show_previews
}

func (t *TL_peerNotifySettings) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_peerNotifySettings) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_peerNotifySettings) Set_mute_until(M_mute_until int32) {
	t.M_mute_until = M_mute_until
}

func (t *TL_peerNotifySettings) Get_mute_until() int32 {
	return t.M_mute_until
}

func (t *TL_peerNotifySettings) Set_sound(M_sound string) {
	t.M_sound = M_sound
}

func (t *TL_peerNotifySettings) Get_sound() string {
	return t.M_sound
}

func New_TL_peerNotifySettings() *TL_peerNotifySettings {
	return &TL_peerNotifySettings{
		M_classID: TL_CLASS_peerNotifySettings,
	}
}

func (t *TL_peerNotifySettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_peerNotifySettings))
	ec.TLObject(t.Get_show_previews())
	ec.TLObject(t.Get_silent())
	ec.Int(t.Get_mute_until())
	ec.String(t.Get_sound())

	return ec.GetBuffer()
}

func (t *TL_peerNotifySettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_show_previews = dc.TLObject()
	t.M_silent = dc.TLObject()
	t.M_mute_until = dc.Int()
	t.M_sound = dc.String()

	return dc.err
}

func (t *TL_peerNotifySettings) String() string {
	return fmt.Sprintf("- peerNotifySettings#9acda4c0\n-- flags : %v\n-- show_previews : %v\n-- silent : %v\n-- mute_until : %v\n-- sound : %v\n", t.M_flags, t.M_show_previews, t.M_silent, t.M_mute_until, t.M_sound)
}

// peerSettings#818426cd
type TL_peerSettings struct {
	M_classID     int32
	M_flags       TLObject
	M_report_spam TLObject
}

func (t *TL_peerSettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_peerSettings) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_peerSettings) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_peerSettings) Set_report_spam(M_report_spam TLObject) {
	t.M_report_spam = M_report_spam
}

func (t *TL_peerSettings) Get_report_spam() TLObject {
	return t.M_report_spam
}

func New_TL_peerSettings() *TL_peerSettings {
	return &TL_peerSettings{
		M_classID: TL_CLASS_peerSettings,
	}
}

func (t *TL_peerSettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_peerSettings))
	ec.TLObject(t.Get_report_spam())

	return ec.GetBuffer()
}

func (t *TL_peerSettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_report_spam = dc.TLObject()

	return dc.err
}

func (t *TL_peerSettings) String() string {
	return fmt.Sprintf("- peerSettings#818426cd\n-- flags : %v\n-- report_spam : %v\n", t.M_flags, t.M_report_spam)
}

// wallPaper#ccb03657
type TL_wallPaper struct {
	M_classID int32
	M_id      int32
	M_title   string
	M_sizes   []TLObject
	M_color   int32
}

func (t *TL_wallPaper) ClassID() int32 {
	return t.M_classID
}

func (t *TL_wallPaper) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_wallPaper) Get_id() int32 {
	return t.M_id
}

func (t *TL_wallPaper) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_wallPaper) Get_title() string {
	return t.M_title
}

func (t *TL_wallPaper) Set_sizes(M_sizes []TLObject) {
	t.M_sizes = M_sizes
}

func (t *TL_wallPaper) Get_sizes() []TLObject {
	return t.M_sizes
}

func (t *TL_wallPaper) Set_color(M_color int32) {
	t.M_color = M_color
}

func (t *TL_wallPaper) Get_color() int32 {
	return t.M_color
}

func New_TL_wallPaper() *TL_wallPaper {
	return &TL_wallPaper{
		M_classID: TL_CLASS_wallPaper,
	}
}

func (t *TL_wallPaper) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_wallPaper))
	ec.Int(t.Get_id())
	ec.String(t.Get_title())
	ec.Vector(t.Get_sizes())
	ec.Int(t.Get_color())

	return ec.GetBuffer()
}

func (t *TL_wallPaper) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_title = dc.String()
	t.M_sizes = dc.Vector()
	t.M_color = dc.Int()

	return dc.err
}

func (t *TL_wallPaper) String() string {
	return fmt.Sprintf("- wallPaper#ccb03657\n-- id : %v\n-- title : %v\n-- sizes : %v\n-- color : %v\n", t.M_id, t.M_title, t.M_sizes, t.M_color)
}

// wallPaperSolid#63117f24
type TL_wallPaperSolid struct {
	M_classID  int32
	M_id       int32
	M_title    string
	M_bg_color int32
	M_color    int32
}

func (t *TL_wallPaperSolid) ClassID() int32 {
	return t.M_classID
}

func (t *TL_wallPaperSolid) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_wallPaperSolid) Get_id() int32 {
	return t.M_id
}

func (t *TL_wallPaperSolid) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_wallPaperSolid) Get_title() string {
	return t.M_title
}

func (t *TL_wallPaperSolid) Set_bg_color(M_bg_color int32) {
	t.M_bg_color = M_bg_color
}

func (t *TL_wallPaperSolid) Get_bg_color() int32 {
	return t.M_bg_color
}

func (t *TL_wallPaperSolid) Set_color(M_color int32) {
	t.M_color = M_color
}

func (t *TL_wallPaperSolid) Get_color() int32 {
	return t.M_color
}

func New_TL_wallPaperSolid() *TL_wallPaperSolid {
	return &TL_wallPaperSolid{
		M_classID: TL_CLASS_wallPaperSolid,
	}
}

func (t *TL_wallPaperSolid) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_wallPaperSolid))
	ec.Int(t.Get_id())
	ec.String(t.Get_title())
	ec.Int(t.Get_bg_color())
	ec.Int(t.Get_color())

	return ec.GetBuffer()
}

func (t *TL_wallPaperSolid) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_title = dc.String()
	t.M_bg_color = dc.Int()
	t.M_color = dc.Int()

	return dc.err
}

func (t *TL_wallPaperSolid) String() string {
	return fmt.Sprintf("- wallPaperSolid#63117f24\n-- id : %v\n-- title : %v\n-- bg_color : %v\n-- color : %v\n", t.M_id, t.M_title, t.M_bg_color, t.M_color)
}

// inputReportReasonSpam#58dbcab8
type TL_inputReportReasonSpam struct {
	M_classID int32
}

func (t *TL_inputReportReasonSpam) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputReportReasonSpam() *TL_inputReportReasonSpam {
	return &TL_inputReportReasonSpam{
		M_classID: TL_CLASS_inputReportReasonSpam,
	}
}

func (t *TL_inputReportReasonSpam) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputReportReasonSpam))

	return ec.GetBuffer()
}

func (t *TL_inputReportReasonSpam) Decode(b []byte) error {
	return nil
}

func (t *TL_inputReportReasonSpam) String() string {
	return fmt.Sprintf("- inputReportReasonSpam#58dbcab8\n")
}

// inputReportReasonViolence#1e22c78d
type TL_inputReportReasonViolence struct {
	M_classID int32
}

func (t *TL_inputReportReasonViolence) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputReportReasonViolence() *TL_inputReportReasonViolence {
	return &TL_inputReportReasonViolence{
		M_classID: TL_CLASS_inputReportReasonViolence,
	}
}

func (t *TL_inputReportReasonViolence) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputReportReasonViolence))

	return ec.GetBuffer()
}

func (t *TL_inputReportReasonViolence) Decode(b []byte) error {
	return nil
}

func (t *TL_inputReportReasonViolence) String() string {
	return fmt.Sprintf("- inputReportReasonViolence#1e22c78d\n")
}

// inputReportReasonPornography#2e59d922
type TL_inputReportReasonPornography struct {
	M_classID int32
}

func (t *TL_inputReportReasonPornography) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputReportReasonPornography() *TL_inputReportReasonPornography {
	return &TL_inputReportReasonPornography{
		M_classID: TL_CLASS_inputReportReasonPornography,
	}
}

func (t *TL_inputReportReasonPornography) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputReportReasonPornography))

	return ec.GetBuffer()
}

func (t *TL_inputReportReasonPornography) Decode(b []byte) error {
	return nil
}

func (t *TL_inputReportReasonPornography) String() string {
	return fmt.Sprintf("- inputReportReasonPornography#2e59d922\n")
}

// inputReportReasonOther#e1746d0a
type TL_inputReportReasonOther struct {
	M_classID int32
	M_text    string
}

func (t *TL_inputReportReasonOther) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputReportReasonOther) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_inputReportReasonOther) Get_text() string {
	return t.M_text
}

func New_TL_inputReportReasonOther() *TL_inputReportReasonOther {
	return &TL_inputReportReasonOther{
		M_classID: TL_CLASS_inputReportReasonOther,
	}
}

func (t *TL_inputReportReasonOther) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputReportReasonOther))
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_inputReportReasonOther) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()

	return dc.err
}

func (t *TL_inputReportReasonOther) String() string {
	return fmt.Sprintf("- inputReportReasonOther#e1746d0a\n-- text : %v\n", t.M_text)
}

// userFull#f220f3f
type TL_userFull struct {
	M_classID               int32
	M_flags                 TLObject
	M_blocked               TLObject
	M_phone_calls_available TLObject
	M_phone_calls_private   TLObject
	M_user                  TLObject
	M_about                 TLObject
	M_link                  TLObject
	M_profile_photo         TLObject
	M_notify_settings       TLObject
	M_bot_info              TLObject
	M_common_chats_count    int32
}

func (t *TL_userFull) ClassID() int32 {
	return t.M_classID
}

func (t *TL_userFull) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_userFull) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_userFull) Set_blocked(M_blocked TLObject) {
	t.M_blocked = M_blocked
}

func (t *TL_userFull) Get_blocked() TLObject {
	return t.M_blocked
}

func (t *TL_userFull) Set_phone_calls_available(M_phone_calls_available TLObject) {
	t.M_phone_calls_available = M_phone_calls_available
}

func (t *TL_userFull) Get_phone_calls_available() TLObject {
	return t.M_phone_calls_available
}

func (t *TL_userFull) Set_phone_calls_private(M_phone_calls_private TLObject) {
	t.M_phone_calls_private = M_phone_calls_private
}

func (t *TL_userFull) Get_phone_calls_private() TLObject {
	return t.M_phone_calls_private
}

func (t *TL_userFull) Set_user(M_user TLObject) {
	t.M_user = M_user
}

func (t *TL_userFull) Get_user() TLObject {
	return t.M_user
}

func (t *TL_userFull) Set_about(M_about TLObject) {
	t.M_about = M_about
}

func (t *TL_userFull) Get_about() TLObject {
	return t.M_about
}

func (t *TL_userFull) Set_link(M_link TLObject) {
	t.M_link = M_link
}

func (t *TL_userFull) Get_link() TLObject {
	return t.M_link
}

func (t *TL_userFull) Set_profile_photo(M_profile_photo TLObject) {
	t.M_profile_photo = M_profile_photo
}

func (t *TL_userFull) Get_profile_photo() TLObject {
	return t.M_profile_photo
}

func (t *TL_userFull) Set_notify_settings(M_notify_settings TLObject) {
	t.M_notify_settings = M_notify_settings
}

func (t *TL_userFull) Get_notify_settings() TLObject {
	return t.M_notify_settings
}

func (t *TL_userFull) Set_bot_info(M_bot_info TLObject) {
	t.M_bot_info = M_bot_info
}

func (t *TL_userFull) Get_bot_info() TLObject {
	return t.M_bot_info
}

func (t *TL_userFull) Set_common_chats_count(M_common_chats_count int32) {
	t.M_common_chats_count = M_common_chats_count
}

func (t *TL_userFull) Get_common_chats_count() int32 {
	return t.M_common_chats_count
}

func New_TL_userFull() *TL_userFull {
	return &TL_userFull{
		M_classID: TL_CLASS_userFull,
	}
}

func (t *TL_userFull) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_userFull))
	ec.TLObject(t.Get_blocked())
	ec.TLObject(t.Get_phone_calls_available())
	ec.TLObject(t.Get_phone_calls_private())
	ec.TLObject(t.Get_user())
	ec.TLObject(t.Get_about())
	ec.TLObject(t.Get_link())
	ec.TLObject(t.Get_profile_photo())
	ec.TLObject(t.Get_notify_settings())
	ec.TLObject(t.Get_bot_info())
	ec.Int(t.Get_common_chats_count())

	return ec.GetBuffer()
}

func (t *TL_userFull) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_blocked = dc.TLObject()
	t.M_phone_calls_available = dc.TLObject()
	t.M_phone_calls_private = dc.TLObject()
	t.M_user = dc.TLObject()
	t.M_about = dc.TLObject()
	t.M_link = dc.TLObject()
	t.M_profile_photo = dc.TLObject()
	t.M_notify_settings = dc.TLObject()
	t.M_bot_info = dc.TLObject()
	t.M_common_chats_count = dc.Int()

	return dc.err
}

func (t *TL_userFull) String() string {
	return fmt.Sprintf("- userFull#f220f3f\n-- flags : %v\n-- blocked : %v\n-- phone_calls_available : %v\n-- phone_calls_private : %v\n-- user : %v\n-- about : %v\n-- link : %v\n-- profile_photo : %v\n-- notify_settings : %v\n-- bot_info : %v\n-- common_chats_count : %v\n", t.M_flags, t.M_blocked, t.M_phone_calls_available, t.M_phone_calls_private, t.M_user, t.M_about, t.M_link, t.M_profile_photo, t.M_notify_settings, t.M_bot_info, t.M_common_chats_count)
}

// contact#f911c994
type TL_contact struct {
	M_classID int32
	M_user_id int32
	M_mutual  TLObject
}

func (t *TL_contact) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contact) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_contact) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_contact) Set_mutual(M_mutual TLObject) {
	t.M_mutual = M_mutual
}

func (t *TL_contact) Get_mutual() TLObject {
	return t.M_mutual
}

func New_TL_contact() *TL_contact {
	return &TL_contact{
		M_classID: TL_CLASS_contact,
	}
}

func (t *TL_contact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contact))
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_mutual())

	return ec.GetBuffer()
}

func (t *TL_contact) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_mutual = dc.TLObject()

	return dc.err
}

func (t *TL_contact) String() string {
	return fmt.Sprintf("- contact#f911c994\n-- user_id : %v\n-- mutual : %v\n", t.M_user_id, t.M_mutual)
}

// importedContact#d0028438
type TL_importedContact struct {
	M_classID   int32
	M_user_id   int32
	M_client_id int64
}

func (t *TL_importedContact) ClassID() int32 {
	return t.M_classID
}

func (t *TL_importedContact) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_importedContact) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_importedContact) Set_client_id(M_client_id int64) {
	t.M_client_id = M_client_id
}

func (t *TL_importedContact) Get_client_id() int64 {
	return t.M_client_id
}

func New_TL_importedContact() *TL_importedContact {
	return &TL_importedContact{
		M_classID: TL_CLASS_importedContact,
	}
}

func (t *TL_importedContact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_importedContact))
	ec.Int(t.Get_user_id())
	ec.Long(t.Get_client_id())

	return ec.GetBuffer()
}

func (t *TL_importedContact) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_client_id = dc.Long()

	return dc.err
}

func (t *TL_importedContact) String() string {
	return fmt.Sprintf("- importedContact#d0028438\n-- user_id : %v\n-- client_id : %v\n", t.M_user_id, t.M_client_id)
}

// contactBlocked#561bc879
type TL_contactBlocked struct {
	M_classID int32
	M_user_id int32
	M_date    int32
}

func (t *TL_contactBlocked) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contactBlocked) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_contactBlocked) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_contactBlocked) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_contactBlocked) Get_date() int32 {
	return t.M_date
}

func New_TL_contactBlocked() *TL_contactBlocked {
	return &TL_contactBlocked{
		M_classID: TL_CLASS_contactBlocked,
	}
}

func (t *TL_contactBlocked) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contactBlocked))
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_contactBlocked) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_contactBlocked) String() string {
	return fmt.Sprintf("- contactBlocked#561bc879\n-- user_id : %v\n-- date : %v\n", t.M_user_id, t.M_date)
}

// contactStatus#d3680c61
type TL_contactStatus struct {
	M_classID int32
	M_user_id int32
	M_status  TLObject
}

func (t *TL_contactStatus) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contactStatus) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_contactStatus) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_contactStatus) Set_status(M_status TLObject) {
	t.M_status = M_status
}

func (t *TL_contactStatus) Get_status() TLObject {
	return t.M_status
}

func New_TL_contactStatus() *TL_contactStatus {
	return &TL_contactStatus{
		M_classID: TL_CLASS_contactStatus,
	}
}

func (t *TL_contactStatus) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contactStatus))
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_status())

	return ec.GetBuffer()
}

func (t *TL_contactStatus) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_status = dc.TLObject()

	return dc.err
}

func (t *TL_contactStatus) String() string {
	return fmt.Sprintf("- contactStatus#d3680c61\n-- user_id : %v\n-- status : %v\n", t.M_user_id, t.M_status)
}

// contacts_link#3ace484c
type TL_contacts_link struct {
	M_classID      int32
	M_my_link      TLObject
	M_foreign_link TLObject
	M_user         TLObject
}

func (t *TL_contacts_link) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_link) Set_my_link(M_my_link TLObject) {
	t.M_my_link = M_my_link
}

func (t *TL_contacts_link) Get_my_link() TLObject {
	return t.M_my_link
}

func (t *TL_contacts_link) Set_foreign_link(M_foreign_link TLObject) {
	t.M_foreign_link = M_foreign_link
}

func (t *TL_contacts_link) Get_foreign_link() TLObject {
	return t.M_foreign_link
}

func (t *TL_contacts_link) Set_user(M_user TLObject) {
	t.M_user = M_user
}

func (t *TL_contacts_link) Get_user() TLObject {
	return t.M_user
}

func New_TL_contacts_link() *TL_contacts_link {
	return &TL_contacts_link{
		M_classID: TL_CLASS_contacts_link,
	}
}

func (t *TL_contacts_link) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_link))
	ec.TLObject(t.Get_my_link())
	ec.TLObject(t.Get_foreign_link())
	ec.TLObject(t.Get_user())

	return ec.GetBuffer()
}

func (t *TL_contacts_link) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_my_link = dc.TLObject()
	t.M_foreign_link = dc.TLObject()
	t.M_user = dc.TLObject()

	return dc.err
}

func (t *TL_contacts_link) String() string {
	return fmt.Sprintf("- contacts_link#3ace484c\n-- my_link : %v\n-- foreign_link : %v\n-- user : %v\n", t.M_my_link, t.M_foreign_link, t.M_user)
}

// contacts_contactsNotModified#b74ba9d2
type TL_contacts_contactsNotModified struct {
	M_classID int32
}

func (t *TL_contacts_contactsNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_contacts_contactsNotModified() *TL_contacts_contactsNotModified {
	return &TL_contacts_contactsNotModified{
		M_classID: TL_CLASS_contacts_contactsNotModified,
	}
}

func (t *TL_contacts_contactsNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_contactsNotModified))

	return ec.GetBuffer()
}

func (t *TL_contacts_contactsNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_contacts_contactsNotModified) String() string {
	return fmt.Sprintf("- contacts_contactsNotModified#b74ba9d2\n")
}

// contacts_contacts#eae87e42
type TL_contacts_contacts struct {
	M_classID     int32
	M_contacts    []TLObject
	M_saved_count int32
	M_users       []TLObject
}

func (t *TL_contacts_contacts) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_contacts) Set_contacts(M_contacts []TLObject) {
	t.M_contacts = M_contacts
}

func (t *TL_contacts_contacts) Get_contacts() []TLObject {
	return t.M_contacts
}

func (t *TL_contacts_contacts) Set_saved_count(M_saved_count int32) {
	t.M_saved_count = M_saved_count
}

func (t *TL_contacts_contacts) Get_saved_count() int32 {
	return t.M_saved_count
}

func (t *TL_contacts_contacts) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_contacts_contacts) Get_users() []TLObject {
	return t.M_users
}

func New_TL_contacts_contacts() *TL_contacts_contacts {
	return &TL_contacts_contacts{
		M_classID: TL_CLASS_contacts_contacts,
	}
}

func (t *TL_contacts_contacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_contacts))
	ec.Vector(t.Get_contacts())
	ec.Int(t.Get_saved_count())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_contacts_contacts) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_contacts = dc.Vector()
	t.M_saved_count = dc.Int()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_contacts_contacts) String() string {
	return fmt.Sprintf("- contacts_contacts#eae87e42\n-- contacts : %v\n-- saved_count : %v\n-- users : %v\n", t.M_contacts, t.M_saved_count, t.M_users)
}

// contacts_importedContacts#77d01c3b
type TL_contacts_importedContacts struct {
	M_classID         int32
	M_imported        []TLObject
	M_popular_invites []TLObject
	M_retry_contacts  []int64
	M_users           []TLObject
}

func (t *TL_contacts_importedContacts) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_importedContacts) Set_imported(M_imported []TLObject) {
	t.M_imported = M_imported
}

func (t *TL_contacts_importedContacts) Get_imported() []TLObject {
	return t.M_imported
}

func (t *TL_contacts_importedContacts) Set_popular_invites(M_popular_invites []TLObject) {
	t.M_popular_invites = M_popular_invites
}

func (t *TL_contacts_importedContacts) Get_popular_invites() []TLObject {
	return t.M_popular_invites
}

func (t *TL_contacts_importedContacts) Set_retry_contacts(M_retry_contacts []int64) {
	t.M_retry_contacts = M_retry_contacts
}

func (t *TL_contacts_importedContacts) Get_retry_contacts() []int64 {
	return t.M_retry_contacts
}

func (t *TL_contacts_importedContacts) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_contacts_importedContacts) Get_users() []TLObject {
	return t.M_users
}

func New_TL_contacts_importedContacts() *TL_contacts_importedContacts {
	return &TL_contacts_importedContacts{
		M_classID: TL_CLASS_contacts_importedContacts,
	}
}

func (t *TL_contacts_importedContacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_importedContacts))
	ec.Vector(t.Get_imported())
	ec.Vector(t.Get_popular_invites())
	ec.VectorLong(t.Get_retry_contacts())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_contacts_importedContacts) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_imported = dc.Vector()
	t.M_popular_invites = dc.Vector()
	t.M_retry_contacts = dc.VectorLong()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_contacts_importedContacts) String() string {
	return fmt.Sprintf("- contacts_importedContacts#77d01c3b\n-- imported : %v\n-- popular_invites : %v\n-- retry_contacts : %v\n-- users : %v\n", t.M_imported, t.M_popular_invites, t.M_retry_contacts, t.M_users)
}

// contacts_blocked#1c138d15
type TL_contacts_blocked struct {
	M_classID int32
	M_blocked []TLObject
	M_users   []TLObject
}

func (t *TL_contacts_blocked) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_blocked) Set_blocked(M_blocked []TLObject) {
	t.M_blocked = M_blocked
}

func (t *TL_contacts_blocked) Get_blocked() []TLObject {
	return t.M_blocked
}

func (t *TL_contacts_blocked) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_contacts_blocked) Get_users() []TLObject {
	return t.M_users
}

func New_TL_contacts_blocked() *TL_contacts_blocked {
	return &TL_contacts_blocked{
		M_classID: TL_CLASS_contacts_blocked,
	}
}

func (t *TL_contacts_blocked) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_blocked))
	ec.Vector(t.Get_blocked())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_contacts_blocked) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_blocked = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_contacts_blocked) String() string {
	return fmt.Sprintf("- contacts_blocked#1c138d15\n-- blocked : %v\n-- users : %v\n", t.M_blocked, t.M_users)
}

// contacts_blockedSlice#900802a1
type TL_contacts_blockedSlice struct {
	M_classID int32
	M_count   int32
	M_blocked []TLObject
	M_users   []TLObject
}

func (t *TL_contacts_blockedSlice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_blockedSlice) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_contacts_blockedSlice) Get_count() int32 {
	return t.M_count
}

func (t *TL_contacts_blockedSlice) Set_blocked(M_blocked []TLObject) {
	t.M_blocked = M_blocked
}

func (t *TL_contacts_blockedSlice) Get_blocked() []TLObject {
	return t.M_blocked
}

func (t *TL_contacts_blockedSlice) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_contacts_blockedSlice) Get_users() []TLObject {
	return t.M_users
}

func New_TL_contacts_blockedSlice() *TL_contacts_blockedSlice {
	return &TL_contacts_blockedSlice{
		M_classID: TL_CLASS_contacts_blockedSlice,
	}
}

func (t *TL_contacts_blockedSlice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_blockedSlice))
	ec.Int(t.Get_count())
	ec.Vector(t.Get_blocked())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_contacts_blockedSlice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_count = dc.Int()
	t.M_blocked = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_contacts_blockedSlice) String() string {
	return fmt.Sprintf("- contacts_blockedSlice#900802a1\n-- count : %v\n-- blocked : %v\n-- users : %v\n", t.M_count, t.M_blocked, t.M_users)
}

// messages_dialogs#15ba6c40
type TL_messages_dialogs struct {
	M_classID  int32
	M_dialogs  []TLObject
	M_messages []TLObject
	M_chats    []TLObject
	M_users    []TLObject
}

func (t *TL_messages_dialogs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_dialogs) Set_dialogs(M_dialogs []TLObject) {
	t.M_dialogs = M_dialogs
}

func (t *TL_messages_dialogs) Get_dialogs() []TLObject {
	return t.M_dialogs
}

func (t *TL_messages_dialogs) Set_messages(M_messages []TLObject) {
	t.M_messages = M_messages
}

func (t *TL_messages_dialogs) Get_messages() []TLObject {
	return t.M_messages
}

func (t *TL_messages_dialogs) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_messages_dialogs) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_messages_dialogs) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_dialogs) Get_users() []TLObject {
	return t.M_users
}

func New_TL_messages_dialogs() *TL_messages_dialogs {
	return &TL_messages_dialogs{
		M_classID: TL_CLASS_messages_dialogs,
	}
}

func (t *TL_messages_dialogs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_dialogs))
	ec.Vector(t.Get_dialogs())
	ec.Vector(t.Get_messages())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messages_dialogs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_dialogs = dc.Vector()
	t.M_messages = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_messages_dialogs) String() string {
	return fmt.Sprintf("- messages_dialogs#15ba6c40\n-- dialogs : %v\n-- messages : %v\n-- chats : %v\n-- users : %v\n", t.M_dialogs, t.M_messages, t.M_chats, t.M_users)
}

// messages_dialogsSlice#71e094f3
type TL_messages_dialogsSlice struct {
	M_classID  int32
	M_count    int32
	M_dialogs  []TLObject
	M_messages []TLObject
	M_chats    []TLObject
	M_users    []TLObject
}

func (t *TL_messages_dialogsSlice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_dialogsSlice) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_messages_dialogsSlice) Get_count() int32 {
	return t.M_count
}

func (t *TL_messages_dialogsSlice) Set_dialogs(M_dialogs []TLObject) {
	t.M_dialogs = M_dialogs
}

func (t *TL_messages_dialogsSlice) Get_dialogs() []TLObject {
	return t.M_dialogs
}

func (t *TL_messages_dialogsSlice) Set_messages(M_messages []TLObject) {
	t.M_messages = M_messages
}

func (t *TL_messages_dialogsSlice) Get_messages() []TLObject {
	return t.M_messages
}

func (t *TL_messages_dialogsSlice) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_messages_dialogsSlice) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_messages_dialogsSlice) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_dialogsSlice) Get_users() []TLObject {
	return t.M_users
}

func New_TL_messages_dialogsSlice() *TL_messages_dialogsSlice {
	return &TL_messages_dialogsSlice{
		M_classID: TL_CLASS_messages_dialogsSlice,
	}
}

func (t *TL_messages_dialogsSlice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_dialogsSlice))
	ec.Int(t.Get_count())
	ec.Vector(t.Get_dialogs())
	ec.Vector(t.Get_messages())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messages_dialogsSlice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_count = dc.Int()
	t.M_dialogs = dc.Vector()
	t.M_messages = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_messages_dialogsSlice) String() string {
	return fmt.Sprintf("- messages_dialogsSlice#71e094f3\n-- count : %v\n-- dialogs : %v\n-- messages : %v\n-- chats : %v\n-- users : %v\n", t.M_count, t.M_dialogs, t.M_messages, t.M_chats, t.M_users)
}

// messages_messages#8c718e87
type TL_messages_messages struct {
	M_classID  int32
	M_messages []TLObject
	M_chats    []TLObject
	M_users    []TLObject
}

func (t *TL_messages_messages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_messages) Set_messages(M_messages []TLObject) {
	t.M_messages = M_messages
}

func (t *TL_messages_messages) Get_messages() []TLObject {
	return t.M_messages
}

func (t *TL_messages_messages) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_messages_messages) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_messages_messages) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_messages) Get_users() []TLObject {
	return t.M_users
}

func New_TL_messages_messages() *TL_messages_messages {
	return &TL_messages_messages{
		M_classID: TL_CLASS_messages_messages,
	}
}

func (t *TL_messages_messages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_messages))
	ec.Vector(t.Get_messages())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messages_messages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_messages = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_messages_messages) String() string {
	return fmt.Sprintf("- messages_messages#8c718e87\n-- messages : %v\n-- chats : %v\n-- users : %v\n", t.M_messages, t.M_chats, t.M_users)
}

// messages_messagesSlice#b446ae3
type TL_messages_messagesSlice struct {
	M_classID  int32
	M_count    int32
	M_messages []TLObject
	M_chats    []TLObject
	M_users    []TLObject
}

func (t *TL_messages_messagesSlice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_messagesSlice) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_messages_messagesSlice) Get_count() int32 {
	return t.M_count
}

func (t *TL_messages_messagesSlice) Set_messages(M_messages []TLObject) {
	t.M_messages = M_messages
}

func (t *TL_messages_messagesSlice) Get_messages() []TLObject {
	return t.M_messages
}

func (t *TL_messages_messagesSlice) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_messages_messagesSlice) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_messages_messagesSlice) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_messagesSlice) Get_users() []TLObject {
	return t.M_users
}

func New_TL_messages_messagesSlice() *TL_messages_messagesSlice {
	return &TL_messages_messagesSlice{
		M_classID: TL_CLASS_messages_messagesSlice,
	}
}

func (t *TL_messages_messagesSlice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_messagesSlice))
	ec.Int(t.Get_count())
	ec.Vector(t.Get_messages())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messages_messagesSlice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_count = dc.Int()
	t.M_messages = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_messages_messagesSlice) String() string {
	return fmt.Sprintf("- messages_messagesSlice#b446ae3\n-- count : %v\n-- messages : %v\n-- chats : %v\n-- users : %v\n", t.M_count, t.M_messages, t.M_chats, t.M_users)
}

// messages_channelMessages#99262e37
type TL_messages_channelMessages struct {
	M_classID  int32
	M_flags    TLObject
	M_pts      int32
	M_count    int32
	M_messages []TLObject
	M_chats    []TLObject
	M_users    []TLObject
}

func (t *TL_messages_channelMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_channelMessages) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_channelMessages) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_channelMessages) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_messages_channelMessages) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_messages_channelMessages) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_messages_channelMessages) Get_count() int32 {
	return t.M_count
}

func (t *TL_messages_channelMessages) Set_messages(M_messages []TLObject) {
	t.M_messages = M_messages
}

func (t *TL_messages_channelMessages) Get_messages() []TLObject {
	return t.M_messages
}

func (t *TL_messages_channelMessages) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_messages_channelMessages) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_messages_channelMessages) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_channelMessages) Get_users() []TLObject {
	return t.M_users
}

func New_TL_messages_channelMessages() *TL_messages_channelMessages {
	return &TL_messages_channelMessages{
		M_classID: TL_CLASS_messages_channelMessages,
	}
}

func (t *TL_messages_channelMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_channelMessages))
	ec.Int(t.Get_pts())
	ec.Int(t.Get_count())
	ec.Vector(t.Get_messages())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messages_channelMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pts = dc.Int()
	t.M_count = dc.Int()
	t.M_messages = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_messages_channelMessages) String() string {
	return fmt.Sprintf("- messages_channelMessages#99262e37\n-- flags : %v\n-- pts : %v\n-- count : %v\n-- messages : %v\n-- chats : %v\n-- users : %v\n", t.M_flags, t.M_pts, t.M_count, t.M_messages, t.M_chats, t.M_users)
}

// messages_messagesNotModified#74535f21
type TL_messages_messagesNotModified struct {
	M_classID int32
	M_count   int32
}

func (t *TL_messages_messagesNotModified) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_messagesNotModified) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_messages_messagesNotModified) Get_count() int32 {
	return t.M_count
}

func New_TL_messages_messagesNotModified() *TL_messages_messagesNotModified {
	return &TL_messages_messagesNotModified{
		M_classID: TL_CLASS_messages_messagesNotModified,
	}
}

func (t *TL_messages_messagesNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_messagesNotModified))
	ec.Int(t.Get_count())

	return ec.GetBuffer()
}

func (t *TL_messages_messagesNotModified) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_count = dc.Int()

	return dc.err
}

func (t *TL_messages_messagesNotModified) String() string {
	return fmt.Sprintf("- messages_messagesNotModified#74535f21\n-- count : %v\n", t.M_count)
}

// messages_chats#64ff9fd5
type TL_messages_chats struct {
	M_classID int32
	M_chats   []TLObject
}

func (t *TL_messages_chats) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_chats) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_messages_chats) Get_chats() []TLObject {
	return t.M_chats
}

func New_TL_messages_chats() *TL_messages_chats {
	return &TL_messages_chats{
		M_classID: TL_CLASS_messages_chats,
	}
}

func (t *TL_messages_chats) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_chats))
	ec.Vector(t.Get_chats())

	return ec.GetBuffer()
}

func (t *TL_messages_chats) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chats = dc.Vector()

	return dc.err
}

func (t *TL_messages_chats) String() string {
	return fmt.Sprintf("- messages_chats#64ff9fd5\n-- chats : %v\n", t.M_chats)
}

// messages_chatsSlice#9cd81144
type TL_messages_chatsSlice struct {
	M_classID int32
	M_count   int32
	M_chats   []TLObject
}

func (t *TL_messages_chatsSlice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_chatsSlice) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_messages_chatsSlice) Get_count() int32 {
	return t.M_count
}

func (t *TL_messages_chatsSlice) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_messages_chatsSlice) Get_chats() []TLObject {
	return t.M_chats
}

func New_TL_messages_chatsSlice() *TL_messages_chatsSlice {
	return &TL_messages_chatsSlice{
		M_classID: TL_CLASS_messages_chatsSlice,
	}
}

func (t *TL_messages_chatsSlice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_chatsSlice))
	ec.Int(t.Get_count())
	ec.Vector(t.Get_chats())

	return ec.GetBuffer()
}

func (t *TL_messages_chatsSlice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_count = dc.Int()
	t.M_chats = dc.Vector()

	return dc.err
}

func (t *TL_messages_chatsSlice) String() string {
	return fmt.Sprintf("- messages_chatsSlice#9cd81144\n-- count : %v\n-- chats : %v\n", t.M_count, t.M_chats)
}

// messages_chatFull#e5d7d19c
type TL_messages_chatFull struct {
	M_classID   int32
	M_full_chat TLObject
	M_chats     []TLObject
	M_users     []TLObject
}

func (t *TL_messages_chatFull) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_chatFull) Set_full_chat(M_full_chat TLObject) {
	t.M_full_chat = M_full_chat
}

func (t *TL_messages_chatFull) Get_full_chat() TLObject {
	return t.M_full_chat
}

func (t *TL_messages_chatFull) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_messages_chatFull) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_messages_chatFull) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_chatFull) Get_users() []TLObject {
	return t.M_users
}

func New_TL_messages_chatFull() *TL_messages_chatFull {
	return &TL_messages_chatFull{
		M_classID: TL_CLASS_messages_chatFull,
	}
}

func (t *TL_messages_chatFull) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_chatFull))
	ec.TLObject(t.Get_full_chat())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messages_chatFull) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_full_chat = dc.TLObject()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_messages_chatFull) String() string {
	return fmt.Sprintf("- messages_chatFull#e5d7d19c\n-- full_chat : %v\n-- chats : %v\n-- users : %v\n", t.M_full_chat, t.M_chats, t.M_users)
}

// messages_affectedHistory#b45c69d1
type TL_messages_affectedHistory struct {
	M_classID   int32
	M_pts       int32
	M_pts_count int32
	M_offset    int32
}

func (t *TL_messages_affectedHistory) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_affectedHistory) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_messages_affectedHistory) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_messages_affectedHistory) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_messages_affectedHistory) Get_pts_count() int32 {
	return t.M_pts_count
}

func (t *TL_messages_affectedHistory) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messages_affectedHistory) Get_offset() int32 {
	return t.M_offset
}

func New_TL_messages_affectedHistory() *TL_messages_affectedHistory {
	return &TL_messages_affectedHistory{
		M_classID: TL_CLASS_messages_affectedHistory,
	}
}

func (t *TL_messages_affectedHistory) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_affectedHistory))
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())
	ec.Int(t.Get_offset())

	return ec.GetBuffer()
}

func (t *TL_messages_affectedHistory) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()
	t.M_offset = dc.Int()

	return dc.err
}

func (t *TL_messages_affectedHistory) String() string {
	return fmt.Sprintf("- messages_affectedHistory#b45c69d1\n-- pts : %v\n-- pts_count : %v\n-- offset : %v\n", t.M_pts, t.M_pts_count, t.M_offset)
}

// inputMessagesFilterEmpty#57e2f66c
type TL_inputMessagesFilterEmpty struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterEmpty() *TL_inputMessagesFilterEmpty {
	return &TL_inputMessagesFilterEmpty{
		M_classID: TL_CLASS_inputMessagesFilterEmpty,
	}
}

func (t *TL_inputMessagesFilterEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterEmpty) String() string {
	return fmt.Sprintf("- inputMessagesFilterEmpty#57e2f66c\n")
}

// inputMessagesFilterPhotos#9609a51c
type TL_inputMessagesFilterPhotos struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterPhotos) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterPhotos() *TL_inputMessagesFilterPhotos {
	return &TL_inputMessagesFilterPhotos{
		M_classID: TL_CLASS_inputMessagesFilterPhotos,
	}
}

func (t *TL_inputMessagesFilterPhotos) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterPhotos))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterPhotos) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterPhotos) String() string {
	return fmt.Sprintf("- inputMessagesFilterPhotos#9609a51c\n")
}

// inputMessagesFilterVideo#9fc00e65
type TL_inputMessagesFilterVideo struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterVideo) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterVideo() *TL_inputMessagesFilterVideo {
	return &TL_inputMessagesFilterVideo{
		M_classID: TL_CLASS_inputMessagesFilterVideo,
	}
}

func (t *TL_inputMessagesFilterVideo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterVideo))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterVideo) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterVideo) String() string {
	return fmt.Sprintf("- inputMessagesFilterVideo#9fc00e65\n")
}

// inputMessagesFilterPhotoVideo#56e9f0e4
type TL_inputMessagesFilterPhotoVideo struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterPhotoVideo) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterPhotoVideo() *TL_inputMessagesFilterPhotoVideo {
	return &TL_inputMessagesFilterPhotoVideo{
		M_classID: TL_CLASS_inputMessagesFilterPhotoVideo,
	}
}

func (t *TL_inputMessagesFilterPhotoVideo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterPhotoVideo))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterPhotoVideo) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterPhotoVideo) String() string {
	return fmt.Sprintf("- inputMessagesFilterPhotoVideo#56e9f0e4\n")
}

// inputMessagesFilterDocument#9eddf188
type TL_inputMessagesFilterDocument struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterDocument) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterDocument() *TL_inputMessagesFilterDocument {
	return &TL_inputMessagesFilterDocument{
		M_classID: TL_CLASS_inputMessagesFilterDocument,
	}
}

func (t *TL_inputMessagesFilterDocument) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterDocument))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterDocument) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterDocument) String() string {
	return fmt.Sprintf("- inputMessagesFilterDocument#9eddf188\n")
}

// inputMessagesFilterUrl#7ef0dd87
type TL_inputMessagesFilterUrl struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterUrl) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterUrl() *TL_inputMessagesFilterUrl {
	return &TL_inputMessagesFilterUrl{
		M_classID: TL_CLASS_inputMessagesFilterUrl,
	}
}

func (t *TL_inputMessagesFilterUrl) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterUrl))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterUrl) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterUrl) String() string {
	return fmt.Sprintf("- inputMessagesFilterUrl#7ef0dd87\n")
}

// inputMessagesFilterGif#ffc86587
type TL_inputMessagesFilterGif struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterGif) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterGif() *TL_inputMessagesFilterGif {
	return &TL_inputMessagesFilterGif{
		M_classID: TL_CLASS_inputMessagesFilterGif,
	}
}

func (t *TL_inputMessagesFilterGif) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterGif))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterGif) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterGif) String() string {
	return fmt.Sprintf("- inputMessagesFilterGif#ffc86587\n")
}

// inputMessagesFilterVoice#50f5c392
type TL_inputMessagesFilterVoice struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterVoice) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterVoice() *TL_inputMessagesFilterVoice {
	return &TL_inputMessagesFilterVoice{
		M_classID: TL_CLASS_inputMessagesFilterVoice,
	}
}

func (t *TL_inputMessagesFilterVoice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterVoice))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterVoice) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterVoice) String() string {
	return fmt.Sprintf("- inputMessagesFilterVoice#50f5c392\n")
}

// inputMessagesFilterMusic#3751b49e
type TL_inputMessagesFilterMusic struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterMusic) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterMusic() *TL_inputMessagesFilterMusic {
	return &TL_inputMessagesFilterMusic{
		M_classID: TL_CLASS_inputMessagesFilterMusic,
	}
}

func (t *TL_inputMessagesFilterMusic) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterMusic))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterMusic) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterMusic) String() string {
	return fmt.Sprintf("- inputMessagesFilterMusic#3751b49e\n")
}

// inputMessagesFilterChatPhotos#3a20ecb8
type TL_inputMessagesFilterChatPhotos struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterChatPhotos) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterChatPhotos() *TL_inputMessagesFilterChatPhotos {
	return &TL_inputMessagesFilterChatPhotos{
		M_classID: TL_CLASS_inputMessagesFilterChatPhotos,
	}
}

func (t *TL_inputMessagesFilterChatPhotos) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterChatPhotos))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterChatPhotos) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterChatPhotos) String() string {
	return fmt.Sprintf("- inputMessagesFilterChatPhotos#3a20ecb8\n")
}

// inputMessagesFilterPhoneCalls#80c99768
type TL_inputMessagesFilterPhoneCalls struct {
	M_classID int32
	M_flags   TLObject
	M_missed  TLObject
}

func (t *TL_inputMessagesFilterPhoneCalls) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMessagesFilterPhoneCalls) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputMessagesFilterPhoneCalls) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputMessagesFilterPhoneCalls) Set_missed(M_missed TLObject) {
	t.M_missed = M_missed
}

func (t *TL_inputMessagesFilterPhoneCalls) Get_missed() TLObject {
	return t.M_missed
}

func New_TL_inputMessagesFilterPhoneCalls() *TL_inputMessagesFilterPhoneCalls {
	return &TL_inputMessagesFilterPhoneCalls{
		M_classID: TL_CLASS_inputMessagesFilterPhoneCalls,
	}
}

func (t *TL_inputMessagesFilterPhoneCalls) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterPhoneCalls))
	ec.TLObject(t.Get_missed())

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterPhoneCalls) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_missed = dc.TLObject()

	return dc.err
}

func (t *TL_inputMessagesFilterPhoneCalls) String() string {
	return fmt.Sprintf("- inputMessagesFilterPhoneCalls#80c99768\n-- flags : %v\n-- missed : %v\n", t.M_flags, t.M_missed)
}

// inputMessagesFilterRoundVoice#7a7c17a4
type TL_inputMessagesFilterRoundVoice struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterRoundVoice) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterRoundVoice() *TL_inputMessagesFilterRoundVoice {
	return &TL_inputMessagesFilterRoundVoice{
		M_classID: TL_CLASS_inputMessagesFilterRoundVoice,
	}
}

func (t *TL_inputMessagesFilterRoundVoice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterRoundVoice))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterRoundVoice) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterRoundVoice) String() string {
	return fmt.Sprintf("- inputMessagesFilterRoundVoice#7a7c17a4\n")
}

// inputMessagesFilterRoundVideo#b549da53
type TL_inputMessagesFilterRoundVideo struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterRoundVideo) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterRoundVideo() *TL_inputMessagesFilterRoundVideo {
	return &TL_inputMessagesFilterRoundVideo{
		M_classID: TL_CLASS_inputMessagesFilterRoundVideo,
	}
}

func (t *TL_inputMessagesFilterRoundVideo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterRoundVideo))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterRoundVideo) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterRoundVideo) String() string {
	return fmt.Sprintf("- inputMessagesFilterRoundVideo#b549da53\n")
}

// inputMessagesFilterMyMentions#c1f8e69a
type TL_inputMessagesFilterMyMentions struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterMyMentions) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterMyMentions() *TL_inputMessagesFilterMyMentions {
	return &TL_inputMessagesFilterMyMentions{
		M_classID: TL_CLASS_inputMessagesFilterMyMentions,
	}
}

func (t *TL_inputMessagesFilterMyMentions) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterMyMentions))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterMyMentions) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterMyMentions) String() string {
	return fmt.Sprintf("- inputMessagesFilterMyMentions#c1f8e69a\n")
}

// inputMessagesFilterGeo#e7026d0d
type TL_inputMessagesFilterGeo struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterGeo) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterGeo() *TL_inputMessagesFilterGeo {
	return &TL_inputMessagesFilterGeo{
		M_classID: TL_CLASS_inputMessagesFilterGeo,
	}
}

func (t *TL_inputMessagesFilterGeo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterGeo))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterGeo) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterGeo) String() string {
	return fmt.Sprintf("- inputMessagesFilterGeo#e7026d0d\n")
}

// inputMessagesFilterContacts#e062db83
type TL_inputMessagesFilterContacts struct {
	M_classID int32
}

func (t *TL_inputMessagesFilterContacts) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputMessagesFilterContacts() *TL_inputMessagesFilterContacts {
	return &TL_inputMessagesFilterContacts{
		M_classID: TL_CLASS_inputMessagesFilterContacts,
	}
}

func (t *TL_inputMessagesFilterContacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessagesFilterContacts))

	return ec.GetBuffer()
}

func (t *TL_inputMessagesFilterContacts) Decode(b []byte) error {
	return nil
}

func (t *TL_inputMessagesFilterContacts) String() string {
	return fmt.Sprintf("- inputMessagesFilterContacts#e062db83\n")
}

// updateNewMessage#1f2b0afd
type TL_updateNewMessage struct {
	M_classID   int32
	M_message   TLObject
	M_pts       int32
	M_pts_count int32
}

func (t *TL_updateNewMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateNewMessage) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_updateNewMessage) Get_message() TLObject {
	return t.M_message
}

func (t *TL_updateNewMessage) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateNewMessage) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateNewMessage) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateNewMessage) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateNewMessage() *TL_updateNewMessage {
	return &TL_updateNewMessage{
		M_classID: TL_CLASS_updateNewMessage,
	}
}

func (t *TL_updateNewMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateNewMessage))
	ec.TLObject(t.Get_message())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateNewMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateNewMessage) String() string {
	return fmt.Sprintf("- updateNewMessage#1f2b0afd\n-- message : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_message, t.M_pts, t.M_pts_count)
}

// updateMessageID#4e90bfd6
type TL_updateMessageID struct {
	M_classID   int32
	M_id        int32
	M_random_id int64
}

func (t *TL_updateMessageID) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateMessageID) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_updateMessageID) Get_id() int32 {
	return t.M_id
}

func (t *TL_updateMessageID) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_updateMessageID) Get_random_id() int64 {
	return t.M_random_id
}

func New_TL_updateMessageID() *TL_updateMessageID {
	return &TL_updateMessageID{
		M_classID: TL_CLASS_updateMessageID,
	}
}

func (t *TL_updateMessageID) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateMessageID))
	ec.Int(t.Get_id())
	ec.Long(t.Get_random_id())

	return ec.GetBuffer()
}

func (t *TL_updateMessageID) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_random_id = dc.Long()

	return dc.err
}

func (t *TL_updateMessageID) String() string {
	return fmt.Sprintf("- updateMessageID#4e90bfd6\n-- id : %v\n-- random_id : %v\n", t.M_id, t.M_random_id)
}

// updateDeleteMessages#a20db0e5
type TL_updateDeleteMessages struct {
	M_classID   int32
	M_messages  []int32
	M_pts       int32
	M_pts_count int32
}

func (t *TL_updateDeleteMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateDeleteMessages) Set_messages(M_messages []int32) {
	t.M_messages = M_messages
}

func (t *TL_updateDeleteMessages) Get_messages() []int32 {
	return t.M_messages
}

func (t *TL_updateDeleteMessages) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateDeleteMessages) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateDeleteMessages) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateDeleteMessages) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateDeleteMessages() *TL_updateDeleteMessages {
	return &TL_updateDeleteMessages{
		M_classID: TL_CLASS_updateDeleteMessages,
	}
}

func (t *TL_updateDeleteMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateDeleteMessages))
	ec.VectorInt(t.Get_messages())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateDeleteMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_messages = dc.VectorInt()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateDeleteMessages) String() string {
	return fmt.Sprintf("- updateDeleteMessages#a20db0e5\n-- messages : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_messages, t.M_pts, t.M_pts_count)
}

// updateUserTyping#5c486927
type TL_updateUserTyping struct {
	M_classID int32
	M_user_id int32
	M_action  TLObject
}

func (t *TL_updateUserTyping) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateUserTyping) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateUserTyping) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateUserTyping) Set_action(M_action TLObject) {
	t.M_action = M_action
}

func (t *TL_updateUserTyping) Get_action() TLObject {
	return t.M_action
}

func New_TL_updateUserTyping() *TL_updateUserTyping {
	return &TL_updateUserTyping{
		M_classID: TL_CLASS_updateUserTyping,
	}
}

func (t *TL_updateUserTyping) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateUserTyping))
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_action())

	return ec.GetBuffer()
}

func (t *TL_updateUserTyping) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_action = dc.TLObject()

	return dc.err
}

func (t *TL_updateUserTyping) String() string {
	return fmt.Sprintf("- updateUserTyping#5c486927\n-- user_id : %v\n-- action : %v\n", t.M_user_id, t.M_action)
}

// updateChatUserTyping#9a65ea1f
type TL_updateChatUserTyping struct {
	M_classID int32
	M_chat_id int32
	M_user_id int32
	M_action  TLObject
}

func (t *TL_updateChatUserTyping) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChatUserTyping) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_updateChatUserTyping) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_updateChatUserTyping) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateChatUserTyping) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateChatUserTyping) Set_action(M_action TLObject) {
	t.M_action = M_action
}

func (t *TL_updateChatUserTyping) Get_action() TLObject {
	return t.M_action
}

func New_TL_updateChatUserTyping() *TL_updateChatUserTyping {
	return &TL_updateChatUserTyping{
		M_classID: TL_CLASS_updateChatUserTyping,
	}
}

func (t *TL_updateChatUserTyping) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChatUserTyping))
	ec.Int(t.Get_chat_id())
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_action())

	return ec.GetBuffer()
}

func (t *TL_updateChatUserTyping) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_user_id = dc.Int()
	t.M_action = dc.TLObject()

	return dc.err
}

func (t *TL_updateChatUserTyping) String() string {
	return fmt.Sprintf("- updateChatUserTyping#9a65ea1f\n-- chat_id : %v\n-- user_id : %v\n-- action : %v\n", t.M_chat_id, t.M_user_id, t.M_action)
}

// updateChatParticipants#7761198
type TL_updateChatParticipants struct {
	M_classID      int32
	M_participants TLObject
}

func (t *TL_updateChatParticipants) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChatParticipants) Set_participants(M_participants TLObject) {
	t.M_participants = M_participants
}

func (t *TL_updateChatParticipants) Get_participants() TLObject {
	return t.M_participants
}

func New_TL_updateChatParticipants() *TL_updateChatParticipants {
	return &TL_updateChatParticipants{
		M_classID: TL_CLASS_updateChatParticipants,
	}
}

func (t *TL_updateChatParticipants) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChatParticipants))
	ec.TLObject(t.Get_participants())

	return ec.GetBuffer()
}

func (t *TL_updateChatParticipants) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_participants = dc.TLObject()

	return dc.err
}

func (t *TL_updateChatParticipants) String() string {
	return fmt.Sprintf("- updateChatParticipants#7761198\n-- participants : %v\n", t.M_participants)
}

// updateUserStatus#1bfbd823
type TL_updateUserStatus struct {
	M_classID int32
	M_user_id int32
	M_status  TLObject
}

func (t *TL_updateUserStatus) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateUserStatus) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateUserStatus) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateUserStatus) Set_status(M_status TLObject) {
	t.M_status = M_status
}

func (t *TL_updateUserStatus) Get_status() TLObject {
	return t.M_status
}

func New_TL_updateUserStatus() *TL_updateUserStatus {
	return &TL_updateUserStatus{
		M_classID: TL_CLASS_updateUserStatus,
	}
}

func (t *TL_updateUserStatus) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateUserStatus))
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_status())

	return ec.GetBuffer()
}

func (t *TL_updateUserStatus) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_status = dc.TLObject()

	return dc.err
}

func (t *TL_updateUserStatus) String() string {
	return fmt.Sprintf("- updateUserStatus#1bfbd823\n-- user_id : %v\n-- status : %v\n", t.M_user_id, t.M_status)
}

// updateUserName#a7332b73
type TL_updateUserName struct {
	M_classID    int32
	M_user_id    int32
	M_first_name string
	M_last_name  string
	M_username   string
}

func (t *TL_updateUserName) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateUserName) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateUserName) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateUserName) Set_first_name(M_first_name string) {
	t.M_first_name = M_first_name
}

func (t *TL_updateUserName) Get_first_name() string {
	return t.M_first_name
}

func (t *TL_updateUserName) Set_last_name(M_last_name string) {
	t.M_last_name = M_last_name
}

func (t *TL_updateUserName) Get_last_name() string {
	return t.M_last_name
}

func (t *TL_updateUserName) Set_username(M_username string) {
	t.M_username = M_username
}

func (t *TL_updateUserName) Get_username() string {
	return t.M_username
}

func New_TL_updateUserName() *TL_updateUserName {
	return &TL_updateUserName{
		M_classID: TL_CLASS_updateUserName,
	}
}

func (t *TL_updateUserName) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateUserName))
	ec.Int(t.Get_user_id())
	ec.String(t.Get_first_name())
	ec.String(t.Get_last_name())
	ec.String(t.Get_username())

	return ec.GetBuffer()
}

func (t *TL_updateUserName) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_first_name = dc.String()
	t.M_last_name = dc.String()
	t.M_username = dc.String()

	return dc.err
}

func (t *TL_updateUserName) String() string {
	return fmt.Sprintf("- updateUserName#a7332b73\n-- user_id : %v\n-- first_name : %v\n-- last_name : %v\n-- username : %v\n", t.M_user_id, t.M_first_name, t.M_last_name, t.M_username)
}

// updateUserPhoto#95313b0c
type TL_updateUserPhoto struct {
	M_classID  int32
	M_user_id  int32
	M_date     int32
	M_photo    TLObject
	M_previous TLObject
}

func (t *TL_updateUserPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateUserPhoto) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateUserPhoto) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateUserPhoto) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updateUserPhoto) Get_date() int32 {
	return t.M_date
}

func (t *TL_updateUserPhoto) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_updateUserPhoto) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_updateUserPhoto) Set_previous(M_previous TLObject) {
	t.M_previous = M_previous
}

func (t *TL_updateUserPhoto) Get_previous() TLObject {
	return t.M_previous
}

func New_TL_updateUserPhoto() *TL_updateUserPhoto {
	return &TL_updateUserPhoto{
		M_classID: TL_CLASS_updateUserPhoto,
	}
}

func (t *TL_updateUserPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateUserPhoto))
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_previous())

	return ec.GetBuffer()
}

func (t *TL_updateUserPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_date = dc.Int()
	t.M_photo = dc.TLObject()
	t.M_previous = dc.TLObject()

	return dc.err
}

func (t *TL_updateUserPhoto) String() string {
	return fmt.Sprintf("- updateUserPhoto#95313b0c\n-- user_id : %v\n-- date : %v\n-- photo : %v\n-- previous : %v\n", t.M_user_id, t.M_date, t.M_photo, t.M_previous)
}

// updateContactRegistered#2575bbb9
type TL_updateContactRegistered struct {
	M_classID int32
	M_user_id int32
	M_date    int32
}

func (t *TL_updateContactRegistered) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateContactRegistered) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateContactRegistered) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateContactRegistered) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updateContactRegistered) Get_date() int32 {
	return t.M_date
}

func New_TL_updateContactRegistered() *TL_updateContactRegistered {
	return &TL_updateContactRegistered{
		M_classID: TL_CLASS_updateContactRegistered,
	}
}

func (t *TL_updateContactRegistered) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateContactRegistered))
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_updateContactRegistered) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_updateContactRegistered) String() string {
	return fmt.Sprintf("- updateContactRegistered#2575bbb9\n-- user_id : %v\n-- date : %v\n", t.M_user_id, t.M_date)
}

// updateContactLink#9d2e67c5
type TL_updateContactLink struct {
	M_classID      int32
	M_user_id      int32
	M_my_link      TLObject
	M_foreign_link TLObject
}

func (t *TL_updateContactLink) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateContactLink) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateContactLink) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateContactLink) Set_my_link(M_my_link TLObject) {
	t.M_my_link = M_my_link
}

func (t *TL_updateContactLink) Get_my_link() TLObject {
	return t.M_my_link
}

func (t *TL_updateContactLink) Set_foreign_link(M_foreign_link TLObject) {
	t.M_foreign_link = M_foreign_link
}

func (t *TL_updateContactLink) Get_foreign_link() TLObject {
	return t.M_foreign_link
}

func New_TL_updateContactLink() *TL_updateContactLink {
	return &TL_updateContactLink{
		M_classID: TL_CLASS_updateContactLink,
	}
}

func (t *TL_updateContactLink) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateContactLink))
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_my_link())
	ec.TLObject(t.Get_foreign_link())

	return ec.GetBuffer()
}

func (t *TL_updateContactLink) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_my_link = dc.TLObject()
	t.M_foreign_link = dc.TLObject()

	return dc.err
}

func (t *TL_updateContactLink) String() string {
	return fmt.Sprintf("- updateContactLink#9d2e67c5\n-- user_id : %v\n-- my_link : %v\n-- foreign_link : %v\n", t.M_user_id, t.M_my_link, t.M_foreign_link)
}

// updateNewEncryptedMessage#12bcbd9a
type TL_updateNewEncryptedMessage struct {
	M_classID int32
	M_message TLObject
	M_qts     int32
}

func (t *TL_updateNewEncryptedMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateNewEncryptedMessage) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_updateNewEncryptedMessage) Get_message() TLObject {
	return t.M_message
}

func (t *TL_updateNewEncryptedMessage) Set_qts(M_qts int32) {
	t.M_qts = M_qts
}

func (t *TL_updateNewEncryptedMessage) Get_qts() int32 {
	return t.M_qts
}

func New_TL_updateNewEncryptedMessage() *TL_updateNewEncryptedMessage {
	return &TL_updateNewEncryptedMessage{
		M_classID: TL_CLASS_updateNewEncryptedMessage,
	}
}

func (t *TL_updateNewEncryptedMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateNewEncryptedMessage))
	ec.TLObject(t.Get_message())
	ec.Int(t.Get_qts())

	return ec.GetBuffer()
}

func (t *TL_updateNewEncryptedMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.TLObject()
	t.M_qts = dc.Int()

	return dc.err
}

func (t *TL_updateNewEncryptedMessage) String() string {
	return fmt.Sprintf("- updateNewEncryptedMessage#12bcbd9a\n-- message : %v\n-- qts : %v\n", t.M_message, t.M_qts)
}

// updateEncryptedChatTyping#1710f156
type TL_updateEncryptedChatTyping struct {
	M_classID int32
	M_chat_id int32
}

func (t *TL_updateEncryptedChatTyping) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateEncryptedChatTyping) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_updateEncryptedChatTyping) Get_chat_id() int32 {
	return t.M_chat_id
}

func New_TL_updateEncryptedChatTyping() *TL_updateEncryptedChatTyping {
	return &TL_updateEncryptedChatTyping{
		M_classID: TL_CLASS_updateEncryptedChatTyping,
	}
}

func (t *TL_updateEncryptedChatTyping) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateEncryptedChatTyping))
	ec.Int(t.Get_chat_id())

	return ec.GetBuffer()
}

func (t *TL_updateEncryptedChatTyping) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()

	return dc.err
}

func (t *TL_updateEncryptedChatTyping) String() string {
	return fmt.Sprintf("- updateEncryptedChatTyping#1710f156\n-- chat_id : %v\n", t.M_chat_id)
}

// updateEncryption#b4a2e88d
type TL_updateEncryption struct {
	M_classID int32
	M_chat    TLObject
	M_date    int32
}

func (t *TL_updateEncryption) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateEncryption) Set_chat(M_chat TLObject) {
	t.M_chat = M_chat
}

func (t *TL_updateEncryption) Get_chat() TLObject {
	return t.M_chat
}

func (t *TL_updateEncryption) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updateEncryption) Get_date() int32 {
	return t.M_date
}

func New_TL_updateEncryption() *TL_updateEncryption {
	return &TL_updateEncryption{
		M_classID: TL_CLASS_updateEncryption,
	}
}

func (t *TL_updateEncryption) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateEncryption))
	ec.TLObject(t.Get_chat())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_updateEncryption) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat = dc.TLObject()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_updateEncryption) String() string {
	return fmt.Sprintf("- updateEncryption#b4a2e88d\n-- chat : %v\n-- date : %v\n", t.M_chat, t.M_date)
}

// updateEncryptedMessagesRead#38fe25b7
type TL_updateEncryptedMessagesRead struct {
	M_classID  int32
	M_chat_id  int32
	M_max_date int32
	M_date     int32
}

func (t *TL_updateEncryptedMessagesRead) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateEncryptedMessagesRead) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_updateEncryptedMessagesRead) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_updateEncryptedMessagesRead) Set_max_date(M_max_date int32) {
	t.M_max_date = M_max_date
}

func (t *TL_updateEncryptedMessagesRead) Get_max_date() int32 {
	return t.M_max_date
}

func (t *TL_updateEncryptedMessagesRead) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updateEncryptedMessagesRead) Get_date() int32 {
	return t.M_date
}

func New_TL_updateEncryptedMessagesRead() *TL_updateEncryptedMessagesRead {
	return &TL_updateEncryptedMessagesRead{
		M_classID: TL_CLASS_updateEncryptedMessagesRead,
	}
}

func (t *TL_updateEncryptedMessagesRead) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateEncryptedMessagesRead))
	ec.Int(t.Get_chat_id())
	ec.Int(t.Get_max_date())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_updateEncryptedMessagesRead) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_max_date = dc.Int()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_updateEncryptedMessagesRead) String() string {
	return fmt.Sprintf("- updateEncryptedMessagesRead#38fe25b7\n-- chat_id : %v\n-- max_date : %v\n-- date : %v\n", t.M_chat_id, t.M_max_date, t.M_date)
}

// updateChatParticipantAdd#ea4b0e5c
type TL_updateChatParticipantAdd struct {
	M_classID    int32
	M_chat_id    int32
	M_user_id    int32
	M_inviter_id int32
	M_date       int32
	M_version    int32
}

func (t *TL_updateChatParticipantAdd) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChatParticipantAdd) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_updateChatParticipantAdd) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_updateChatParticipantAdd) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateChatParticipantAdd) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateChatParticipantAdd) Set_inviter_id(M_inviter_id int32) {
	t.M_inviter_id = M_inviter_id
}

func (t *TL_updateChatParticipantAdd) Get_inviter_id() int32 {
	return t.M_inviter_id
}

func (t *TL_updateChatParticipantAdd) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updateChatParticipantAdd) Get_date() int32 {
	return t.M_date
}

func (t *TL_updateChatParticipantAdd) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_updateChatParticipantAdd) Get_version() int32 {
	return t.M_version
}

func New_TL_updateChatParticipantAdd() *TL_updateChatParticipantAdd {
	return &TL_updateChatParticipantAdd{
		M_classID: TL_CLASS_updateChatParticipantAdd,
	}
}

func (t *TL_updateChatParticipantAdd) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChatParticipantAdd))
	ec.Int(t.Get_chat_id())
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_inviter_id())
	ec.Int(t.Get_date())
	ec.Int(t.Get_version())

	return ec.GetBuffer()
}

func (t *TL_updateChatParticipantAdd) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_user_id = dc.Int()
	t.M_inviter_id = dc.Int()
	t.M_date = dc.Int()
	t.M_version = dc.Int()

	return dc.err
}

func (t *TL_updateChatParticipantAdd) String() string {
	return fmt.Sprintf("- updateChatParticipantAdd#ea4b0e5c\n-- chat_id : %v\n-- user_id : %v\n-- inviter_id : %v\n-- date : %v\n-- version : %v\n", t.M_chat_id, t.M_user_id, t.M_inviter_id, t.M_date, t.M_version)
}

// updateChatParticipantDelete#6e5f8c22
type TL_updateChatParticipantDelete struct {
	M_classID int32
	M_chat_id int32
	M_user_id int32
	M_version int32
}

func (t *TL_updateChatParticipantDelete) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChatParticipantDelete) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_updateChatParticipantDelete) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_updateChatParticipantDelete) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateChatParticipantDelete) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateChatParticipantDelete) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_updateChatParticipantDelete) Get_version() int32 {
	return t.M_version
}

func New_TL_updateChatParticipantDelete() *TL_updateChatParticipantDelete {
	return &TL_updateChatParticipantDelete{
		M_classID: TL_CLASS_updateChatParticipantDelete,
	}
}

func (t *TL_updateChatParticipantDelete) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChatParticipantDelete))
	ec.Int(t.Get_chat_id())
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_version())

	return ec.GetBuffer()
}

func (t *TL_updateChatParticipantDelete) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_user_id = dc.Int()
	t.M_version = dc.Int()

	return dc.err
}

func (t *TL_updateChatParticipantDelete) String() string {
	return fmt.Sprintf("- updateChatParticipantDelete#6e5f8c22\n-- chat_id : %v\n-- user_id : %v\n-- version : %v\n", t.M_chat_id, t.M_user_id, t.M_version)
}

// updateDcOptions#8e5e9873
type TL_updateDcOptions struct {
	M_classID    int32
	M_dc_options []TLObject
}

func (t *TL_updateDcOptions) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateDcOptions) Set_dc_options(M_dc_options []TLObject) {
	t.M_dc_options = M_dc_options
}

func (t *TL_updateDcOptions) Get_dc_options() []TLObject {
	return t.M_dc_options
}

func New_TL_updateDcOptions() *TL_updateDcOptions {
	return &TL_updateDcOptions{
		M_classID: TL_CLASS_updateDcOptions,
	}
}

func (t *TL_updateDcOptions) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateDcOptions))
	ec.Vector(t.Get_dc_options())

	return ec.GetBuffer()
}

func (t *TL_updateDcOptions) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_dc_options = dc.Vector()

	return dc.err
}

func (t *TL_updateDcOptions) String() string {
	return fmt.Sprintf("- updateDcOptions#8e5e9873\n-- dc_options : %v\n", t.M_dc_options)
}

// updateUserBlocked#80ece81a
type TL_updateUserBlocked struct {
	M_classID int32
	M_user_id int32
	M_blocked TLObject
}

func (t *TL_updateUserBlocked) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateUserBlocked) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateUserBlocked) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateUserBlocked) Set_blocked(M_blocked TLObject) {
	t.M_blocked = M_blocked
}

func (t *TL_updateUserBlocked) Get_blocked() TLObject {
	return t.M_blocked
}

func New_TL_updateUserBlocked() *TL_updateUserBlocked {
	return &TL_updateUserBlocked{
		M_classID: TL_CLASS_updateUserBlocked,
	}
}

func (t *TL_updateUserBlocked) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateUserBlocked))
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_blocked())

	return ec.GetBuffer()
}

func (t *TL_updateUserBlocked) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_blocked = dc.TLObject()

	return dc.err
}

func (t *TL_updateUserBlocked) String() string {
	return fmt.Sprintf("- updateUserBlocked#80ece81a\n-- user_id : %v\n-- blocked : %v\n", t.M_user_id, t.M_blocked)
}

// updateNotifySettings#bec268ef
type TL_updateNotifySettings struct {
	M_classID         int32
	M_peer            TLObject
	M_notify_settings TLObject
}

func (t *TL_updateNotifySettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateNotifySettings) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_updateNotifySettings) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_updateNotifySettings) Set_notify_settings(M_notify_settings TLObject) {
	t.M_notify_settings = M_notify_settings
}

func (t *TL_updateNotifySettings) Get_notify_settings() TLObject {
	return t.M_notify_settings
}

func New_TL_updateNotifySettings() *TL_updateNotifySettings {
	return &TL_updateNotifySettings{
		M_classID: TL_CLASS_updateNotifySettings,
	}
}

func (t *TL_updateNotifySettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateNotifySettings))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_notify_settings())

	return ec.GetBuffer()
}

func (t *TL_updateNotifySettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_notify_settings = dc.TLObject()

	return dc.err
}

func (t *TL_updateNotifySettings) String() string {
	return fmt.Sprintf("- updateNotifySettings#bec268ef\n-- peer : %v\n-- notify_settings : %v\n", t.M_peer, t.M_notify_settings)
}

// updateServiceNotification#ebe46819
type TL_updateServiceNotification struct {
	M_classID    int32
	M_flags      TLObject
	M_popup      TLObject
	M_inbox_date TLObject
	M_type       string
	M_message    string
	M_media      TLObject
	M_entities   []TLObject
}

func (t *TL_updateServiceNotification) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateServiceNotification) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateServiceNotification) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateServiceNotification) Set_popup(M_popup TLObject) {
	t.M_popup = M_popup
}

func (t *TL_updateServiceNotification) Get_popup() TLObject {
	return t.M_popup
}

func (t *TL_updateServiceNotification) Set_inbox_date(M_inbox_date TLObject) {
	t.M_inbox_date = M_inbox_date
}

func (t *TL_updateServiceNotification) Get_inbox_date() TLObject {
	return t.M_inbox_date
}

func (t *TL_updateServiceNotification) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_updateServiceNotification) Get_type() string {
	return t.M_type
}

func (t *TL_updateServiceNotification) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_updateServiceNotification) Get_message() string {
	return t.M_message
}

func (t *TL_updateServiceNotification) Set_media(M_media TLObject) {
	t.M_media = M_media
}

func (t *TL_updateServiceNotification) Get_media() TLObject {
	return t.M_media
}

func (t *TL_updateServiceNotification) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_updateServiceNotification) Get_entities() []TLObject {
	return t.M_entities
}

func New_TL_updateServiceNotification() *TL_updateServiceNotification {
	return &TL_updateServiceNotification{
		M_classID: TL_CLASS_updateServiceNotification,
	}
}

func (t *TL_updateServiceNotification) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateServiceNotification))
	ec.TLObject(t.Get_popup())
	ec.TLObject(t.Get_inbox_date())
	ec.String(t.Get_type())
	ec.String(t.Get_message())
	ec.TLObject(t.Get_media())
	ec.Vector(t.Get_entities())

	return ec.GetBuffer()
}

func (t *TL_updateServiceNotification) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_popup = dc.TLObject()
	t.M_inbox_date = dc.TLObject()
	t.M_type = dc.String()
	t.M_message = dc.String()
	t.M_media = dc.TLObject()
	t.M_entities = dc.Vector()

	return dc.err
}

func (t *TL_updateServiceNotification) String() string {
	return fmt.Sprintf("- updateServiceNotification#ebe46819\n-- flags : %v\n-- popup : %v\n-- inbox_date : %v\n-- type : %v\n-- message : %v\n-- media : %v\n-- entities : %v\n", t.M_flags, t.M_popup, t.M_inbox_date, t.M_type, t.M_message, t.M_media, t.M_entities)
}

// updatePrivacy#ee3b272a
type TL_updatePrivacy struct {
	M_classID int32
	M_key     TLObject
	M_rules   []TLObject
}

func (t *TL_updatePrivacy) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updatePrivacy) Set_key(M_key TLObject) {
	t.M_key = M_key
}

func (t *TL_updatePrivacy) Get_key() TLObject {
	return t.M_key
}

func (t *TL_updatePrivacy) Set_rules(M_rules []TLObject) {
	t.M_rules = M_rules
}

func (t *TL_updatePrivacy) Get_rules() []TLObject {
	return t.M_rules
}

func New_TL_updatePrivacy() *TL_updatePrivacy {
	return &TL_updatePrivacy{
		M_classID: TL_CLASS_updatePrivacy,
	}
}

func (t *TL_updatePrivacy) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updatePrivacy))
	ec.TLObject(t.Get_key())
	ec.Vector(t.Get_rules())

	return ec.GetBuffer()
}

func (t *TL_updatePrivacy) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_key = dc.TLObject()
	t.M_rules = dc.Vector()

	return dc.err
}

func (t *TL_updatePrivacy) String() string {
	return fmt.Sprintf("- updatePrivacy#ee3b272a\n-- key : %v\n-- rules : %v\n", t.M_key, t.M_rules)
}

// updateUserPhone#12b9417b
type TL_updateUserPhone struct {
	M_classID int32
	M_user_id int32
	M_phone   string
}

func (t *TL_updateUserPhone) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateUserPhone) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateUserPhone) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateUserPhone) Set_phone(M_phone string) {
	t.M_phone = M_phone
}

func (t *TL_updateUserPhone) Get_phone() string {
	return t.M_phone
}

func New_TL_updateUserPhone() *TL_updateUserPhone {
	return &TL_updateUserPhone{
		M_classID: TL_CLASS_updateUserPhone,
	}
}

func (t *TL_updateUserPhone) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateUserPhone))
	ec.Int(t.Get_user_id())
	ec.String(t.Get_phone())

	return ec.GetBuffer()
}

func (t *TL_updateUserPhone) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_phone = dc.String()

	return dc.err
}

func (t *TL_updateUserPhone) String() string {
	return fmt.Sprintf("- updateUserPhone#12b9417b\n-- user_id : %v\n-- phone : %v\n", t.M_user_id, t.M_phone)
}

// updateReadHistoryInbox#9961fd5c
type TL_updateReadHistoryInbox struct {
	M_classID   int32
	M_peer      TLObject
	M_max_id    int32
	M_pts       int32
	M_pts_count int32
}

func (t *TL_updateReadHistoryInbox) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateReadHistoryInbox) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_updateReadHistoryInbox) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_updateReadHistoryInbox) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_updateReadHistoryInbox) Get_max_id() int32 {
	return t.M_max_id
}

func (t *TL_updateReadHistoryInbox) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateReadHistoryInbox) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateReadHistoryInbox) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateReadHistoryInbox) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateReadHistoryInbox() *TL_updateReadHistoryInbox {
	return &TL_updateReadHistoryInbox{
		M_classID: TL_CLASS_updateReadHistoryInbox,
	}
}

func (t *TL_updateReadHistoryInbox) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateReadHistoryInbox))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_max_id())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateReadHistoryInbox) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_max_id = dc.Int()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateReadHistoryInbox) String() string {
	return fmt.Sprintf("- updateReadHistoryInbox#9961fd5c\n-- peer : %v\n-- max_id : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_peer, t.M_max_id, t.M_pts, t.M_pts_count)
}

// updateReadHistoryOutbox#2f2f21bf
type TL_updateReadHistoryOutbox struct {
	M_classID   int32
	M_peer      TLObject
	M_max_id    int32
	M_pts       int32
	M_pts_count int32
}

func (t *TL_updateReadHistoryOutbox) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateReadHistoryOutbox) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_updateReadHistoryOutbox) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_updateReadHistoryOutbox) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_updateReadHistoryOutbox) Get_max_id() int32 {
	return t.M_max_id
}

func (t *TL_updateReadHistoryOutbox) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateReadHistoryOutbox) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateReadHistoryOutbox) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateReadHistoryOutbox) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateReadHistoryOutbox() *TL_updateReadHistoryOutbox {
	return &TL_updateReadHistoryOutbox{
		M_classID: TL_CLASS_updateReadHistoryOutbox,
	}
}

func (t *TL_updateReadHistoryOutbox) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateReadHistoryOutbox))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_max_id())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateReadHistoryOutbox) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_max_id = dc.Int()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateReadHistoryOutbox) String() string {
	return fmt.Sprintf("- updateReadHistoryOutbox#2f2f21bf\n-- peer : %v\n-- max_id : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_peer, t.M_max_id, t.M_pts, t.M_pts_count)
}

// updateWebPage#7f891213
type TL_updateWebPage struct {
	M_classID   int32
	M_webpage   TLObject
	M_pts       int32
	M_pts_count int32
}

func (t *TL_updateWebPage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateWebPage) Set_webpage(M_webpage TLObject) {
	t.M_webpage = M_webpage
}

func (t *TL_updateWebPage) Get_webpage() TLObject {
	return t.M_webpage
}

func (t *TL_updateWebPage) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateWebPage) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateWebPage) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateWebPage) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateWebPage() *TL_updateWebPage {
	return &TL_updateWebPage{
		M_classID: TL_CLASS_updateWebPage,
	}
}

func (t *TL_updateWebPage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateWebPage))
	ec.TLObject(t.Get_webpage())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateWebPage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_webpage = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateWebPage) String() string {
	return fmt.Sprintf("- updateWebPage#7f891213\n-- webpage : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_webpage, t.M_pts, t.M_pts_count)
}

// updateReadMessagesContents#68c13933
type TL_updateReadMessagesContents struct {
	M_classID   int32
	M_messages  []int32
	M_pts       int32
	M_pts_count int32
}

func (t *TL_updateReadMessagesContents) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateReadMessagesContents) Set_messages(M_messages []int32) {
	t.M_messages = M_messages
}

func (t *TL_updateReadMessagesContents) Get_messages() []int32 {
	return t.M_messages
}

func (t *TL_updateReadMessagesContents) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateReadMessagesContents) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateReadMessagesContents) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateReadMessagesContents) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateReadMessagesContents() *TL_updateReadMessagesContents {
	return &TL_updateReadMessagesContents{
		M_classID: TL_CLASS_updateReadMessagesContents,
	}
}

func (t *TL_updateReadMessagesContents) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateReadMessagesContents))
	ec.VectorInt(t.Get_messages())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateReadMessagesContents) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_messages = dc.VectorInt()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateReadMessagesContents) String() string {
	return fmt.Sprintf("- updateReadMessagesContents#68c13933\n-- messages : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_messages, t.M_pts, t.M_pts_count)
}

// updateChannelTooLong#eb0467fb
type TL_updateChannelTooLong struct {
	M_classID    int32
	M_flags      TLObject
	M_channel_id int32
	M_pts        TLObject
}

func (t *TL_updateChannelTooLong) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChannelTooLong) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateChannelTooLong) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateChannelTooLong) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateChannelTooLong) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_updateChannelTooLong) Set_pts(M_pts TLObject) {
	t.M_pts = M_pts
}

func (t *TL_updateChannelTooLong) Get_pts() TLObject {
	return t.M_pts
}

func New_TL_updateChannelTooLong() *TL_updateChannelTooLong {
	return &TL_updateChannelTooLong{
		M_classID: TL_CLASS_updateChannelTooLong,
	}
}

func (t *TL_updateChannelTooLong) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChannelTooLong))
	ec.Int(t.Get_channel_id())
	ec.TLObject(t.Get_pts())

	return ec.GetBuffer()
}

func (t *TL_updateChannelTooLong) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_pts = dc.TLObject()

	return dc.err
}

func (t *TL_updateChannelTooLong) String() string {
	return fmt.Sprintf("- updateChannelTooLong#eb0467fb\n-- flags : %v\n-- channel_id : %v\n-- pts : %v\n", t.M_flags, t.M_channel_id, t.M_pts)
}

// updateChannel#b6d45656
type TL_updateChannel struct {
	M_classID    int32
	M_channel_id int32
}

func (t *TL_updateChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChannel) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateChannel) Get_channel_id() int32 {
	return t.M_channel_id
}

func New_TL_updateChannel() *TL_updateChannel {
	return &TL_updateChannel{
		M_classID: TL_CLASS_updateChannel,
	}
}

func (t *TL_updateChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChannel))
	ec.Int(t.Get_channel_id())

	return ec.GetBuffer()
}

func (t *TL_updateChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()

	return dc.err
}

func (t *TL_updateChannel) String() string {
	return fmt.Sprintf("- updateChannel#b6d45656\n-- channel_id : %v\n", t.M_channel_id)
}

// updateNewChannelMessage#62ba04d9
type TL_updateNewChannelMessage struct {
	M_classID   int32
	M_message   TLObject
	M_pts       int32
	M_pts_count int32
}

func (t *TL_updateNewChannelMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateNewChannelMessage) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_updateNewChannelMessage) Get_message() TLObject {
	return t.M_message
}

func (t *TL_updateNewChannelMessage) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateNewChannelMessage) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateNewChannelMessage) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateNewChannelMessage) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateNewChannelMessage() *TL_updateNewChannelMessage {
	return &TL_updateNewChannelMessage{
		M_classID: TL_CLASS_updateNewChannelMessage,
	}
}

func (t *TL_updateNewChannelMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateNewChannelMessage))
	ec.TLObject(t.Get_message())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateNewChannelMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateNewChannelMessage) String() string {
	return fmt.Sprintf("- updateNewChannelMessage#62ba04d9\n-- message : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_message, t.M_pts, t.M_pts_count)
}

// updateReadChannelInbox#4214f37f
type TL_updateReadChannelInbox struct {
	M_classID    int32
	M_channel_id int32
	M_max_id     int32
}

func (t *TL_updateReadChannelInbox) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateReadChannelInbox) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateReadChannelInbox) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_updateReadChannelInbox) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_updateReadChannelInbox) Get_max_id() int32 {
	return t.M_max_id
}

func New_TL_updateReadChannelInbox() *TL_updateReadChannelInbox {
	return &TL_updateReadChannelInbox{
		M_classID: TL_CLASS_updateReadChannelInbox,
	}
}

func (t *TL_updateReadChannelInbox) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateReadChannelInbox))
	ec.Int(t.Get_channel_id())
	ec.Int(t.Get_max_id())

	return ec.GetBuffer()
}

func (t *TL_updateReadChannelInbox) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_max_id = dc.Int()

	return dc.err
}

func (t *TL_updateReadChannelInbox) String() string {
	return fmt.Sprintf("- updateReadChannelInbox#4214f37f\n-- channel_id : %v\n-- max_id : %v\n", t.M_channel_id, t.M_max_id)
}

// updateDeleteChannelMessages#c37521c9
type TL_updateDeleteChannelMessages struct {
	M_classID    int32
	M_channel_id int32
	M_messages   []int32
	M_pts        int32
	M_pts_count  int32
}

func (t *TL_updateDeleteChannelMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateDeleteChannelMessages) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateDeleteChannelMessages) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_updateDeleteChannelMessages) Set_messages(M_messages []int32) {
	t.M_messages = M_messages
}

func (t *TL_updateDeleteChannelMessages) Get_messages() []int32 {
	return t.M_messages
}

func (t *TL_updateDeleteChannelMessages) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateDeleteChannelMessages) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateDeleteChannelMessages) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateDeleteChannelMessages) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateDeleteChannelMessages() *TL_updateDeleteChannelMessages {
	return &TL_updateDeleteChannelMessages{
		M_classID: TL_CLASS_updateDeleteChannelMessages,
	}
}

func (t *TL_updateDeleteChannelMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateDeleteChannelMessages))
	ec.Int(t.Get_channel_id())
	ec.VectorInt(t.Get_messages())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateDeleteChannelMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_messages = dc.VectorInt()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateDeleteChannelMessages) String() string {
	return fmt.Sprintf("- updateDeleteChannelMessages#c37521c9\n-- channel_id : %v\n-- messages : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_channel_id, t.M_messages, t.M_pts, t.M_pts_count)
}

// updateChannelMessageViews#98a12b4b
type TL_updateChannelMessageViews struct {
	M_classID    int32
	M_channel_id int32
	M_id         int32
	M_views      int32
}

func (t *TL_updateChannelMessageViews) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChannelMessageViews) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateChannelMessageViews) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_updateChannelMessageViews) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_updateChannelMessageViews) Get_id() int32 {
	return t.M_id
}

func (t *TL_updateChannelMessageViews) Set_views(M_views int32) {
	t.M_views = M_views
}

func (t *TL_updateChannelMessageViews) Get_views() int32 {
	return t.M_views
}

func New_TL_updateChannelMessageViews() *TL_updateChannelMessageViews {
	return &TL_updateChannelMessageViews{
		M_classID: TL_CLASS_updateChannelMessageViews,
	}
}

func (t *TL_updateChannelMessageViews) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChannelMessageViews))
	ec.Int(t.Get_channel_id())
	ec.Int(t.Get_id())
	ec.Int(t.Get_views())

	return ec.GetBuffer()
}

func (t *TL_updateChannelMessageViews) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_id = dc.Int()
	t.M_views = dc.Int()

	return dc.err
}

func (t *TL_updateChannelMessageViews) String() string {
	return fmt.Sprintf("- updateChannelMessageViews#98a12b4b\n-- channel_id : %v\n-- id : %v\n-- views : %v\n", t.M_channel_id, t.M_id, t.M_views)
}

// updateChatAdmins#6e947941
type TL_updateChatAdmins struct {
	M_classID int32
	M_chat_id int32
	M_enabled TLObject
	M_version int32
}

func (t *TL_updateChatAdmins) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChatAdmins) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_updateChatAdmins) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_updateChatAdmins) Set_enabled(M_enabled TLObject) {
	t.M_enabled = M_enabled
}

func (t *TL_updateChatAdmins) Get_enabled() TLObject {
	return t.M_enabled
}

func (t *TL_updateChatAdmins) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_updateChatAdmins) Get_version() int32 {
	return t.M_version
}

func New_TL_updateChatAdmins() *TL_updateChatAdmins {
	return &TL_updateChatAdmins{
		M_classID: TL_CLASS_updateChatAdmins,
	}
}

func (t *TL_updateChatAdmins) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChatAdmins))
	ec.Int(t.Get_chat_id())
	ec.TLObject(t.Get_enabled())
	ec.Int(t.Get_version())

	return ec.GetBuffer()
}

func (t *TL_updateChatAdmins) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_enabled = dc.TLObject()
	t.M_version = dc.Int()

	return dc.err
}

func (t *TL_updateChatAdmins) String() string {
	return fmt.Sprintf("- updateChatAdmins#6e947941\n-- chat_id : %v\n-- enabled : %v\n-- version : %v\n", t.M_chat_id, t.M_enabled, t.M_version)
}

// updateChatParticipantAdmin#b6901959
type TL_updateChatParticipantAdmin struct {
	M_classID  int32
	M_chat_id  int32
	M_user_id  int32
	M_is_admin TLObject
	M_version  int32
}

func (t *TL_updateChatParticipantAdmin) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChatParticipantAdmin) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_updateChatParticipantAdmin) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_updateChatParticipantAdmin) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateChatParticipantAdmin) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateChatParticipantAdmin) Set_is_admin(M_is_admin TLObject) {
	t.M_is_admin = M_is_admin
}

func (t *TL_updateChatParticipantAdmin) Get_is_admin() TLObject {
	return t.M_is_admin
}

func (t *TL_updateChatParticipantAdmin) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_updateChatParticipantAdmin) Get_version() int32 {
	return t.M_version
}

func New_TL_updateChatParticipantAdmin() *TL_updateChatParticipantAdmin {
	return &TL_updateChatParticipantAdmin{
		M_classID: TL_CLASS_updateChatParticipantAdmin,
	}
}

func (t *TL_updateChatParticipantAdmin) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChatParticipantAdmin))
	ec.Int(t.Get_chat_id())
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_is_admin())
	ec.Int(t.Get_version())

	return ec.GetBuffer()
}

func (t *TL_updateChatParticipantAdmin) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_user_id = dc.Int()
	t.M_is_admin = dc.TLObject()
	t.M_version = dc.Int()

	return dc.err
}

func (t *TL_updateChatParticipantAdmin) String() string {
	return fmt.Sprintf("- updateChatParticipantAdmin#b6901959\n-- chat_id : %v\n-- user_id : %v\n-- is_admin : %v\n-- version : %v\n", t.M_chat_id, t.M_user_id, t.M_is_admin, t.M_version)
}

// updateNewStickerSet#688a30aa
type TL_updateNewStickerSet struct {
	M_classID    int32
	M_stickerset TLObject
}

func (t *TL_updateNewStickerSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateNewStickerSet) Set_stickerset(M_stickerset TLObject) {
	t.M_stickerset = M_stickerset
}

func (t *TL_updateNewStickerSet) Get_stickerset() TLObject {
	return t.M_stickerset
}

func New_TL_updateNewStickerSet() *TL_updateNewStickerSet {
	return &TL_updateNewStickerSet{
		M_classID: TL_CLASS_updateNewStickerSet,
	}
}

func (t *TL_updateNewStickerSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateNewStickerSet))
	ec.TLObject(t.Get_stickerset())

	return ec.GetBuffer()
}

func (t *TL_updateNewStickerSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_stickerset = dc.TLObject()

	return dc.err
}

func (t *TL_updateNewStickerSet) String() string {
	return fmt.Sprintf("- updateNewStickerSet#688a30aa\n-- stickerset : %v\n", t.M_stickerset)
}

// updateStickerSetsOrder#bb2d201
type TL_updateStickerSetsOrder struct {
	M_classID int32
	M_flags   TLObject
	M_masks   TLObject
	M_order   []int64
}

func (t *TL_updateStickerSetsOrder) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateStickerSetsOrder) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateStickerSetsOrder) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateStickerSetsOrder) Set_masks(M_masks TLObject) {
	t.M_masks = M_masks
}

func (t *TL_updateStickerSetsOrder) Get_masks() TLObject {
	return t.M_masks
}

func (t *TL_updateStickerSetsOrder) Set_order(M_order []int64) {
	t.M_order = M_order
}

func (t *TL_updateStickerSetsOrder) Get_order() []int64 {
	return t.M_order
}

func New_TL_updateStickerSetsOrder() *TL_updateStickerSetsOrder {
	return &TL_updateStickerSetsOrder{
		M_classID: TL_CLASS_updateStickerSetsOrder,
	}
}

func (t *TL_updateStickerSetsOrder) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateStickerSetsOrder))
	ec.TLObject(t.Get_masks())
	ec.VectorLong(t.Get_order())

	return ec.GetBuffer()
}

func (t *TL_updateStickerSetsOrder) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_masks = dc.TLObject()
	t.M_order = dc.VectorLong()

	return dc.err
}

func (t *TL_updateStickerSetsOrder) String() string {
	return fmt.Sprintf("- updateStickerSetsOrder#bb2d201\n-- flags : %v\n-- masks : %v\n-- order : %v\n", t.M_flags, t.M_masks, t.M_order)
}

// updateStickerSets#43ae3dec
type TL_updateStickerSets struct {
	M_classID int32
}

func (t *TL_updateStickerSets) ClassID() int32 {
	return t.M_classID
}

func New_TL_updateStickerSets() *TL_updateStickerSets {
	return &TL_updateStickerSets{
		M_classID: TL_CLASS_updateStickerSets,
	}
}

func (t *TL_updateStickerSets) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateStickerSets))

	return ec.GetBuffer()
}

func (t *TL_updateStickerSets) Decode(b []byte) error {
	return nil
}

func (t *TL_updateStickerSets) String() string {
	return fmt.Sprintf("- updateStickerSets#43ae3dec\n")
}

// updateSavedGifs#9375341e
type TL_updateSavedGifs struct {
	M_classID int32
}

func (t *TL_updateSavedGifs) ClassID() int32 {
	return t.M_classID
}

func New_TL_updateSavedGifs() *TL_updateSavedGifs {
	return &TL_updateSavedGifs{
		M_classID: TL_CLASS_updateSavedGifs,
	}
}

func (t *TL_updateSavedGifs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateSavedGifs))

	return ec.GetBuffer()
}

func (t *TL_updateSavedGifs) Decode(b []byte) error {
	return nil
}

func (t *TL_updateSavedGifs) String() string {
	return fmt.Sprintf("- updateSavedGifs#9375341e\n")
}

// updateBotInlineQuery#54826690
type TL_updateBotInlineQuery struct {
	M_classID  int32
	M_flags    TLObject
	M_query_id int64
	M_user_id  int32
	M_query    string
	M_geo      TLObject
	M_offset   string
}

func (t *TL_updateBotInlineQuery) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateBotInlineQuery) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateBotInlineQuery) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateBotInlineQuery) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_updateBotInlineQuery) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_updateBotInlineQuery) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateBotInlineQuery) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateBotInlineQuery) Set_query(M_query string) {
	t.M_query = M_query
}

func (t *TL_updateBotInlineQuery) Get_query() string {
	return t.M_query
}

func (t *TL_updateBotInlineQuery) Set_geo(M_geo TLObject) {
	t.M_geo = M_geo
}

func (t *TL_updateBotInlineQuery) Get_geo() TLObject {
	return t.M_geo
}

func (t *TL_updateBotInlineQuery) Set_offset(M_offset string) {
	t.M_offset = M_offset
}

func (t *TL_updateBotInlineQuery) Get_offset() string {
	return t.M_offset
}

func New_TL_updateBotInlineQuery() *TL_updateBotInlineQuery {
	return &TL_updateBotInlineQuery{
		M_classID: TL_CLASS_updateBotInlineQuery,
	}
}

func (t *TL_updateBotInlineQuery) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateBotInlineQuery))
	ec.Long(t.Get_query_id())
	ec.Int(t.Get_user_id())
	ec.String(t.Get_query())
	ec.TLObject(t.Get_geo())
	ec.String(t.Get_offset())

	return ec.GetBuffer()
}

func (t *TL_updateBotInlineQuery) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_query_id = dc.Long()
	t.M_user_id = dc.Int()
	t.M_query = dc.String()
	t.M_geo = dc.TLObject()
	t.M_offset = dc.String()

	return dc.err
}

func (t *TL_updateBotInlineQuery) String() string {
	return fmt.Sprintf("- updateBotInlineQuery#54826690\n-- flags : %v\n-- query_id : %v\n-- user_id : %v\n-- query : %v\n-- geo : %v\n-- offset : %v\n", t.M_flags, t.M_query_id, t.M_user_id, t.M_query, t.M_geo, t.M_offset)
}

// updateBotInlineSend#e48f964
type TL_updateBotInlineSend struct {
	M_classID int32
	M_flags   TLObject
	M_user_id int32
	M_query   string
	M_geo     TLObject
	M_id      string
	M_msg_id  TLObject
}

func (t *TL_updateBotInlineSend) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateBotInlineSend) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateBotInlineSend) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateBotInlineSend) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateBotInlineSend) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateBotInlineSend) Set_query(M_query string) {
	t.M_query = M_query
}

func (t *TL_updateBotInlineSend) Get_query() string {
	return t.M_query
}

func (t *TL_updateBotInlineSend) Set_geo(M_geo TLObject) {
	t.M_geo = M_geo
}

func (t *TL_updateBotInlineSend) Get_geo() TLObject {
	return t.M_geo
}

func (t *TL_updateBotInlineSend) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_updateBotInlineSend) Get_id() string {
	return t.M_id
}

func (t *TL_updateBotInlineSend) Set_msg_id(M_msg_id TLObject) {
	t.M_msg_id = M_msg_id
}

func (t *TL_updateBotInlineSend) Get_msg_id() TLObject {
	return t.M_msg_id
}

func New_TL_updateBotInlineSend() *TL_updateBotInlineSend {
	return &TL_updateBotInlineSend{
		M_classID: TL_CLASS_updateBotInlineSend,
	}
}

func (t *TL_updateBotInlineSend) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateBotInlineSend))
	ec.Int(t.Get_user_id())
	ec.String(t.Get_query())
	ec.TLObject(t.Get_geo())
	ec.String(t.Get_id())
	ec.TLObject(t.Get_msg_id())

	return ec.GetBuffer()
}

func (t *TL_updateBotInlineSend) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_query = dc.String()
	t.M_geo = dc.TLObject()
	t.M_id = dc.String()
	t.M_msg_id = dc.TLObject()

	return dc.err
}

func (t *TL_updateBotInlineSend) String() string {
	return fmt.Sprintf("- updateBotInlineSend#e48f964\n-- flags : %v\n-- user_id : %v\n-- query : %v\n-- geo : %v\n-- id : %v\n-- msg_id : %v\n", t.M_flags, t.M_user_id, t.M_query, t.M_geo, t.M_id, t.M_msg_id)
}

// updateEditChannelMessage#1b3f4df7
type TL_updateEditChannelMessage struct {
	M_classID   int32
	M_message   TLObject
	M_pts       int32
	M_pts_count int32
}

func (t *TL_updateEditChannelMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateEditChannelMessage) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_updateEditChannelMessage) Get_message() TLObject {
	return t.M_message
}

func (t *TL_updateEditChannelMessage) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateEditChannelMessage) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateEditChannelMessage) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateEditChannelMessage) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateEditChannelMessage() *TL_updateEditChannelMessage {
	return &TL_updateEditChannelMessage{
		M_classID: TL_CLASS_updateEditChannelMessage,
	}
}

func (t *TL_updateEditChannelMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateEditChannelMessage))
	ec.TLObject(t.Get_message())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateEditChannelMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateEditChannelMessage) String() string {
	return fmt.Sprintf("- updateEditChannelMessage#1b3f4df7\n-- message : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_message, t.M_pts, t.M_pts_count)
}

// updateChannelPinnedMessage#98592475
type TL_updateChannelPinnedMessage struct {
	M_classID    int32
	M_channel_id int32
	M_id         int32
}

func (t *TL_updateChannelPinnedMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChannelPinnedMessage) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateChannelPinnedMessage) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_updateChannelPinnedMessage) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_updateChannelPinnedMessage) Get_id() int32 {
	return t.M_id
}

func New_TL_updateChannelPinnedMessage() *TL_updateChannelPinnedMessage {
	return &TL_updateChannelPinnedMessage{
		M_classID: TL_CLASS_updateChannelPinnedMessage,
	}
}

func (t *TL_updateChannelPinnedMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChannelPinnedMessage))
	ec.Int(t.Get_channel_id())
	ec.Int(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_updateChannelPinnedMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_id = dc.Int()

	return dc.err
}

func (t *TL_updateChannelPinnedMessage) String() string {
	return fmt.Sprintf("- updateChannelPinnedMessage#98592475\n-- channel_id : %v\n-- id : %v\n", t.M_channel_id, t.M_id)
}

// updateBotCallbackQuery#e73547e1
type TL_updateBotCallbackQuery struct {
	M_classID         int32
	M_flags           TLObject
	M_query_id        int64
	M_user_id         int32
	M_peer            TLObject
	M_msg_id          int32
	M_chat_instance   int64
	M_data            TLObject
	M_game_short_name TLObject
}

func (t *TL_updateBotCallbackQuery) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateBotCallbackQuery) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateBotCallbackQuery) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateBotCallbackQuery) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_updateBotCallbackQuery) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_updateBotCallbackQuery) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateBotCallbackQuery) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateBotCallbackQuery) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_updateBotCallbackQuery) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_updateBotCallbackQuery) Set_msg_id(M_msg_id int32) {
	t.M_msg_id = M_msg_id
}

func (t *TL_updateBotCallbackQuery) Get_msg_id() int32 {
	return t.M_msg_id
}

func (t *TL_updateBotCallbackQuery) Set_chat_instance(M_chat_instance int64) {
	t.M_chat_instance = M_chat_instance
}

func (t *TL_updateBotCallbackQuery) Get_chat_instance() int64 {
	return t.M_chat_instance
}

func (t *TL_updateBotCallbackQuery) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_updateBotCallbackQuery) Get_data() TLObject {
	return t.M_data
}

func (t *TL_updateBotCallbackQuery) Set_game_short_name(M_game_short_name TLObject) {
	t.M_game_short_name = M_game_short_name
}

func (t *TL_updateBotCallbackQuery) Get_game_short_name() TLObject {
	return t.M_game_short_name
}

func New_TL_updateBotCallbackQuery() *TL_updateBotCallbackQuery {
	return &TL_updateBotCallbackQuery{
		M_classID: TL_CLASS_updateBotCallbackQuery,
	}
}

func (t *TL_updateBotCallbackQuery) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateBotCallbackQuery))
	ec.Long(t.Get_query_id())
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_msg_id())
	ec.Long(t.Get_chat_instance())
	ec.TLObject(t.Get_data())
	ec.TLObject(t.Get_game_short_name())

	return ec.GetBuffer()
}

func (t *TL_updateBotCallbackQuery) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_query_id = dc.Long()
	t.M_user_id = dc.Int()
	t.M_peer = dc.TLObject()
	t.M_msg_id = dc.Int()
	t.M_chat_instance = dc.Long()
	t.M_data = dc.TLObject()
	t.M_game_short_name = dc.TLObject()

	return dc.err
}

func (t *TL_updateBotCallbackQuery) String() string {
	return fmt.Sprintf("- updateBotCallbackQuery#e73547e1\n-- flags : %v\n-- query_id : %v\n-- user_id : %v\n-- peer : %v\n-- msg_id : %v\n-- chat_instance : %v\n-- data : %v\n-- game_short_name : %v\n", t.M_flags, t.M_query_id, t.M_user_id, t.M_peer, t.M_msg_id, t.M_chat_instance, t.M_data, t.M_game_short_name)
}

// updateEditMessage#e40370a3
type TL_updateEditMessage struct {
	M_classID   int32
	M_message   TLObject
	M_pts       int32
	M_pts_count int32
}

func (t *TL_updateEditMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateEditMessage) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_updateEditMessage) Get_message() TLObject {
	return t.M_message
}

func (t *TL_updateEditMessage) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateEditMessage) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateEditMessage) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateEditMessage) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateEditMessage() *TL_updateEditMessage {
	return &TL_updateEditMessage{
		M_classID: TL_CLASS_updateEditMessage,
	}
}

func (t *TL_updateEditMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateEditMessage))
	ec.TLObject(t.Get_message())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateEditMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateEditMessage) String() string {
	return fmt.Sprintf("- updateEditMessage#e40370a3\n-- message : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_message, t.M_pts, t.M_pts_count)
}

// updateInlineBotCallbackQuery#f9d27a5a
type TL_updateInlineBotCallbackQuery struct {
	M_classID         int32
	M_flags           TLObject
	M_query_id        int64
	M_user_id         int32
	M_msg_id          TLObject
	M_chat_instance   int64
	M_data            TLObject
	M_game_short_name TLObject
}

func (t *TL_updateInlineBotCallbackQuery) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateInlineBotCallbackQuery) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateInlineBotCallbackQuery) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateInlineBotCallbackQuery) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_updateInlineBotCallbackQuery) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_updateInlineBotCallbackQuery) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateInlineBotCallbackQuery) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateInlineBotCallbackQuery) Set_msg_id(M_msg_id TLObject) {
	t.M_msg_id = M_msg_id
}

func (t *TL_updateInlineBotCallbackQuery) Get_msg_id() TLObject {
	return t.M_msg_id
}

func (t *TL_updateInlineBotCallbackQuery) Set_chat_instance(M_chat_instance int64) {
	t.M_chat_instance = M_chat_instance
}

func (t *TL_updateInlineBotCallbackQuery) Get_chat_instance() int64 {
	return t.M_chat_instance
}

func (t *TL_updateInlineBotCallbackQuery) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_updateInlineBotCallbackQuery) Get_data() TLObject {
	return t.M_data
}

func (t *TL_updateInlineBotCallbackQuery) Set_game_short_name(M_game_short_name TLObject) {
	t.M_game_short_name = M_game_short_name
}

func (t *TL_updateInlineBotCallbackQuery) Get_game_short_name() TLObject {
	return t.M_game_short_name
}

func New_TL_updateInlineBotCallbackQuery() *TL_updateInlineBotCallbackQuery {
	return &TL_updateInlineBotCallbackQuery{
		M_classID: TL_CLASS_updateInlineBotCallbackQuery,
	}
}

func (t *TL_updateInlineBotCallbackQuery) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateInlineBotCallbackQuery))
	ec.Long(t.Get_query_id())
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_msg_id())
	ec.Long(t.Get_chat_instance())
	ec.TLObject(t.Get_data())
	ec.TLObject(t.Get_game_short_name())

	return ec.GetBuffer()
}

func (t *TL_updateInlineBotCallbackQuery) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_query_id = dc.Long()
	t.M_user_id = dc.Int()
	t.M_msg_id = dc.TLObject()
	t.M_chat_instance = dc.Long()
	t.M_data = dc.TLObject()
	t.M_game_short_name = dc.TLObject()

	return dc.err
}

func (t *TL_updateInlineBotCallbackQuery) String() string {
	return fmt.Sprintf("- updateInlineBotCallbackQuery#f9d27a5a\n-- flags : %v\n-- query_id : %v\n-- user_id : %v\n-- msg_id : %v\n-- chat_instance : %v\n-- data : %v\n-- game_short_name : %v\n", t.M_flags, t.M_query_id, t.M_user_id, t.M_msg_id, t.M_chat_instance, t.M_data, t.M_game_short_name)
}

// updateReadChannelOutbox#25d6c9c7
type TL_updateReadChannelOutbox struct {
	M_classID    int32
	M_channel_id int32
	M_max_id     int32
}

func (t *TL_updateReadChannelOutbox) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateReadChannelOutbox) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateReadChannelOutbox) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_updateReadChannelOutbox) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_updateReadChannelOutbox) Get_max_id() int32 {
	return t.M_max_id
}

func New_TL_updateReadChannelOutbox() *TL_updateReadChannelOutbox {
	return &TL_updateReadChannelOutbox{
		M_classID: TL_CLASS_updateReadChannelOutbox,
	}
}

func (t *TL_updateReadChannelOutbox) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateReadChannelOutbox))
	ec.Int(t.Get_channel_id())
	ec.Int(t.Get_max_id())

	return ec.GetBuffer()
}

func (t *TL_updateReadChannelOutbox) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_max_id = dc.Int()

	return dc.err
}

func (t *TL_updateReadChannelOutbox) String() string {
	return fmt.Sprintf("- updateReadChannelOutbox#25d6c9c7\n-- channel_id : %v\n-- max_id : %v\n", t.M_channel_id, t.M_max_id)
}

// updateDraftMessage#ee2bb969
type TL_updateDraftMessage struct {
	M_classID int32
	M_peer    TLObject
	M_draft   TLObject
}

func (t *TL_updateDraftMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateDraftMessage) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_updateDraftMessage) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_updateDraftMessage) Set_draft(M_draft TLObject) {
	t.M_draft = M_draft
}

func (t *TL_updateDraftMessage) Get_draft() TLObject {
	return t.M_draft
}

func New_TL_updateDraftMessage() *TL_updateDraftMessage {
	return &TL_updateDraftMessage{
		M_classID: TL_CLASS_updateDraftMessage,
	}
}

func (t *TL_updateDraftMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateDraftMessage))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_draft())

	return ec.GetBuffer()
}

func (t *TL_updateDraftMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_draft = dc.TLObject()

	return dc.err
}

func (t *TL_updateDraftMessage) String() string {
	return fmt.Sprintf("- updateDraftMessage#ee2bb969\n-- peer : %v\n-- draft : %v\n", t.M_peer, t.M_draft)
}

// updateReadFeaturedStickers#571d2742
type TL_updateReadFeaturedStickers struct {
	M_classID int32
}

func (t *TL_updateReadFeaturedStickers) ClassID() int32 {
	return t.M_classID
}

func New_TL_updateReadFeaturedStickers() *TL_updateReadFeaturedStickers {
	return &TL_updateReadFeaturedStickers{
		M_classID: TL_CLASS_updateReadFeaturedStickers,
	}
}

func (t *TL_updateReadFeaturedStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateReadFeaturedStickers))

	return ec.GetBuffer()
}

func (t *TL_updateReadFeaturedStickers) Decode(b []byte) error {
	return nil
}

func (t *TL_updateReadFeaturedStickers) String() string {
	return fmt.Sprintf("- updateReadFeaturedStickers#571d2742\n")
}

// updateRecentStickers#9a422c20
type TL_updateRecentStickers struct {
	M_classID int32
}

func (t *TL_updateRecentStickers) ClassID() int32 {
	return t.M_classID
}

func New_TL_updateRecentStickers() *TL_updateRecentStickers {
	return &TL_updateRecentStickers{
		M_classID: TL_CLASS_updateRecentStickers,
	}
}

func (t *TL_updateRecentStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateRecentStickers))

	return ec.GetBuffer()
}

func (t *TL_updateRecentStickers) Decode(b []byte) error {
	return nil
}

func (t *TL_updateRecentStickers) String() string {
	return fmt.Sprintf("- updateRecentStickers#9a422c20\n")
}

// updateConfig#a229dd06
type TL_updateConfig struct {
	M_classID int32
}

func (t *TL_updateConfig) ClassID() int32 {
	return t.M_classID
}

func New_TL_updateConfig() *TL_updateConfig {
	return &TL_updateConfig{
		M_classID: TL_CLASS_updateConfig,
	}
}

func (t *TL_updateConfig) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateConfig))

	return ec.GetBuffer()
}

func (t *TL_updateConfig) Decode(b []byte) error {
	return nil
}

func (t *TL_updateConfig) String() string {
	return fmt.Sprintf("- updateConfig#a229dd06\n")
}

// updatePtsChanged#3354678f
type TL_updatePtsChanged struct {
	M_classID int32
}

func (t *TL_updatePtsChanged) ClassID() int32 {
	return t.M_classID
}

func New_TL_updatePtsChanged() *TL_updatePtsChanged {
	return &TL_updatePtsChanged{
		M_classID: TL_CLASS_updatePtsChanged,
	}
}

func (t *TL_updatePtsChanged) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updatePtsChanged))

	return ec.GetBuffer()
}

func (t *TL_updatePtsChanged) Decode(b []byte) error {
	return nil
}

func (t *TL_updatePtsChanged) String() string {
	return fmt.Sprintf("- updatePtsChanged#3354678f\n")
}

// updateChannelWebPage#40771900
type TL_updateChannelWebPage struct {
	M_classID    int32
	M_channel_id int32
	M_webpage    TLObject
	M_pts        int32
	M_pts_count  int32
}

func (t *TL_updateChannelWebPage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChannelWebPage) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateChannelWebPage) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_updateChannelWebPage) Set_webpage(M_webpage TLObject) {
	t.M_webpage = M_webpage
}

func (t *TL_updateChannelWebPage) Get_webpage() TLObject {
	return t.M_webpage
}

func (t *TL_updateChannelWebPage) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateChannelWebPage) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateChannelWebPage) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateChannelWebPage) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_updateChannelWebPage() *TL_updateChannelWebPage {
	return &TL_updateChannelWebPage{
		M_classID: TL_CLASS_updateChannelWebPage,
	}
}

func (t *TL_updateChannelWebPage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChannelWebPage))
	ec.Int(t.Get_channel_id())
	ec.TLObject(t.Get_webpage())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_updateChannelWebPage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_webpage = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_updateChannelWebPage) String() string {
	return fmt.Sprintf("- updateChannelWebPage#40771900\n-- channel_id : %v\n-- webpage : %v\n-- pts : %v\n-- pts_count : %v\n", t.M_channel_id, t.M_webpage, t.M_pts, t.M_pts_count)
}

// updateDialogPinned#d711a2cc
type TL_updateDialogPinned struct {
	M_classID int32
	M_flags   TLObject
	M_pinned  TLObject
	M_peer    TLObject
}

func (t *TL_updateDialogPinned) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateDialogPinned) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateDialogPinned) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateDialogPinned) Set_pinned(M_pinned TLObject) {
	t.M_pinned = M_pinned
}

func (t *TL_updateDialogPinned) Get_pinned() TLObject {
	return t.M_pinned
}

func (t *TL_updateDialogPinned) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_updateDialogPinned) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_updateDialogPinned() *TL_updateDialogPinned {
	return &TL_updateDialogPinned{
		M_classID: TL_CLASS_updateDialogPinned,
	}
}

func (t *TL_updateDialogPinned) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateDialogPinned))
	ec.TLObject(t.Get_pinned())
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_updateDialogPinned) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pinned = dc.TLObject()
	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_updateDialogPinned) String() string {
	return fmt.Sprintf("- updateDialogPinned#d711a2cc\n-- flags : %v\n-- pinned : %v\n-- peer : %v\n", t.M_flags, t.M_pinned, t.M_peer)
}

// updatePinnedDialogs#d8caf68d
type TL_updatePinnedDialogs struct {
	M_classID int32
	M_flags   TLObject
	M_order   []TLObject
}

func (t *TL_updatePinnedDialogs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updatePinnedDialogs) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updatePinnedDialogs) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updatePinnedDialogs) Set_order(M_order []TLObject) {
	t.M_order = M_order
}

func (t *TL_updatePinnedDialogs) Get_order() []TLObject {
	return t.M_order
}

func New_TL_updatePinnedDialogs() *TL_updatePinnedDialogs {
	return &TL_updatePinnedDialogs{
		M_classID: TL_CLASS_updatePinnedDialogs,
	}
}

func (t *TL_updatePinnedDialogs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updatePinnedDialogs))
	ec.Vector(t.Get_order())

	return ec.GetBuffer()
}

func (t *TL_updatePinnedDialogs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_order = dc.Vector()

	return dc.err
}

func (t *TL_updatePinnedDialogs) String() string {
	return fmt.Sprintf("- updatePinnedDialogs#d8caf68d\n-- flags : %v\n-- order : %v\n", t.M_flags, t.M_order)
}

// updateBotWebhookJSON#8317c0c3
type TL_updateBotWebhookJSON struct {
	M_classID int32
	M_data    TLObject
}

func (t *TL_updateBotWebhookJSON) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateBotWebhookJSON) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_updateBotWebhookJSON) Get_data() TLObject {
	return t.M_data
}

func New_TL_updateBotWebhookJSON() *TL_updateBotWebhookJSON {
	return &TL_updateBotWebhookJSON{
		M_classID: TL_CLASS_updateBotWebhookJSON,
	}
}

func (t *TL_updateBotWebhookJSON) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateBotWebhookJSON))
	ec.TLObject(t.Get_data())

	return ec.GetBuffer()
}

func (t *TL_updateBotWebhookJSON) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_data = dc.TLObject()

	return dc.err
}

func (t *TL_updateBotWebhookJSON) String() string {
	return fmt.Sprintf("- updateBotWebhookJSON#8317c0c3\n-- data : %v\n", t.M_data)
}

// updateBotWebhookJSONQuery#9b9240a6
type TL_updateBotWebhookJSONQuery struct {
	M_classID  int32
	M_query_id int64
	M_data     TLObject
	M_timeout  int32
}

func (t *TL_updateBotWebhookJSONQuery) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateBotWebhookJSONQuery) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_updateBotWebhookJSONQuery) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_updateBotWebhookJSONQuery) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_updateBotWebhookJSONQuery) Get_data() TLObject {
	return t.M_data
}

func (t *TL_updateBotWebhookJSONQuery) Set_timeout(M_timeout int32) {
	t.M_timeout = M_timeout
}

func (t *TL_updateBotWebhookJSONQuery) Get_timeout() int32 {
	return t.M_timeout
}

func New_TL_updateBotWebhookJSONQuery() *TL_updateBotWebhookJSONQuery {
	return &TL_updateBotWebhookJSONQuery{
		M_classID: TL_CLASS_updateBotWebhookJSONQuery,
	}
}

func (t *TL_updateBotWebhookJSONQuery) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateBotWebhookJSONQuery))
	ec.Long(t.Get_query_id())
	ec.TLObject(t.Get_data())
	ec.Int(t.Get_timeout())

	return ec.GetBuffer()
}

func (t *TL_updateBotWebhookJSONQuery) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_query_id = dc.Long()
	t.M_data = dc.TLObject()
	t.M_timeout = dc.Int()

	return dc.err
}

func (t *TL_updateBotWebhookJSONQuery) String() string {
	return fmt.Sprintf("- updateBotWebhookJSONQuery#9b9240a6\n-- query_id : %v\n-- data : %v\n-- timeout : %v\n", t.M_query_id, t.M_data, t.M_timeout)
}

// updateBotShippingQuery#e0cdc940
type TL_updateBotShippingQuery struct {
	M_classID          int32
	M_query_id         int64
	M_user_id          int32
	M_payload          TLObject
	M_shipping_address TLObject
}

func (t *TL_updateBotShippingQuery) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateBotShippingQuery) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_updateBotShippingQuery) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_updateBotShippingQuery) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateBotShippingQuery) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateBotShippingQuery) Set_payload(M_payload TLObject) {
	t.M_payload = M_payload
}

func (t *TL_updateBotShippingQuery) Get_payload() TLObject {
	return t.M_payload
}

func (t *TL_updateBotShippingQuery) Set_shipping_address(M_shipping_address TLObject) {
	t.M_shipping_address = M_shipping_address
}

func (t *TL_updateBotShippingQuery) Get_shipping_address() TLObject {
	return t.M_shipping_address
}

func New_TL_updateBotShippingQuery() *TL_updateBotShippingQuery {
	return &TL_updateBotShippingQuery{
		M_classID: TL_CLASS_updateBotShippingQuery,
	}
}

func (t *TL_updateBotShippingQuery) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateBotShippingQuery))
	ec.Long(t.Get_query_id())
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_payload())
	ec.TLObject(t.Get_shipping_address())

	return ec.GetBuffer()
}

func (t *TL_updateBotShippingQuery) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_query_id = dc.Long()
	t.M_user_id = dc.Int()
	t.M_payload = dc.TLObject()
	t.M_shipping_address = dc.TLObject()

	return dc.err
}

func (t *TL_updateBotShippingQuery) String() string {
	return fmt.Sprintf("- updateBotShippingQuery#e0cdc940\n-- query_id : %v\n-- user_id : %v\n-- payload : %v\n-- shipping_address : %v\n", t.M_query_id, t.M_user_id, t.M_payload, t.M_shipping_address)
}

// updateBotPrecheckoutQuery#5d2f3aa9
type TL_updateBotPrecheckoutQuery struct {
	M_classID            int32
	M_flags              TLObject
	M_query_id           int64
	M_user_id            int32
	M_payload            TLObject
	M_info               TLObject
	M_shipping_option_id TLObject
	M_currency           string
	M_total_amount       int64
}

func (t *TL_updateBotPrecheckoutQuery) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateBotPrecheckoutQuery) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateBotPrecheckoutQuery) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateBotPrecheckoutQuery) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_updateBotPrecheckoutQuery) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_updateBotPrecheckoutQuery) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateBotPrecheckoutQuery) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateBotPrecheckoutQuery) Set_payload(M_payload TLObject) {
	t.M_payload = M_payload
}

func (t *TL_updateBotPrecheckoutQuery) Get_payload() TLObject {
	return t.M_payload
}

func (t *TL_updateBotPrecheckoutQuery) Set_info(M_info TLObject) {
	t.M_info = M_info
}

func (t *TL_updateBotPrecheckoutQuery) Get_info() TLObject {
	return t.M_info
}

func (t *TL_updateBotPrecheckoutQuery) Set_shipping_option_id(M_shipping_option_id TLObject) {
	t.M_shipping_option_id = M_shipping_option_id
}

func (t *TL_updateBotPrecheckoutQuery) Get_shipping_option_id() TLObject {
	return t.M_shipping_option_id
}

func (t *TL_updateBotPrecheckoutQuery) Set_currency(M_currency string) {
	t.M_currency = M_currency
}

func (t *TL_updateBotPrecheckoutQuery) Get_currency() string {
	return t.M_currency
}

func (t *TL_updateBotPrecheckoutQuery) Set_total_amount(M_total_amount int64) {
	t.M_total_amount = M_total_amount
}

func (t *TL_updateBotPrecheckoutQuery) Get_total_amount() int64 {
	return t.M_total_amount
}

func New_TL_updateBotPrecheckoutQuery() *TL_updateBotPrecheckoutQuery {
	return &TL_updateBotPrecheckoutQuery{
		M_classID: TL_CLASS_updateBotPrecheckoutQuery,
	}
}

func (t *TL_updateBotPrecheckoutQuery) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateBotPrecheckoutQuery))
	ec.Long(t.Get_query_id())
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_payload())
	ec.TLObject(t.Get_info())
	ec.TLObject(t.Get_shipping_option_id())
	ec.String(t.Get_currency())
	ec.Long(t.Get_total_amount())

	return ec.GetBuffer()
}

func (t *TL_updateBotPrecheckoutQuery) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_query_id = dc.Long()
	t.M_user_id = dc.Int()
	t.M_payload = dc.TLObject()
	t.M_info = dc.TLObject()
	t.M_shipping_option_id = dc.TLObject()
	t.M_currency = dc.String()
	t.M_total_amount = dc.Long()

	return dc.err
}

func (t *TL_updateBotPrecheckoutQuery) String() string {
	return fmt.Sprintf("- updateBotPrecheckoutQuery#5d2f3aa9\n-- flags : %v\n-- query_id : %v\n-- user_id : %v\n-- payload : %v\n-- info : %v\n-- shipping_option_id : %v\n-- currency : %v\n-- total_amount : %v\n", t.M_flags, t.M_query_id, t.M_user_id, t.M_payload, t.M_info, t.M_shipping_option_id, t.M_currency, t.M_total_amount)
}

// updatePhoneCall#ab0f6b1e
type TL_updatePhoneCall struct {
	M_classID    int32
	M_phone_call TLObject
}

func (t *TL_updatePhoneCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updatePhoneCall) Set_phone_call(M_phone_call TLObject) {
	t.M_phone_call = M_phone_call
}

func (t *TL_updatePhoneCall) Get_phone_call() TLObject {
	return t.M_phone_call
}

func New_TL_updatePhoneCall() *TL_updatePhoneCall {
	return &TL_updatePhoneCall{
		M_classID: TL_CLASS_updatePhoneCall,
	}
}

func (t *TL_updatePhoneCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updatePhoneCall))
	ec.TLObject(t.Get_phone_call())

	return ec.GetBuffer()
}

func (t *TL_updatePhoneCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_call = dc.TLObject()

	return dc.err
}

func (t *TL_updatePhoneCall) String() string {
	return fmt.Sprintf("- updatePhoneCall#ab0f6b1e\n-- phone_call : %v\n", t.M_phone_call)
}

// updateLangPackTooLong#10c2404b
type TL_updateLangPackTooLong struct {
	M_classID int32
}

func (t *TL_updateLangPackTooLong) ClassID() int32 {
	return t.M_classID
}

func New_TL_updateLangPackTooLong() *TL_updateLangPackTooLong {
	return &TL_updateLangPackTooLong{
		M_classID: TL_CLASS_updateLangPackTooLong,
	}
}

func (t *TL_updateLangPackTooLong) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateLangPackTooLong))

	return ec.GetBuffer()
}

func (t *TL_updateLangPackTooLong) Decode(b []byte) error {
	return nil
}

func (t *TL_updateLangPackTooLong) String() string {
	return fmt.Sprintf("- updateLangPackTooLong#10c2404b\n")
}

// updateLangPack#56022f4d
type TL_updateLangPack struct {
	M_classID    int32
	M_difference TLObject
}

func (t *TL_updateLangPack) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateLangPack) Set_difference(M_difference TLObject) {
	t.M_difference = M_difference
}

func (t *TL_updateLangPack) Get_difference() TLObject {
	return t.M_difference
}

func New_TL_updateLangPack() *TL_updateLangPack {
	return &TL_updateLangPack{
		M_classID: TL_CLASS_updateLangPack,
	}
}

func (t *TL_updateLangPack) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateLangPack))
	ec.TLObject(t.Get_difference())

	return ec.GetBuffer()
}

func (t *TL_updateLangPack) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_difference = dc.TLObject()

	return dc.err
}

func (t *TL_updateLangPack) String() string {
	return fmt.Sprintf("- updateLangPack#56022f4d\n-- difference : %v\n", t.M_difference)
}

// updateFavedStickers#e511996d
type TL_updateFavedStickers struct {
	M_classID int32
}

func (t *TL_updateFavedStickers) ClassID() int32 {
	return t.M_classID
}

func New_TL_updateFavedStickers() *TL_updateFavedStickers {
	return &TL_updateFavedStickers{
		M_classID: TL_CLASS_updateFavedStickers,
	}
}

func (t *TL_updateFavedStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateFavedStickers))

	return ec.GetBuffer()
}

func (t *TL_updateFavedStickers) Decode(b []byte) error {
	return nil
}

func (t *TL_updateFavedStickers) String() string {
	return fmt.Sprintf("- updateFavedStickers#e511996d\n")
}

// updateChannelReadMessagesContents#89893b45
type TL_updateChannelReadMessagesContents struct {
	M_classID    int32
	M_channel_id int32
	M_messages   []int32
}

func (t *TL_updateChannelReadMessagesContents) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChannelReadMessagesContents) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateChannelReadMessagesContents) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_updateChannelReadMessagesContents) Set_messages(M_messages []int32) {
	t.M_messages = M_messages
}

func (t *TL_updateChannelReadMessagesContents) Get_messages() []int32 {
	return t.M_messages
}

func New_TL_updateChannelReadMessagesContents() *TL_updateChannelReadMessagesContents {
	return &TL_updateChannelReadMessagesContents{
		M_classID: TL_CLASS_updateChannelReadMessagesContents,
	}
}

func (t *TL_updateChannelReadMessagesContents) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChannelReadMessagesContents))
	ec.Int(t.Get_channel_id())
	ec.VectorInt(t.Get_messages())

	return ec.GetBuffer()
}

func (t *TL_updateChannelReadMessagesContents) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_messages = dc.VectorInt()

	return dc.err
}

func (t *TL_updateChannelReadMessagesContents) String() string {
	return fmt.Sprintf("- updateChannelReadMessagesContents#89893b45\n-- channel_id : %v\n-- messages : %v\n", t.M_channel_id, t.M_messages)
}

// updateContactsReset#7084a7be
type TL_updateContactsReset struct {
	M_classID int32
}

func (t *TL_updateContactsReset) ClassID() int32 {
	return t.M_classID
}

func New_TL_updateContactsReset() *TL_updateContactsReset {
	return &TL_updateContactsReset{
		M_classID: TL_CLASS_updateContactsReset,
	}
}

func (t *TL_updateContactsReset) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateContactsReset))

	return ec.GetBuffer()
}

func (t *TL_updateContactsReset) Decode(b []byte) error {
	return nil
}

func (t *TL_updateContactsReset) String() string {
	return fmt.Sprintf("- updateContactsReset#7084a7be\n")
}

// updateChannelAvailableMessages#70db6837
type TL_updateChannelAvailableMessages struct {
	M_classID          int32
	M_channel_id       int32
	M_available_min_id int32
}

func (t *TL_updateChannelAvailableMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateChannelAvailableMessages) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_updateChannelAvailableMessages) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_updateChannelAvailableMessages) Set_available_min_id(M_available_min_id int32) {
	t.M_available_min_id = M_available_min_id
}

func (t *TL_updateChannelAvailableMessages) Get_available_min_id() int32 {
	return t.M_available_min_id
}

func New_TL_updateChannelAvailableMessages() *TL_updateChannelAvailableMessages {
	return &TL_updateChannelAvailableMessages{
		M_classID: TL_CLASS_updateChannelAvailableMessages,
	}
}

func (t *TL_updateChannelAvailableMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateChannelAvailableMessages))
	ec.Int(t.Get_channel_id())
	ec.Int(t.Get_available_min_id())

	return ec.GetBuffer()
}

func (t *TL_updateChannelAvailableMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_available_min_id = dc.Int()

	return dc.err
}

func (t *TL_updateChannelAvailableMessages) String() string {
	return fmt.Sprintf("- updateChannelAvailableMessages#70db6837\n-- channel_id : %v\n-- available_min_id : %v\n", t.M_channel_id, t.M_available_min_id)
}

// updates_state#a56c2a3e
type TL_updates_state struct {
	M_classID      int32
	M_pts          int32
	M_qts          int32
	M_date         int32
	M_seq          int32
	M_unread_count int32
}

func (t *TL_updates_state) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_state) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updates_state) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updates_state) Set_qts(M_qts int32) {
	t.M_qts = M_qts
}

func (t *TL_updates_state) Get_qts() int32 {
	return t.M_qts
}

func (t *TL_updates_state) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updates_state) Get_date() int32 {
	return t.M_date
}

func (t *TL_updates_state) Set_seq(M_seq int32) {
	t.M_seq = M_seq
}

func (t *TL_updates_state) Get_seq() int32 {
	return t.M_seq
}

func (t *TL_updates_state) Set_unread_count(M_unread_count int32) {
	t.M_unread_count = M_unread_count
}

func (t *TL_updates_state) Get_unread_count() int32 {
	return t.M_unread_count
}

func New_TL_updates_state() *TL_updates_state {
	return &TL_updates_state{
		M_classID: TL_CLASS_updates_state,
	}
}

func (t *TL_updates_state) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_state))
	ec.Int(t.Get_pts())
	ec.Int(t.Get_qts())
	ec.Int(t.Get_date())
	ec.Int(t.Get_seq())
	ec.Int(t.Get_unread_count())

	return ec.GetBuffer()
}

func (t *TL_updates_state) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pts = dc.Int()
	t.M_qts = dc.Int()
	t.M_date = dc.Int()
	t.M_seq = dc.Int()
	t.M_unread_count = dc.Int()

	return dc.err
}

func (t *TL_updates_state) String() string {
	return fmt.Sprintf("- updates_state#a56c2a3e\n-- pts : %v\n-- qts : %v\n-- date : %v\n-- seq : %v\n-- unread_count : %v\n", t.M_pts, t.M_qts, t.M_date, t.M_seq, t.M_unread_count)
}

// updates_differenceEmpty#5d75a138
type TL_updates_differenceEmpty struct {
	M_classID int32
	M_date    int32
	M_seq     int32
}

func (t *TL_updates_differenceEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_differenceEmpty) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updates_differenceEmpty) Get_date() int32 {
	return t.M_date
}

func (t *TL_updates_differenceEmpty) Set_seq(M_seq int32) {
	t.M_seq = M_seq
}

func (t *TL_updates_differenceEmpty) Get_seq() int32 {
	return t.M_seq
}

func New_TL_updates_differenceEmpty() *TL_updates_differenceEmpty {
	return &TL_updates_differenceEmpty{
		M_classID: TL_CLASS_updates_differenceEmpty,
	}
}

func (t *TL_updates_differenceEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_differenceEmpty))
	ec.Int(t.Get_date())
	ec.Int(t.Get_seq())

	return ec.GetBuffer()
}

func (t *TL_updates_differenceEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_date = dc.Int()
	t.M_seq = dc.Int()

	return dc.err
}

func (t *TL_updates_differenceEmpty) String() string {
	return fmt.Sprintf("- updates_differenceEmpty#5d75a138\n-- date : %v\n-- seq : %v\n", t.M_date, t.M_seq)
}

// updates_difference#f49ca0
type TL_updates_difference struct {
	M_classID                int32
	M_new_messages           []TLObject
	M_new_encrypted_messages []TLObject
	M_other_updates          []TLObject
	M_chats                  []TLObject
	M_users                  []TLObject
	M_state                  TLObject
}

func (t *TL_updates_difference) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_difference) Set_new_messages(M_new_messages []TLObject) {
	t.M_new_messages = M_new_messages
}

func (t *TL_updates_difference) Get_new_messages() []TLObject {
	return t.M_new_messages
}

func (t *TL_updates_difference) Set_new_encrypted_messages(M_new_encrypted_messages []TLObject) {
	t.M_new_encrypted_messages = M_new_encrypted_messages
}

func (t *TL_updates_difference) Get_new_encrypted_messages() []TLObject {
	return t.M_new_encrypted_messages
}

func (t *TL_updates_difference) Set_other_updates(M_other_updates []TLObject) {
	t.M_other_updates = M_other_updates
}

func (t *TL_updates_difference) Get_other_updates() []TLObject {
	return t.M_other_updates
}

func (t *TL_updates_difference) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_updates_difference) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_updates_difference) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_updates_difference) Get_users() []TLObject {
	return t.M_users
}

func (t *TL_updates_difference) Set_state(M_state TLObject) {
	t.M_state = M_state
}

func (t *TL_updates_difference) Get_state() TLObject {
	return t.M_state
}

func New_TL_updates_difference() *TL_updates_difference {
	return &TL_updates_difference{
		M_classID: TL_CLASS_updates_difference,
	}
}

func (t *TL_updates_difference) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_difference))
	ec.Vector(t.Get_new_messages())
	ec.Vector(t.Get_new_encrypted_messages())
	ec.Vector(t.Get_other_updates())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())
	ec.TLObject(t.Get_state())

	return ec.GetBuffer()
}

func (t *TL_updates_difference) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_new_messages = dc.Vector()
	t.M_new_encrypted_messages = dc.Vector()
	t.M_other_updates = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()
	t.M_state = dc.TLObject()

	return dc.err
}

func (t *TL_updates_difference) String() string {
	return fmt.Sprintf("- updates_difference#f49ca0\n-- new_messages : %v\n-- new_encrypted_messages : %v\n-- other_updates : %v\n-- chats : %v\n-- users : %v\n-- state : %v\n", t.M_new_messages, t.M_new_encrypted_messages, t.M_other_updates, t.M_chats, t.M_users, t.M_state)
}

// updates_differenceSlice#a8fb1981
type TL_updates_differenceSlice struct {
	M_classID                int32
	M_new_messages           []TLObject
	M_new_encrypted_messages []TLObject
	M_other_updates          []TLObject
	M_chats                  []TLObject
	M_users                  []TLObject
	M_intermediate_state     TLObject
}

func (t *TL_updates_differenceSlice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_differenceSlice) Set_new_messages(M_new_messages []TLObject) {
	t.M_new_messages = M_new_messages
}

func (t *TL_updates_differenceSlice) Get_new_messages() []TLObject {
	return t.M_new_messages
}

func (t *TL_updates_differenceSlice) Set_new_encrypted_messages(M_new_encrypted_messages []TLObject) {
	t.M_new_encrypted_messages = M_new_encrypted_messages
}

func (t *TL_updates_differenceSlice) Get_new_encrypted_messages() []TLObject {
	return t.M_new_encrypted_messages
}

func (t *TL_updates_differenceSlice) Set_other_updates(M_other_updates []TLObject) {
	t.M_other_updates = M_other_updates
}

func (t *TL_updates_differenceSlice) Get_other_updates() []TLObject {
	return t.M_other_updates
}

func (t *TL_updates_differenceSlice) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_updates_differenceSlice) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_updates_differenceSlice) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_updates_differenceSlice) Get_users() []TLObject {
	return t.M_users
}

func (t *TL_updates_differenceSlice) Set_intermediate_state(M_intermediate_state TLObject) {
	t.M_intermediate_state = M_intermediate_state
}

func (t *TL_updates_differenceSlice) Get_intermediate_state() TLObject {
	return t.M_intermediate_state
}

func New_TL_updates_differenceSlice() *TL_updates_differenceSlice {
	return &TL_updates_differenceSlice{
		M_classID: TL_CLASS_updates_differenceSlice,
	}
}

func (t *TL_updates_differenceSlice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_differenceSlice))
	ec.Vector(t.Get_new_messages())
	ec.Vector(t.Get_new_encrypted_messages())
	ec.Vector(t.Get_other_updates())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())
	ec.TLObject(t.Get_intermediate_state())

	return ec.GetBuffer()
}

func (t *TL_updates_differenceSlice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_new_messages = dc.Vector()
	t.M_new_encrypted_messages = dc.Vector()
	t.M_other_updates = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()
	t.M_intermediate_state = dc.TLObject()

	return dc.err
}

func (t *TL_updates_differenceSlice) String() string {
	return fmt.Sprintf("- updates_differenceSlice#a8fb1981\n-- new_messages : %v\n-- new_encrypted_messages : %v\n-- other_updates : %v\n-- chats : %v\n-- users : %v\n-- intermediate_state : %v\n", t.M_new_messages, t.M_new_encrypted_messages, t.M_other_updates, t.M_chats, t.M_users, t.M_intermediate_state)
}

// updates_differenceTooLong#4afe8f6d
type TL_updates_differenceTooLong struct {
	M_classID int32
	M_pts     int32
}

func (t *TL_updates_differenceTooLong) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_differenceTooLong) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updates_differenceTooLong) Get_pts() int32 {
	return t.M_pts
}

func New_TL_updates_differenceTooLong() *TL_updates_differenceTooLong {
	return &TL_updates_differenceTooLong{
		M_classID: TL_CLASS_updates_differenceTooLong,
	}
}

func (t *TL_updates_differenceTooLong) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_differenceTooLong))
	ec.Int(t.Get_pts())

	return ec.GetBuffer()
}

func (t *TL_updates_differenceTooLong) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pts = dc.Int()

	return dc.err
}

func (t *TL_updates_differenceTooLong) String() string {
	return fmt.Sprintf("- updates_differenceTooLong#4afe8f6d\n-- pts : %v\n", t.M_pts)
}

// updatesTooLong#e317af7e
type TL_updatesTooLong struct {
	M_classID int32
}

func (t *TL_updatesTooLong) ClassID() int32 {
	return t.M_classID
}

func New_TL_updatesTooLong() *TL_updatesTooLong {
	return &TL_updatesTooLong{
		M_classID: TL_CLASS_updatesTooLong,
	}
}

func (t *TL_updatesTooLong) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updatesTooLong))

	return ec.GetBuffer()
}

func (t *TL_updatesTooLong) Decode(b []byte) error {
	return nil
}

func (t *TL_updatesTooLong) String() string {
	return fmt.Sprintf("- updatesTooLong#e317af7e\n")
}

// updateShortMessage#914fbf11
type TL_updateShortMessage struct {
	M_classID         int32
	M_flags           TLObject
	M_out             TLObject
	M_mentioned       TLObject
	M_media_unread    TLObject
	M_silent          TLObject
	M_id              int32
	M_user_id         int32
	M_message         string
	M_pts             int32
	M_pts_count       int32
	M_date            int32
	M_fwd_from        TLObject
	M_via_bot_id      TLObject
	M_reply_to_msg_id TLObject
	M_entities        []TLObject
}

func (t *TL_updateShortMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateShortMessage) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateShortMessage) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateShortMessage) Set_out(M_out TLObject) {
	t.M_out = M_out
}

func (t *TL_updateShortMessage) Get_out() TLObject {
	return t.M_out
}

func (t *TL_updateShortMessage) Set_mentioned(M_mentioned TLObject) {
	t.M_mentioned = M_mentioned
}

func (t *TL_updateShortMessage) Get_mentioned() TLObject {
	return t.M_mentioned
}

func (t *TL_updateShortMessage) Set_media_unread(M_media_unread TLObject) {
	t.M_media_unread = M_media_unread
}

func (t *TL_updateShortMessage) Get_media_unread() TLObject {
	return t.M_media_unread
}

func (t *TL_updateShortMessage) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_updateShortMessage) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_updateShortMessage) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_updateShortMessage) Get_id() int32 {
	return t.M_id
}

func (t *TL_updateShortMessage) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_updateShortMessage) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_updateShortMessage) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_updateShortMessage) Get_message() string {
	return t.M_message
}

func (t *TL_updateShortMessage) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateShortMessage) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateShortMessage) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateShortMessage) Get_pts_count() int32 {
	return t.M_pts_count
}

func (t *TL_updateShortMessage) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updateShortMessage) Get_date() int32 {
	return t.M_date
}

func (t *TL_updateShortMessage) Set_fwd_from(M_fwd_from TLObject) {
	t.M_fwd_from = M_fwd_from
}

func (t *TL_updateShortMessage) Get_fwd_from() TLObject {
	return t.M_fwd_from
}

func (t *TL_updateShortMessage) Set_via_bot_id(M_via_bot_id TLObject) {
	t.M_via_bot_id = M_via_bot_id
}

func (t *TL_updateShortMessage) Get_via_bot_id() TLObject {
	return t.M_via_bot_id
}

func (t *TL_updateShortMessage) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_updateShortMessage) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_updateShortMessage) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_updateShortMessage) Get_entities() []TLObject {
	return t.M_entities
}

func New_TL_updateShortMessage() *TL_updateShortMessage {
	return &TL_updateShortMessage{
		M_classID: TL_CLASS_updateShortMessage,
	}
}

func (t *TL_updateShortMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateShortMessage))
	ec.TLObject(t.Get_out())
	ec.TLObject(t.Get_mentioned())
	ec.TLObject(t.Get_media_unread())
	ec.TLObject(t.Get_silent())
	ec.Int(t.Get_id())
	ec.Int(t.Get_user_id())
	ec.String(t.Get_message())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_fwd_from())
	ec.TLObject(t.Get_via_bot_id())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.Vector(t.Get_entities())

	return ec.GetBuffer()
}

func (t *TL_updateShortMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_out = dc.TLObject()
	t.M_mentioned = dc.TLObject()
	t.M_media_unread = dc.TLObject()
	t.M_silent = dc.TLObject()
	t.M_id = dc.Int()
	t.M_user_id = dc.Int()
	t.M_message = dc.String()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()
	t.M_date = dc.Int()
	t.M_fwd_from = dc.TLObject()
	t.M_via_bot_id = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_entities = dc.Vector()

	return dc.err
}

func (t *TL_updateShortMessage) String() string {
	return fmt.Sprintf("- updateShortMessage#914fbf11\n-- flags : %v\n-- out : %v\n-- mentioned : %v\n-- media_unread : %v\n-- silent : %v\n-- id : %v\n-- user_id : %v\n-- message : %v\n-- pts : %v\n-- pts_count : %v\n-- date : %v\n-- fwd_from : %v\n-- via_bot_id : %v\n-- reply_to_msg_id : %v\n-- entities : %v\n", t.M_flags, t.M_out, t.M_mentioned, t.M_media_unread, t.M_silent, t.M_id, t.M_user_id, t.M_message, t.M_pts, t.M_pts_count, t.M_date, t.M_fwd_from, t.M_via_bot_id, t.M_reply_to_msg_id, t.M_entities)
}

// updateShortChatMessage#16812688
type TL_updateShortChatMessage struct {
	M_classID         int32
	M_flags           TLObject
	M_out             TLObject
	M_mentioned       TLObject
	M_media_unread    TLObject
	M_silent          TLObject
	M_id              int32
	M_from_id         int32
	M_chat_id         int32
	M_message         string
	M_pts             int32
	M_pts_count       int32
	M_date            int32
	M_fwd_from        TLObject
	M_via_bot_id      TLObject
	M_reply_to_msg_id TLObject
	M_entities        []TLObject
}

func (t *TL_updateShortChatMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateShortChatMessage) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateShortChatMessage) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateShortChatMessage) Set_out(M_out TLObject) {
	t.M_out = M_out
}

func (t *TL_updateShortChatMessage) Get_out() TLObject {
	return t.M_out
}

func (t *TL_updateShortChatMessage) Set_mentioned(M_mentioned TLObject) {
	t.M_mentioned = M_mentioned
}

func (t *TL_updateShortChatMessage) Get_mentioned() TLObject {
	return t.M_mentioned
}

func (t *TL_updateShortChatMessage) Set_media_unread(M_media_unread TLObject) {
	t.M_media_unread = M_media_unread
}

func (t *TL_updateShortChatMessage) Get_media_unread() TLObject {
	return t.M_media_unread
}

func (t *TL_updateShortChatMessage) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_updateShortChatMessage) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_updateShortChatMessage) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_updateShortChatMessage) Get_id() int32 {
	return t.M_id
}

func (t *TL_updateShortChatMessage) Set_from_id(M_from_id int32) {
	t.M_from_id = M_from_id
}

func (t *TL_updateShortChatMessage) Get_from_id() int32 {
	return t.M_from_id
}

func (t *TL_updateShortChatMessage) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_updateShortChatMessage) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_updateShortChatMessage) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_updateShortChatMessage) Get_message() string {
	return t.M_message
}

func (t *TL_updateShortChatMessage) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateShortChatMessage) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateShortChatMessage) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateShortChatMessage) Get_pts_count() int32 {
	return t.M_pts_count
}

func (t *TL_updateShortChatMessage) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updateShortChatMessage) Get_date() int32 {
	return t.M_date
}

func (t *TL_updateShortChatMessage) Set_fwd_from(M_fwd_from TLObject) {
	t.M_fwd_from = M_fwd_from
}

func (t *TL_updateShortChatMessage) Get_fwd_from() TLObject {
	return t.M_fwd_from
}

func (t *TL_updateShortChatMessage) Set_via_bot_id(M_via_bot_id TLObject) {
	t.M_via_bot_id = M_via_bot_id
}

func (t *TL_updateShortChatMessage) Get_via_bot_id() TLObject {
	return t.M_via_bot_id
}

func (t *TL_updateShortChatMessage) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_updateShortChatMessage) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_updateShortChatMessage) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_updateShortChatMessage) Get_entities() []TLObject {
	return t.M_entities
}

func New_TL_updateShortChatMessage() *TL_updateShortChatMessage {
	return &TL_updateShortChatMessage{
		M_classID: TL_CLASS_updateShortChatMessage,
	}
}

func (t *TL_updateShortChatMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateShortChatMessage))
	ec.TLObject(t.Get_out())
	ec.TLObject(t.Get_mentioned())
	ec.TLObject(t.Get_media_unread())
	ec.TLObject(t.Get_silent())
	ec.Int(t.Get_id())
	ec.Int(t.Get_from_id())
	ec.Int(t.Get_chat_id())
	ec.String(t.Get_message())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_fwd_from())
	ec.TLObject(t.Get_via_bot_id())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.Vector(t.Get_entities())

	return ec.GetBuffer()
}

func (t *TL_updateShortChatMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_out = dc.TLObject()
	t.M_mentioned = dc.TLObject()
	t.M_media_unread = dc.TLObject()
	t.M_silent = dc.TLObject()
	t.M_id = dc.Int()
	t.M_from_id = dc.Int()
	t.M_chat_id = dc.Int()
	t.M_message = dc.String()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()
	t.M_date = dc.Int()
	t.M_fwd_from = dc.TLObject()
	t.M_via_bot_id = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_entities = dc.Vector()

	return dc.err
}

func (t *TL_updateShortChatMessage) String() string {
	return fmt.Sprintf("- updateShortChatMessage#16812688\n-- flags : %v\n-- out : %v\n-- mentioned : %v\n-- media_unread : %v\n-- silent : %v\n-- id : %v\n-- from_id : %v\n-- chat_id : %v\n-- message : %v\n-- pts : %v\n-- pts_count : %v\n-- date : %v\n-- fwd_from : %v\n-- via_bot_id : %v\n-- reply_to_msg_id : %v\n-- entities : %v\n", t.M_flags, t.M_out, t.M_mentioned, t.M_media_unread, t.M_silent, t.M_id, t.M_from_id, t.M_chat_id, t.M_message, t.M_pts, t.M_pts_count, t.M_date, t.M_fwd_from, t.M_via_bot_id, t.M_reply_to_msg_id, t.M_entities)
}

// updateShort#78d4dec1
type TL_updateShort struct {
	M_classID int32
	M_update  TLObject
	M_date    int32
}

func (t *TL_updateShort) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateShort) Set_update(M_update TLObject) {
	t.M_update = M_update
}

func (t *TL_updateShort) Get_update() TLObject {
	return t.M_update
}

func (t *TL_updateShort) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updateShort) Get_date() int32 {
	return t.M_date
}

func New_TL_updateShort() *TL_updateShort {
	return &TL_updateShort{
		M_classID: TL_CLASS_updateShort,
	}
}

func (t *TL_updateShort) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateShort))
	ec.TLObject(t.Get_update())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_updateShort) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_update = dc.TLObject()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_updateShort) String() string {
	return fmt.Sprintf("- updateShort#78d4dec1\n-- update : %v\n-- date : %v\n", t.M_update, t.M_date)
}

// updatesCombined#725b04c3
type TL_updatesCombined struct {
	M_classID   int32
	M_updates   []TLObject
	M_users     []TLObject
	M_chats     []TLObject
	M_date      int32
	M_seq_start int32
	M_seq       int32
}

func (t *TL_updatesCombined) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updatesCombined) Set_updates(M_updates []TLObject) {
	t.M_updates = M_updates
}

func (t *TL_updatesCombined) Get_updates() []TLObject {
	return t.M_updates
}

func (t *TL_updatesCombined) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_updatesCombined) Get_users() []TLObject {
	return t.M_users
}

func (t *TL_updatesCombined) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_updatesCombined) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_updatesCombined) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updatesCombined) Get_date() int32 {
	return t.M_date
}

func (t *TL_updatesCombined) Set_seq_start(M_seq_start int32) {
	t.M_seq_start = M_seq_start
}

func (t *TL_updatesCombined) Get_seq_start() int32 {
	return t.M_seq_start
}

func (t *TL_updatesCombined) Set_seq(M_seq int32) {
	t.M_seq = M_seq
}

func (t *TL_updatesCombined) Get_seq() int32 {
	return t.M_seq
}

func New_TL_updatesCombined() *TL_updatesCombined {
	return &TL_updatesCombined{
		M_classID: TL_CLASS_updatesCombined,
	}
}

func (t *TL_updatesCombined) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updatesCombined))
	ec.Vector(t.Get_updates())
	ec.Vector(t.Get_users())
	ec.Vector(t.Get_chats())
	ec.Int(t.Get_date())
	ec.Int(t.Get_seq_start())
	ec.Int(t.Get_seq())

	return ec.GetBuffer()
}

func (t *TL_updatesCombined) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_updates = dc.Vector()
	t.M_users = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_date = dc.Int()
	t.M_seq_start = dc.Int()
	t.M_seq = dc.Int()

	return dc.err
}

func (t *TL_updatesCombined) String() string {
	return fmt.Sprintf("- updatesCombined#725b04c3\n-- updates : %v\n-- users : %v\n-- chats : %v\n-- date : %v\n-- seq_start : %v\n-- seq : %v\n", t.M_updates, t.M_users, t.M_chats, t.M_date, t.M_seq_start, t.M_seq)
}

// updates#74ae4240
type TL_updates struct {
	M_classID int32
	M_updates []TLObject
	M_users   []TLObject
	M_chats   []TLObject
	M_date    int32
	M_seq     int32
}

func (t *TL_updates) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates) Set_updates(M_updates []TLObject) {
	t.M_updates = M_updates
}

func (t *TL_updates) Get_updates() []TLObject {
	return t.M_updates
}

func (t *TL_updates) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_updates) Get_users() []TLObject {
	return t.M_users
}

func (t *TL_updates) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_updates) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_updates) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updates) Get_date() int32 {
	return t.M_date
}

func (t *TL_updates) Set_seq(M_seq int32) {
	t.M_seq = M_seq
}

func (t *TL_updates) Get_seq() int32 {
	return t.M_seq
}

func New_TL_updates() *TL_updates {
	return &TL_updates{
		M_classID: TL_CLASS_updates,
	}
}

func (t *TL_updates) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates))
	ec.Vector(t.Get_updates())
	ec.Vector(t.Get_users())
	ec.Vector(t.Get_chats())
	ec.Int(t.Get_date())
	ec.Int(t.Get_seq())

	return ec.GetBuffer()
}

func (t *TL_updates) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_updates = dc.Vector()
	t.M_users = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_date = dc.Int()
	t.M_seq = dc.Int()

	return dc.err
}

func (t *TL_updates) String() string {
	return fmt.Sprintf("- updates#74ae4240\n-- updates : %v\n-- users : %v\n-- chats : %v\n-- date : %v\n-- seq : %v\n", t.M_updates, t.M_users, t.M_chats, t.M_date, t.M_seq)
}

// updateShortSentMessage#11f1331c
type TL_updateShortSentMessage struct {
	M_classID   int32
	M_flags     TLObject
	M_out       TLObject
	M_id        int32
	M_pts       int32
	M_pts_count int32
	M_date      int32
	M_media     TLObject
	M_entities  []TLObject
}

func (t *TL_updateShortSentMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updateShortSentMessage) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updateShortSentMessage) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updateShortSentMessage) Set_out(M_out TLObject) {
	t.M_out = M_out
}

func (t *TL_updateShortSentMessage) Get_out() TLObject {
	return t.M_out
}

func (t *TL_updateShortSentMessage) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_updateShortSentMessage) Get_id() int32 {
	return t.M_id
}

func (t *TL_updateShortSentMessage) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updateShortSentMessage) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updateShortSentMessage) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_updateShortSentMessage) Get_pts_count() int32 {
	return t.M_pts_count
}

func (t *TL_updateShortSentMessage) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updateShortSentMessage) Get_date() int32 {
	return t.M_date
}

func (t *TL_updateShortSentMessage) Set_media(M_media TLObject) {
	t.M_media = M_media
}

func (t *TL_updateShortSentMessage) Get_media() TLObject {
	return t.M_media
}

func (t *TL_updateShortSentMessage) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_updateShortSentMessage) Get_entities() []TLObject {
	return t.M_entities
}

func New_TL_updateShortSentMessage() *TL_updateShortSentMessage {
	return &TL_updateShortSentMessage{
		M_classID: TL_CLASS_updateShortSentMessage,
	}
}

func (t *TL_updateShortSentMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updateShortSentMessage))
	ec.TLObject(t.Get_out())
	ec.Int(t.Get_id())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_media())
	ec.Vector(t.Get_entities())

	return ec.GetBuffer()
}

func (t *TL_updateShortSentMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_out = dc.TLObject()
	t.M_id = dc.Int()
	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()
	t.M_date = dc.Int()
	t.M_media = dc.TLObject()
	t.M_entities = dc.Vector()

	return dc.err
}

func (t *TL_updateShortSentMessage) String() string {
	return fmt.Sprintf("- updateShortSentMessage#11f1331c\n-- flags : %v\n-- out : %v\n-- id : %v\n-- pts : %v\n-- pts_count : %v\n-- date : %v\n-- media : %v\n-- entities : %v\n", t.M_flags, t.M_out, t.M_id, t.M_pts, t.M_pts_count, t.M_date, t.M_media, t.M_entities)
}

// photos_photos#8dca6aa5
type TL_photos_photos struct {
	M_classID int32
	M_photos  []TLObject
	M_users   []TLObject
}

func (t *TL_photos_photos) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photos_photos) Set_photos(M_photos []TLObject) {
	t.M_photos = M_photos
}

func (t *TL_photos_photos) Get_photos() []TLObject {
	return t.M_photos
}

func (t *TL_photos_photos) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_photos_photos) Get_users() []TLObject {
	return t.M_users
}

func New_TL_photos_photos() *TL_photos_photos {
	return &TL_photos_photos{
		M_classID: TL_CLASS_photos_photos,
	}
}

func (t *TL_photos_photos) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photos_photos))
	ec.Vector(t.Get_photos())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_photos_photos) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_photos = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_photos_photos) String() string {
	return fmt.Sprintf("- photos_photos#8dca6aa5\n-- photos : %v\n-- users : %v\n", t.M_photos, t.M_users)
}

// photos_photosSlice#15051f54
type TL_photos_photosSlice struct {
	M_classID int32
	M_count   int32
	M_photos  []TLObject
	M_users   []TLObject
}

func (t *TL_photos_photosSlice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photos_photosSlice) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_photos_photosSlice) Get_count() int32 {
	return t.M_count
}

func (t *TL_photos_photosSlice) Set_photos(M_photos []TLObject) {
	t.M_photos = M_photos
}

func (t *TL_photos_photosSlice) Get_photos() []TLObject {
	return t.M_photos
}

func (t *TL_photos_photosSlice) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_photos_photosSlice) Get_users() []TLObject {
	return t.M_users
}

func New_TL_photos_photosSlice() *TL_photos_photosSlice {
	return &TL_photos_photosSlice{
		M_classID: TL_CLASS_photos_photosSlice,
	}
}

func (t *TL_photos_photosSlice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photos_photosSlice))
	ec.Int(t.Get_count())
	ec.Vector(t.Get_photos())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_photos_photosSlice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_count = dc.Int()
	t.M_photos = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_photos_photosSlice) String() string {
	return fmt.Sprintf("- photos_photosSlice#15051f54\n-- count : %v\n-- photos : %v\n-- users : %v\n", t.M_count, t.M_photos, t.M_users)
}

// photos_photo#20212ca8
type TL_photos_photo struct {
	M_classID int32
	M_photo   TLObject
	M_users   []TLObject
}

func (t *TL_photos_photo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photos_photo) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_photos_photo) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_photos_photo) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_photos_photo) Get_users() []TLObject {
	return t.M_users
}

func New_TL_photos_photo() *TL_photos_photo {
	return &TL_photos_photo{
		M_classID: TL_CLASS_photos_photo,
	}
}

func (t *TL_photos_photo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photos_photo))
	ec.TLObject(t.Get_photo())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_photos_photo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_photo = dc.TLObject()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_photos_photo) String() string {
	return fmt.Sprintf("- photos_photo#20212ca8\n-- photo : %v\n-- users : %v\n", t.M_photo, t.M_users)
}

// upload_file#96a18d5
type TL_upload_file struct {
	M_classID int32
	M_type    TLObject
	M_mtime   int32
	M_bytes   TLObject
}

func (t *TL_upload_file) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_file) Set_type(M_type TLObject) {
	t.M_type = M_type
}

func (t *TL_upload_file) Get_type() TLObject {
	return t.M_type
}

func (t *TL_upload_file) Set_mtime(M_mtime int32) {
	t.M_mtime = M_mtime
}

func (t *TL_upload_file) Get_mtime() int32 {
	return t.M_mtime
}

func (t *TL_upload_file) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_upload_file) Get_bytes() TLObject {
	return t.M_bytes
}

func New_TL_upload_file() *TL_upload_file {
	return &TL_upload_file{
		M_classID: TL_CLASS_upload_file,
	}
}

func (t *TL_upload_file) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_file))
	ec.TLObject(t.Get_type())
	ec.Int(t.Get_mtime())
	ec.TLObject(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_upload_file) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_type = dc.TLObject()
	t.M_mtime = dc.Int()
	t.M_bytes = dc.TLObject()

	return dc.err
}

func (t *TL_upload_file) String() string {
	return fmt.Sprintf("- upload_file#96a18d5\n-- type : %v\n-- mtime : %v\n-- bytes : %v\n", t.M_type, t.M_mtime, t.M_bytes)
}

// upload_fileCdnRedirect#ea52fe5a
type TL_upload_fileCdnRedirect struct {
	M_classID         int32
	M_dc_id           int32
	M_file_token      TLObject
	M_encryption_key  TLObject
	M_encryption_iv   TLObject
	M_cdn_file_hashes []TLObject
}

func (t *TL_upload_fileCdnRedirect) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_fileCdnRedirect) Set_dc_id(M_dc_id int32) {
	t.M_dc_id = M_dc_id
}

func (t *TL_upload_fileCdnRedirect) Get_dc_id() int32 {
	return t.M_dc_id
}

func (t *TL_upload_fileCdnRedirect) Set_file_token(M_file_token TLObject) {
	t.M_file_token = M_file_token
}

func (t *TL_upload_fileCdnRedirect) Get_file_token() TLObject {
	return t.M_file_token
}

func (t *TL_upload_fileCdnRedirect) Set_encryption_key(M_encryption_key TLObject) {
	t.M_encryption_key = M_encryption_key
}

func (t *TL_upload_fileCdnRedirect) Get_encryption_key() TLObject {
	return t.M_encryption_key
}

func (t *TL_upload_fileCdnRedirect) Set_encryption_iv(M_encryption_iv TLObject) {
	t.M_encryption_iv = M_encryption_iv
}

func (t *TL_upload_fileCdnRedirect) Get_encryption_iv() TLObject {
	return t.M_encryption_iv
}

func (t *TL_upload_fileCdnRedirect) Set_cdn_file_hashes(M_cdn_file_hashes []TLObject) {
	t.M_cdn_file_hashes = M_cdn_file_hashes
}

func (t *TL_upload_fileCdnRedirect) Get_cdn_file_hashes() []TLObject {
	return t.M_cdn_file_hashes
}

func New_TL_upload_fileCdnRedirect() *TL_upload_fileCdnRedirect {
	return &TL_upload_fileCdnRedirect{
		M_classID: TL_CLASS_upload_fileCdnRedirect,
	}
}

func (t *TL_upload_fileCdnRedirect) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_fileCdnRedirect))
	ec.Int(t.Get_dc_id())
	ec.TLObject(t.Get_file_token())
	ec.TLObject(t.Get_encryption_key())
	ec.TLObject(t.Get_encryption_iv())
	ec.Vector(t.Get_cdn_file_hashes())

	return ec.GetBuffer()
}

func (t *TL_upload_fileCdnRedirect) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_dc_id = dc.Int()
	t.M_file_token = dc.TLObject()
	t.M_encryption_key = dc.TLObject()
	t.M_encryption_iv = dc.TLObject()
	t.M_cdn_file_hashes = dc.Vector()

	return dc.err
}

func (t *TL_upload_fileCdnRedirect) String() string {
	return fmt.Sprintf("- upload_fileCdnRedirect#ea52fe5a\n-- dc_id : %v\n-- file_token : %v\n-- encryption_key : %v\n-- encryption_iv : %v\n-- cdn_file_hashes : %v\n", t.M_dc_id, t.M_file_token, t.M_encryption_key, t.M_encryption_iv, t.M_cdn_file_hashes)
}

// dcOption#5d8c6cc
type TL_dcOption struct {
	M_classID    int32
	M_flags      TLObject
	M_ipv6       TLObject
	M_media_only TLObject
	M_tcpo_only  TLObject
	M_cdn        TLObject
	M_static     TLObject
	M_id         int32
	M_ip_address string
	M_port       int32
}

func (t *TL_dcOption) ClassID() int32 {
	return t.M_classID
}

func (t *TL_dcOption) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_dcOption) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_dcOption) Set_ipv6(M_ipv6 TLObject) {
	t.M_ipv6 = M_ipv6
}

func (t *TL_dcOption) Get_ipv6() TLObject {
	return t.M_ipv6
}

func (t *TL_dcOption) Set_media_only(M_media_only TLObject) {
	t.M_media_only = M_media_only
}

func (t *TL_dcOption) Get_media_only() TLObject {
	return t.M_media_only
}

func (t *TL_dcOption) Set_tcpo_only(M_tcpo_only TLObject) {
	t.M_tcpo_only = M_tcpo_only
}

func (t *TL_dcOption) Get_tcpo_only() TLObject {
	return t.M_tcpo_only
}

func (t *TL_dcOption) Set_cdn(M_cdn TLObject) {
	t.M_cdn = M_cdn
}

func (t *TL_dcOption) Get_cdn() TLObject {
	return t.M_cdn
}

func (t *TL_dcOption) Set_static(M_static TLObject) {
	t.M_static = M_static
}

func (t *TL_dcOption) Get_static() TLObject {
	return t.M_static
}

func (t *TL_dcOption) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_dcOption) Get_id() int32 {
	return t.M_id
}

func (t *TL_dcOption) Set_ip_address(M_ip_address string) {
	t.M_ip_address = M_ip_address
}

func (t *TL_dcOption) Get_ip_address() string {
	return t.M_ip_address
}

func (t *TL_dcOption) Set_port(M_port int32) {
	t.M_port = M_port
}

func (t *TL_dcOption) Get_port() int32 {
	return t.M_port
}

func New_TL_dcOption() *TL_dcOption {
	return &TL_dcOption{
		M_classID: TL_CLASS_dcOption,
	}
}

func (t *TL_dcOption) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_dcOption))
	ec.TLObject(t.Get_ipv6())
	ec.TLObject(t.Get_media_only())
	ec.TLObject(t.Get_tcpo_only())
	ec.TLObject(t.Get_cdn())
	ec.TLObject(t.Get_static())
	ec.Int(t.Get_id())
	ec.String(t.Get_ip_address())
	ec.Int(t.Get_port())

	return ec.GetBuffer()
}

func (t *TL_dcOption) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_ipv6 = dc.TLObject()
	t.M_media_only = dc.TLObject()
	t.M_tcpo_only = dc.TLObject()
	t.M_cdn = dc.TLObject()
	t.M_static = dc.TLObject()
	t.M_id = dc.Int()
	t.M_ip_address = dc.String()
	t.M_port = dc.Int()

	return dc.err
}

func (t *TL_dcOption) String() string {
	return fmt.Sprintf("- dcOption#5d8c6cc\n-- flags : %v\n-- ipv6 : %v\n-- media_only : %v\n-- tcpo_only : %v\n-- cdn : %v\n-- static : %v\n-- id : %v\n-- ip_address : %v\n-- port : %v\n", t.M_flags, t.M_ipv6, t.M_media_only, t.M_tcpo_only, t.M_cdn, t.M_static, t.M_id, t.M_ip_address, t.M_port)
}

// config#9c840964
type TL_config struct {
	M_classID                    int32
	M_flags                      TLObject
	M_phonecalls_enabled         TLObject
	M_default_p2p_contacts       TLObject
	M_date                       int32
	M_expires                    int32
	M_test_mode                  TLObject
	M_this_dc                    int32
	M_dc_options                 []TLObject
	M_chat_size_max              int32
	M_megagroup_size_max         int32
	M_forwarded_count_max        int32
	M_online_update_period_ms    int32
	M_offline_blur_timeout_ms    int32
	M_offline_idle_timeout_ms    int32
	M_online_cloud_timeout_ms    int32
	M_notify_cloud_delay_ms      int32
	M_notify_default_delay_ms    int32
	M_chat_big_size              int32
	M_push_chat_period_ms        int32
	M_push_chat_limit            int32
	M_saved_gifs_limit           int32
	M_edit_time_limit            int32
	M_rating_e_decay             int32
	M_stickers_recent_limit      int32
	M_stickers_faved_limit       int32
	M_channels_read_media_period int32
	M_tmp_sessions               TLObject
	M_pinned_dialogs_count_max   int32
	M_call_receive_timeout_ms    int32
	M_call_ring_timeout_ms       int32
	M_call_connect_timeout_ms    int32
	M_call_packet_timeout_ms     int32
	M_me_url_prefix              string
	M_suggested_lang_code        TLObject
	M_lang_pack_version          TLObject
	M_disabled_features          []TLObject
}

func (t *TL_config) ClassID() int32 {
	return t.M_classID
}

func (t *TL_config) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_config) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_config) Set_phonecalls_enabled(M_phonecalls_enabled TLObject) {
	t.M_phonecalls_enabled = M_phonecalls_enabled
}

func (t *TL_config) Get_phonecalls_enabled() TLObject {
	return t.M_phonecalls_enabled
}

func (t *TL_config) Set_default_p2p_contacts(M_default_p2p_contacts TLObject) {
	t.M_default_p2p_contacts = M_default_p2p_contacts
}

func (t *TL_config) Get_default_p2p_contacts() TLObject {
	return t.M_default_p2p_contacts
}

func (t *TL_config) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_config) Get_date() int32 {
	return t.M_date
}

func (t *TL_config) Set_expires(M_expires int32) {
	t.M_expires = M_expires
}

func (t *TL_config) Get_expires() int32 {
	return t.M_expires
}

func (t *TL_config) Set_test_mode(M_test_mode TLObject) {
	t.M_test_mode = M_test_mode
}

func (t *TL_config) Get_test_mode() TLObject {
	return t.M_test_mode
}

func (t *TL_config) Set_this_dc(M_this_dc int32) {
	t.M_this_dc = M_this_dc
}

func (t *TL_config) Get_this_dc() int32 {
	return t.M_this_dc
}

func (t *TL_config) Set_dc_options(M_dc_options []TLObject) {
	t.M_dc_options = M_dc_options
}

func (t *TL_config) Get_dc_options() []TLObject {
	return t.M_dc_options
}

func (t *TL_config) Set_chat_size_max(M_chat_size_max int32) {
	t.M_chat_size_max = M_chat_size_max
}

func (t *TL_config) Get_chat_size_max() int32 {
	return t.M_chat_size_max
}

func (t *TL_config) Set_megagroup_size_max(M_megagroup_size_max int32) {
	t.M_megagroup_size_max = M_megagroup_size_max
}

func (t *TL_config) Get_megagroup_size_max() int32 {
	return t.M_megagroup_size_max
}

func (t *TL_config) Set_forwarded_count_max(M_forwarded_count_max int32) {
	t.M_forwarded_count_max = M_forwarded_count_max
}

func (t *TL_config) Get_forwarded_count_max() int32 {
	return t.M_forwarded_count_max
}

func (t *TL_config) Set_online_update_period_ms(M_online_update_period_ms int32) {
	t.M_online_update_period_ms = M_online_update_period_ms
}

func (t *TL_config) Get_online_update_period_ms() int32 {
	return t.M_online_update_period_ms
}

func (t *TL_config) Set_offline_blur_timeout_ms(M_offline_blur_timeout_ms int32) {
	t.M_offline_blur_timeout_ms = M_offline_blur_timeout_ms
}

func (t *TL_config) Get_offline_blur_timeout_ms() int32 {
	return t.M_offline_blur_timeout_ms
}

func (t *TL_config) Set_offline_idle_timeout_ms(M_offline_idle_timeout_ms int32) {
	t.M_offline_idle_timeout_ms = M_offline_idle_timeout_ms
}

func (t *TL_config) Get_offline_idle_timeout_ms() int32 {
	return t.M_offline_idle_timeout_ms
}

func (t *TL_config) Set_online_cloud_timeout_ms(M_online_cloud_timeout_ms int32) {
	t.M_online_cloud_timeout_ms = M_online_cloud_timeout_ms
}

func (t *TL_config) Get_online_cloud_timeout_ms() int32 {
	return t.M_online_cloud_timeout_ms
}

func (t *TL_config) Set_notify_cloud_delay_ms(M_notify_cloud_delay_ms int32) {
	t.M_notify_cloud_delay_ms = M_notify_cloud_delay_ms
}

func (t *TL_config) Get_notify_cloud_delay_ms() int32 {
	return t.M_notify_cloud_delay_ms
}

func (t *TL_config) Set_notify_default_delay_ms(M_notify_default_delay_ms int32) {
	t.M_notify_default_delay_ms = M_notify_default_delay_ms
}

func (t *TL_config) Get_notify_default_delay_ms() int32 {
	return t.M_notify_default_delay_ms
}

func (t *TL_config) Set_chat_big_size(M_chat_big_size int32) {
	t.M_chat_big_size = M_chat_big_size
}

func (t *TL_config) Get_chat_big_size() int32 {
	return t.M_chat_big_size
}

func (t *TL_config) Set_push_chat_period_ms(M_push_chat_period_ms int32) {
	t.M_push_chat_period_ms = M_push_chat_period_ms
}

func (t *TL_config) Get_push_chat_period_ms() int32 {
	return t.M_push_chat_period_ms
}

func (t *TL_config) Set_push_chat_limit(M_push_chat_limit int32) {
	t.M_push_chat_limit = M_push_chat_limit
}

func (t *TL_config) Get_push_chat_limit() int32 {
	return t.M_push_chat_limit
}

func (t *TL_config) Set_saved_gifs_limit(M_saved_gifs_limit int32) {
	t.M_saved_gifs_limit = M_saved_gifs_limit
}

func (t *TL_config) Get_saved_gifs_limit() int32 {
	return t.M_saved_gifs_limit
}

func (t *TL_config) Set_edit_time_limit(M_edit_time_limit int32) {
	t.M_edit_time_limit = M_edit_time_limit
}

func (t *TL_config) Get_edit_time_limit() int32 {
	return t.M_edit_time_limit
}

func (t *TL_config) Set_rating_e_decay(M_rating_e_decay int32) {
	t.M_rating_e_decay = M_rating_e_decay
}

func (t *TL_config) Get_rating_e_decay() int32 {
	return t.M_rating_e_decay
}

func (t *TL_config) Set_stickers_recent_limit(M_stickers_recent_limit int32) {
	t.M_stickers_recent_limit = M_stickers_recent_limit
}

func (t *TL_config) Get_stickers_recent_limit() int32 {
	return t.M_stickers_recent_limit
}

func (t *TL_config) Set_stickers_faved_limit(M_stickers_faved_limit int32) {
	t.M_stickers_faved_limit = M_stickers_faved_limit
}

func (t *TL_config) Get_stickers_faved_limit() int32 {
	return t.M_stickers_faved_limit
}

func (t *TL_config) Set_channels_read_media_period(M_channels_read_media_period int32) {
	t.M_channels_read_media_period = M_channels_read_media_period
}

func (t *TL_config) Get_channels_read_media_period() int32 {
	return t.M_channels_read_media_period
}

func (t *TL_config) Set_tmp_sessions(M_tmp_sessions TLObject) {
	t.M_tmp_sessions = M_tmp_sessions
}

func (t *TL_config) Get_tmp_sessions() TLObject {
	return t.M_tmp_sessions
}

func (t *TL_config) Set_pinned_dialogs_count_max(M_pinned_dialogs_count_max int32) {
	t.M_pinned_dialogs_count_max = M_pinned_dialogs_count_max
}

func (t *TL_config) Get_pinned_dialogs_count_max() int32 {
	return t.M_pinned_dialogs_count_max
}

func (t *TL_config) Set_call_receive_timeout_ms(M_call_receive_timeout_ms int32) {
	t.M_call_receive_timeout_ms = M_call_receive_timeout_ms
}

func (t *TL_config) Get_call_receive_timeout_ms() int32 {
	return t.M_call_receive_timeout_ms
}

func (t *TL_config) Set_call_ring_timeout_ms(M_call_ring_timeout_ms int32) {
	t.M_call_ring_timeout_ms = M_call_ring_timeout_ms
}

func (t *TL_config) Get_call_ring_timeout_ms() int32 {
	return t.M_call_ring_timeout_ms
}

func (t *TL_config) Set_call_connect_timeout_ms(M_call_connect_timeout_ms int32) {
	t.M_call_connect_timeout_ms = M_call_connect_timeout_ms
}

func (t *TL_config) Get_call_connect_timeout_ms() int32 {
	return t.M_call_connect_timeout_ms
}

func (t *TL_config) Set_call_packet_timeout_ms(M_call_packet_timeout_ms int32) {
	t.M_call_packet_timeout_ms = M_call_packet_timeout_ms
}

func (t *TL_config) Get_call_packet_timeout_ms() int32 {
	return t.M_call_packet_timeout_ms
}

func (t *TL_config) Set_me_url_prefix(M_me_url_prefix string) {
	t.M_me_url_prefix = M_me_url_prefix
}

func (t *TL_config) Get_me_url_prefix() string {
	return t.M_me_url_prefix
}

func (t *TL_config) Set_suggested_lang_code(M_suggested_lang_code TLObject) {
	t.M_suggested_lang_code = M_suggested_lang_code
}

func (t *TL_config) Get_suggested_lang_code() TLObject {
	return t.M_suggested_lang_code
}

func (t *TL_config) Set_lang_pack_version(M_lang_pack_version TLObject) {
	t.M_lang_pack_version = M_lang_pack_version
}

func (t *TL_config) Get_lang_pack_version() TLObject {
	return t.M_lang_pack_version
}

func (t *TL_config) Set_disabled_features(M_disabled_features []TLObject) {
	t.M_disabled_features = M_disabled_features
}

func (t *TL_config) Get_disabled_features() []TLObject {
	return t.M_disabled_features
}

func New_TL_config() *TL_config {
	return &TL_config{
		M_classID: TL_CLASS_config,
	}
}

func (t *TL_config) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_config))
	ec.TLObject(t.Get_phonecalls_enabled())
	ec.TLObject(t.Get_default_p2p_contacts())
	ec.Int(t.Get_date())
	ec.Int(t.Get_expires())
	ec.TLObject(t.Get_test_mode())
	ec.Int(t.Get_this_dc())
	ec.Vector(t.Get_dc_options())
	ec.Int(t.Get_chat_size_max())
	ec.Int(t.Get_megagroup_size_max())
	ec.Int(t.Get_forwarded_count_max())
	ec.Int(t.Get_online_update_period_ms())
	ec.Int(t.Get_offline_blur_timeout_ms())
	ec.Int(t.Get_offline_idle_timeout_ms())
	ec.Int(t.Get_online_cloud_timeout_ms())
	ec.Int(t.Get_notify_cloud_delay_ms())
	ec.Int(t.Get_notify_default_delay_ms())
	ec.Int(t.Get_chat_big_size())
	ec.Int(t.Get_push_chat_period_ms())
	ec.Int(t.Get_push_chat_limit())
	ec.Int(t.Get_saved_gifs_limit())
	ec.Int(t.Get_edit_time_limit())
	ec.Int(t.Get_rating_e_decay())
	ec.Int(t.Get_stickers_recent_limit())
	ec.Int(t.Get_stickers_faved_limit())
	ec.Int(t.Get_channels_read_media_period())
	ec.TLObject(t.Get_tmp_sessions())
	ec.Int(t.Get_pinned_dialogs_count_max())
	ec.Int(t.Get_call_receive_timeout_ms())
	ec.Int(t.Get_call_ring_timeout_ms())
	ec.Int(t.Get_call_connect_timeout_ms())
	ec.Int(t.Get_call_packet_timeout_ms())
	ec.String(t.Get_me_url_prefix())
	ec.TLObject(t.Get_suggested_lang_code())
	ec.TLObject(t.Get_lang_pack_version())
	ec.Vector(t.Get_disabled_features())

	return ec.GetBuffer()
}

func (t *TL_config) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phonecalls_enabled = dc.TLObject()
	t.M_default_p2p_contacts = dc.TLObject()
	t.M_date = dc.Int()
	t.M_expires = dc.Int()
	t.M_test_mode = dc.TLObject()
	t.M_this_dc = dc.Int()
	t.M_dc_options = dc.Vector()
	t.M_chat_size_max = dc.Int()
	t.M_megagroup_size_max = dc.Int()
	t.M_forwarded_count_max = dc.Int()
	t.M_online_update_period_ms = dc.Int()
	t.M_offline_blur_timeout_ms = dc.Int()
	t.M_offline_idle_timeout_ms = dc.Int()
	t.M_online_cloud_timeout_ms = dc.Int()
	t.M_notify_cloud_delay_ms = dc.Int()
	t.M_notify_default_delay_ms = dc.Int()
	t.M_chat_big_size = dc.Int()
	t.M_push_chat_period_ms = dc.Int()
	t.M_push_chat_limit = dc.Int()
	t.M_saved_gifs_limit = dc.Int()
	t.M_edit_time_limit = dc.Int()
	t.M_rating_e_decay = dc.Int()
	t.M_stickers_recent_limit = dc.Int()
	t.M_stickers_faved_limit = dc.Int()
	t.M_channels_read_media_period = dc.Int()
	t.M_tmp_sessions = dc.TLObject()
	t.M_pinned_dialogs_count_max = dc.Int()
	t.M_call_receive_timeout_ms = dc.Int()
	t.M_call_ring_timeout_ms = dc.Int()
	t.M_call_connect_timeout_ms = dc.Int()
	t.M_call_packet_timeout_ms = dc.Int()
	t.M_me_url_prefix = dc.String()
	t.M_suggested_lang_code = dc.TLObject()
	t.M_lang_pack_version = dc.TLObject()
	t.M_disabled_features = dc.Vector()

	return dc.err
}

func (t *TL_config) String() string {
	return fmt.Sprintf("- config#9c840964\n-- flags : %v\n-- phonecalls_enabled : %v\n-- default_p2p_contacts : %v\n-- date : %v\n-- expires : %v\n-- test_mode : %v\n-- this_dc : %v\n-- dc_options : %v\n-- chat_size_max : %v\n-- megagroup_size_max : %v\n-- forwarded_count_max : %v\n-- online_update_period_ms : %v\n-- offline_blur_timeout_ms : %v\n-- offline_idle_timeout_ms : %v\n-- online_cloud_timeout_ms : %v\n-- notify_cloud_delay_ms : %v\n-- notify_default_delay_ms : %v\n-- chat_big_size : %v\n-- push_chat_period_ms : %v\n-- push_chat_limit : %v\n-- saved_gifs_limit : %v\n-- edit_time_limit : %v\n-- rating_e_decay : %v\n-- stickers_recent_limit : %v\n-- stickers_faved_limit : %v\n-- channels_read_media_period : %v\n-- tmp_sessions : %v\n-- pinned_dialogs_count_max : %v\n-- call_receive_timeout_ms : %v\n-- call_ring_timeout_ms : %v\n-- call_connect_timeout_ms : %v\n-- call_packet_timeout_ms : %v\n-- me_url_prefix : %v\n-- suggested_lang_code : %v\n-- lang_pack_version : %v\n-- disabled_features : %v\n", t.M_flags, t.M_phonecalls_enabled, t.M_default_p2p_contacts, t.M_date, t.M_expires, t.M_test_mode, t.M_this_dc, t.M_dc_options, t.M_chat_size_max, t.M_megagroup_size_max, t.M_forwarded_count_max, t.M_online_update_period_ms, t.M_offline_blur_timeout_ms, t.M_offline_idle_timeout_ms, t.M_online_cloud_timeout_ms, t.M_notify_cloud_delay_ms, t.M_notify_default_delay_ms, t.M_chat_big_size, t.M_push_chat_period_ms, t.M_push_chat_limit, t.M_saved_gifs_limit, t.M_edit_time_limit, t.M_rating_e_decay, t.M_stickers_recent_limit, t.M_stickers_faved_limit, t.M_channels_read_media_period, t.M_tmp_sessions, t.M_pinned_dialogs_count_max, t.M_call_receive_timeout_ms, t.M_call_ring_timeout_ms, t.M_call_connect_timeout_ms, t.M_call_packet_timeout_ms, t.M_me_url_prefix, t.M_suggested_lang_code, t.M_lang_pack_version, t.M_disabled_features)
}

// nearestDc#8e1a1775
type TL_nearestDc struct {
	M_classID    int32
	M_country    string
	M_this_dc    int32
	M_nearest_dc int32
}

func (t *TL_nearestDc) ClassID() int32 {
	return t.M_classID
}

func (t *TL_nearestDc) Set_country(M_country string) {
	t.M_country = M_country
}

func (t *TL_nearestDc) Get_country() string {
	return t.M_country
}

func (t *TL_nearestDc) Set_this_dc(M_this_dc int32) {
	t.M_this_dc = M_this_dc
}

func (t *TL_nearestDc) Get_this_dc() int32 {
	return t.M_this_dc
}

func (t *TL_nearestDc) Set_nearest_dc(M_nearest_dc int32) {
	t.M_nearest_dc = M_nearest_dc
}

func (t *TL_nearestDc) Get_nearest_dc() int32 {
	return t.M_nearest_dc
}

func New_TL_nearestDc() *TL_nearestDc {
	return &TL_nearestDc{
		M_classID: TL_CLASS_nearestDc,
	}
}

func (t *TL_nearestDc) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_nearestDc))
	ec.String(t.Get_country())
	ec.Int(t.Get_this_dc())
	ec.Int(t.Get_nearest_dc())

	return ec.GetBuffer()
}

func (t *TL_nearestDc) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_country = dc.String()
	t.M_this_dc = dc.Int()
	t.M_nearest_dc = dc.Int()

	return dc.err
}

func (t *TL_nearestDc) String() string {
	return fmt.Sprintf("- nearestDc#8e1a1775\n-- country : %v\n-- this_dc : %v\n-- nearest_dc : %v\n", t.M_country, t.M_this_dc, t.M_nearest_dc)
}

// help_appUpdate#8987f311
type TL_help_appUpdate struct {
	M_classID  int32
	M_id       int32
	M_critical TLObject
	M_url      string
	M_text     string
}

func (t *TL_help_appUpdate) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_appUpdate) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_help_appUpdate) Get_id() int32 {
	return t.M_id
}

func (t *TL_help_appUpdate) Set_critical(M_critical TLObject) {
	t.M_critical = M_critical
}

func (t *TL_help_appUpdate) Get_critical() TLObject {
	return t.M_critical
}

func (t *TL_help_appUpdate) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_help_appUpdate) Get_url() string {
	return t.M_url
}

func (t *TL_help_appUpdate) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_help_appUpdate) Get_text() string {
	return t.M_text
}

func New_TL_help_appUpdate() *TL_help_appUpdate {
	return &TL_help_appUpdate{
		M_classID: TL_CLASS_help_appUpdate,
	}
}

func (t *TL_help_appUpdate) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_appUpdate))
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_critical())
	ec.String(t.Get_url())
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_help_appUpdate) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_critical = dc.TLObject()
	t.M_url = dc.String()
	t.M_text = dc.String()

	return dc.err
}

func (t *TL_help_appUpdate) String() string {
	return fmt.Sprintf("- help_appUpdate#8987f311\n-- id : %v\n-- critical : %v\n-- url : %v\n-- text : %v\n", t.M_id, t.M_critical, t.M_url, t.M_text)
}

// help_noAppUpdate#c45a6536
type TL_help_noAppUpdate struct {
	M_classID int32
}

func (t *TL_help_noAppUpdate) ClassID() int32 {
	return t.M_classID
}

func New_TL_help_noAppUpdate() *TL_help_noAppUpdate {
	return &TL_help_noAppUpdate{
		M_classID: TL_CLASS_help_noAppUpdate,
	}
}

func (t *TL_help_noAppUpdate) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_noAppUpdate))

	return ec.GetBuffer()
}

func (t *TL_help_noAppUpdate) Decode(b []byte) error {
	return nil
}

func (t *TL_help_noAppUpdate) String() string {
	return fmt.Sprintf("- help_noAppUpdate#c45a6536\n")
}

// help_inviteText#18cb9f78
type TL_help_inviteText struct {
	M_classID int32
	M_message string
}

func (t *TL_help_inviteText) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_inviteText) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_help_inviteText) Get_message() string {
	return t.M_message
}

func New_TL_help_inviteText() *TL_help_inviteText {
	return &TL_help_inviteText{
		M_classID: TL_CLASS_help_inviteText,
	}
}

func (t *TL_help_inviteText) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_inviteText))
	ec.String(t.Get_message())

	return ec.GetBuffer()
}

func (t *TL_help_inviteText) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.String()

	return dc.err
}

func (t *TL_help_inviteText) String() string {
	return fmt.Sprintf("- help_inviteText#18cb9f78\n-- message : %v\n", t.M_message)
}

// encryptedChatEmpty#ab7ec0a0
type TL_encryptedChatEmpty struct {
	M_classID int32
	M_id      int32
}

func (t *TL_encryptedChatEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_encryptedChatEmpty) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_encryptedChatEmpty) Get_id() int32 {
	return t.M_id
}

func New_TL_encryptedChatEmpty() *TL_encryptedChatEmpty {
	return &TL_encryptedChatEmpty{
		M_classID: TL_CLASS_encryptedChatEmpty,
	}
}

func (t *TL_encryptedChatEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_encryptedChatEmpty))
	ec.Int(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_encryptedChatEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()

	return dc.err
}

func (t *TL_encryptedChatEmpty) String() string {
	return fmt.Sprintf("- encryptedChatEmpty#ab7ec0a0\n-- id : %v\n", t.M_id)
}

// encryptedChatWaiting#3bf703dc
type TL_encryptedChatWaiting struct {
	M_classID        int32
	M_id             int32
	M_access_hash    int64
	M_date           int32
	M_admin_id       int32
	M_participant_id int32
}

func (t *TL_encryptedChatWaiting) ClassID() int32 {
	return t.M_classID
}

func (t *TL_encryptedChatWaiting) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_encryptedChatWaiting) Get_id() int32 {
	return t.M_id
}

func (t *TL_encryptedChatWaiting) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_encryptedChatWaiting) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_encryptedChatWaiting) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_encryptedChatWaiting) Get_date() int32 {
	return t.M_date
}

func (t *TL_encryptedChatWaiting) Set_admin_id(M_admin_id int32) {
	t.M_admin_id = M_admin_id
}

func (t *TL_encryptedChatWaiting) Get_admin_id() int32 {
	return t.M_admin_id
}

func (t *TL_encryptedChatWaiting) Set_participant_id(M_participant_id int32) {
	t.M_participant_id = M_participant_id
}

func (t *TL_encryptedChatWaiting) Get_participant_id() int32 {
	return t.M_participant_id
}

func New_TL_encryptedChatWaiting() *TL_encryptedChatWaiting {
	return &TL_encryptedChatWaiting{
		M_classID: TL_CLASS_encryptedChatWaiting,
	}
}

func (t *TL_encryptedChatWaiting) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_encryptedChatWaiting))
	ec.Int(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_date())
	ec.Int(t.Get_admin_id())
	ec.Int(t.Get_participant_id())

	return ec.GetBuffer()
}

func (t *TL_encryptedChatWaiting) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_access_hash = dc.Long()
	t.M_date = dc.Int()
	t.M_admin_id = dc.Int()
	t.M_participant_id = dc.Int()

	return dc.err
}

func (t *TL_encryptedChatWaiting) String() string {
	return fmt.Sprintf("- encryptedChatWaiting#3bf703dc\n-- id : %v\n-- access_hash : %v\n-- date : %v\n-- admin_id : %v\n-- participant_id : %v\n", t.M_id, t.M_access_hash, t.M_date, t.M_admin_id, t.M_participant_id)
}

// encryptedChatRequested#c878527e
type TL_encryptedChatRequested struct {
	M_classID        int32
	M_id             int32
	M_access_hash    int64
	M_date           int32
	M_admin_id       int32
	M_participant_id int32
	M_g_a            TLObject
}

func (t *TL_encryptedChatRequested) ClassID() int32 {
	return t.M_classID
}

func (t *TL_encryptedChatRequested) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_encryptedChatRequested) Get_id() int32 {
	return t.M_id
}

func (t *TL_encryptedChatRequested) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_encryptedChatRequested) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_encryptedChatRequested) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_encryptedChatRequested) Get_date() int32 {
	return t.M_date
}

func (t *TL_encryptedChatRequested) Set_admin_id(M_admin_id int32) {
	t.M_admin_id = M_admin_id
}

func (t *TL_encryptedChatRequested) Get_admin_id() int32 {
	return t.M_admin_id
}

func (t *TL_encryptedChatRequested) Set_participant_id(M_participant_id int32) {
	t.M_participant_id = M_participant_id
}

func (t *TL_encryptedChatRequested) Get_participant_id() int32 {
	return t.M_participant_id
}

func (t *TL_encryptedChatRequested) Set_g_a(M_g_a TLObject) {
	t.M_g_a = M_g_a
}

func (t *TL_encryptedChatRequested) Get_g_a() TLObject {
	return t.M_g_a
}

func New_TL_encryptedChatRequested() *TL_encryptedChatRequested {
	return &TL_encryptedChatRequested{
		M_classID: TL_CLASS_encryptedChatRequested,
	}
}

func (t *TL_encryptedChatRequested) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_encryptedChatRequested))
	ec.Int(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_date())
	ec.Int(t.Get_admin_id())
	ec.Int(t.Get_participant_id())
	ec.TLObject(t.Get_g_a())

	return ec.GetBuffer()
}

func (t *TL_encryptedChatRequested) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_access_hash = dc.Long()
	t.M_date = dc.Int()
	t.M_admin_id = dc.Int()
	t.M_participant_id = dc.Int()
	t.M_g_a = dc.TLObject()

	return dc.err
}

func (t *TL_encryptedChatRequested) String() string {
	return fmt.Sprintf("- encryptedChatRequested#c878527e\n-- id : %v\n-- access_hash : %v\n-- date : %v\n-- admin_id : %v\n-- participant_id : %v\n-- g_a : %v\n", t.M_id, t.M_access_hash, t.M_date, t.M_admin_id, t.M_participant_id, t.M_g_a)
}

// encryptedChat#fa56ce36
type TL_encryptedChat struct {
	M_classID         int32
	M_id              int32
	M_access_hash     int64
	M_date            int32
	M_admin_id        int32
	M_participant_id  int32
	M_g_a_or_b        TLObject
	M_key_fingerprint int64
}

func (t *TL_encryptedChat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_encryptedChat) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_encryptedChat) Get_id() int32 {
	return t.M_id
}

func (t *TL_encryptedChat) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_encryptedChat) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_encryptedChat) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_encryptedChat) Get_date() int32 {
	return t.M_date
}

func (t *TL_encryptedChat) Set_admin_id(M_admin_id int32) {
	t.M_admin_id = M_admin_id
}

func (t *TL_encryptedChat) Get_admin_id() int32 {
	return t.M_admin_id
}

func (t *TL_encryptedChat) Set_participant_id(M_participant_id int32) {
	t.M_participant_id = M_participant_id
}

func (t *TL_encryptedChat) Get_participant_id() int32 {
	return t.M_participant_id
}

func (t *TL_encryptedChat) Set_g_a_or_b(M_g_a_or_b TLObject) {
	t.M_g_a_or_b = M_g_a_or_b
}

func (t *TL_encryptedChat) Get_g_a_or_b() TLObject {
	return t.M_g_a_or_b
}

func (t *TL_encryptedChat) Set_key_fingerprint(M_key_fingerprint int64) {
	t.M_key_fingerprint = M_key_fingerprint
}

func (t *TL_encryptedChat) Get_key_fingerprint() int64 {
	return t.M_key_fingerprint
}

func New_TL_encryptedChat() *TL_encryptedChat {
	return &TL_encryptedChat{
		M_classID: TL_CLASS_encryptedChat,
	}
}

func (t *TL_encryptedChat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_encryptedChat))
	ec.Int(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_date())
	ec.Int(t.Get_admin_id())
	ec.Int(t.Get_participant_id())
	ec.TLObject(t.Get_g_a_or_b())
	ec.Long(t.Get_key_fingerprint())

	return ec.GetBuffer()
}

func (t *TL_encryptedChat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_access_hash = dc.Long()
	t.M_date = dc.Int()
	t.M_admin_id = dc.Int()
	t.M_participant_id = dc.Int()
	t.M_g_a_or_b = dc.TLObject()
	t.M_key_fingerprint = dc.Long()

	return dc.err
}

func (t *TL_encryptedChat) String() string {
	return fmt.Sprintf("- encryptedChat#fa56ce36\n-- id : %v\n-- access_hash : %v\n-- date : %v\n-- admin_id : %v\n-- participant_id : %v\n-- g_a_or_b : %v\n-- key_fingerprint : %v\n", t.M_id, t.M_access_hash, t.M_date, t.M_admin_id, t.M_participant_id, t.M_g_a_or_b, t.M_key_fingerprint)
}

// encryptedChatDiscarded#13d6dd27
type TL_encryptedChatDiscarded struct {
	M_classID int32
	M_id      int32
}

func (t *TL_encryptedChatDiscarded) ClassID() int32 {
	return t.M_classID
}

func (t *TL_encryptedChatDiscarded) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_encryptedChatDiscarded) Get_id() int32 {
	return t.M_id
}

func New_TL_encryptedChatDiscarded() *TL_encryptedChatDiscarded {
	return &TL_encryptedChatDiscarded{
		M_classID: TL_CLASS_encryptedChatDiscarded,
	}
}

func (t *TL_encryptedChatDiscarded) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_encryptedChatDiscarded))
	ec.Int(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_encryptedChatDiscarded) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()

	return dc.err
}

func (t *TL_encryptedChatDiscarded) String() string {
	return fmt.Sprintf("- encryptedChatDiscarded#13d6dd27\n-- id : %v\n", t.M_id)
}

// inputEncryptedChat#f141b5e1
type TL_inputEncryptedChat struct {
	M_classID     int32
	M_chat_id     int32
	M_access_hash int64
}

func (t *TL_inputEncryptedChat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputEncryptedChat) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_inputEncryptedChat) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_inputEncryptedChat) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputEncryptedChat) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputEncryptedChat() *TL_inputEncryptedChat {
	return &TL_inputEncryptedChat{
		M_classID: TL_CLASS_inputEncryptedChat,
	}
}

func (t *TL_inputEncryptedChat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputEncryptedChat))
	ec.Int(t.Get_chat_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputEncryptedChat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputEncryptedChat) String() string {
	return fmt.Sprintf("- inputEncryptedChat#f141b5e1\n-- chat_id : %v\n-- access_hash : %v\n", t.M_chat_id, t.M_access_hash)
}

// encryptedFileEmpty#c21f497e
type TL_encryptedFileEmpty struct {
	M_classID int32
}

func (t *TL_encryptedFileEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_encryptedFileEmpty() *TL_encryptedFileEmpty {
	return &TL_encryptedFileEmpty{
		M_classID: TL_CLASS_encryptedFileEmpty,
	}
}

func (t *TL_encryptedFileEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_encryptedFileEmpty))

	return ec.GetBuffer()
}

func (t *TL_encryptedFileEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_encryptedFileEmpty) String() string {
	return fmt.Sprintf("- encryptedFileEmpty#c21f497e\n")
}

// encryptedFile#4a70994c
type TL_encryptedFile struct {
	M_classID         int32
	M_id              int64
	M_access_hash     int64
	M_size            int32
	M_dc_id           int32
	M_key_fingerprint int32
}

func (t *TL_encryptedFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_encryptedFile) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_encryptedFile) Get_id() int64 {
	return t.M_id
}

func (t *TL_encryptedFile) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_encryptedFile) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_encryptedFile) Set_size(M_size int32) {
	t.M_size = M_size
}

func (t *TL_encryptedFile) Get_size() int32 {
	return t.M_size
}

func (t *TL_encryptedFile) Set_dc_id(M_dc_id int32) {
	t.M_dc_id = M_dc_id
}

func (t *TL_encryptedFile) Get_dc_id() int32 {
	return t.M_dc_id
}

func (t *TL_encryptedFile) Set_key_fingerprint(M_key_fingerprint int32) {
	t.M_key_fingerprint = M_key_fingerprint
}

func (t *TL_encryptedFile) Get_key_fingerprint() int32 {
	return t.M_key_fingerprint
}

func New_TL_encryptedFile() *TL_encryptedFile {
	return &TL_encryptedFile{
		M_classID: TL_CLASS_encryptedFile,
	}
}

func (t *TL_encryptedFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_encryptedFile))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_size())
	ec.Int(t.Get_dc_id())
	ec.Int(t.Get_key_fingerprint())

	return ec.GetBuffer()
}

func (t *TL_encryptedFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_size = dc.Int()
	t.M_dc_id = dc.Int()
	t.M_key_fingerprint = dc.Int()

	return dc.err
}

func (t *TL_encryptedFile) String() string {
	return fmt.Sprintf("- encryptedFile#4a70994c\n-- id : %v\n-- access_hash : %v\n-- size : %v\n-- dc_id : %v\n-- key_fingerprint : %v\n", t.M_id, t.M_access_hash, t.M_size, t.M_dc_id, t.M_key_fingerprint)
}

// inputEncryptedFileEmpty#1837c364
type TL_inputEncryptedFileEmpty struct {
	M_classID int32
}

func (t *TL_inputEncryptedFileEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputEncryptedFileEmpty() *TL_inputEncryptedFileEmpty {
	return &TL_inputEncryptedFileEmpty{
		M_classID: TL_CLASS_inputEncryptedFileEmpty,
	}
}

func (t *TL_inputEncryptedFileEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputEncryptedFileEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputEncryptedFileEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputEncryptedFileEmpty) String() string {
	return fmt.Sprintf("- inputEncryptedFileEmpty#1837c364\n")
}

// inputEncryptedFileUploaded#64bd0306
type TL_inputEncryptedFileUploaded struct {
	M_classID         int32
	M_id              int64
	M_parts           int32
	M_md5_checksum    string
	M_key_fingerprint int32
}

func (t *TL_inputEncryptedFileUploaded) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputEncryptedFileUploaded) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputEncryptedFileUploaded) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputEncryptedFileUploaded) Set_parts(M_parts int32) {
	t.M_parts = M_parts
}

func (t *TL_inputEncryptedFileUploaded) Get_parts() int32 {
	return t.M_parts
}

func (t *TL_inputEncryptedFileUploaded) Set_md5_checksum(M_md5_checksum string) {
	t.M_md5_checksum = M_md5_checksum
}

func (t *TL_inputEncryptedFileUploaded) Get_md5_checksum() string {
	return t.M_md5_checksum
}

func (t *TL_inputEncryptedFileUploaded) Set_key_fingerprint(M_key_fingerprint int32) {
	t.M_key_fingerprint = M_key_fingerprint
}

func (t *TL_inputEncryptedFileUploaded) Get_key_fingerprint() int32 {
	return t.M_key_fingerprint
}

func New_TL_inputEncryptedFileUploaded() *TL_inputEncryptedFileUploaded {
	return &TL_inputEncryptedFileUploaded{
		M_classID: TL_CLASS_inputEncryptedFileUploaded,
	}
}

func (t *TL_inputEncryptedFileUploaded) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputEncryptedFileUploaded))
	ec.Long(t.Get_id())
	ec.Int(t.Get_parts())
	ec.String(t.Get_md5_checksum())
	ec.Int(t.Get_key_fingerprint())

	return ec.GetBuffer()
}

func (t *TL_inputEncryptedFileUploaded) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_parts = dc.Int()
	t.M_md5_checksum = dc.String()
	t.M_key_fingerprint = dc.Int()

	return dc.err
}

func (t *TL_inputEncryptedFileUploaded) String() string {
	return fmt.Sprintf("- inputEncryptedFileUploaded#64bd0306\n-- id : %v\n-- parts : %v\n-- md5_checksum : %v\n-- key_fingerprint : %v\n", t.M_id, t.M_parts, t.M_md5_checksum, t.M_key_fingerprint)
}

// inputEncryptedFile#5a17b5e5
type TL_inputEncryptedFile struct {
	M_classID     int32
	M_id          int64
	M_access_hash int64
}

func (t *TL_inputEncryptedFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputEncryptedFile) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputEncryptedFile) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputEncryptedFile) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputEncryptedFile) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputEncryptedFile() *TL_inputEncryptedFile {
	return &TL_inputEncryptedFile{
		M_classID: TL_CLASS_inputEncryptedFile,
	}
}

func (t *TL_inputEncryptedFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputEncryptedFile))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputEncryptedFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputEncryptedFile) String() string {
	return fmt.Sprintf("- inputEncryptedFile#5a17b5e5\n-- id : %v\n-- access_hash : %v\n", t.M_id, t.M_access_hash)
}

// inputEncryptedFileBigUploaded#2dc173c8
type TL_inputEncryptedFileBigUploaded struct {
	M_classID         int32
	M_id              int64
	M_parts           int32
	M_key_fingerprint int32
}

func (t *TL_inputEncryptedFileBigUploaded) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputEncryptedFileBigUploaded) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputEncryptedFileBigUploaded) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputEncryptedFileBigUploaded) Set_parts(M_parts int32) {
	t.M_parts = M_parts
}

func (t *TL_inputEncryptedFileBigUploaded) Get_parts() int32 {
	return t.M_parts
}

func (t *TL_inputEncryptedFileBigUploaded) Set_key_fingerprint(M_key_fingerprint int32) {
	t.M_key_fingerprint = M_key_fingerprint
}

func (t *TL_inputEncryptedFileBigUploaded) Get_key_fingerprint() int32 {
	return t.M_key_fingerprint
}

func New_TL_inputEncryptedFileBigUploaded() *TL_inputEncryptedFileBigUploaded {
	return &TL_inputEncryptedFileBigUploaded{
		M_classID: TL_CLASS_inputEncryptedFileBigUploaded,
	}
}

func (t *TL_inputEncryptedFileBigUploaded) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputEncryptedFileBigUploaded))
	ec.Long(t.Get_id())
	ec.Int(t.Get_parts())
	ec.Int(t.Get_key_fingerprint())

	return ec.GetBuffer()
}

func (t *TL_inputEncryptedFileBigUploaded) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_parts = dc.Int()
	t.M_key_fingerprint = dc.Int()

	return dc.err
}

func (t *TL_inputEncryptedFileBigUploaded) String() string {
	return fmt.Sprintf("- inputEncryptedFileBigUploaded#2dc173c8\n-- id : %v\n-- parts : %v\n-- key_fingerprint : %v\n", t.M_id, t.M_parts, t.M_key_fingerprint)
}

// encryptedMessage#ed18c118
type TL_encryptedMessage struct {
	M_classID   int32
	M_random_id int64
	M_chat_id   int32
	M_date      int32
	M_bytes     TLObject
	M_file      TLObject
}

func (t *TL_encryptedMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_encryptedMessage) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_encryptedMessage) Get_random_id() int64 {
	return t.M_random_id
}

func (t *TL_encryptedMessage) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_encryptedMessage) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_encryptedMessage) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_encryptedMessage) Get_date() int32 {
	return t.M_date
}

func (t *TL_encryptedMessage) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_encryptedMessage) Get_bytes() TLObject {
	return t.M_bytes
}

func (t *TL_encryptedMessage) Set_file(M_file TLObject) {
	t.M_file = M_file
}

func (t *TL_encryptedMessage) Get_file() TLObject {
	return t.M_file
}

func New_TL_encryptedMessage() *TL_encryptedMessage {
	return &TL_encryptedMessage{
		M_classID: TL_CLASS_encryptedMessage,
	}
}

func (t *TL_encryptedMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_encryptedMessage))
	ec.Long(t.Get_random_id())
	ec.Int(t.Get_chat_id())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_bytes())
	ec.TLObject(t.Get_file())

	return ec.GetBuffer()
}

func (t *TL_encryptedMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_random_id = dc.Long()
	t.M_chat_id = dc.Int()
	t.M_date = dc.Int()
	t.M_bytes = dc.TLObject()
	t.M_file = dc.TLObject()

	return dc.err
}

func (t *TL_encryptedMessage) String() string {
	return fmt.Sprintf("- encryptedMessage#ed18c118\n-- random_id : %v\n-- chat_id : %v\n-- date : %v\n-- bytes : %v\n-- file : %v\n", t.M_random_id, t.M_chat_id, t.M_date, t.M_bytes, t.M_file)
}

// encryptedMessageService#23734b06
type TL_encryptedMessageService struct {
	M_classID   int32
	M_random_id int64
	M_chat_id   int32
	M_date      int32
	M_bytes     TLObject
}

func (t *TL_encryptedMessageService) ClassID() int32 {
	return t.M_classID
}

func (t *TL_encryptedMessageService) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_encryptedMessageService) Get_random_id() int64 {
	return t.M_random_id
}

func (t *TL_encryptedMessageService) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_encryptedMessageService) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_encryptedMessageService) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_encryptedMessageService) Get_date() int32 {
	return t.M_date
}

func (t *TL_encryptedMessageService) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_encryptedMessageService) Get_bytes() TLObject {
	return t.M_bytes
}

func New_TL_encryptedMessageService() *TL_encryptedMessageService {
	return &TL_encryptedMessageService{
		M_classID: TL_CLASS_encryptedMessageService,
	}
}

func (t *TL_encryptedMessageService) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_encryptedMessageService))
	ec.Long(t.Get_random_id())
	ec.Int(t.Get_chat_id())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_encryptedMessageService) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_random_id = dc.Long()
	t.M_chat_id = dc.Int()
	t.M_date = dc.Int()
	t.M_bytes = dc.TLObject()

	return dc.err
}

func (t *TL_encryptedMessageService) String() string {
	return fmt.Sprintf("- encryptedMessageService#23734b06\n-- random_id : %v\n-- chat_id : %v\n-- date : %v\n-- bytes : %v\n", t.M_random_id, t.M_chat_id, t.M_date, t.M_bytes)
}

// messages_dhConfigNotModified#c0e24635
type TL_messages_dhConfigNotModified struct {
	M_classID int32
	M_random  TLObject
}

func (t *TL_messages_dhConfigNotModified) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_dhConfigNotModified) Set_random(M_random TLObject) {
	t.M_random = M_random
}

func (t *TL_messages_dhConfigNotModified) Get_random() TLObject {
	return t.M_random
}

func New_TL_messages_dhConfigNotModified() *TL_messages_dhConfigNotModified {
	return &TL_messages_dhConfigNotModified{
		M_classID: TL_CLASS_messages_dhConfigNotModified,
	}
}

func (t *TL_messages_dhConfigNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_dhConfigNotModified))
	ec.TLObject(t.Get_random())

	return ec.GetBuffer()
}

func (t *TL_messages_dhConfigNotModified) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_random = dc.TLObject()

	return dc.err
}

func (t *TL_messages_dhConfigNotModified) String() string {
	return fmt.Sprintf("- messages_dhConfigNotModified#c0e24635\n-- random : %v\n", t.M_random)
}

// messages_dhConfig#2c221edd
type TL_messages_dhConfig struct {
	M_classID int32
	M_g       int32
	M_p       TLObject
	M_version int32
	M_random  TLObject
}

func (t *TL_messages_dhConfig) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_dhConfig) Set_g(M_g int32) {
	t.M_g = M_g
}

func (t *TL_messages_dhConfig) Get_g() int32 {
	return t.M_g
}

func (t *TL_messages_dhConfig) Set_p(M_p TLObject) {
	t.M_p = M_p
}

func (t *TL_messages_dhConfig) Get_p() TLObject {
	return t.M_p
}

func (t *TL_messages_dhConfig) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_messages_dhConfig) Get_version() int32 {
	return t.M_version
}

func (t *TL_messages_dhConfig) Set_random(M_random TLObject) {
	t.M_random = M_random
}

func (t *TL_messages_dhConfig) Get_random() TLObject {
	return t.M_random
}

func New_TL_messages_dhConfig() *TL_messages_dhConfig {
	return &TL_messages_dhConfig{
		M_classID: TL_CLASS_messages_dhConfig,
	}
}

func (t *TL_messages_dhConfig) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_dhConfig))
	ec.Int(t.Get_g())
	ec.TLObject(t.Get_p())
	ec.Int(t.Get_version())
	ec.TLObject(t.Get_random())

	return ec.GetBuffer()
}

func (t *TL_messages_dhConfig) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_g = dc.Int()
	t.M_p = dc.TLObject()
	t.M_version = dc.Int()
	t.M_random = dc.TLObject()

	return dc.err
}

func (t *TL_messages_dhConfig) String() string {
	return fmt.Sprintf("- messages_dhConfig#2c221edd\n-- g : %v\n-- p : %v\n-- version : %v\n-- random : %v\n", t.M_g, t.M_p, t.M_version, t.M_random)
}

// messages_sentEncryptedMessage#560f8935
type TL_messages_sentEncryptedMessage struct {
	M_classID int32
	M_date    int32
}

func (t *TL_messages_sentEncryptedMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sentEncryptedMessage) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_messages_sentEncryptedMessage) Get_date() int32 {
	return t.M_date
}

func New_TL_messages_sentEncryptedMessage() *TL_messages_sentEncryptedMessage {
	return &TL_messages_sentEncryptedMessage{
		M_classID: TL_CLASS_messages_sentEncryptedMessage,
	}
}

func (t *TL_messages_sentEncryptedMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sentEncryptedMessage))
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_messages_sentEncryptedMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_messages_sentEncryptedMessage) String() string {
	return fmt.Sprintf("- messages_sentEncryptedMessage#560f8935\n-- date : %v\n", t.M_date)
}

// messages_sentEncryptedFile#9493ff32
type TL_messages_sentEncryptedFile struct {
	M_classID int32
	M_date    int32
	M_file    TLObject
}

func (t *TL_messages_sentEncryptedFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sentEncryptedFile) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_messages_sentEncryptedFile) Get_date() int32 {
	return t.M_date
}

func (t *TL_messages_sentEncryptedFile) Set_file(M_file TLObject) {
	t.M_file = M_file
}

func (t *TL_messages_sentEncryptedFile) Get_file() TLObject {
	return t.M_file
}

func New_TL_messages_sentEncryptedFile() *TL_messages_sentEncryptedFile {
	return &TL_messages_sentEncryptedFile{
		M_classID: TL_CLASS_messages_sentEncryptedFile,
	}
}

func (t *TL_messages_sentEncryptedFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sentEncryptedFile))
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_file())

	return ec.GetBuffer()
}

func (t *TL_messages_sentEncryptedFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_date = dc.Int()
	t.M_file = dc.TLObject()

	return dc.err
}

func (t *TL_messages_sentEncryptedFile) String() string {
	return fmt.Sprintf("- messages_sentEncryptedFile#9493ff32\n-- date : %v\n-- file : %v\n", t.M_date, t.M_file)
}

// inputDocumentEmpty#72f0eaae
type TL_inputDocumentEmpty struct {
	M_classID int32
}

func (t *TL_inputDocumentEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputDocumentEmpty() *TL_inputDocumentEmpty {
	return &TL_inputDocumentEmpty{
		M_classID: TL_CLASS_inputDocumentEmpty,
	}
}

func (t *TL_inputDocumentEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputDocumentEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputDocumentEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputDocumentEmpty) String() string {
	return fmt.Sprintf("- inputDocumentEmpty#72f0eaae\n")
}

// inputDocument#18798952
type TL_inputDocument struct {
	M_classID     int32
	M_id          int64
	M_access_hash int64
}

func (t *TL_inputDocument) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputDocument) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputDocument) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputDocument) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputDocument) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputDocument() *TL_inputDocument {
	return &TL_inputDocument{
		M_classID: TL_CLASS_inputDocument,
	}
}

func (t *TL_inputDocument) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputDocument))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputDocument) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputDocument) String() string {
	return fmt.Sprintf("- inputDocument#18798952\n-- id : %v\n-- access_hash : %v\n", t.M_id, t.M_access_hash)
}

// documentEmpty#36f8c871
type TL_documentEmpty struct {
	M_classID int32
	M_id      int64
}

func (t *TL_documentEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_documentEmpty) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_documentEmpty) Get_id() int64 {
	return t.M_id
}

func New_TL_documentEmpty() *TL_documentEmpty {
	return &TL_documentEmpty{
		M_classID: TL_CLASS_documentEmpty,
	}
}

func (t *TL_documentEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_documentEmpty))
	ec.Long(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_documentEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()

	return dc.err
}

func (t *TL_documentEmpty) String() string {
	return fmt.Sprintf("- documentEmpty#36f8c871\n-- id : %v\n", t.M_id)
}

// document#87232bc7
type TL_document struct {
	M_classID     int32
	M_id          int64
	M_access_hash int64
	M_date        int32
	M_mime_type   string
	M_size        int32
	M_thumb       TLObject
	M_dc_id       int32
	M_version     int32
	M_attributes  []TLObject
}

func (t *TL_document) ClassID() int32 {
	return t.M_classID
}

func (t *TL_document) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_document) Get_id() int64 {
	return t.M_id
}

func (t *TL_document) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_document) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_document) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_document) Get_date() int32 {
	return t.M_date
}

func (t *TL_document) Set_mime_type(M_mime_type string) {
	t.M_mime_type = M_mime_type
}

func (t *TL_document) Get_mime_type() string {
	return t.M_mime_type
}

func (t *TL_document) Set_size(M_size int32) {
	t.M_size = M_size
}

func (t *TL_document) Get_size() int32 {
	return t.M_size
}

func (t *TL_document) Set_thumb(M_thumb TLObject) {
	t.M_thumb = M_thumb
}

func (t *TL_document) Get_thumb() TLObject {
	return t.M_thumb
}

func (t *TL_document) Set_dc_id(M_dc_id int32) {
	t.M_dc_id = M_dc_id
}

func (t *TL_document) Get_dc_id() int32 {
	return t.M_dc_id
}

func (t *TL_document) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_document) Get_version() int32 {
	return t.M_version
}

func (t *TL_document) Set_attributes(M_attributes []TLObject) {
	t.M_attributes = M_attributes
}

func (t *TL_document) Get_attributes() []TLObject {
	return t.M_attributes
}

func New_TL_document() *TL_document {
	return &TL_document{
		M_classID: TL_CLASS_document,
	}
}

func (t *TL_document) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_document))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_date())
	ec.String(t.Get_mime_type())
	ec.Int(t.Get_size())
	ec.TLObject(t.Get_thumb())
	ec.Int(t.Get_dc_id())
	ec.Int(t.Get_version())
	ec.Vector(t.Get_attributes())

	return ec.GetBuffer()
}

func (t *TL_document) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_date = dc.Int()
	t.M_mime_type = dc.String()
	t.M_size = dc.Int()
	t.M_thumb = dc.TLObject()
	t.M_dc_id = dc.Int()
	t.M_version = dc.Int()
	t.M_attributes = dc.Vector()

	return dc.err
}

func (t *TL_document) String() string {
	return fmt.Sprintf("- document#87232bc7\n-- id : %v\n-- access_hash : %v\n-- date : %v\n-- mime_type : %v\n-- size : %v\n-- thumb : %v\n-- dc_id : %v\n-- version : %v\n-- attributes : %v\n", t.M_id, t.M_access_hash, t.M_date, t.M_mime_type, t.M_size, t.M_thumb, t.M_dc_id, t.M_version, t.M_attributes)
}

// help_support#17c6b5f6
type TL_help_support struct {
	M_classID      int32
	M_phone_number string
	M_user         TLObject
}

func (t *TL_help_support) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_support) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_help_support) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_help_support) Set_user(M_user TLObject) {
	t.M_user = M_user
}

func (t *TL_help_support) Get_user() TLObject {
	return t.M_user
}

func New_TL_help_support() *TL_help_support {
	return &TL_help_support{
		M_classID: TL_CLASS_help_support,
	}
}

func (t *TL_help_support) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_support))
	ec.String(t.Get_phone_number())
	ec.TLObject(t.Get_user())

	return ec.GetBuffer()
}

func (t *TL_help_support) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_user = dc.TLObject()

	return dc.err
}

func (t *TL_help_support) String() string {
	return fmt.Sprintf("- help_support#17c6b5f6\n-- phone_number : %v\n-- user : %v\n", t.M_phone_number, t.M_user)
}

// notifyPeer#9fd40bd8
type TL_notifyPeer struct {
	M_classID int32
	M_peer    TLObject
}

func (t *TL_notifyPeer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_notifyPeer) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_notifyPeer) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_notifyPeer() *TL_notifyPeer {
	return &TL_notifyPeer{
		M_classID: TL_CLASS_notifyPeer,
	}
}

func (t *TL_notifyPeer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_notifyPeer))
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_notifyPeer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_notifyPeer) String() string {
	return fmt.Sprintf("- notifyPeer#9fd40bd8\n-- peer : %v\n", t.M_peer)
}

// notifyUsers#b4c83b4c
type TL_notifyUsers struct {
	M_classID int32
}

func (t *TL_notifyUsers) ClassID() int32 {
	return t.M_classID
}

func New_TL_notifyUsers() *TL_notifyUsers {
	return &TL_notifyUsers{
		M_classID: TL_CLASS_notifyUsers,
	}
}

func (t *TL_notifyUsers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_notifyUsers))

	return ec.GetBuffer()
}

func (t *TL_notifyUsers) Decode(b []byte) error {
	return nil
}

func (t *TL_notifyUsers) String() string {
	return fmt.Sprintf("- notifyUsers#b4c83b4c\n")
}

// notifyChats#c007cec3
type TL_notifyChats struct {
	M_classID int32
}

func (t *TL_notifyChats) ClassID() int32 {
	return t.M_classID
}

func New_TL_notifyChats() *TL_notifyChats {
	return &TL_notifyChats{
		M_classID: TL_CLASS_notifyChats,
	}
}

func (t *TL_notifyChats) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_notifyChats))

	return ec.GetBuffer()
}

func (t *TL_notifyChats) Decode(b []byte) error {
	return nil
}

func (t *TL_notifyChats) String() string {
	return fmt.Sprintf("- notifyChats#c007cec3\n")
}

// notifyAll#74d07c60
type TL_notifyAll struct {
	M_classID int32
}

func (t *TL_notifyAll) ClassID() int32 {
	return t.M_classID
}

func New_TL_notifyAll() *TL_notifyAll {
	return &TL_notifyAll{
		M_classID: TL_CLASS_notifyAll,
	}
}

func (t *TL_notifyAll) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_notifyAll))

	return ec.GetBuffer()
}

func (t *TL_notifyAll) Decode(b []byte) error {
	return nil
}

func (t *TL_notifyAll) String() string {
	return fmt.Sprintf("- notifyAll#74d07c60\n")
}

// sendMessageTypingAction#16bf744e
type TL_sendMessageTypingAction struct {
	M_classID int32
}

func (t *TL_sendMessageTypingAction) ClassID() int32 {
	return t.M_classID
}

func New_TL_sendMessageTypingAction() *TL_sendMessageTypingAction {
	return &TL_sendMessageTypingAction{
		M_classID: TL_CLASS_sendMessageTypingAction,
	}
}

func (t *TL_sendMessageTypingAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageTypingAction))

	return ec.GetBuffer()
}

func (t *TL_sendMessageTypingAction) Decode(b []byte) error {
	return nil
}

func (t *TL_sendMessageTypingAction) String() string {
	return fmt.Sprintf("- sendMessageTypingAction#16bf744e\n")
}

// sendMessageCancelAction#fd5ec8f5
type TL_sendMessageCancelAction struct {
	M_classID int32
}

func (t *TL_sendMessageCancelAction) ClassID() int32 {
	return t.M_classID
}

func New_TL_sendMessageCancelAction() *TL_sendMessageCancelAction {
	return &TL_sendMessageCancelAction{
		M_classID: TL_CLASS_sendMessageCancelAction,
	}
}

func (t *TL_sendMessageCancelAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageCancelAction))

	return ec.GetBuffer()
}

func (t *TL_sendMessageCancelAction) Decode(b []byte) error {
	return nil
}

func (t *TL_sendMessageCancelAction) String() string {
	return fmt.Sprintf("- sendMessageCancelAction#fd5ec8f5\n")
}

// sendMessageRecordVideoAction#a187d66f
type TL_sendMessageRecordVideoAction struct {
	M_classID int32
}

func (t *TL_sendMessageRecordVideoAction) ClassID() int32 {
	return t.M_classID
}

func New_TL_sendMessageRecordVideoAction() *TL_sendMessageRecordVideoAction {
	return &TL_sendMessageRecordVideoAction{
		M_classID: TL_CLASS_sendMessageRecordVideoAction,
	}
}

func (t *TL_sendMessageRecordVideoAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageRecordVideoAction))

	return ec.GetBuffer()
}

func (t *TL_sendMessageRecordVideoAction) Decode(b []byte) error {
	return nil
}

func (t *TL_sendMessageRecordVideoAction) String() string {
	return fmt.Sprintf("- sendMessageRecordVideoAction#a187d66f\n")
}

// sendMessageUploadVideoAction#e9763aec
type TL_sendMessageUploadVideoAction struct {
	M_classID  int32
	M_progress int32
}

func (t *TL_sendMessageUploadVideoAction) ClassID() int32 {
	return t.M_classID
}

func (t *TL_sendMessageUploadVideoAction) Set_progress(M_progress int32) {
	t.M_progress = M_progress
}

func (t *TL_sendMessageUploadVideoAction) Get_progress() int32 {
	return t.M_progress
}

func New_TL_sendMessageUploadVideoAction() *TL_sendMessageUploadVideoAction {
	return &TL_sendMessageUploadVideoAction{
		M_classID: TL_CLASS_sendMessageUploadVideoAction,
	}
}

func (t *TL_sendMessageUploadVideoAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageUploadVideoAction))
	ec.Int(t.Get_progress())

	return ec.GetBuffer()
}

func (t *TL_sendMessageUploadVideoAction) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_progress = dc.Int()

	return dc.err
}

func (t *TL_sendMessageUploadVideoAction) String() string {
	return fmt.Sprintf("- sendMessageUploadVideoAction#e9763aec\n-- progress : %v\n", t.M_progress)
}

// sendMessageRecordAudioAction#d52f73f7
type TL_sendMessageRecordAudioAction struct {
	M_classID int32
}

func (t *TL_sendMessageRecordAudioAction) ClassID() int32 {
	return t.M_classID
}

func New_TL_sendMessageRecordAudioAction() *TL_sendMessageRecordAudioAction {
	return &TL_sendMessageRecordAudioAction{
		M_classID: TL_CLASS_sendMessageRecordAudioAction,
	}
}

func (t *TL_sendMessageRecordAudioAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageRecordAudioAction))

	return ec.GetBuffer()
}

func (t *TL_sendMessageRecordAudioAction) Decode(b []byte) error {
	return nil
}

func (t *TL_sendMessageRecordAudioAction) String() string {
	return fmt.Sprintf("- sendMessageRecordAudioAction#d52f73f7\n")
}

// sendMessageUploadAudioAction#f351d7ab
type TL_sendMessageUploadAudioAction struct {
	M_classID  int32
	M_progress int32
}

func (t *TL_sendMessageUploadAudioAction) ClassID() int32 {
	return t.M_classID
}

func (t *TL_sendMessageUploadAudioAction) Set_progress(M_progress int32) {
	t.M_progress = M_progress
}

func (t *TL_sendMessageUploadAudioAction) Get_progress() int32 {
	return t.M_progress
}

func New_TL_sendMessageUploadAudioAction() *TL_sendMessageUploadAudioAction {
	return &TL_sendMessageUploadAudioAction{
		M_classID: TL_CLASS_sendMessageUploadAudioAction,
	}
}

func (t *TL_sendMessageUploadAudioAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageUploadAudioAction))
	ec.Int(t.Get_progress())

	return ec.GetBuffer()
}

func (t *TL_sendMessageUploadAudioAction) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_progress = dc.Int()

	return dc.err
}

func (t *TL_sendMessageUploadAudioAction) String() string {
	return fmt.Sprintf("- sendMessageUploadAudioAction#f351d7ab\n-- progress : %v\n", t.M_progress)
}

// sendMessageUploadPhotoAction#d1d34a26
type TL_sendMessageUploadPhotoAction struct {
	M_classID  int32
	M_progress int32
}

func (t *TL_sendMessageUploadPhotoAction) ClassID() int32 {
	return t.M_classID
}

func (t *TL_sendMessageUploadPhotoAction) Set_progress(M_progress int32) {
	t.M_progress = M_progress
}

func (t *TL_sendMessageUploadPhotoAction) Get_progress() int32 {
	return t.M_progress
}

func New_TL_sendMessageUploadPhotoAction() *TL_sendMessageUploadPhotoAction {
	return &TL_sendMessageUploadPhotoAction{
		M_classID: TL_CLASS_sendMessageUploadPhotoAction,
	}
}

func (t *TL_sendMessageUploadPhotoAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageUploadPhotoAction))
	ec.Int(t.Get_progress())

	return ec.GetBuffer()
}

func (t *TL_sendMessageUploadPhotoAction) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_progress = dc.Int()

	return dc.err
}

func (t *TL_sendMessageUploadPhotoAction) String() string {
	return fmt.Sprintf("- sendMessageUploadPhotoAction#d1d34a26\n-- progress : %v\n", t.M_progress)
}

// sendMessageUploadDocumentAction#aa0cd9e4
type TL_sendMessageUploadDocumentAction struct {
	M_classID  int32
	M_progress int32
}

func (t *TL_sendMessageUploadDocumentAction) ClassID() int32 {
	return t.M_classID
}

func (t *TL_sendMessageUploadDocumentAction) Set_progress(M_progress int32) {
	t.M_progress = M_progress
}

func (t *TL_sendMessageUploadDocumentAction) Get_progress() int32 {
	return t.M_progress
}

func New_TL_sendMessageUploadDocumentAction() *TL_sendMessageUploadDocumentAction {
	return &TL_sendMessageUploadDocumentAction{
		M_classID: TL_CLASS_sendMessageUploadDocumentAction,
	}
}

func (t *TL_sendMessageUploadDocumentAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageUploadDocumentAction))
	ec.Int(t.Get_progress())

	return ec.GetBuffer()
}

func (t *TL_sendMessageUploadDocumentAction) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_progress = dc.Int()

	return dc.err
}

func (t *TL_sendMessageUploadDocumentAction) String() string {
	return fmt.Sprintf("- sendMessageUploadDocumentAction#aa0cd9e4\n-- progress : %v\n", t.M_progress)
}

// sendMessageGeoLocationAction#176f8ba1
type TL_sendMessageGeoLocationAction struct {
	M_classID int32
}

func (t *TL_sendMessageGeoLocationAction) ClassID() int32 {
	return t.M_classID
}

func New_TL_sendMessageGeoLocationAction() *TL_sendMessageGeoLocationAction {
	return &TL_sendMessageGeoLocationAction{
		M_classID: TL_CLASS_sendMessageGeoLocationAction,
	}
}

func (t *TL_sendMessageGeoLocationAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageGeoLocationAction))

	return ec.GetBuffer()
}

func (t *TL_sendMessageGeoLocationAction) Decode(b []byte) error {
	return nil
}

func (t *TL_sendMessageGeoLocationAction) String() string {
	return fmt.Sprintf("- sendMessageGeoLocationAction#176f8ba1\n")
}

// sendMessageChooseContactAction#628cbc6f
type TL_sendMessageChooseContactAction struct {
	M_classID int32
}

func (t *TL_sendMessageChooseContactAction) ClassID() int32 {
	return t.M_classID
}

func New_TL_sendMessageChooseContactAction() *TL_sendMessageChooseContactAction {
	return &TL_sendMessageChooseContactAction{
		M_classID: TL_CLASS_sendMessageChooseContactAction,
	}
}

func (t *TL_sendMessageChooseContactAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageChooseContactAction))

	return ec.GetBuffer()
}

func (t *TL_sendMessageChooseContactAction) Decode(b []byte) error {
	return nil
}

func (t *TL_sendMessageChooseContactAction) String() string {
	return fmt.Sprintf("- sendMessageChooseContactAction#628cbc6f\n")
}

// sendMessageGamePlayAction#dd6a8f48
type TL_sendMessageGamePlayAction struct {
	M_classID int32
}

func (t *TL_sendMessageGamePlayAction) ClassID() int32 {
	return t.M_classID
}

func New_TL_sendMessageGamePlayAction() *TL_sendMessageGamePlayAction {
	return &TL_sendMessageGamePlayAction{
		M_classID: TL_CLASS_sendMessageGamePlayAction,
	}
}

func (t *TL_sendMessageGamePlayAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageGamePlayAction))

	return ec.GetBuffer()
}

func (t *TL_sendMessageGamePlayAction) Decode(b []byte) error {
	return nil
}

func (t *TL_sendMessageGamePlayAction) String() string {
	return fmt.Sprintf("- sendMessageGamePlayAction#dd6a8f48\n")
}

// sendMessageRecordRoundAction#88f27fbc
type TL_sendMessageRecordRoundAction struct {
	M_classID int32
}

func (t *TL_sendMessageRecordRoundAction) ClassID() int32 {
	return t.M_classID
}

func New_TL_sendMessageRecordRoundAction() *TL_sendMessageRecordRoundAction {
	return &TL_sendMessageRecordRoundAction{
		M_classID: TL_CLASS_sendMessageRecordRoundAction,
	}
}

func (t *TL_sendMessageRecordRoundAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageRecordRoundAction))

	return ec.GetBuffer()
}

func (t *TL_sendMessageRecordRoundAction) Decode(b []byte) error {
	return nil
}

func (t *TL_sendMessageRecordRoundAction) String() string {
	return fmt.Sprintf("- sendMessageRecordRoundAction#88f27fbc\n")
}

// sendMessageUploadRoundAction#243e1c66
type TL_sendMessageUploadRoundAction struct {
	M_classID  int32
	M_progress int32
}

func (t *TL_sendMessageUploadRoundAction) ClassID() int32 {
	return t.M_classID
}

func (t *TL_sendMessageUploadRoundAction) Set_progress(M_progress int32) {
	t.M_progress = M_progress
}

func (t *TL_sendMessageUploadRoundAction) Get_progress() int32 {
	return t.M_progress
}

func New_TL_sendMessageUploadRoundAction() *TL_sendMessageUploadRoundAction {
	return &TL_sendMessageUploadRoundAction{
		M_classID: TL_CLASS_sendMessageUploadRoundAction,
	}
}

func (t *TL_sendMessageUploadRoundAction) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_sendMessageUploadRoundAction))
	ec.Int(t.Get_progress())

	return ec.GetBuffer()
}

func (t *TL_sendMessageUploadRoundAction) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_progress = dc.Int()

	return dc.err
}

func (t *TL_sendMessageUploadRoundAction) String() string {
	return fmt.Sprintf("- sendMessageUploadRoundAction#243e1c66\n-- progress : %v\n", t.M_progress)
}

// contacts_found#1aa1f784
type TL_contacts_found struct {
	M_classID int32
	M_results []TLObject
	M_chats   []TLObject
	M_users   []TLObject
}

func (t *TL_contacts_found) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_found) Set_results(M_results []TLObject) {
	t.M_results = M_results
}

func (t *TL_contacts_found) Get_results() []TLObject {
	return t.M_results
}

func (t *TL_contacts_found) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_contacts_found) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_contacts_found) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_contacts_found) Get_users() []TLObject {
	return t.M_users
}

func New_TL_contacts_found() *TL_contacts_found {
	return &TL_contacts_found{
		M_classID: TL_CLASS_contacts_found,
	}
}

func (t *TL_contacts_found) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_found))
	ec.Vector(t.Get_results())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_contacts_found) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_results = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_contacts_found) String() string {
	return fmt.Sprintf("- contacts_found#1aa1f784\n-- results : %v\n-- chats : %v\n-- users : %v\n", t.M_results, t.M_chats, t.M_users)
}

// inputPrivacyKeyStatusTimestamp#4f96cb18
type TL_inputPrivacyKeyStatusTimestamp struct {
	M_classID int32
}

func (t *TL_inputPrivacyKeyStatusTimestamp) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPrivacyKeyStatusTimestamp() *TL_inputPrivacyKeyStatusTimestamp {
	return &TL_inputPrivacyKeyStatusTimestamp{
		M_classID: TL_CLASS_inputPrivacyKeyStatusTimestamp,
	}
}

func (t *TL_inputPrivacyKeyStatusTimestamp) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPrivacyKeyStatusTimestamp))

	return ec.GetBuffer()
}

func (t *TL_inputPrivacyKeyStatusTimestamp) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPrivacyKeyStatusTimestamp) String() string {
	return fmt.Sprintf("- inputPrivacyKeyStatusTimestamp#4f96cb18\n")
}

// inputPrivacyKeyChatInvite#bdfb0426
type TL_inputPrivacyKeyChatInvite struct {
	M_classID int32
}

func (t *TL_inputPrivacyKeyChatInvite) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPrivacyKeyChatInvite() *TL_inputPrivacyKeyChatInvite {
	return &TL_inputPrivacyKeyChatInvite{
		M_classID: TL_CLASS_inputPrivacyKeyChatInvite,
	}
}

func (t *TL_inputPrivacyKeyChatInvite) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPrivacyKeyChatInvite))

	return ec.GetBuffer()
}

func (t *TL_inputPrivacyKeyChatInvite) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPrivacyKeyChatInvite) String() string {
	return fmt.Sprintf("- inputPrivacyKeyChatInvite#bdfb0426\n")
}

// inputPrivacyKeyPhoneCall#fabadc5f
type TL_inputPrivacyKeyPhoneCall struct {
	M_classID int32
}

func (t *TL_inputPrivacyKeyPhoneCall) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPrivacyKeyPhoneCall() *TL_inputPrivacyKeyPhoneCall {
	return &TL_inputPrivacyKeyPhoneCall{
		M_classID: TL_CLASS_inputPrivacyKeyPhoneCall,
	}
}

func (t *TL_inputPrivacyKeyPhoneCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPrivacyKeyPhoneCall))

	return ec.GetBuffer()
}

func (t *TL_inputPrivacyKeyPhoneCall) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPrivacyKeyPhoneCall) String() string {
	return fmt.Sprintf("- inputPrivacyKeyPhoneCall#fabadc5f\n")
}

// privacyKeyStatusTimestamp#bc2eab30
type TL_privacyKeyStatusTimestamp struct {
	M_classID int32
}

func (t *TL_privacyKeyStatusTimestamp) ClassID() int32 {
	return t.M_classID
}

func New_TL_privacyKeyStatusTimestamp() *TL_privacyKeyStatusTimestamp {
	return &TL_privacyKeyStatusTimestamp{
		M_classID: TL_CLASS_privacyKeyStatusTimestamp,
	}
}

func (t *TL_privacyKeyStatusTimestamp) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_privacyKeyStatusTimestamp))

	return ec.GetBuffer()
}

func (t *TL_privacyKeyStatusTimestamp) Decode(b []byte) error {
	return nil
}

func (t *TL_privacyKeyStatusTimestamp) String() string {
	return fmt.Sprintf("- privacyKeyStatusTimestamp#bc2eab30\n")
}

// privacyKeyChatInvite#500e6dfa
type TL_privacyKeyChatInvite struct {
	M_classID int32
}

func (t *TL_privacyKeyChatInvite) ClassID() int32 {
	return t.M_classID
}

func New_TL_privacyKeyChatInvite() *TL_privacyKeyChatInvite {
	return &TL_privacyKeyChatInvite{
		M_classID: TL_CLASS_privacyKeyChatInvite,
	}
}

func (t *TL_privacyKeyChatInvite) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_privacyKeyChatInvite))

	return ec.GetBuffer()
}

func (t *TL_privacyKeyChatInvite) Decode(b []byte) error {
	return nil
}

func (t *TL_privacyKeyChatInvite) String() string {
	return fmt.Sprintf("- privacyKeyChatInvite#500e6dfa\n")
}

// privacyKeyPhoneCall#3d662b7b
type TL_privacyKeyPhoneCall struct {
	M_classID int32
}

func (t *TL_privacyKeyPhoneCall) ClassID() int32 {
	return t.M_classID
}

func New_TL_privacyKeyPhoneCall() *TL_privacyKeyPhoneCall {
	return &TL_privacyKeyPhoneCall{
		M_classID: TL_CLASS_privacyKeyPhoneCall,
	}
}

func (t *TL_privacyKeyPhoneCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_privacyKeyPhoneCall))

	return ec.GetBuffer()
}

func (t *TL_privacyKeyPhoneCall) Decode(b []byte) error {
	return nil
}

func (t *TL_privacyKeyPhoneCall) String() string {
	return fmt.Sprintf("- privacyKeyPhoneCall#3d662b7b\n")
}

// inputPrivacyValueAllowContacts#d09e07b
type TL_inputPrivacyValueAllowContacts struct {
	M_classID int32
}

func (t *TL_inputPrivacyValueAllowContacts) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPrivacyValueAllowContacts() *TL_inputPrivacyValueAllowContacts {
	return &TL_inputPrivacyValueAllowContacts{
		M_classID: TL_CLASS_inputPrivacyValueAllowContacts,
	}
}

func (t *TL_inputPrivacyValueAllowContacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPrivacyValueAllowContacts))

	return ec.GetBuffer()
}

func (t *TL_inputPrivacyValueAllowContacts) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPrivacyValueAllowContacts) String() string {
	return fmt.Sprintf("- inputPrivacyValueAllowContacts#d09e07b\n")
}

// inputPrivacyValueAllowAll#184b35ce
type TL_inputPrivacyValueAllowAll struct {
	M_classID int32
}

func (t *TL_inputPrivacyValueAllowAll) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPrivacyValueAllowAll() *TL_inputPrivacyValueAllowAll {
	return &TL_inputPrivacyValueAllowAll{
		M_classID: TL_CLASS_inputPrivacyValueAllowAll,
	}
}

func (t *TL_inputPrivacyValueAllowAll) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPrivacyValueAllowAll))

	return ec.GetBuffer()
}

func (t *TL_inputPrivacyValueAllowAll) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPrivacyValueAllowAll) String() string {
	return fmt.Sprintf("- inputPrivacyValueAllowAll#184b35ce\n")
}

// inputPrivacyValueAllowUsers#131cc67f
type TL_inputPrivacyValueAllowUsers struct {
	M_classID int32
	M_users   []TLObject
}

func (t *TL_inputPrivacyValueAllowUsers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPrivacyValueAllowUsers) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_inputPrivacyValueAllowUsers) Get_users() []TLObject {
	return t.M_users
}

func New_TL_inputPrivacyValueAllowUsers() *TL_inputPrivacyValueAllowUsers {
	return &TL_inputPrivacyValueAllowUsers{
		M_classID: TL_CLASS_inputPrivacyValueAllowUsers,
	}
}

func (t *TL_inputPrivacyValueAllowUsers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPrivacyValueAllowUsers))
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_inputPrivacyValueAllowUsers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_inputPrivacyValueAllowUsers) String() string {
	return fmt.Sprintf("- inputPrivacyValueAllowUsers#131cc67f\n-- users : %v\n", t.M_users)
}

// inputPrivacyValueDisallowContacts#ba52007
type TL_inputPrivacyValueDisallowContacts struct {
	M_classID int32
}

func (t *TL_inputPrivacyValueDisallowContacts) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPrivacyValueDisallowContacts() *TL_inputPrivacyValueDisallowContacts {
	return &TL_inputPrivacyValueDisallowContacts{
		M_classID: TL_CLASS_inputPrivacyValueDisallowContacts,
	}
}

func (t *TL_inputPrivacyValueDisallowContacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPrivacyValueDisallowContacts))

	return ec.GetBuffer()
}

func (t *TL_inputPrivacyValueDisallowContacts) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPrivacyValueDisallowContacts) String() string {
	return fmt.Sprintf("- inputPrivacyValueDisallowContacts#ba52007\n")
}

// inputPrivacyValueDisallowAll#d66b66c9
type TL_inputPrivacyValueDisallowAll struct {
	M_classID int32
}

func (t *TL_inputPrivacyValueDisallowAll) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputPrivacyValueDisallowAll() *TL_inputPrivacyValueDisallowAll {
	return &TL_inputPrivacyValueDisallowAll{
		M_classID: TL_CLASS_inputPrivacyValueDisallowAll,
	}
}

func (t *TL_inputPrivacyValueDisallowAll) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPrivacyValueDisallowAll))

	return ec.GetBuffer()
}

func (t *TL_inputPrivacyValueDisallowAll) Decode(b []byte) error {
	return nil
}

func (t *TL_inputPrivacyValueDisallowAll) String() string {
	return fmt.Sprintf("- inputPrivacyValueDisallowAll#d66b66c9\n")
}

// inputPrivacyValueDisallowUsers#90110467
type TL_inputPrivacyValueDisallowUsers struct {
	M_classID int32
	M_users   []TLObject
}

func (t *TL_inputPrivacyValueDisallowUsers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPrivacyValueDisallowUsers) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_inputPrivacyValueDisallowUsers) Get_users() []TLObject {
	return t.M_users
}

func New_TL_inputPrivacyValueDisallowUsers() *TL_inputPrivacyValueDisallowUsers {
	return &TL_inputPrivacyValueDisallowUsers{
		M_classID: TL_CLASS_inputPrivacyValueDisallowUsers,
	}
}

func (t *TL_inputPrivacyValueDisallowUsers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPrivacyValueDisallowUsers))
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_inputPrivacyValueDisallowUsers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_inputPrivacyValueDisallowUsers) String() string {
	return fmt.Sprintf("- inputPrivacyValueDisallowUsers#90110467\n-- users : %v\n", t.M_users)
}

// privacyValueAllowContacts#fffe1bac
type TL_privacyValueAllowContacts struct {
	M_classID int32
}

func (t *TL_privacyValueAllowContacts) ClassID() int32 {
	return t.M_classID
}

func New_TL_privacyValueAllowContacts() *TL_privacyValueAllowContacts {
	return &TL_privacyValueAllowContacts{
		M_classID: TL_CLASS_privacyValueAllowContacts,
	}
}

func (t *TL_privacyValueAllowContacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_privacyValueAllowContacts))

	return ec.GetBuffer()
}

func (t *TL_privacyValueAllowContacts) Decode(b []byte) error {
	return nil
}

func (t *TL_privacyValueAllowContacts) String() string {
	return fmt.Sprintf("- privacyValueAllowContacts#fffe1bac\n")
}

// privacyValueAllowAll#65427b82
type TL_privacyValueAllowAll struct {
	M_classID int32
}

func (t *TL_privacyValueAllowAll) ClassID() int32 {
	return t.M_classID
}

func New_TL_privacyValueAllowAll() *TL_privacyValueAllowAll {
	return &TL_privacyValueAllowAll{
		M_classID: TL_CLASS_privacyValueAllowAll,
	}
}

func (t *TL_privacyValueAllowAll) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_privacyValueAllowAll))

	return ec.GetBuffer()
}

func (t *TL_privacyValueAllowAll) Decode(b []byte) error {
	return nil
}

func (t *TL_privacyValueAllowAll) String() string {
	return fmt.Sprintf("- privacyValueAllowAll#65427b82\n")
}

// privacyValueAllowUsers#4d5bbe0c
type TL_privacyValueAllowUsers struct {
	M_classID int32
	M_users   []int32
}

func (t *TL_privacyValueAllowUsers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_privacyValueAllowUsers) Set_users(M_users []int32) {
	t.M_users = M_users
}

func (t *TL_privacyValueAllowUsers) Get_users() []int32 {
	return t.M_users
}

func New_TL_privacyValueAllowUsers() *TL_privacyValueAllowUsers {
	return &TL_privacyValueAllowUsers{
		M_classID: TL_CLASS_privacyValueAllowUsers,
	}
}

func (t *TL_privacyValueAllowUsers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_privacyValueAllowUsers))
	ec.VectorInt(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_privacyValueAllowUsers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_users = dc.VectorInt()

	return dc.err
}

func (t *TL_privacyValueAllowUsers) String() string {
	return fmt.Sprintf("- privacyValueAllowUsers#4d5bbe0c\n-- users : %v\n", t.M_users)
}

// privacyValueDisallowContacts#f888fa1a
type TL_privacyValueDisallowContacts struct {
	M_classID int32
}

func (t *TL_privacyValueDisallowContacts) ClassID() int32 {
	return t.M_classID
}

func New_TL_privacyValueDisallowContacts() *TL_privacyValueDisallowContacts {
	return &TL_privacyValueDisallowContacts{
		M_classID: TL_CLASS_privacyValueDisallowContacts,
	}
}

func (t *TL_privacyValueDisallowContacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_privacyValueDisallowContacts))

	return ec.GetBuffer()
}

func (t *TL_privacyValueDisallowContacts) Decode(b []byte) error {
	return nil
}

func (t *TL_privacyValueDisallowContacts) String() string {
	return fmt.Sprintf("- privacyValueDisallowContacts#f888fa1a\n")
}

// privacyValueDisallowAll#8b73e763
type TL_privacyValueDisallowAll struct {
	M_classID int32
}

func (t *TL_privacyValueDisallowAll) ClassID() int32 {
	return t.M_classID
}

func New_TL_privacyValueDisallowAll() *TL_privacyValueDisallowAll {
	return &TL_privacyValueDisallowAll{
		M_classID: TL_CLASS_privacyValueDisallowAll,
	}
}

func (t *TL_privacyValueDisallowAll) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_privacyValueDisallowAll))

	return ec.GetBuffer()
}

func (t *TL_privacyValueDisallowAll) Decode(b []byte) error {
	return nil
}

func (t *TL_privacyValueDisallowAll) String() string {
	return fmt.Sprintf("- privacyValueDisallowAll#8b73e763\n")
}

// privacyValueDisallowUsers#c7f49b7
type TL_privacyValueDisallowUsers struct {
	M_classID int32
	M_users   []int32
}

func (t *TL_privacyValueDisallowUsers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_privacyValueDisallowUsers) Set_users(M_users []int32) {
	t.M_users = M_users
}

func (t *TL_privacyValueDisallowUsers) Get_users() []int32 {
	return t.M_users
}

func New_TL_privacyValueDisallowUsers() *TL_privacyValueDisallowUsers {
	return &TL_privacyValueDisallowUsers{
		M_classID: TL_CLASS_privacyValueDisallowUsers,
	}
}

func (t *TL_privacyValueDisallowUsers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_privacyValueDisallowUsers))
	ec.VectorInt(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_privacyValueDisallowUsers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_users = dc.VectorInt()

	return dc.err
}

func (t *TL_privacyValueDisallowUsers) String() string {
	return fmt.Sprintf("- privacyValueDisallowUsers#c7f49b7\n-- users : %v\n", t.M_users)
}

// account_privacyRules#554abb6f
type TL_account_privacyRules struct {
	M_classID int32
	M_rules   []TLObject
	M_users   []TLObject
}

func (t *TL_account_privacyRules) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_privacyRules) Set_rules(M_rules []TLObject) {
	t.M_rules = M_rules
}

func (t *TL_account_privacyRules) Get_rules() []TLObject {
	return t.M_rules
}

func (t *TL_account_privacyRules) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_account_privacyRules) Get_users() []TLObject {
	return t.M_users
}

func New_TL_account_privacyRules() *TL_account_privacyRules {
	return &TL_account_privacyRules{
		M_classID: TL_CLASS_account_privacyRules,
	}
}

func (t *TL_account_privacyRules) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_privacyRules))
	ec.Vector(t.Get_rules())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_account_privacyRules) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_rules = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_account_privacyRules) String() string {
	return fmt.Sprintf("- account_privacyRules#554abb6f\n-- rules : %v\n-- users : %v\n", t.M_rules, t.M_users)
}

// accountDaysTTL#b8d0afdf
type TL_accountDaysTTL struct {
	M_classID int32
	M_days    int32
}

func (t *TL_accountDaysTTL) ClassID() int32 {
	return t.M_classID
}

func (t *TL_accountDaysTTL) Set_days(M_days int32) {
	t.M_days = M_days
}

func (t *TL_accountDaysTTL) Get_days() int32 {
	return t.M_days
}

func New_TL_accountDaysTTL() *TL_accountDaysTTL {
	return &TL_accountDaysTTL{
		M_classID: TL_CLASS_accountDaysTTL,
	}
}

func (t *TL_accountDaysTTL) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_accountDaysTTL))
	ec.Int(t.Get_days())

	return ec.GetBuffer()
}

func (t *TL_accountDaysTTL) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_days = dc.Int()

	return dc.err
}

func (t *TL_accountDaysTTL) String() string {
	return fmt.Sprintf("- accountDaysTTL#b8d0afdf\n-- days : %v\n", t.M_days)
}

// documentAttributeImageSize#6c37c15c
type TL_documentAttributeImageSize struct {
	M_classID int32
	M_w       int32
	M_h       int32
}

func (t *TL_documentAttributeImageSize) ClassID() int32 {
	return t.M_classID
}

func (t *TL_documentAttributeImageSize) Set_w(M_w int32) {
	t.M_w = M_w
}

func (t *TL_documentAttributeImageSize) Get_w() int32 {
	return t.M_w
}

func (t *TL_documentAttributeImageSize) Set_h(M_h int32) {
	t.M_h = M_h
}

func (t *TL_documentAttributeImageSize) Get_h() int32 {
	return t.M_h
}

func New_TL_documentAttributeImageSize() *TL_documentAttributeImageSize {
	return &TL_documentAttributeImageSize{
		M_classID: TL_CLASS_documentAttributeImageSize,
	}
}

func (t *TL_documentAttributeImageSize) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_documentAttributeImageSize))
	ec.Int(t.Get_w())
	ec.Int(t.Get_h())

	return ec.GetBuffer()
}

func (t *TL_documentAttributeImageSize) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_w = dc.Int()
	t.M_h = dc.Int()

	return dc.err
}

func (t *TL_documentAttributeImageSize) String() string {
	return fmt.Sprintf("- documentAttributeImageSize#6c37c15c\n-- w : %v\n-- h : %v\n", t.M_w, t.M_h)
}

// documentAttributeAnimated#11b58939
type TL_documentAttributeAnimated struct {
	M_classID int32
}

func (t *TL_documentAttributeAnimated) ClassID() int32 {
	return t.M_classID
}

func New_TL_documentAttributeAnimated() *TL_documentAttributeAnimated {
	return &TL_documentAttributeAnimated{
		M_classID: TL_CLASS_documentAttributeAnimated,
	}
}

func (t *TL_documentAttributeAnimated) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_documentAttributeAnimated))

	return ec.GetBuffer()
}

func (t *TL_documentAttributeAnimated) Decode(b []byte) error {
	return nil
}

func (t *TL_documentAttributeAnimated) String() string {
	return fmt.Sprintf("- documentAttributeAnimated#11b58939\n")
}

// documentAttributeSticker#6319d612
type TL_documentAttributeSticker struct {
	M_classID     int32
	M_flags       TLObject
	M_mask        TLObject
	M_alt         string
	M_stickerset  TLObject
	M_mask_coords TLObject
}

func (t *TL_documentAttributeSticker) ClassID() int32 {
	return t.M_classID
}

func (t *TL_documentAttributeSticker) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_documentAttributeSticker) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_documentAttributeSticker) Set_mask(M_mask TLObject) {
	t.M_mask = M_mask
}

func (t *TL_documentAttributeSticker) Get_mask() TLObject {
	return t.M_mask
}

func (t *TL_documentAttributeSticker) Set_alt(M_alt string) {
	t.M_alt = M_alt
}

func (t *TL_documentAttributeSticker) Get_alt() string {
	return t.M_alt
}

func (t *TL_documentAttributeSticker) Set_stickerset(M_stickerset TLObject) {
	t.M_stickerset = M_stickerset
}

func (t *TL_documentAttributeSticker) Get_stickerset() TLObject {
	return t.M_stickerset
}

func (t *TL_documentAttributeSticker) Set_mask_coords(M_mask_coords TLObject) {
	t.M_mask_coords = M_mask_coords
}

func (t *TL_documentAttributeSticker) Get_mask_coords() TLObject {
	return t.M_mask_coords
}

func New_TL_documentAttributeSticker() *TL_documentAttributeSticker {
	return &TL_documentAttributeSticker{
		M_classID: TL_CLASS_documentAttributeSticker,
	}
}

func (t *TL_documentAttributeSticker) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_documentAttributeSticker))
	ec.TLObject(t.Get_mask())
	ec.String(t.Get_alt())
	ec.TLObject(t.Get_stickerset())
	ec.TLObject(t.Get_mask_coords())

	return ec.GetBuffer()
}

func (t *TL_documentAttributeSticker) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_mask = dc.TLObject()
	t.M_alt = dc.String()
	t.M_stickerset = dc.TLObject()
	t.M_mask_coords = dc.TLObject()

	return dc.err
}

func (t *TL_documentAttributeSticker) String() string {
	return fmt.Sprintf("- documentAttributeSticker#6319d612\n-- flags : %v\n-- mask : %v\n-- alt : %v\n-- stickerset : %v\n-- mask_coords : %v\n", t.M_flags, t.M_mask, t.M_alt, t.M_stickerset, t.M_mask_coords)
}

// documentAttributeVideo#ef02ce6
type TL_documentAttributeVideo struct {
	M_classID       int32
	M_flags         TLObject
	M_round_message TLObject
	M_duration      int32
	M_w             int32
	M_h             int32
}

func (t *TL_documentAttributeVideo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_documentAttributeVideo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_documentAttributeVideo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_documentAttributeVideo) Set_round_message(M_round_message TLObject) {
	t.M_round_message = M_round_message
}

func (t *TL_documentAttributeVideo) Get_round_message() TLObject {
	return t.M_round_message
}

func (t *TL_documentAttributeVideo) Set_duration(M_duration int32) {
	t.M_duration = M_duration
}

func (t *TL_documentAttributeVideo) Get_duration() int32 {
	return t.M_duration
}

func (t *TL_documentAttributeVideo) Set_w(M_w int32) {
	t.M_w = M_w
}

func (t *TL_documentAttributeVideo) Get_w() int32 {
	return t.M_w
}

func (t *TL_documentAttributeVideo) Set_h(M_h int32) {
	t.M_h = M_h
}

func (t *TL_documentAttributeVideo) Get_h() int32 {
	return t.M_h
}

func New_TL_documentAttributeVideo() *TL_documentAttributeVideo {
	return &TL_documentAttributeVideo{
		M_classID: TL_CLASS_documentAttributeVideo,
	}
}

func (t *TL_documentAttributeVideo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_documentAttributeVideo))
	ec.TLObject(t.Get_round_message())
	ec.Int(t.Get_duration())
	ec.Int(t.Get_w())
	ec.Int(t.Get_h())

	return ec.GetBuffer()
}

func (t *TL_documentAttributeVideo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_round_message = dc.TLObject()
	t.M_duration = dc.Int()
	t.M_w = dc.Int()
	t.M_h = dc.Int()

	return dc.err
}

func (t *TL_documentAttributeVideo) String() string {
	return fmt.Sprintf("- documentAttributeVideo#ef02ce6\n-- flags : %v\n-- round_message : %v\n-- duration : %v\n-- w : %v\n-- h : %v\n", t.M_flags, t.M_round_message, t.M_duration, t.M_w, t.M_h)
}

// documentAttributeAudio#9852f9c6
type TL_documentAttributeAudio struct {
	M_classID   int32
	M_flags     TLObject
	M_voice     TLObject
	M_duration  int32
	M_title     TLObject
	M_performer TLObject
	M_waveform  TLObject
}

func (t *TL_documentAttributeAudio) ClassID() int32 {
	return t.M_classID
}

func (t *TL_documentAttributeAudio) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_documentAttributeAudio) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_documentAttributeAudio) Set_voice(M_voice TLObject) {
	t.M_voice = M_voice
}

func (t *TL_documentAttributeAudio) Get_voice() TLObject {
	return t.M_voice
}

func (t *TL_documentAttributeAudio) Set_duration(M_duration int32) {
	t.M_duration = M_duration
}

func (t *TL_documentAttributeAudio) Get_duration() int32 {
	return t.M_duration
}

func (t *TL_documentAttributeAudio) Set_title(M_title TLObject) {
	t.M_title = M_title
}

func (t *TL_documentAttributeAudio) Get_title() TLObject {
	return t.M_title
}

func (t *TL_documentAttributeAudio) Set_performer(M_performer TLObject) {
	t.M_performer = M_performer
}

func (t *TL_documentAttributeAudio) Get_performer() TLObject {
	return t.M_performer
}

func (t *TL_documentAttributeAudio) Set_waveform(M_waveform TLObject) {
	t.M_waveform = M_waveform
}

func (t *TL_documentAttributeAudio) Get_waveform() TLObject {
	return t.M_waveform
}

func New_TL_documentAttributeAudio() *TL_documentAttributeAudio {
	return &TL_documentAttributeAudio{
		M_classID: TL_CLASS_documentAttributeAudio,
	}
}

func (t *TL_documentAttributeAudio) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_documentAttributeAudio))
	ec.TLObject(t.Get_voice())
	ec.Int(t.Get_duration())
	ec.TLObject(t.Get_title())
	ec.TLObject(t.Get_performer())
	ec.TLObject(t.Get_waveform())

	return ec.GetBuffer()
}

func (t *TL_documentAttributeAudio) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_voice = dc.TLObject()
	t.M_duration = dc.Int()
	t.M_title = dc.TLObject()
	t.M_performer = dc.TLObject()
	t.M_waveform = dc.TLObject()

	return dc.err
}

func (t *TL_documentAttributeAudio) String() string {
	return fmt.Sprintf("- documentAttributeAudio#9852f9c6\n-- flags : %v\n-- voice : %v\n-- duration : %v\n-- title : %v\n-- performer : %v\n-- waveform : %v\n", t.M_flags, t.M_voice, t.M_duration, t.M_title, t.M_performer, t.M_waveform)
}

// documentAttributeFilename#15590068
type TL_documentAttributeFilename struct {
	M_classID   int32
	M_file_name string
}

func (t *TL_documentAttributeFilename) ClassID() int32 {
	return t.M_classID
}

func (t *TL_documentAttributeFilename) Set_file_name(M_file_name string) {
	t.M_file_name = M_file_name
}

func (t *TL_documentAttributeFilename) Get_file_name() string {
	return t.M_file_name
}

func New_TL_documentAttributeFilename() *TL_documentAttributeFilename {
	return &TL_documentAttributeFilename{
		M_classID: TL_CLASS_documentAttributeFilename,
	}
}

func (t *TL_documentAttributeFilename) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_documentAttributeFilename))
	ec.String(t.Get_file_name())

	return ec.GetBuffer()
}

func (t *TL_documentAttributeFilename) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_file_name = dc.String()

	return dc.err
}

func (t *TL_documentAttributeFilename) String() string {
	return fmt.Sprintf("- documentAttributeFilename#15590068\n-- file_name : %v\n", t.M_file_name)
}

// documentAttributeHasStickers#9801d2f7
type TL_documentAttributeHasStickers struct {
	M_classID int32
}

func (t *TL_documentAttributeHasStickers) ClassID() int32 {
	return t.M_classID
}

func New_TL_documentAttributeHasStickers() *TL_documentAttributeHasStickers {
	return &TL_documentAttributeHasStickers{
		M_classID: TL_CLASS_documentAttributeHasStickers,
	}
}

func (t *TL_documentAttributeHasStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_documentAttributeHasStickers))

	return ec.GetBuffer()
}

func (t *TL_documentAttributeHasStickers) Decode(b []byte) error {
	return nil
}

func (t *TL_documentAttributeHasStickers) String() string {
	return fmt.Sprintf("- documentAttributeHasStickers#9801d2f7\n")
}

// messages_stickersNotModified#f1749a22
type TL_messages_stickersNotModified struct {
	M_classID int32
}

func (t *TL_messages_stickersNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_messages_stickersNotModified() *TL_messages_stickersNotModified {
	return &TL_messages_stickersNotModified{
		M_classID: TL_CLASS_messages_stickersNotModified,
	}
}

func (t *TL_messages_stickersNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_stickersNotModified))

	return ec.GetBuffer()
}

func (t *TL_messages_stickersNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_messages_stickersNotModified) String() string {
	return fmt.Sprintf("- messages_stickersNotModified#f1749a22\n")
}

// messages_stickers#8a8ecd32
type TL_messages_stickers struct {
	M_classID  int32
	M_hash     string
	M_stickers []TLObject
}

func (t *TL_messages_stickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_stickers) Set_hash(M_hash string) {
	t.M_hash = M_hash
}

func (t *TL_messages_stickers) Get_hash() string {
	return t.M_hash
}

func (t *TL_messages_stickers) Set_stickers(M_stickers []TLObject) {
	t.M_stickers = M_stickers
}

func (t *TL_messages_stickers) Get_stickers() []TLObject {
	return t.M_stickers
}

func New_TL_messages_stickers() *TL_messages_stickers {
	return &TL_messages_stickers{
		M_classID: TL_CLASS_messages_stickers,
	}
}

func (t *TL_messages_stickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_stickers))
	ec.String(t.Get_hash())
	ec.Vector(t.Get_stickers())

	return ec.GetBuffer()
}

func (t *TL_messages_stickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.String()
	t.M_stickers = dc.Vector()

	return dc.err
}

func (t *TL_messages_stickers) String() string {
	return fmt.Sprintf("- messages_stickers#8a8ecd32\n-- hash : %v\n-- stickers : %v\n", t.M_hash, t.M_stickers)
}

// stickerPack#12b299d4
type TL_stickerPack struct {
	M_classID   int32
	M_emoticon  string
	M_documents []int64
}

func (t *TL_stickerPack) ClassID() int32 {
	return t.M_classID
}

func (t *TL_stickerPack) Set_emoticon(M_emoticon string) {
	t.M_emoticon = M_emoticon
}

func (t *TL_stickerPack) Get_emoticon() string {
	return t.M_emoticon
}

func (t *TL_stickerPack) Set_documents(M_documents []int64) {
	t.M_documents = M_documents
}

func (t *TL_stickerPack) Get_documents() []int64 {
	return t.M_documents
}

func New_TL_stickerPack() *TL_stickerPack {
	return &TL_stickerPack{
		M_classID: TL_CLASS_stickerPack,
	}
}

func (t *TL_stickerPack) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_stickerPack))
	ec.String(t.Get_emoticon())
	ec.VectorLong(t.Get_documents())

	return ec.GetBuffer()
}

func (t *TL_stickerPack) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_emoticon = dc.String()
	t.M_documents = dc.VectorLong()

	return dc.err
}

func (t *TL_stickerPack) String() string {
	return fmt.Sprintf("- stickerPack#12b299d4\n-- emoticon : %v\n-- documents : %v\n", t.M_emoticon, t.M_documents)
}

// messages_allStickersNotModified#e86602c3
type TL_messages_allStickersNotModified struct {
	M_classID int32
}

func (t *TL_messages_allStickersNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_messages_allStickersNotModified() *TL_messages_allStickersNotModified {
	return &TL_messages_allStickersNotModified{
		M_classID: TL_CLASS_messages_allStickersNotModified,
	}
}

func (t *TL_messages_allStickersNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_allStickersNotModified))

	return ec.GetBuffer()
}

func (t *TL_messages_allStickersNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_messages_allStickersNotModified) String() string {
	return fmt.Sprintf("- messages_allStickersNotModified#e86602c3\n")
}

// messages_allStickers#edfd405f
type TL_messages_allStickers struct {
	M_classID int32
	M_hash    int32
	M_sets    []TLObject
}

func (t *TL_messages_allStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_allStickers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_allStickers) Get_hash() int32 {
	return t.M_hash
}

func (t *TL_messages_allStickers) Set_sets(M_sets []TLObject) {
	t.M_sets = M_sets
}

func (t *TL_messages_allStickers) Get_sets() []TLObject {
	return t.M_sets
}

func New_TL_messages_allStickers() *TL_messages_allStickers {
	return &TL_messages_allStickers{
		M_classID: TL_CLASS_messages_allStickers,
	}
}

func (t *TL_messages_allStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_allStickers))
	ec.Int(t.Get_hash())
	ec.Vector(t.Get_sets())

	return ec.GetBuffer()
}

func (t *TL_messages_allStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()
	t.M_sets = dc.Vector()

	return dc.err
}

func (t *TL_messages_allStickers) String() string {
	return fmt.Sprintf("- messages_allStickers#edfd405f\n-- hash : %v\n-- sets : %v\n", t.M_hash, t.M_sets)
}

// disabledFeature#ae636f24
type TL_disabledFeature struct {
	M_classID     int32
	M_feature     string
	M_description string
}

func (t *TL_disabledFeature) ClassID() int32 {
	return t.M_classID
}

func (t *TL_disabledFeature) Set_feature(M_feature string) {
	t.M_feature = M_feature
}

func (t *TL_disabledFeature) Get_feature() string {
	return t.M_feature
}

func (t *TL_disabledFeature) Set_description(M_description string) {
	t.M_description = M_description
}

func (t *TL_disabledFeature) Get_description() string {
	return t.M_description
}

func New_TL_disabledFeature() *TL_disabledFeature {
	return &TL_disabledFeature{
		M_classID: TL_CLASS_disabledFeature,
	}
}

func (t *TL_disabledFeature) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_disabledFeature))
	ec.String(t.Get_feature())
	ec.String(t.Get_description())

	return ec.GetBuffer()
}

func (t *TL_disabledFeature) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_feature = dc.String()
	t.M_description = dc.String()

	return dc.err
}

func (t *TL_disabledFeature) String() string {
	return fmt.Sprintf("- disabledFeature#ae636f24\n-- feature : %v\n-- description : %v\n", t.M_feature, t.M_description)
}

// messages_affectedMessages#84d19185
type TL_messages_affectedMessages struct {
	M_classID   int32
	M_pts       int32
	M_pts_count int32
}

func (t *TL_messages_affectedMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_affectedMessages) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_messages_affectedMessages) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_messages_affectedMessages) Set_pts_count(M_pts_count int32) {
	t.M_pts_count = M_pts_count
}

func (t *TL_messages_affectedMessages) Get_pts_count() int32 {
	return t.M_pts_count
}

func New_TL_messages_affectedMessages() *TL_messages_affectedMessages {
	return &TL_messages_affectedMessages{
		M_classID: TL_CLASS_messages_affectedMessages,
	}
}

func (t *TL_messages_affectedMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_affectedMessages))
	ec.Int(t.Get_pts())
	ec.Int(t.Get_pts_count())

	return ec.GetBuffer()
}

func (t *TL_messages_affectedMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pts = dc.Int()
	t.M_pts_count = dc.Int()

	return dc.err
}

func (t *TL_messages_affectedMessages) String() string {
	return fmt.Sprintf("- messages_affectedMessages#84d19185\n-- pts : %v\n-- pts_count : %v\n", t.M_pts, t.M_pts_count)
}

// contactLinkUnknown#5f4f9247
type TL_contactLinkUnknown struct {
	M_classID int32
}

func (t *TL_contactLinkUnknown) ClassID() int32 {
	return t.M_classID
}

func New_TL_contactLinkUnknown() *TL_contactLinkUnknown {
	return &TL_contactLinkUnknown{
		M_classID: TL_CLASS_contactLinkUnknown,
	}
}

func (t *TL_contactLinkUnknown) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contactLinkUnknown))

	return ec.GetBuffer()
}

func (t *TL_contactLinkUnknown) Decode(b []byte) error {
	return nil
}

func (t *TL_contactLinkUnknown) String() string {
	return fmt.Sprintf("- contactLinkUnknown#5f4f9247\n")
}

// contactLinkNone#feedd3ad
type TL_contactLinkNone struct {
	M_classID int32
}

func (t *TL_contactLinkNone) ClassID() int32 {
	return t.M_classID
}

func New_TL_contactLinkNone() *TL_contactLinkNone {
	return &TL_contactLinkNone{
		M_classID: TL_CLASS_contactLinkNone,
	}
}

func (t *TL_contactLinkNone) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contactLinkNone))

	return ec.GetBuffer()
}

func (t *TL_contactLinkNone) Decode(b []byte) error {
	return nil
}

func (t *TL_contactLinkNone) String() string {
	return fmt.Sprintf("- contactLinkNone#feedd3ad\n")
}

// contactLinkHasPhone#268f3f59
type TL_contactLinkHasPhone struct {
	M_classID int32
}

func (t *TL_contactLinkHasPhone) ClassID() int32 {
	return t.M_classID
}

func New_TL_contactLinkHasPhone() *TL_contactLinkHasPhone {
	return &TL_contactLinkHasPhone{
		M_classID: TL_CLASS_contactLinkHasPhone,
	}
}

func (t *TL_contactLinkHasPhone) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contactLinkHasPhone))

	return ec.GetBuffer()
}

func (t *TL_contactLinkHasPhone) Decode(b []byte) error {
	return nil
}

func (t *TL_contactLinkHasPhone) String() string {
	return fmt.Sprintf("- contactLinkHasPhone#268f3f59\n")
}

// contactLinkContact#d502c2d0
type TL_contactLinkContact struct {
	M_classID int32
}

func (t *TL_contactLinkContact) ClassID() int32 {
	return t.M_classID
}

func New_TL_contactLinkContact() *TL_contactLinkContact {
	return &TL_contactLinkContact{
		M_classID: TL_CLASS_contactLinkContact,
	}
}

func (t *TL_contactLinkContact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contactLinkContact))

	return ec.GetBuffer()
}

func (t *TL_contactLinkContact) Decode(b []byte) error {
	return nil
}

func (t *TL_contactLinkContact) String() string {
	return fmt.Sprintf("- contactLinkContact#d502c2d0\n")
}

// webPageEmpty#eb1477e8
type TL_webPageEmpty struct {
	M_classID int32
	M_id      int64
}

func (t *TL_webPageEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_webPageEmpty) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_webPageEmpty) Get_id() int64 {
	return t.M_id
}

func New_TL_webPageEmpty() *TL_webPageEmpty {
	return &TL_webPageEmpty{
		M_classID: TL_CLASS_webPageEmpty,
	}
}

func (t *TL_webPageEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_webPageEmpty))
	ec.Long(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_webPageEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()

	return dc.err
}

func (t *TL_webPageEmpty) String() string {
	return fmt.Sprintf("- webPageEmpty#eb1477e8\n-- id : %v\n", t.M_id)
}

// webPagePending#c586da1c
type TL_webPagePending struct {
	M_classID int32
	M_id      int64
	M_date    int32
}

func (t *TL_webPagePending) ClassID() int32 {
	return t.M_classID
}

func (t *TL_webPagePending) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_webPagePending) Get_id() int64 {
	return t.M_id
}

func (t *TL_webPagePending) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_webPagePending) Get_date() int32 {
	return t.M_date
}

func New_TL_webPagePending() *TL_webPagePending {
	return &TL_webPagePending{
		M_classID: TL_CLASS_webPagePending,
	}
}

func (t *TL_webPagePending) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_webPagePending))
	ec.Long(t.Get_id())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_webPagePending) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_webPagePending) String() string {
	return fmt.Sprintf("- webPagePending#c586da1c\n-- id : %v\n-- date : %v\n", t.M_id, t.M_date)
}

// webPage#5f07b4bc
type TL_webPage struct {
	M_classID      int32
	M_flags        TLObject
	M_id           int64
	M_url          string
	M_display_url  string
	M_hash         int32
	M_type         TLObject
	M_site_name    TLObject
	M_title        TLObject
	M_description  TLObject
	M_photo        TLObject
	M_embed_url    TLObject
	M_embed_type   TLObject
	M_embed_width  TLObject
	M_embed_height TLObject
	M_duration     TLObject
	M_author       TLObject
	M_document     TLObject
	M_cached_page  TLObject
}

func (t *TL_webPage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_webPage) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_webPage) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_webPage) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_webPage) Get_id() int64 {
	return t.M_id
}

func (t *TL_webPage) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_webPage) Get_url() string {
	return t.M_url
}

func (t *TL_webPage) Set_display_url(M_display_url string) {
	t.M_display_url = M_display_url
}

func (t *TL_webPage) Get_display_url() string {
	return t.M_display_url
}

func (t *TL_webPage) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_webPage) Get_hash() int32 {
	return t.M_hash
}

func (t *TL_webPage) Set_type(M_type TLObject) {
	t.M_type = M_type
}

func (t *TL_webPage) Get_type() TLObject {
	return t.M_type
}

func (t *TL_webPage) Set_site_name(M_site_name TLObject) {
	t.M_site_name = M_site_name
}

func (t *TL_webPage) Get_site_name() TLObject {
	return t.M_site_name
}

func (t *TL_webPage) Set_title(M_title TLObject) {
	t.M_title = M_title
}

func (t *TL_webPage) Get_title() TLObject {
	return t.M_title
}

func (t *TL_webPage) Set_description(M_description TLObject) {
	t.M_description = M_description
}

func (t *TL_webPage) Get_description() TLObject {
	return t.M_description
}

func (t *TL_webPage) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_webPage) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_webPage) Set_embed_url(M_embed_url TLObject) {
	t.M_embed_url = M_embed_url
}

func (t *TL_webPage) Get_embed_url() TLObject {
	return t.M_embed_url
}

func (t *TL_webPage) Set_embed_type(M_embed_type TLObject) {
	t.M_embed_type = M_embed_type
}

func (t *TL_webPage) Get_embed_type() TLObject {
	return t.M_embed_type
}

func (t *TL_webPage) Set_embed_width(M_embed_width TLObject) {
	t.M_embed_width = M_embed_width
}

func (t *TL_webPage) Get_embed_width() TLObject {
	return t.M_embed_width
}

func (t *TL_webPage) Set_embed_height(M_embed_height TLObject) {
	t.M_embed_height = M_embed_height
}

func (t *TL_webPage) Get_embed_height() TLObject {
	return t.M_embed_height
}

func (t *TL_webPage) Set_duration(M_duration TLObject) {
	t.M_duration = M_duration
}

func (t *TL_webPage) Get_duration() TLObject {
	return t.M_duration
}

func (t *TL_webPage) Set_author(M_author TLObject) {
	t.M_author = M_author
}

func (t *TL_webPage) Get_author() TLObject {
	return t.M_author
}

func (t *TL_webPage) Set_document(M_document TLObject) {
	t.M_document = M_document
}

func (t *TL_webPage) Get_document() TLObject {
	return t.M_document
}

func (t *TL_webPage) Set_cached_page(M_cached_page TLObject) {
	t.M_cached_page = M_cached_page
}

func (t *TL_webPage) Get_cached_page() TLObject {
	return t.M_cached_page
}

func New_TL_webPage() *TL_webPage {
	return &TL_webPage{
		M_classID: TL_CLASS_webPage,
	}
}

func (t *TL_webPage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_webPage))
	ec.Long(t.Get_id())
	ec.String(t.Get_url())
	ec.String(t.Get_display_url())
	ec.Int(t.Get_hash())
	ec.TLObject(t.Get_type())
	ec.TLObject(t.Get_site_name())
	ec.TLObject(t.Get_title())
	ec.TLObject(t.Get_description())
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_embed_url())
	ec.TLObject(t.Get_embed_type())
	ec.TLObject(t.Get_embed_width())
	ec.TLObject(t.Get_embed_height())
	ec.TLObject(t.Get_duration())
	ec.TLObject(t.Get_author())
	ec.TLObject(t.Get_document())
	ec.TLObject(t.Get_cached_page())

	return ec.GetBuffer()
}

func (t *TL_webPage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_url = dc.String()
	t.M_display_url = dc.String()
	t.M_hash = dc.Int()
	t.M_type = dc.TLObject()
	t.M_site_name = dc.TLObject()
	t.M_title = dc.TLObject()
	t.M_description = dc.TLObject()
	t.M_photo = dc.TLObject()
	t.M_embed_url = dc.TLObject()
	t.M_embed_type = dc.TLObject()
	t.M_embed_width = dc.TLObject()
	t.M_embed_height = dc.TLObject()
	t.M_duration = dc.TLObject()
	t.M_author = dc.TLObject()
	t.M_document = dc.TLObject()
	t.M_cached_page = dc.TLObject()

	return dc.err
}

func (t *TL_webPage) String() string {
	return fmt.Sprintf("- webPage#5f07b4bc\n-- flags : %v\n-- id : %v\n-- url : %v\n-- display_url : %v\n-- hash : %v\n-- type : %v\n-- site_name : %v\n-- title : %v\n-- description : %v\n-- photo : %v\n-- embed_url : %v\n-- embed_type : %v\n-- embed_width : %v\n-- embed_height : %v\n-- duration : %v\n-- author : %v\n-- document : %v\n-- cached_page : %v\n", t.M_flags, t.M_id, t.M_url, t.M_display_url, t.M_hash, t.M_type, t.M_site_name, t.M_title, t.M_description, t.M_photo, t.M_embed_url, t.M_embed_type, t.M_embed_width, t.M_embed_height, t.M_duration, t.M_author, t.M_document, t.M_cached_page)
}

// webPageNotModified#85849473
type TL_webPageNotModified struct {
	M_classID int32
}

func (t *TL_webPageNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_webPageNotModified() *TL_webPageNotModified {
	return &TL_webPageNotModified{
		M_classID: TL_CLASS_webPageNotModified,
	}
}

func (t *TL_webPageNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_webPageNotModified))

	return ec.GetBuffer()
}

func (t *TL_webPageNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_webPageNotModified) String() string {
	return fmt.Sprintf("- webPageNotModified#85849473\n")
}

// authorization#7bf2e6f6
type TL_authorization struct {
	M_classID        int32
	M_hash           int64
	M_flags          int32
	M_device_model   string
	M_platform       string
	M_system_version string
	M_api_id         int32
	M_app_name       string
	M_app_version    string
	M_date_created   int32
	M_date_active    int32
	M_ip             string
	M_country        string
	M_region         string
}

func (t *TL_authorization) ClassID() int32 {
	return t.M_classID
}

func (t *TL_authorization) Set_hash(M_hash int64) {
	t.M_hash = M_hash
}

func (t *TL_authorization) Get_hash() int64 {
	return t.M_hash
}

func (t *TL_authorization) Set_flags(M_flags int32) {
	t.M_flags = M_flags
}

func (t *TL_authorization) Get_flags() int32 {
	return t.M_flags
}

func (t *TL_authorization) Set_device_model(M_device_model string) {
	t.M_device_model = M_device_model
}

func (t *TL_authorization) Get_device_model() string {
	return t.M_device_model
}

func (t *TL_authorization) Set_platform(M_platform string) {
	t.M_platform = M_platform
}

func (t *TL_authorization) Get_platform() string {
	return t.M_platform
}

func (t *TL_authorization) Set_system_version(M_system_version string) {
	t.M_system_version = M_system_version
}

func (t *TL_authorization) Get_system_version() string {
	return t.M_system_version
}

func (t *TL_authorization) Set_api_id(M_api_id int32) {
	t.M_api_id = M_api_id
}

func (t *TL_authorization) Get_api_id() int32 {
	return t.M_api_id
}

func (t *TL_authorization) Set_app_name(M_app_name string) {
	t.M_app_name = M_app_name
}

func (t *TL_authorization) Get_app_name() string {
	return t.M_app_name
}

func (t *TL_authorization) Set_app_version(M_app_version string) {
	t.M_app_version = M_app_version
}

func (t *TL_authorization) Get_app_version() string {
	return t.M_app_version
}

func (t *TL_authorization) Set_date_created(M_date_created int32) {
	t.M_date_created = M_date_created
}

func (t *TL_authorization) Get_date_created() int32 {
	return t.M_date_created
}

func (t *TL_authorization) Set_date_active(M_date_active int32) {
	t.M_date_active = M_date_active
}

func (t *TL_authorization) Get_date_active() int32 {
	return t.M_date_active
}

func (t *TL_authorization) Set_ip(M_ip string) {
	t.M_ip = M_ip
}

func (t *TL_authorization) Get_ip() string {
	return t.M_ip
}

func (t *TL_authorization) Set_country(M_country string) {
	t.M_country = M_country
}

func (t *TL_authorization) Get_country() string {
	return t.M_country
}

func (t *TL_authorization) Set_region(M_region string) {
	t.M_region = M_region
}

func (t *TL_authorization) Get_region() string {
	return t.M_region
}

func New_TL_authorization() *TL_authorization {
	return &TL_authorization{
		M_classID: TL_CLASS_authorization,
	}
}

func (t *TL_authorization) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_authorization))
	ec.Long(t.Get_hash())
	ec.Int(t.Get_flags())
	ec.String(t.Get_device_model())
	ec.String(t.Get_platform())
	ec.String(t.Get_system_version())
	ec.Int(t.Get_api_id())
	ec.String(t.Get_app_name())
	ec.String(t.Get_app_version())
	ec.Int(t.Get_date_created())
	ec.Int(t.Get_date_active())
	ec.String(t.Get_ip())
	ec.String(t.Get_country())
	ec.String(t.Get_region())

	return ec.GetBuffer()
}

func (t *TL_authorization) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Long()
	t.M_flags = dc.Int()
	t.M_device_model = dc.String()
	t.M_platform = dc.String()
	t.M_system_version = dc.String()
	t.M_api_id = dc.Int()
	t.M_app_name = dc.String()
	t.M_app_version = dc.String()
	t.M_date_created = dc.Int()
	t.M_date_active = dc.Int()
	t.M_ip = dc.String()
	t.M_country = dc.String()
	t.M_region = dc.String()

	return dc.err
}

func (t *TL_authorization) String() string {
	return fmt.Sprintf("- authorization#7bf2e6f6\n-- hash : %v\n-- flags : %v\n-- device_model : %v\n-- platform : %v\n-- system_version : %v\n-- api_id : %v\n-- app_name : %v\n-- app_version : %v\n-- date_created : %v\n-- date_active : %v\n-- ip : %v\n-- country : %v\n-- region : %v\n", t.M_hash, t.M_flags, t.M_device_model, t.M_platform, t.M_system_version, t.M_api_id, t.M_app_name, t.M_app_version, t.M_date_created, t.M_date_active, t.M_ip, t.M_country, t.M_region)
}

// account_authorizations#1250abde
type TL_account_authorizations struct {
	M_classID        int32
	M_authorizations []TLObject
}

func (t *TL_account_authorizations) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_authorizations) Set_authorizations(M_authorizations []TLObject) {
	t.M_authorizations = M_authorizations
}

func (t *TL_account_authorizations) Get_authorizations() []TLObject {
	return t.M_authorizations
}

func New_TL_account_authorizations() *TL_account_authorizations {
	return &TL_account_authorizations{
		M_classID: TL_CLASS_account_authorizations,
	}
}

func (t *TL_account_authorizations) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_authorizations))
	ec.Vector(t.Get_authorizations())

	return ec.GetBuffer()
}

func (t *TL_account_authorizations) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_authorizations = dc.Vector()

	return dc.err
}

func (t *TL_account_authorizations) String() string {
	return fmt.Sprintf("- account_authorizations#1250abde\n-- authorizations : %v\n", t.M_authorizations)
}

// account_noPassword#96dabc18
type TL_account_noPassword struct {
	M_classID                   int32
	M_new_salt                  TLObject
	M_email_unconfirmed_pattern string
}

func (t *TL_account_noPassword) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_noPassword) Set_new_salt(M_new_salt TLObject) {
	t.M_new_salt = M_new_salt
}

func (t *TL_account_noPassword) Get_new_salt() TLObject {
	return t.M_new_salt
}

func (t *TL_account_noPassword) Set_email_unconfirmed_pattern(M_email_unconfirmed_pattern string) {
	t.M_email_unconfirmed_pattern = M_email_unconfirmed_pattern
}

func (t *TL_account_noPassword) Get_email_unconfirmed_pattern() string {
	return t.M_email_unconfirmed_pattern
}

func New_TL_account_noPassword() *TL_account_noPassword {
	return &TL_account_noPassword{
		M_classID: TL_CLASS_account_noPassword,
	}
}

func (t *TL_account_noPassword) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_noPassword))
	ec.TLObject(t.Get_new_salt())
	ec.String(t.Get_email_unconfirmed_pattern())

	return ec.GetBuffer()
}

func (t *TL_account_noPassword) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_new_salt = dc.TLObject()
	t.M_email_unconfirmed_pattern = dc.String()

	return dc.err
}

func (t *TL_account_noPassword) String() string {
	return fmt.Sprintf("- account_noPassword#96dabc18\n-- new_salt : %v\n-- email_unconfirmed_pattern : %v\n", t.M_new_salt, t.M_email_unconfirmed_pattern)
}

// account_password#7c18141c
type TL_account_password struct {
	M_classID                   int32
	M_current_salt              TLObject
	M_new_salt                  TLObject
	M_hint                      string
	M_has_recovery              TLObject
	M_email_unconfirmed_pattern string
}

func (t *TL_account_password) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_password) Set_current_salt(M_current_salt TLObject) {
	t.M_current_salt = M_current_salt
}

func (t *TL_account_password) Get_current_salt() TLObject {
	return t.M_current_salt
}

func (t *TL_account_password) Set_new_salt(M_new_salt TLObject) {
	t.M_new_salt = M_new_salt
}

func (t *TL_account_password) Get_new_salt() TLObject {
	return t.M_new_salt
}

func (t *TL_account_password) Set_hint(M_hint string) {
	t.M_hint = M_hint
}

func (t *TL_account_password) Get_hint() string {
	return t.M_hint
}

func (t *TL_account_password) Set_has_recovery(M_has_recovery TLObject) {
	t.M_has_recovery = M_has_recovery
}

func (t *TL_account_password) Get_has_recovery() TLObject {
	return t.M_has_recovery
}

func (t *TL_account_password) Set_email_unconfirmed_pattern(M_email_unconfirmed_pattern string) {
	t.M_email_unconfirmed_pattern = M_email_unconfirmed_pattern
}

func (t *TL_account_password) Get_email_unconfirmed_pattern() string {
	return t.M_email_unconfirmed_pattern
}

func New_TL_account_password() *TL_account_password {
	return &TL_account_password{
		M_classID: TL_CLASS_account_password,
	}
}

func (t *TL_account_password) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_password))
	ec.TLObject(t.Get_current_salt())
	ec.TLObject(t.Get_new_salt())
	ec.String(t.Get_hint())
	ec.TLObject(t.Get_has_recovery())
	ec.String(t.Get_email_unconfirmed_pattern())

	return ec.GetBuffer()
}

func (t *TL_account_password) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_current_salt = dc.TLObject()
	t.M_new_salt = dc.TLObject()
	t.M_hint = dc.String()
	t.M_has_recovery = dc.TLObject()
	t.M_email_unconfirmed_pattern = dc.String()

	return dc.err
}

func (t *TL_account_password) String() string {
	return fmt.Sprintf("- account_password#7c18141c\n-- current_salt : %v\n-- new_salt : %v\n-- hint : %v\n-- has_recovery : %v\n-- email_unconfirmed_pattern : %v\n", t.M_current_salt, t.M_new_salt, t.M_hint, t.M_has_recovery, t.M_email_unconfirmed_pattern)
}

// account_passwordSettings#b7b72ab3
type TL_account_passwordSettings struct {
	M_classID int32
	M_email   string
}

func (t *TL_account_passwordSettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_passwordSettings) Set_email(M_email string) {
	t.M_email = M_email
}

func (t *TL_account_passwordSettings) Get_email() string {
	return t.M_email
}

func New_TL_account_passwordSettings() *TL_account_passwordSettings {
	return &TL_account_passwordSettings{
		M_classID: TL_CLASS_account_passwordSettings,
	}
}

func (t *TL_account_passwordSettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_passwordSettings))
	ec.String(t.Get_email())

	return ec.GetBuffer()
}

func (t *TL_account_passwordSettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_email = dc.String()

	return dc.err
}

func (t *TL_account_passwordSettings) String() string {
	return fmt.Sprintf("- account_passwordSettings#b7b72ab3\n-- email : %v\n", t.M_email)
}

// account_passwordInputSettings#86916deb
type TL_account_passwordInputSettings struct {
	M_classID           int32
	M_flags             TLObject
	M_new_salt          TLObject
	M_new_password_hash TLObject
	M_hint              TLObject
	M_email             TLObject
}

func (t *TL_account_passwordInputSettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_passwordInputSettings) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_account_passwordInputSettings) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_account_passwordInputSettings) Set_new_salt(M_new_salt TLObject) {
	t.M_new_salt = M_new_salt
}

func (t *TL_account_passwordInputSettings) Get_new_salt() TLObject {
	return t.M_new_salt
}

func (t *TL_account_passwordInputSettings) Set_new_password_hash(M_new_password_hash TLObject) {
	t.M_new_password_hash = M_new_password_hash
}

func (t *TL_account_passwordInputSettings) Get_new_password_hash() TLObject {
	return t.M_new_password_hash
}

func (t *TL_account_passwordInputSettings) Set_hint(M_hint TLObject) {
	t.M_hint = M_hint
}

func (t *TL_account_passwordInputSettings) Get_hint() TLObject {
	return t.M_hint
}

func (t *TL_account_passwordInputSettings) Set_email(M_email TLObject) {
	t.M_email = M_email
}

func (t *TL_account_passwordInputSettings) Get_email() TLObject {
	return t.M_email
}

func New_TL_account_passwordInputSettings() *TL_account_passwordInputSettings {
	return &TL_account_passwordInputSettings{
		M_classID: TL_CLASS_account_passwordInputSettings,
	}
}

func (t *TL_account_passwordInputSettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_passwordInputSettings))
	ec.TLObject(t.Get_new_salt())
	ec.TLObject(t.Get_new_password_hash())
	ec.TLObject(t.Get_hint())
	ec.TLObject(t.Get_email())

	return ec.GetBuffer()
}

func (t *TL_account_passwordInputSettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_new_salt = dc.TLObject()
	t.M_new_password_hash = dc.TLObject()
	t.M_hint = dc.TLObject()
	t.M_email = dc.TLObject()

	return dc.err
}

func (t *TL_account_passwordInputSettings) String() string {
	return fmt.Sprintf("- account_passwordInputSettings#86916deb\n-- flags : %v\n-- new_salt : %v\n-- new_password_hash : %v\n-- hint : %v\n-- email : %v\n", t.M_flags, t.M_new_salt, t.M_new_password_hash, t.M_hint, t.M_email)
}

// auth_passwordRecovery#137948a5
type TL_auth_passwordRecovery struct {
	M_classID       int32
	M_email_pattern string
}

func (t *TL_auth_passwordRecovery) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_passwordRecovery) Set_email_pattern(M_email_pattern string) {
	t.M_email_pattern = M_email_pattern
}

func (t *TL_auth_passwordRecovery) Get_email_pattern() string {
	return t.M_email_pattern
}

func New_TL_auth_passwordRecovery() *TL_auth_passwordRecovery {
	return &TL_auth_passwordRecovery{
		M_classID: TL_CLASS_auth_passwordRecovery,
	}
}

func (t *TL_auth_passwordRecovery) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_passwordRecovery))
	ec.String(t.Get_email_pattern())

	return ec.GetBuffer()
}

func (t *TL_auth_passwordRecovery) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_email_pattern = dc.String()

	return dc.err
}

func (t *TL_auth_passwordRecovery) String() string {
	return fmt.Sprintf("- auth_passwordRecovery#137948a5\n-- email_pattern : %v\n", t.M_email_pattern)
}

// receivedNotifyMessage#a384b779
type TL_receivedNotifyMessage struct {
	M_classID int32
	M_id      int32
	M_flags   int32
}

func (t *TL_receivedNotifyMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_receivedNotifyMessage) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_receivedNotifyMessage) Get_id() int32 {
	return t.M_id
}

func (t *TL_receivedNotifyMessage) Set_flags(M_flags int32) {
	t.M_flags = M_flags
}

func (t *TL_receivedNotifyMessage) Get_flags() int32 {
	return t.M_flags
}

func New_TL_receivedNotifyMessage() *TL_receivedNotifyMessage {
	return &TL_receivedNotifyMessage{
		M_classID: TL_CLASS_receivedNotifyMessage,
	}
}

func (t *TL_receivedNotifyMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_receivedNotifyMessage))
	ec.Int(t.Get_id())
	ec.Int(t.Get_flags())

	return ec.GetBuffer()
}

func (t *TL_receivedNotifyMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_flags = dc.Int()

	return dc.err
}

func (t *TL_receivedNotifyMessage) String() string {
	return fmt.Sprintf("- receivedNotifyMessage#a384b779\n-- id : %v\n-- flags : %v\n", t.M_id, t.M_flags)
}

// chatInviteEmpty#69df3769
type TL_chatInviteEmpty struct {
	M_classID int32
}

func (t *TL_chatInviteEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_chatInviteEmpty() *TL_chatInviteEmpty {
	return &TL_chatInviteEmpty{
		M_classID: TL_CLASS_chatInviteEmpty,
	}
}

func (t *TL_chatInviteEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatInviteEmpty))

	return ec.GetBuffer()
}

func (t *TL_chatInviteEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_chatInviteEmpty) String() string {
	return fmt.Sprintf("- chatInviteEmpty#69df3769\n")
}

// chatInviteExported#fc2e05bc
type TL_chatInviteExported struct {
	M_classID int32
	M_link    string
}

func (t *TL_chatInviteExported) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatInviteExported) Set_link(M_link string) {
	t.M_link = M_link
}

func (t *TL_chatInviteExported) Get_link() string {
	return t.M_link
}

func New_TL_chatInviteExported() *TL_chatInviteExported {
	return &TL_chatInviteExported{
		M_classID: TL_CLASS_chatInviteExported,
	}
}

func (t *TL_chatInviteExported) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatInviteExported))
	ec.String(t.Get_link())

	return ec.GetBuffer()
}

func (t *TL_chatInviteExported) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_link = dc.String()

	return dc.err
}

func (t *TL_chatInviteExported) String() string {
	return fmt.Sprintf("- chatInviteExported#fc2e05bc\n-- link : %v\n", t.M_link)
}

// chatInviteAlready#5a686d7c
type TL_chatInviteAlready struct {
	M_classID int32
	M_chat    TLObject
}

func (t *TL_chatInviteAlready) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatInviteAlready) Set_chat(M_chat TLObject) {
	t.M_chat = M_chat
}

func (t *TL_chatInviteAlready) Get_chat() TLObject {
	return t.M_chat
}

func New_TL_chatInviteAlready() *TL_chatInviteAlready {
	return &TL_chatInviteAlready{
		M_classID: TL_CLASS_chatInviteAlready,
	}
}

func (t *TL_chatInviteAlready) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatInviteAlready))
	ec.TLObject(t.Get_chat())

	return ec.GetBuffer()
}

func (t *TL_chatInviteAlready) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat = dc.TLObject()

	return dc.err
}

func (t *TL_chatInviteAlready) String() string {
	return fmt.Sprintf("- chatInviteAlready#5a686d7c\n-- chat : %v\n", t.M_chat)
}

// chatInvite#db74f558
type TL_chatInvite struct {
	M_classID            int32
	M_flags              TLObject
	M_channel            TLObject
	M_broadcast          TLObject
	M_public             TLObject
	M_megagroup          TLObject
	M_title              string
	M_photo              TLObject
	M_participants_count int32
	M_participants       []TLObject
}

func (t *TL_chatInvite) ClassID() int32 {
	return t.M_classID
}

func (t *TL_chatInvite) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_chatInvite) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_chatInvite) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_chatInvite) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_chatInvite) Set_broadcast(M_broadcast TLObject) {
	t.M_broadcast = M_broadcast
}

func (t *TL_chatInvite) Get_broadcast() TLObject {
	return t.M_broadcast
}

func (t *TL_chatInvite) Set_public(M_public TLObject) {
	t.M_public = M_public
}

func (t *TL_chatInvite) Get_public() TLObject {
	return t.M_public
}

func (t *TL_chatInvite) Set_megagroup(M_megagroup TLObject) {
	t.M_megagroup = M_megagroup
}

func (t *TL_chatInvite) Get_megagroup() TLObject {
	return t.M_megagroup
}

func (t *TL_chatInvite) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_chatInvite) Get_title() string {
	return t.M_title
}

func (t *TL_chatInvite) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_chatInvite) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_chatInvite) Set_participants_count(M_participants_count int32) {
	t.M_participants_count = M_participants_count
}

func (t *TL_chatInvite) Get_participants_count() int32 {
	return t.M_participants_count
}

func (t *TL_chatInvite) Set_participants(M_participants []TLObject) {
	t.M_participants = M_participants
}

func (t *TL_chatInvite) Get_participants() []TLObject {
	return t.M_participants
}

func New_TL_chatInvite() *TL_chatInvite {
	return &TL_chatInvite{
		M_classID: TL_CLASS_chatInvite,
	}
}

func (t *TL_chatInvite) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_chatInvite))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_broadcast())
	ec.TLObject(t.Get_public())
	ec.TLObject(t.Get_megagroup())
	ec.String(t.Get_title())
	ec.TLObject(t.Get_photo())
	ec.Int(t.Get_participants_count())
	ec.Vector(t.Get_participants())

	return ec.GetBuffer()
}

func (t *TL_chatInvite) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_broadcast = dc.TLObject()
	t.M_public = dc.TLObject()
	t.M_megagroup = dc.TLObject()
	t.M_title = dc.String()
	t.M_photo = dc.TLObject()
	t.M_participants_count = dc.Int()
	t.M_participants = dc.Vector()

	return dc.err
}

func (t *TL_chatInvite) String() string {
	return fmt.Sprintf("- chatInvite#db74f558\n-- flags : %v\n-- channel : %v\n-- broadcast : %v\n-- public : %v\n-- megagroup : %v\n-- title : %v\n-- photo : %v\n-- participants_count : %v\n-- participants : %v\n", t.M_flags, t.M_channel, t.M_broadcast, t.M_public, t.M_megagroup, t.M_title, t.M_photo, t.M_participants_count, t.M_participants)
}

// inputStickerSetEmpty#ffb62b95
type TL_inputStickerSetEmpty struct {
	M_classID int32
}

func (t *TL_inputStickerSetEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputStickerSetEmpty() *TL_inputStickerSetEmpty {
	return &TL_inputStickerSetEmpty{
		M_classID: TL_CLASS_inputStickerSetEmpty,
	}
}

func (t *TL_inputStickerSetEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputStickerSetEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputStickerSetEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputStickerSetEmpty) String() string {
	return fmt.Sprintf("- inputStickerSetEmpty#ffb62b95\n")
}

// inputStickerSetID#9de7a269
type TL_inputStickerSetID struct {
	M_classID     int32
	M_id          int64
	M_access_hash int64
}

func (t *TL_inputStickerSetID) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputStickerSetID) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputStickerSetID) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputStickerSetID) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputStickerSetID) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputStickerSetID() *TL_inputStickerSetID {
	return &TL_inputStickerSetID{
		M_classID: TL_CLASS_inputStickerSetID,
	}
}

func (t *TL_inputStickerSetID) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputStickerSetID))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputStickerSetID) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputStickerSetID) String() string {
	return fmt.Sprintf("- inputStickerSetID#9de7a269\n-- id : %v\n-- access_hash : %v\n", t.M_id, t.M_access_hash)
}

// inputStickerSetShortName#861cc8a0
type TL_inputStickerSetShortName struct {
	M_classID    int32
	M_short_name string
}

func (t *TL_inputStickerSetShortName) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputStickerSetShortName) Set_short_name(M_short_name string) {
	t.M_short_name = M_short_name
}

func (t *TL_inputStickerSetShortName) Get_short_name() string {
	return t.M_short_name
}

func New_TL_inputStickerSetShortName() *TL_inputStickerSetShortName {
	return &TL_inputStickerSetShortName{
		M_classID: TL_CLASS_inputStickerSetShortName,
	}
}

func (t *TL_inputStickerSetShortName) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputStickerSetShortName))
	ec.String(t.Get_short_name())

	return ec.GetBuffer()
}

func (t *TL_inputStickerSetShortName) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_short_name = dc.String()

	return dc.err
}

func (t *TL_inputStickerSetShortName) String() string {
	return fmt.Sprintf("- inputStickerSetShortName#861cc8a0\n-- short_name : %v\n", t.M_short_name)
}

// stickerSet#cd303b41
type TL_stickerSet struct {
	M_classID     int32
	M_flags       TLObject
	M_installed   TLObject
	M_archived    TLObject
	M_official    TLObject
	M_masks       TLObject
	M_id          int64
	M_access_hash int64
	M_title       string
	M_short_name  string
	M_count       int32
	M_hash        int32
}

func (t *TL_stickerSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_stickerSet) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_stickerSet) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_stickerSet) Set_installed(M_installed TLObject) {
	t.M_installed = M_installed
}

func (t *TL_stickerSet) Get_installed() TLObject {
	return t.M_installed
}

func (t *TL_stickerSet) Set_archived(M_archived TLObject) {
	t.M_archived = M_archived
}

func (t *TL_stickerSet) Get_archived() TLObject {
	return t.M_archived
}

func (t *TL_stickerSet) Set_official(M_official TLObject) {
	t.M_official = M_official
}

func (t *TL_stickerSet) Get_official() TLObject {
	return t.M_official
}

func (t *TL_stickerSet) Set_masks(M_masks TLObject) {
	t.M_masks = M_masks
}

func (t *TL_stickerSet) Get_masks() TLObject {
	return t.M_masks
}

func (t *TL_stickerSet) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_stickerSet) Get_id() int64 {
	return t.M_id
}

func (t *TL_stickerSet) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_stickerSet) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_stickerSet) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_stickerSet) Get_title() string {
	return t.M_title
}

func (t *TL_stickerSet) Set_short_name(M_short_name string) {
	t.M_short_name = M_short_name
}

func (t *TL_stickerSet) Get_short_name() string {
	return t.M_short_name
}

func (t *TL_stickerSet) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_stickerSet) Get_count() int32 {
	return t.M_count
}

func (t *TL_stickerSet) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_stickerSet) Get_hash() int32 {
	return t.M_hash
}

func New_TL_stickerSet() *TL_stickerSet {
	return &TL_stickerSet{
		M_classID: TL_CLASS_stickerSet,
	}
}

func (t *TL_stickerSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_stickerSet))
	ec.TLObject(t.Get_installed())
	ec.TLObject(t.Get_archived())
	ec.TLObject(t.Get_official())
	ec.TLObject(t.Get_masks())
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.String(t.Get_title())
	ec.String(t.Get_short_name())
	ec.Int(t.Get_count())
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_stickerSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_installed = dc.TLObject()
	t.M_archived = dc.TLObject()
	t.M_official = dc.TLObject()
	t.M_masks = dc.TLObject()
	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_title = dc.String()
	t.M_short_name = dc.String()
	t.M_count = dc.Int()
	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_stickerSet) String() string {
	return fmt.Sprintf("- stickerSet#cd303b41\n-- flags : %v\n-- installed : %v\n-- archived : %v\n-- official : %v\n-- masks : %v\n-- id : %v\n-- access_hash : %v\n-- title : %v\n-- short_name : %v\n-- count : %v\n-- hash : %v\n", t.M_flags, t.M_installed, t.M_archived, t.M_official, t.M_masks, t.M_id, t.M_access_hash, t.M_title, t.M_short_name, t.M_count, t.M_hash)
}

// messages_stickerSet#b60a24a6
type TL_messages_stickerSet struct {
	M_classID   int32
	M_set       TLObject
	M_packs     []TLObject
	M_documents []TLObject
}

func (t *TL_messages_stickerSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_stickerSet) Set_set(M_set TLObject) {
	t.M_set = M_set
}

func (t *TL_messages_stickerSet) Get_set() TLObject {
	return t.M_set
}

func (t *TL_messages_stickerSet) Set_packs(M_packs []TLObject) {
	t.M_packs = M_packs
}

func (t *TL_messages_stickerSet) Get_packs() []TLObject {
	return t.M_packs
}

func (t *TL_messages_stickerSet) Set_documents(M_documents []TLObject) {
	t.M_documents = M_documents
}

func (t *TL_messages_stickerSet) Get_documents() []TLObject {
	return t.M_documents
}

func New_TL_messages_stickerSet() *TL_messages_stickerSet {
	return &TL_messages_stickerSet{
		M_classID: TL_CLASS_messages_stickerSet,
	}
}

func (t *TL_messages_stickerSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_stickerSet))
	ec.TLObject(t.Get_set())
	ec.Vector(t.Get_packs())
	ec.Vector(t.Get_documents())

	return ec.GetBuffer()
}

func (t *TL_messages_stickerSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_set = dc.TLObject()
	t.M_packs = dc.Vector()
	t.M_documents = dc.Vector()

	return dc.err
}

func (t *TL_messages_stickerSet) String() string {
	return fmt.Sprintf("- messages_stickerSet#b60a24a6\n-- set : %v\n-- packs : %v\n-- documents : %v\n", t.M_set, t.M_packs, t.M_documents)
}

// botCommand#c27ac8c7
type TL_botCommand struct {
	M_classID     int32
	M_command     string
	M_description string
}

func (t *TL_botCommand) ClassID() int32 {
	return t.M_classID
}

func (t *TL_botCommand) Set_command(M_command string) {
	t.M_command = M_command
}

func (t *TL_botCommand) Get_command() string {
	return t.M_command
}

func (t *TL_botCommand) Set_description(M_description string) {
	t.M_description = M_description
}

func (t *TL_botCommand) Get_description() string {
	return t.M_description
}

func New_TL_botCommand() *TL_botCommand {
	return &TL_botCommand{
		M_classID: TL_CLASS_botCommand,
	}
}

func (t *TL_botCommand) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_botCommand))
	ec.String(t.Get_command())
	ec.String(t.Get_description())

	return ec.GetBuffer()
}

func (t *TL_botCommand) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_command = dc.String()
	t.M_description = dc.String()

	return dc.err
}

func (t *TL_botCommand) String() string {
	return fmt.Sprintf("- botCommand#c27ac8c7\n-- command : %v\n-- description : %v\n", t.M_command, t.M_description)
}

// botInfo#98e81d3a
type TL_botInfo struct {
	M_classID     int32
	M_user_id     int32
	M_description string
	M_commands    []TLObject
}

func (t *TL_botInfo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_botInfo) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_botInfo) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_botInfo) Set_description(M_description string) {
	t.M_description = M_description
}

func (t *TL_botInfo) Get_description() string {
	return t.M_description
}

func (t *TL_botInfo) Set_commands(M_commands []TLObject) {
	t.M_commands = M_commands
}

func (t *TL_botInfo) Get_commands() []TLObject {
	return t.M_commands
}

func New_TL_botInfo() *TL_botInfo {
	return &TL_botInfo{
		M_classID: TL_CLASS_botInfo,
	}
}

func (t *TL_botInfo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_botInfo))
	ec.Int(t.Get_user_id())
	ec.String(t.Get_description())
	ec.Vector(t.Get_commands())

	return ec.GetBuffer()
}

func (t *TL_botInfo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_description = dc.String()
	t.M_commands = dc.Vector()

	return dc.err
}

func (t *TL_botInfo) String() string {
	return fmt.Sprintf("- botInfo#98e81d3a\n-- user_id : %v\n-- description : %v\n-- commands : %v\n", t.M_user_id, t.M_description, t.M_commands)
}

// keyboardButton#a2fa4880
type TL_keyboardButton struct {
	M_classID int32
	M_text    string
}

func (t *TL_keyboardButton) ClassID() int32 {
	return t.M_classID
}

func (t *TL_keyboardButton) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_keyboardButton) Get_text() string {
	return t.M_text
}

func New_TL_keyboardButton() *TL_keyboardButton {
	return &TL_keyboardButton{
		M_classID: TL_CLASS_keyboardButton,
	}
}

func (t *TL_keyboardButton) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_keyboardButton))
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_keyboardButton) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()

	return dc.err
}

func (t *TL_keyboardButton) String() string {
	return fmt.Sprintf("- keyboardButton#a2fa4880\n-- text : %v\n", t.M_text)
}

// keyboardButtonUrl#258aff05
type TL_keyboardButtonUrl struct {
	M_classID int32
	M_text    string
	M_url     string
}

func (t *TL_keyboardButtonUrl) ClassID() int32 {
	return t.M_classID
}

func (t *TL_keyboardButtonUrl) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_keyboardButtonUrl) Get_text() string {
	return t.M_text
}

func (t *TL_keyboardButtonUrl) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_keyboardButtonUrl) Get_url() string {
	return t.M_url
}

func New_TL_keyboardButtonUrl() *TL_keyboardButtonUrl {
	return &TL_keyboardButtonUrl{
		M_classID: TL_CLASS_keyboardButtonUrl,
	}
}

func (t *TL_keyboardButtonUrl) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_keyboardButtonUrl))
	ec.String(t.Get_text())
	ec.String(t.Get_url())

	return ec.GetBuffer()
}

func (t *TL_keyboardButtonUrl) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()
	t.M_url = dc.String()

	return dc.err
}

func (t *TL_keyboardButtonUrl) String() string {
	return fmt.Sprintf("- keyboardButtonUrl#258aff05\n-- text : %v\n-- url : %v\n", t.M_text, t.M_url)
}

// keyboardButtonCallback#683a5e46
type TL_keyboardButtonCallback struct {
	M_classID int32
	M_text    string
	M_data    TLObject
}

func (t *TL_keyboardButtonCallback) ClassID() int32 {
	return t.M_classID
}

func (t *TL_keyboardButtonCallback) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_keyboardButtonCallback) Get_text() string {
	return t.M_text
}

func (t *TL_keyboardButtonCallback) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_keyboardButtonCallback) Get_data() TLObject {
	return t.M_data
}

func New_TL_keyboardButtonCallback() *TL_keyboardButtonCallback {
	return &TL_keyboardButtonCallback{
		M_classID: TL_CLASS_keyboardButtonCallback,
	}
}

func (t *TL_keyboardButtonCallback) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_keyboardButtonCallback))
	ec.String(t.Get_text())
	ec.TLObject(t.Get_data())

	return ec.GetBuffer()
}

func (t *TL_keyboardButtonCallback) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()
	t.M_data = dc.TLObject()

	return dc.err
}

func (t *TL_keyboardButtonCallback) String() string {
	return fmt.Sprintf("- keyboardButtonCallback#683a5e46\n-- text : %v\n-- data : %v\n", t.M_text, t.M_data)
}

// keyboardButtonRequestPhone#b16a6c29
type TL_keyboardButtonRequestPhone struct {
	M_classID int32
	M_text    string
}

func (t *TL_keyboardButtonRequestPhone) ClassID() int32 {
	return t.M_classID
}

func (t *TL_keyboardButtonRequestPhone) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_keyboardButtonRequestPhone) Get_text() string {
	return t.M_text
}

func New_TL_keyboardButtonRequestPhone() *TL_keyboardButtonRequestPhone {
	return &TL_keyboardButtonRequestPhone{
		M_classID: TL_CLASS_keyboardButtonRequestPhone,
	}
}

func (t *TL_keyboardButtonRequestPhone) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_keyboardButtonRequestPhone))
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_keyboardButtonRequestPhone) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()

	return dc.err
}

func (t *TL_keyboardButtonRequestPhone) String() string {
	return fmt.Sprintf("- keyboardButtonRequestPhone#b16a6c29\n-- text : %v\n", t.M_text)
}

// keyboardButtonRequestGeoLocation#fc796b3f
type TL_keyboardButtonRequestGeoLocation struct {
	M_classID int32
	M_text    string
}

func (t *TL_keyboardButtonRequestGeoLocation) ClassID() int32 {
	return t.M_classID
}

func (t *TL_keyboardButtonRequestGeoLocation) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_keyboardButtonRequestGeoLocation) Get_text() string {
	return t.M_text
}

func New_TL_keyboardButtonRequestGeoLocation() *TL_keyboardButtonRequestGeoLocation {
	return &TL_keyboardButtonRequestGeoLocation{
		M_classID: TL_CLASS_keyboardButtonRequestGeoLocation,
	}
}

func (t *TL_keyboardButtonRequestGeoLocation) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_keyboardButtonRequestGeoLocation))
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_keyboardButtonRequestGeoLocation) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()

	return dc.err
}

func (t *TL_keyboardButtonRequestGeoLocation) String() string {
	return fmt.Sprintf("- keyboardButtonRequestGeoLocation#fc796b3f\n-- text : %v\n", t.M_text)
}

// keyboardButtonSwitchInline#568a748
type TL_keyboardButtonSwitchInline struct {
	M_classID   int32
	M_flags     TLObject
	M_same_peer TLObject
	M_text      string
	M_query     string
}

func (t *TL_keyboardButtonSwitchInline) ClassID() int32 {
	return t.M_classID
}

func (t *TL_keyboardButtonSwitchInline) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_keyboardButtonSwitchInline) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_keyboardButtonSwitchInline) Set_same_peer(M_same_peer TLObject) {
	t.M_same_peer = M_same_peer
}

func (t *TL_keyboardButtonSwitchInline) Get_same_peer() TLObject {
	return t.M_same_peer
}

func (t *TL_keyboardButtonSwitchInline) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_keyboardButtonSwitchInline) Get_text() string {
	return t.M_text
}

func (t *TL_keyboardButtonSwitchInline) Set_query(M_query string) {
	t.M_query = M_query
}

func (t *TL_keyboardButtonSwitchInline) Get_query() string {
	return t.M_query
}

func New_TL_keyboardButtonSwitchInline() *TL_keyboardButtonSwitchInline {
	return &TL_keyboardButtonSwitchInline{
		M_classID: TL_CLASS_keyboardButtonSwitchInline,
	}
}

func (t *TL_keyboardButtonSwitchInline) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_keyboardButtonSwitchInline))
	ec.TLObject(t.Get_same_peer())
	ec.String(t.Get_text())
	ec.String(t.Get_query())

	return ec.GetBuffer()
}

func (t *TL_keyboardButtonSwitchInline) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_same_peer = dc.TLObject()
	t.M_text = dc.String()
	t.M_query = dc.String()

	return dc.err
}

func (t *TL_keyboardButtonSwitchInline) String() string {
	return fmt.Sprintf("- keyboardButtonSwitchInline#568a748\n-- flags : %v\n-- same_peer : %v\n-- text : %v\n-- query : %v\n", t.M_flags, t.M_same_peer, t.M_text, t.M_query)
}

// keyboardButtonGame#50f41ccf
type TL_keyboardButtonGame struct {
	M_classID int32
	M_text    string
}

func (t *TL_keyboardButtonGame) ClassID() int32 {
	return t.M_classID
}

func (t *TL_keyboardButtonGame) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_keyboardButtonGame) Get_text() string {
	return t.M_text
}

func New_TL_keyboardButtonGame() *TL_keyboardButtonGame {
	return &TL_keyboardButtonGame{
		M_classID: TL_CLASS_keyboardButtonGame,
	}
}

func (t *TL_keyboardButtonGame) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_keyboardButtonGame))
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_keyboardButtonGame) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()

	return dc.err
}

func (t *TL_keyboardButtonGame) String() string {
	return fmt.Sprintf("- keyboardButtonGame#50f41ccf\n-- text : %v\n", t.M_text)
}

// keyboardButtonBuy#afd93fbb
type TL_keyboardButtonBuy struct {
	M_classID int32
	M_text    string
}

func (t *TL_keyboardButtonBuy) ClassID() int32 {
	return t.M_classID
}

func (t *TL_keyboardButtonBuy) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_keyboardButtonBuy) Get_text() string {
	return t.M_text
}

func New_TL_keyboardButtonBuy() *TL_keyboardButtonBuy {
	return &TL_keyboardButtonBuy{
		M_classID: TL_CLASS_keyboardButtonBuy,
	}
}

func (t *TL_keyboardButtonBuy) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_keyboardButtonBuy))
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_keyboardButtonBuy) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()

	return dc.err
}

func (t *TL_keyboardButtonBuy) String() string {
	return fmt.Sprintf("- keyboardButtonBuy#afd93fbb\n-- text : %v\n", t.M_text)
}

// keyboardButtonRow#77608b83
type TL_keyboardButtonRow struct {
	M_classID int32
	M_buttons []TLObject
}

func (t *TL_keyboardButtonRow) ClassID() int32 {
	return t.M_classID
}

func (t *TL_keyboardButtonRow) Set_buttons(M_buttons []TLObject) {
	t.M_buttons = M_buttons
}

func (t *TL_keyboardButtonRow) Get_buttons() []TLObject {
	return t.M_buttons
}

func New_TL_keyboardButtonRow() *TL_keyboardButtonRow {
	return &TL_keyboardButtonRow{
		M_classID: TL_CLASS_keyboardButtonRow,
	}
}

func (t *TL_keyboardButtonRow) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_keyboardButtonRow))
	ec.Vector(t.Get_buttons())

	return ec.GetBuffer()
}

func (t *TL_keyboardButtonRow) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_buttons = dc.Vector()

	return dc.err
}

func (t *TL_keyboardButtonRow) String() string {
	return fmt.Sprintf("- keyboardButtonRow#77608b83\n-- buttons : %v\n", t.M_buttons)
}

// replyKeyboardHide#a03e5b85
type TL_replyKeyboardHide struct {
	M_classID   int32
	M_flags     TLObject
	M_selective TLObject
}

func (t *TL_replyKeyboardHide) ClassID() int32 {
	return t.M_classID
}

func (t *TL_replyKeyboardHide) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_replyKeyboardHide) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_replyKeyboardHide) Set_selective(M_selective TLObject) {
	t.M_selective = M_selective
}

func (t *TL_replyKeyboardHide) Get_selective() TLObject {
	return t.M_selective
}

func New_TL_replyKeyboardHide() *TL_replyKeyboardHide {
	return &TL_replyKeyboardHide{
		M_classID: TL_CLASS_replyKeyboardHide,
	}
}

func (t *TL_replyKeyboardHide) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_replyKeyboardHide))
	ec.TLObject(t.Get_selective())

	return ec.GetBuffer()
}

func (t *TL_replyKeyboardHide) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_selective = dc.TLObject()

	return dc.err
}

func (t *TL_replyKeyboardHide) String() string {
	return fmt.Sprintf("- replyKeyboardHide#a03e5b85\n-- flags : %v\n-- selective : %v\n", t.M_flags, t.M_selective)
}

// replyKeyboardForceReply#f4108aa0
type TL_replyKeyboardForceReply struct {
	M_classID    int32
	M_flags      TLObject
	M_single_use TLObject
	M_selective  TLObject
}

func (t *TL_replyKeyboardForceReply) ClassID() int32 {
	return t.M_classID
}

func (t *TL_replyKeyboardForceReply) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_replyKeyboardForceReply) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_replyKeyboardForceReply) Set_single_use(M_single_use TLObject) {
	t.M_single_use = M_single_use
}

func (t *TL_replyKeyboardForceReply) Get_single_use() TLObject {
	return t.M_single_use
}

func (t *TL_replyKeyboardForceReply) Set_selective(M_selective TLObject) {
	t.M_selective = M_selective
}

func (t *TL_replyKeyboardForceReply) Get_selective() TLObject {
	return t.M_selective
}

func New_TL_replyKeyboardForceReply() *TL_replyKeyboardForceReply {
	return &TL_replyKeyboardForceReply{
		M_classID: TL_CLASS_replyKeyboardForceReply,
	}
}

func (t *TL_replyKeyboardForceReply) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_replyKeyboardForceReply))
	ec.TLObject(t.Get_single_use())
	ec.TLObject(t.Get_selective())

	return ec.GetBuffer()
}

func (t *TL_replyKeyboardForceReply) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_single_use = dc.TLObject()
	t.M_selective = dc.TLObject()

	return dc.err
}

func (t *TL_replyKeyboardForceReply) String() string {
	return fmt.Sprintf("- replyKeyboardForceReply#f4108aa0\n-- flags : %v\n-- single_use : %v\n-- selective : %v\n", t.M_flags, t.M_single_use, t.M_selective)
}

// replyKeyboardMarkup#3502758c
type TL_replyKeyboardMarkup struct {
	M_classID    int32
	M_flags      TLObject
	M_resize     TLObject
	M_single_use TLObject
	M_selective  TLObject
	M_rows       []TLObject
}

func (t *TL_replyKeyboardMarkup) ClassID() int32 {
	return t.M_classID
}

func (t *TL_replyKeyboardMarkup) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_replyKeyboardMarkup) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_replyKeyboardMarkup) Set_resize(M_resize TLObject) {
	t.M_resize = M_resize
}

func (t *TL_replyKeyboardMarkup) Get_resize() TLObject {
	return t.M_resize
}

func (t *TL_replyKeyboardMarkup) Set_single_use(M_single_use TLObject) {
	t.M_single_use = M_single_use
}

func (t *TL_replyKeyboardMarkup) Get_single_use() TLObject {
	return t.M_single_use
}

func (t *TL_replyKeyboardMarkup) Set_selective(M_selective TLObject) {
	t.M_selective = M_selective
}

func (t *TL_replyKeyboardMarkup) Get_selective() TLObject {
	return t.M_selective
}

func (t *TL_replyKeyboardMarkup) Set_rows(M_rows []TLObject) {
	t.M_rows = M_rows
}

func (t *TL_replyKeyboardMarkup) Get_rows() []TLObject {
	return t.M_rows
}

func New_TL_replyKeyboardMarkup() *TL_replyKeyboardMarkup {
	return &TL_replyKeyboardMarkup{
		M_classID: TL_CLASS_replyKeyboardMarkup,
	}
}

func (t *TL_replyKeyboardMarkup) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_replyKeyboardMarkup))
	ec.TLObject(t.Get_resize())
	ec.TLObject(t.Get_single_use())
	ec.TLObject(t.Get_selective())
	ec.Vector(t.Get_rows())

	return ec.GetBuffer()
}

func (t *TL_replyKeyboardMarkup) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_resize = dc.TLObject()
	t.M_single_use = dc.TLObject()
	t.M_selective = dc.TLObject()
	t.M_rows = dc.Vector()

	return dc.err
}

func (t *TL_replyKeyboardMarkup) String() string {
	return fmt.Sprintf("- replyKeyboardMarkup#3502758c\n-- flags : %v\n-- resize : %v\n-- single_use : %v\n-- selective : %v\n-- rows : %v\n", t.M_flags, t.M_resize, t.M_single_use, t.M_selective, t.M_rows)
}

// replyInlineMarkup#48a30254
type TL_replyInlineMarkup struct {
	M_classID int32
	M_rows    []TLObject
}

func (t *TL_replyInlineMarkup) ClassID() int32 {
	return t.M_classID
}

func (t *TL_replyInlineMarkup) Set_rows(M_rows []TLObject) {
	t.M_rows = M_rows
}

func (t *TL_replyInlineMarkup) Get_rows() []TLObject {
	return t.M_rows
}

func New_TL_replyInlineMarkup() *TL_replyInlineMarkup {
	return &TL_replyInlineMarkup{
		M_classID: TL_CLASS_replyInlineMarkup,
	}
}

func (t *TL_replyInlineMarkup) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_replyInlineMarkup))
	ec.Vector(t.Get_rows())

	return ec.GetBuffer()
}

func (t *TL_replyInlineMarkup) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_rows = dc.Vector()

	return dc.err
}

func (t *TL_replyInlineMarkup) String() string {
	return fmt.Sprintf("- replyInlineMarkup#48a30254\n-- rows : %v\n", t.M_rows)
}

// messageEntityUnknown#bb92ba95
type TL_messageEntityUnknown struct {
	M_classID int32
	M_offset  int32
	M_length  int32
}

func (t *TL_messageEntityUnknown) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityUnknown) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityUnknown) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityUnknown) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityUnknown) Get_length() int32 {
	return t.M_length
}

func New_TL_messageEntityUnknown() *TL_messageEntityUnknown {
	return &TL_messageEntityUnknown{
		M_classID: TL_CLASS_messageEntityUnknown,
	}
}

func (t *TL_messageEntityUnknown) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityUnknown))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_messageEntityUnknown) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_messageEntityUnknown) String() string {
	return fmt.Sprintf("- messageEntityUnknown#bb92ba95\n-- offset : %v\n-- length : %v\n", t.M_offset, t.M_length)
}

// messageEntityMention#fa04579d
type TL_messageEntityMention struct {
	M_classID int32
	M_offset  int32
	M_length  int32
}

func (t *TL_messageEntityMention) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityMention) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityMention) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityMention) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityMention) Get_length() int32 {
	return t.M_length
}

func New_TL_messageEntityMention() *TL_messageEntityMention {
	return &TL_messageEntityMention{
		M_classID: TL_CLASS_messageEntityMention,
	}
}

func (t *TL_messageEntityMention) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityMention))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_messageEntityMention) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_messageEntityMention) String() string {
	return fmt.Sprintf("- messageEntityMention#fa04579d\n-- offset : %v\n-- length : %v\n", t.M_offset, t.M_length)
}

// messageEntityHashtag#6f635b0d
type TL_messageEntityHashtag struct {
	M_classID int32
	M_offset  int32
	M_length  int32
}

func (t *TL_messageEntityHashtag) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityHashtag) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityHashtag) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityHashtag) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityHashtag) Get_length() int32 {
	return t.M_length
}

func New_TL_messageEntityHashtag() *TL_messageEntityHashtag {
	return &TL_messageEntityHashtag{
		M_classID: TL_CLASS_messageEntityHashtag,
	}
}

func (t *TL_messageEntityHashtag) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityHashtag))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_messageEntityHashtag) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_messageEntityHashtag) String() string {
	return fmt.Sprintf("- messageEntityHashtag#6f635b0d\n-- offset : %v\n-- length : %v\n", t.M_offset, t.M_length)
}

// messageEntityBotCommand#6cef8ac7
type TL_messageEntityBotCommand struct {
	M_classID int32
	M_offset  int32
	M_length  int32
}

func (t *TL_messageEntityBotCommand) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityBotCommand) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityBotCommand) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityBotCommand) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityBotCommand) Get_length() int32 {
	return t.M_length
}

func New_TL_messageEntityBotCommand() *TL_messageEntityBotCommand {
	return &TL_messageEntityBotCommand{
		M_classID: TL_CLASS_messageEntityBotCommand,
	}
}

func (t *TL_messageEntityBotCommand) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityBotCommand))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_messageEntityBotCommand) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_messageEntityBotCommand) String() string {
	return fmt.Sprintf("- messageEntityBotCommand#6cef8ac7\n-- offset : %v\n-- length : %v\n", t.M_offset, t.M_length)
}

// messageEntityUrl#6ed02538
type TL_messageEntityUrl struct {
	M_classID int32
	M_offset  int32
	M_length  int32
}

func (t *TL_messageEntityUrl) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityUrl) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityUrl) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityUrl) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityUrl) Get_length() int32 {
	return t.M_length
}

func New_TL_messageEntityUrl() *TL_messageEntityUrl {
	return &TL_messageEntityUrl{
		M_classID: TL_CLASS_messageEntityUrl,
	}
}

func (t *TL_messageEntityUrl) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityUrl))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_messageEntityUrl) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_messageEntityUrl) String() string {
	return fmt.Sprintf("- messageEntityUrl#6ed02538\n-- offset : %v\n-- length : %v\n", t.M_offset, t.M_length)
}

// messageEntityEmail#64e475c2
type TL_messageEntityEmail struct {
	M_classID int32
	M_offset  int32
	M_length  int32
}

func (t *TL_messageEntityEmail) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityEmail) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityEmail) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityEmail) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityEmail) Get_length() int32 {
	return t.M_length
}

func New_TL_messageEntityEmail() *TL_messageEntityEmail {
	return &TL_messageEntityEmail{
		M_classID: TL_CLASS_messageEntityEmail,
	}
}

func (t *TL_messageEntityEmail) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityEmail))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_messageEntityEmail) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_messageEntityEmail) String() string {
	return fmt.Sprintf("- messageEntityEmail#64e475c2\n-- offset : %v\n-- length : %v\n", t.M_offset, t.M_length)
}

// messageEntityBold#bd610bc9
type TL_messageEntityBold struct {
	M_classID int32
	M_offset  int32
	M_length  int32
}

func (t *TL_messageEntityBold) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityBold) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityBold) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityBold) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityBold) Get_length() int32 {
	return t.M_length
}

func New_TL_messageEntityBold() *TL_messageEntityBold {
	return &TL_messageEntityBold{
		M_classID: TL_CLASS_messageEntityBold,
	}
}

func (t *TL_messageEntityBold) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityBold))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_messageEntityBold) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_messageEntityBold) String() string {
	return fmt.Sprintf("- messageEntityBold#bd610bc9\n-- offset : %v\n-- length : %v\n", t.M_offset, t.M_length)
}

// messageEntityItalic#826f8b60
type TL_messageEntityItalic struct {
	M_classID int32
	M_offset  int32
	M_length  int32
}

func (t *TL_messageEntityItalic) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityItalic) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityItalic) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityItalic) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityItalic) Get_length() int32 {
	return t.M_length
}

func New_TL_messageEntityItalic() *TL_messageEntityItalic {
	return &TL_messageEntityItalic{
		M_classID: TL_CLASS_messageEntityItalic,
	}
}

func (t *TL_messageEntityItalic) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityItalic))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_messageEntityItalic) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_messageEntityItalic) String() string {
	return fmt.Sprintf("- messageEntityItalic#826f8b60\n-- offset : %v\n-- length : %v\n", t.M_offset, t.M_length)
}

// messageEntityCode#28a20571
type TL_messageEntityCode struct {
	M_classID int32
	M_offset  int32
	M_length  int32
}

func (t *TL_messageEntityCode) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityCode) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityCode) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityCode) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityCode) Get_length() int32 {
	return t.M_length
}

func New_TL_messageEntityCode() *TL_messageEntityCode {
	return &TL_messageEntityCode{
		M_classID: TL_CLASS_messageEntityCode,
	}
}

func (t *TL_messageEntityCode) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityCode))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_messageEntityCode) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_messageEntityCode) String() string {
	return fmt.Sprintf("- messageEntityCode#28a20571\n-- offset : %v\n-- length : %v\n", t.M_offset, t.M_length)
}

// messageEntityPre#73924be0
type TL_messageEntityPre struct {
	M_classID  int32
	M_offset   int32
	M_length   int32
	M_language string
}

func (t *TL_messageEntityPre) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityPre) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityPre) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityPre) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityPre) Get_length() int32 {
	return t.M_length
}

func (t *TL_messageEntityPre) Set_language(M_language string) {
	t.M_language = M_language
}

func (t *TL_messageEntityPre) Get_language() string {
	return t.M_language
}

func New_TL_messageEntityPre() *TL_messageEntityPre {
	return &TL_messageEntityPre{
		M_classID: TL_CLASS_messageEntityPre,
	}
}

func (t *TL_messageEntityPre) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityPre))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())
	ec.String(t.Get_language())

	return ec.GetBuffer()
}

func (t *TL_messageEntityPre) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()
	t.M_language = dc.String()

	return dc.err
}

func (t *TL_messageEntityPre) String() string {
	return fmt.Sprintf("- messageEntityPre#73924be0\n-- offset : %v\n-- length : %v\n-- language : %v\n", t.M_offset, t.M_length, t.M_language)
}

// messageEntityTextUrl#76a6d327
type TL_messageEntityTextUrl struct {
	M_classID int32
	M_offset  int32
	M_length  int32
	M_url     string
}

func (t *TL_messageEntityTextUrl) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityTextUrl) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityTextUrl) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityTextUrl) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityTextUrl) Get_length() int32 {
	return t.M_length
}

func (t *TL_messageEntityTextUrl) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_messageEntityTextUrl) Get_url() string {
	return t.M_url
}

func New_TL_messageEntityTextUrl() *TL_messageEntityTextUrl {
	return &TL_messageEntityTextUrl{
		M_classID: TL_CLASS_messageEntityTextUrl,
	}
}

func (t *TL_messageEntityTextUrl) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityTextUrl))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())
	ec.String(t.Get_url())

	return ec.GetBuffer()
}

func (t *TL_messageEntityTextUrl) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()
	t.M_url = dc.String()

	return dc.err
}

func (t *TL_messageEntityTextUrl) String() string {
	return fmt.Sprintf("- messageEntityTextUrl#76a6d327\n-- offset : %v\n-- length : %v\n-- url : %v\n", t.M_offset, t.M_length, t.M_url)
}

// messageEntityMentionName#352dca58
type TL_messageEntityMentionName struct {
	M_classID int32
	M_offset  int32
	M_length  int32
	M_user_id int32
}

func (t *TL_messageEntityMentionName) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageEntityMentionName) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messageEntityMentionName) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_messageEntityMentionName) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_messageEntityMentionName) Get_length() int32 {
	return t.M_length
}

func (t *TL_messageEntityMentionName) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_messageEntityMentionName) Get_user_id() int32 {
	return t.M_user_id
}

func New_TL_messageEntityMentionName() *TL_messageEntityMentionName {
	return &TL_messageEntityMentionName{
		M_classID: TL_CLASS_messageEntityMentionName,
	}
}

func (t *TL_messageEntityMentionName) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageEntityMentionName))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())
	ec.Int(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_messageEntityMentionName) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()
	t.M_user_id = dc.Int()

	return dc.err
}

func (t *TL_messageEntityMentionName) String() string {
	return fmt.Sprintf("- messageEntityMentionName#352dca58\n-- offset : %v\n-- length : %v\n-- user_id : %v\n", t.M_offset, t.M_length, t.M_user_id)
}

// inputMessageEntityMentionName#208e68c9
type TL_inputMessageEntityMentionName struct {
	M_classID int32
	M_offset  int32
	M_length  int32
	M_user_id TLObject
}

func (t *TL_inputMessageEntityMentionName) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputMessageEntityMentionName) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_inputMessageEntityMentionName) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_inputMessageEntityMentionName) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_inputMessageEntityMentionName) Get_length() int32 {
	return t.M_length
}

func (t *TL_inputMessageEntityMentionName) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_inputMessageEntityMentionName) Get_user_id() TLObject {
	return t.M_user_id
}

func New_TL_inputMessageEntityMentionName() *TL_inputMessageEntityMentionName {
	return &TL_inputMessageEntityMentionName{
		M_classID: TL_CLASS_inputMessageEntityMentionName,
	}
}

func (t *TL_inputMessageEntityMentionName) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputMessageEntityMentionName))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_length())
	ec.TLObject(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_inputMessageEntityMentionName) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_length = dc.Int()
	t.M_user_id = dc.TLObject()

	return dc.err
}

func (t *TL_inputMessageEntityMentionName) String() string {
	return fmt.Sprintf("- inputMessageEntityMentionName#208e68c9\n-- offset : %v\n-- length : %v\n-- user_id : %v\n", t.M_offset, t.M_length, t.M_user_id)
}

// inputChannelEmpty#ee8c1e86
type TL_inputChannelEmpty struct {
	M_classID int32
}

func (t *TL_inputChannelEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_inputChannelEmpty() *TL_inputChannelEmpty {
	return &TL_inputChannelEmpty{
		M_classID: TL_CLASS_inputChannelEmpty,
	}
}

func (t *TL_inputChannelEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputChannelEmpty))

	return ec.GetBuffer()
}

func (t *TL_inputChannelEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_inputChannelEmpty) String() string {
	return fmt.Sprintf("- inputChannelEmpty#ee8c1e86\n")
}

// inputChannel#afeb712e
type TL_inputChannel struct {
	M_classID     int32
	M_channel_id  int32
	M_access_hash int64
}

func (t *TL_inputChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputChannel) Set_channel_id(M_channel_id int32) {
	t.M_channel_id = M_channel_id
}

func (t *TL_inputChannel) Get_channel_id() int32 {
	return t.M_channel_id
}

func (t *TL_inputChannel) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputChannel) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputChannel() *TL_inputChannel {
	return &TL_inputChannel{
		M_classID: TL_CLASS_inputChannel,
	}
}

func (t *TL_inputChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputChannel))
	ec.Int(t.Get_channel_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel_id = dc.Int()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputChannel) String() string {
	return fmt.Sprintf("- inputChannel#afeb712e\n-- channel_id : %v\n-- access_hash : %v\n", t.M_channel_id, t.M_access_hash)
}

// contacts_resolvedPeer#7f077ad9
type TL_contacts_resolvedPeer struct {
	M_classID int32
	M_peer    TLObject
	M_chats   []TLObject
	M_users   []TLObject
}

func (t *TL_contacts_resolvedPeer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_resolvedPeer) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_contacts_resolvedPeer) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_contacts_resolvedPeer) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_contacts_resolvedPeer) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_contacts_resolvedPeer) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_contacts_resolvedPeer) Get_users() []TLObject {
	return t.M_users
}

func New_TL_contacts_resolvedPeer() *TL_contacts_resolvedPeer {
	return &TL_contacts_resolvedPeer{
		M_classID: TL_CLASS_contacts_resolvedPeer,
	}
}

func (t *TL_contacts_resolvedPeer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_resolvedPeer))
	ec.TLObject(t.Get_peer())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_contacts_resolvedPeer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_contacts_resolvedPeer) String() string {
	return fmt.Sprintf("- contacts_resolvedPeer#7f077ad9\n-- peer : %v\n-- chats : %v\n-- users : %v\n", t.M_peer, t.M_chats, t.M_users)
}

// messageRange#ae30253
type TL_messageRange struct {
	M_classID int32
	M_min_id  int32
	M_max_id  int32
}

func (t *TL_messageRange) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageRange) Set_min_id(M_min_id int32) {
	t.M_min_id = M_min_id
}

func (t *TL_messageRange) Get_min_id() int32 {
	return t.M_min_id
}

func (t *TL_messageRange) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_messageRange) Get_max_id() int32 {
	return t.M_max_id
}

func New_TL_messageRange() *TL_messageRange {
	return &TL_messageRange{
		M_classID: TL_CLASS_messageRange,
	}
}

func (t *TL_messageRange) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageRange))
	ec.Int(t.Get_min_id())
	ec.Int(t.Get_max_id())

	return ec.GetBuffer()
}

func (t *TL_messageRange) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_min_id = dc.Int()
	t.M_max_id = dc.Int()

	return dc.err
}

func (t *TL_messageRange) String() string {
	return fmt.Sprintf("- messageRange#ae30253\n-- min_id : %v\n-- max_id : %v\n", t.M_min_id, t.M_max_id)
}

// updates_channelDifferenceEmpty#3e11affb
type TL_updates_channelDifferenceEmpty struct {
	M_classID int32
	M_flags   TLObject
	M_final   TLObject
	M_pts     int32
	M_timeout TLObject
}

func (t *TL_updates_channelDifferenceEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_channelDifferenceEmpty) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updates_channelDifferenceEmpty) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updates_channelDifferenceEmpty) Set_final(M_final TLObject) {
	t.M_final = M_final
}

func (t *TL_updates_channelDifferenceEmpty) Get_final() TLObject {
	return t.M_final
}

func (t *TL_updates_channelDifferenceEmpty) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updates_channelDifferenceEmpty) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updates_channelDifferenceEmpty) Set_timeout(M_timeout TLObject) {
	t.M_timeout = M_timeout
}

func (t *TL_updates_channelDifferenceEmpty) Get_timeout() TLObject {
	return t.M_timeout
}

func New_TL_updates_channelDifferenceEmpty() *TL_updates_channelDifferenceEmpty {
	return &TL_updates_channelDifferenceEmpty{
		M_classID: TL_CLASS_updates_channelDifferenceEmpty,
	}
}

func (t *TL_updates_channelDifferenceEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_channelDifferenceEmpty))
	ec.TLObject(t.Get_final())
	ec.Int(t.Get_pts())
	ec.TLObject(t.Get_timeout())

	return ec.GetBuffer()
}

func (t *TL_updates_channelDifferenceEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_final = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_timeout = dc.TLObject()

	return dc.err
}

func (t *TL_updates_channelDifferenceEmpty) String() string {
	return fmt.Sprintf("- updates_channelDifferenceEmpty#3e11affb\n-- flags : %v\n-- final : %v\n-- pts : %v\n-- timeout : %v\n", t.M_flags, t.M_final, t.M_pts, t.M_timeout)
}

// updates_channelDifferenceTooLong#6a9d7b35
type TL_updates_channelDifferenceTooLong struct {
	M_classID               int32
	M_flags                 TLObject
	M_final                 TLObject
	M_pts                   int32
	M_timeout               TLObject
	M_top_message           int32
	M_read_inbox_max_id     int32
	M_read_outbox_max_id    int32
	M_unread_count          int32
	M_unread_mentions_count int32
	M_messages              []TLObject
	M_chats                 []TLObject
	M_users                 []TLObject
}

func (t *TL_updates_channelDifferenceTooLong) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_channelDifferenceTooLong) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updates_channelDifferenceTooLong) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updates_channelDifferenceTooLong) Set_final(M_final TLObject) {
	t.M_final = M_final
}

func (t *TL_updates_channelDifferenceTooLong) Get_final() TLObject {
	return t.M_final
}

func (t *TL_updates_channelDifferenceTooLong) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updates_channelDifferenceTooLong) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updates_channelDifferenceTooLong) Set_timeout(M_timeout TLObject) {
	t.M_timeout = M_timeout
}

func (t *TL_updates_channelDifferenceTooLong) Get_timeout() TLObject {
	return t.M_timeout
}

func (t *TL_updates_channelDifferenceTooLong) Set_top_message(M_top_message int32) {
	t.M_top_message = M_top_message
}

func (t *TL_updates_channelDifferenceTooLong) Get_top_message() int32 {
	return t.M_top_message
}

func (t *TL_updates_channelDifferenceTooLong) Set_read_inbox_max_id(M_read_inbox_max_id int32) {
	t.M_read_inbox_max_id = M_read_inbox_max_id
}

func (t *TL_updates_channelDifferenceTooLong) Get_read_inbox_max_id() int32 {
	return t.M_read_inbox_max_id
}

func (t *TL_updates_channelDifferenceTooLong) Set_read_outbox_max_id(M_read_outbox_max_id int32) {
	t.M_read_outbox_max_id = M_read_outbox_max_id
}

func (t *TL_updates_channelDifferenceTooLong) Get_read_outbox_max_id() int32 {
	return t.M_read_outbox_max_id
}

func (t *TL_updates_channelDifferenceTooLong) Set_unread_count(M_unread_count int32) {
	t.M_unread_count = M_unread_count
}

func (t *TL_updates_channelDifferenceTooLong) Get_unread_count() int32 {
	return t.M_unread_count
}

func (t *TL_updates_channelDifferenceTooLong) Set_unread_mentions_count(M_unread_mentions_count int32) {
	t.M_unread_mentions_count = M_unread_mentions_count
}

func (t *TL_updates_channelDifferenceTooLong) Get_unread_mentions_count() int32 {
	return t.M_unread_mentions_count
}

func (t *TL_updates_channelDifferenceTooLong) Set_messages(M_messages []TLObject) {
	t.M_messages = M_messages
}

func (t *TL_updates_channelDifferenceTooLong) Get_messages() []TLObject {
	return t.M_messages
}

func (t *TL_updates_channelDifferenceTooLong) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_updates_channelDifferenceTooLong) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_updates_channelDifferenceTooLong) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_updates_channelDifferenceTooLong) Get_users() []TLObject {
	return t.M_users
}

func New_TL_updates_channelDifferenceTooLong() *TL_updates_channelDifferenceTooLong {
	return &TL_updates_channelDifferenceTooLong{
		M_classID: TL_CLASS_updates_channelDifferenceTooLong,
	}
}

func (t *TL_updates_channelDifferenceTooLong) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_channelDifferenceTooLong))
	ec.TLObject(t.Get_final())
	ec.Int(t.Get_pts())
	ec.TLObject(t.Get_timeout())
	ec.Int(t.Get_top_message())
	ec.Int(t.Get_read_inbox_max_id())
	ec.Int(t.Get_read_outbox_max_id())
	ec.Int(t.Get_unread_count())
	ec.Int(t.Get_unread_mentions_count())
	ec.Vector(t.Get_messages())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_updates_channelDifferenceTooLong) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_final = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_timeout = dc.TLObject()
	t.M_top_message = dc.Int()
	t.M_read_inbox_max_id = dc.Int()
	t.M_read_outbox_max_id = dc.Int()
	t.M_unread_count = dc.Int()
	t.M_unread_mentions_count = dc.Int()
	t.M_messages = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_updates_channelDifferenceTooLong) String() string {
	return fmt.Sprintf("- updates_channelDifferenceTooLong#6a9d7b35\n-- flags : %v\n-- final : %v\n-- pts : %v\n-- timeout : %v\n-- top_message : %v\n-- read_inbox_max_id : %v\n-- read_outbox_max_id : %v\n-- unread_count : %v\n-- unread_mentions_count : %v\n-- messages : %v\n-- chats : %v\n-- users : %v\n", t.M_flags, t.M_final, t.M_pts, t.M_timeout, t.M_top_message, t.M_read_inbox_max_id, t.M_read_outbox_max_id, t.M_unread_count, t.M_unread_mentions_count, t.M_messages, t.M_chats, t.M_users)
}

// updates_channelDifference#2064674e
type TL_updates_channelDifference struct {
	M_classID       int32
	M_flags         TLObject
	M_final         TLObject
	M_pts           int32
	M_timeout       TLObject
	M_new_messages  []TLObject
	M_other_updates []TLObject
	M_chats         []TLObject
	M_users         []TLObject
}

func (t *TL_updates_channelDifference) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_channelDifference) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updates_channelDifference) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updates_channelDifference) Set_final(M_final TLObject) {
	t.M_final = M_final
}

func (t *TL_updates_channelDifference) Get_final() TLObject {
	return t.M_final
}

func (t *TL_updates_channelDifference) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updates_channelDifference) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updates_channelDifference) Set_timeout(M_timeout TLObject) {
	t.M_timeout = M_timeout
}

func (t *TL_updates_channelDifference) Get_timeout() TLObject {
	return t.M_timeout
}

func (t *TL_updates_channelDifference) Set_new_messages(M_new_messages []TLObject) {
	t.M_new_messages = M_new_messages
}

func (t *TL_updates_channelDifference) Get_new_messages() []TLObject {
	return t.M_new_messages
}

func (t *TL_updates_channelDifference) Set_other_updates(M_other_updates []TLObject) {
	t.M_other_updates = M_other_updates
}

func (t *TL_updates_channelDifference) Get_other_updates() []TLObject {
	return t.M_other_updates
}

func (t *TL_updates_channelDifference) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_updates_channelDifference) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_updates_channelDifference) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_updates_channelDifference) Get_users() []TLObject {
	return t.M_users
}

func New_TL_updates_channelDifference() *TL_updates_channelDifference {
	return &TL_updates_channelDifference{
		M_classID: TL_CLASS_updates_channelDifference,
	}
}

func (t *TL_updates_channelDifference) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_channelDifference))
	ec.TLObject(t.Get_final())
	ec.Int(t.Get_pts())
	ec.TLObject(t.Get_timeout())
	ec.Vector(t.Get_new_messages())
	ec.Vector(t.Get_other_updates())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_updates_channelDifference) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_final = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_timeout = dc.TLObject()
	t.M_new_messages = dc.Vector()
	t.M_other_updates = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_updates_channelDifference) String() string {
	return fmt.Sprintf("- updates_channelDifference#2064674e\n-- flags : %v\n-- final : %v\n-- pts : %v\n-- timeout : %v\n-- new_messages : %v\n-- other_updates : %v\n-- chats : %v\n-- users : %v\n", t.M_flags, t.M_final, t.M_pts, t.M_timeout, t.M_new_messages, t.M_other_updates, t.M_chats, t.M_users)
}

// channelMessagesFilterEmpty#94d42ee7
type TL_channelMessagesFilterEmpty struct {
	M_classID int32
}

func (t *TL_channelMessagesFilterEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_channelMessagesFilterEmpty() *TL_channelMessagesFilterEmpty {
	return &TL_channelMessagesFilterEmpty{
		M_classID: TL_CLASS_channelMessagesFilterEmpty,
	}
}

func (t *TL_channelMessagesFilterEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelMessagesFilterEmpty))

	return ec.GetBuffer()
}

func (t *TL_channelMessagesFilterEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_channelMessagesFilterEmpty) String() string {
	return fmt.Sprintf("- channelMessagesFilterEmpty#94d42ee7\n")
}

// channelMessagesFilter#cd77d957
type TL_channelMessagesFilter struct {
	M_classID              int32
	M_flags                TLObject
	M_exclude_new_messages TLObject
	M_ranges               []TLObject
}

func (t *TL_channelMessagesFilter) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelMessagesFilter) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channelMessagesFilter) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channelMessagesFilter) Set_exclude_new_messages(M_exclude_new_messages TLObject) {
	t.M_exclude_new_messages = M_exclude_new_messages
}

func (t *TL_channelMessagesFilter) Get_exclude_new_messages() TLObject {
	return t.M_exclude_new_messages
}

func (t *TL_channelMessagesFilter) Set_ranges(M_ranges []TLObject) {
	t.M_ranges = M_ranges
}

func (t *TL_channelMessagesFilter) Get_ranges() []TLObject {
	return t.M_ranges
}

func New_TL_channelMessagesFilter() *TL_channelMessagesFilter {
	return &TL_channelMessagesFilter{
		M_classID: TL_CLASS_channelMessagesFilter,
	}
}

func (t *TL_channelMessagesFilter) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelMessagesFilter))
	ec.TLObject(t.Get_exclude_new_messages())
	ec.Vector(t.Get_ranges())

	return ec.GetBuffer()
}

func (t *TL_channelMessagesFilter) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_exclude_new_messages = dc.TLObject()
	t.M_ranges = dc.Vector()

	return dc.err
}

func (t *TL_channelMessagesFilter) String() string {
	return fmt.Sprintf("- channelMessagesFilter#cd77d957\n-- flags : %v\n-- exclude_new_messages : %v\n-- ranges : %v\n", t.M_flags, t.M_exclude_new_messages, t.M_ranges)
}

// channelParticipant#15ebac1d
type TL_channelParticipant struct {
	M_classID int32
	M_user_id int32
	M_date    int32
}

func (t *TL_channelParticipant) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelParticipant) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_channelParticipant) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_channelParticipant) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_channelParticipant) Get_date() int32 {
	return t.M_date
}

func New_TL_channelParticipant() *TL_channelParticipant {
	return &TL_channelParticipant{
		M_classID: TL_CLASS_channelParticipant,
	}
}

func (t *TL_channelParticipant) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipant))
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_channelParticipant) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_channelParticipant) String() string {
	return fmt.Sprintf("- channelParticipant#15ebac1d\n-- user_id : %v\n-- date : %v\n", t.M_user_id, t.M_date)
}

// channelParticipantSelf#a3289a6d
type TL_channelParticipantSelf struct {
	M_classID    int32
	M_user_id    int32
	M_inviter_id int32
	M_date       int32
}

func (t *TL_channelParticipantSelf) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelParticipantSelf) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_channelParticipantSelf) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_channelParticipantSelf) Set_inviter_id(M_inviter_id int32) {
	t.M_inviter_id = M_inviter_id
}

func (t *TL_channelParticipantSelf) Get_inviter_id() int32 {
	return t.M_inviter_id
}

func (t *TL_channelParticipantSelf) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_channelParticipantSelf) Get_date() int32 {
	return t.M_date
}

func New_TL_channelParticipantSelf() *TL_channelParticipantSelf {
	return &TL_channelParticipantSelf{
		M_classID: TL_CLASS_channelParticipantSelf,
	}
}

func (t *TL_channelParticipantSelf) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantSelf))
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_inviter_id())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_channelParticipantSelf) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()
	t.M_inviter_id = dc.Int()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_channelParticipantSelf) String() string {
	return fmt.Sprintf("- channelParticipantSelf#a3289a6d\n-- user_id : %v\n-- inviter_id : %v\n-- date : %v\n", t.M_user_id, t.M_inviter_id, t.M_date)
}

// channelParticipantCreator#e3e2e1f9
type TL_channelParticipantCreator struct {
	M_classID int32
	M_user_id int32
}

func (t *TL_channelParticipantCreator) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelParticipantCreator) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_channelParticipantCreator) Get_user_id() int32 {
	return t.M_user_id
}

func New_TL_channelParticipantCreator() *TL_channelParticipantCreator {
	return &TL_channelParticipantCreator{
		M_classID: TL_CLASS_channelParticipantCreator,
	}
}

func (t *TL_channelParticipantCreator) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantCreator))
	ec.Int(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_channelParticipantCreator) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.Int()

	return dc.err
}

func (t *TL_channelParticipantCreator) String() string {
	return fmt.Sprintf("- channelParticipantCreator#e3e2e1f9\n-- user_id : %v\n", t.M_user_id)
}

// channelParticipantAdmin#a82fa898
type TL_channelParticipantAdmin struct {
	M_classID      int32
	M_flags        TLObject
	M_can_edit     TLObject
	M_user_id      int32
	M_inviter_id   int32
	M_promoted_by  int32
	M_date         int32
	M_admin_rights TLObject
}

func (t *TL_channelParticipantAdmin) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelParticipantAdmin) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channelParticipantAdmin) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channelParticipantAdmin) Set_can_edit(M_can_edit TLObject) {
	t.M_can_edit = M_can_edit
}

func (t *TL_channelParticipantAdmin) Get_can_edit() TLObject {
	return t.M_can_edit
}

func (t *TL_channelParticipantAdmin) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_channelParticipantAdmin) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_channelParticipantAdmin) Set_inviter_id(M_inviter_id int32) {
	t.M_inviter_id = M_inviter_id
}

func (t *TL_channelParticipantAdmin) Get_inviter_id() int32 {
	return t.M_inviter_id
}

func (t *TL_channelParticipantAdmin) Set_promoted_by(M_promoted_by int32) {
	t.M_promoted_by = M_promoted_by
}

func (t *TL_channelParticipantAdmin) Get_promoted_by() int32 {
	return t.M_promoted_by
}

func (t *TL_channelParticipantAdmin) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_channelParticipantAdmin) Get_date() int32 {
	return t.M_date
}

func (t *TL_channelParticipantAdmin) Set_admin_rights(M_admin_rights TLObject) {
	t.M_admin_rights = M_admin_rights
}

func (t *TL_channelParticipantAdmin) Get_admin_rights() TLObject {
	return t.M_admin_rights
}

func New_TL_channelParticipantAdmin() *TL_channelParticipantAdmin {
	return &TL_channelParticipantAdmin{
		M_classID: TL_CLASS_channelParticipantAdmin,
	}
}

func (t *TL_channelParticipantAdmin) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantAdmin))
	ec.TLObject(t.Get_can_edit())
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_inviter_id())
	ec.Int(t.Get_promoted_by())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_admin_rights())

	return ec.GetBuffer()
}

func (t *TL_channelParticipantAdmin) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_can_edit = dc.TLObject()
	t.M_user_id = dc.Int()
	t.M_inviter_id = dc.Int()
	t.M_promoted_by = dc.Int()
	t.M_date = dc.Int()
	t.M_admin_rights = dc.TLObject()

	return dc.err
}

func (t *TL_channelParticipantAdmin) String() string {
	return fmt.Sprintf("- channelParticipantAdmin#a82fa898\n-- flags : %v\n-- can_edit : %v\n-- user_id : %v\n-- inviter_id : %v\n-- promoted_by : %v\n-- date : %v\n-- admin_rights : %v\n", t.M_flags, t.M_can_edit, t.M_user_id, t.M_inviter_id, t.M_promoted_by, t.M_date, t.M_admin_rights)
}

// channelParticipantBanned#222c1886
type TL_channelParticipantBanned struct {
	M_classID       int32
	M_flags         TLObject
	M_left          TLObject
	M_user_id       int32
	M_kicked_by     int32
	M_date          int32
	M_banned_rights TLObject
}

func (t *TL_channelParticipantBanned) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelParticipantBanned) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channelParticipantBanned) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channelParticipantBanned) Set_left(M_left TLObject) {
	t.M_left = M_left
}

func (t *TL_channelParticipantBanned) Get_left() TLObject {
	return t.M_left
}

func (t *TL_channelParticipantBanned) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_channelParticipantBanned) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_channelParticipantBanned) Set_kicked_by(M_kicked_by int32) {
	t.M_kicked_by = M_kicked_by
}

func (t *TL_channelParticipantBanned) Get_kicked_by() int32 {
	return t.M_kicked_by
}

func (t *TL_channelParticipantBanned) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_channelParticipantBanned) Get_date() int32 {
	return t.M_date
}

func (t *TL_channelParticipantBanned) Set_banned_rights(M_banned_rights TLObject) {
	t.M_banned_rights = M_banned_rights
}

func (t *TL_channelParticipantBanned) Get_banned_rights() TLObject {
	return t.M_banned_rights
}

func New_TL_channelParticipantBanned() *TL_channelParticipantBanned {
	return &TL_channelParticipantBanned{
		M_classID: TL_CLASS_channelParticipantBanned,
	}
}

func (t *TL_channelParticipantBanned) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantBanned))
	ec.TLObject(t.Get_left())
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_kicked_by())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_banned_rights())

	return ec.GetBuffer()
}

func (t *TL_channelParticipantBanned) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_left = dc.TLObject()
	t.M_user_id = dc.Int()
	t.M_kicked_by = dc.Int()
	t.M_date = dc.Int()
	t.M_banned_rights = dc.TLObject()

	return dc.err
}

func (t *TL_channelParticipantBanned) String() string {
	return fmt.Sprintf("- channelParticipantBanned#222c1886\n-- flags : %v\n-- left : %v\n-- user_id : %v\n-- kicked_by : %v\n-- date : %v\n-- banned_rights : %v\n", t.M_flags, t.M_left, t.M_user_id, t.M_kicked_by, t.M_date, t.M_banned_rights)
}

// channelParticipantsRecent#de3f3c79
type TL_channelParticipantsRecent struct {
	M_classID int32
}

func (t *TL_channelParticipantsRecent) ClassID() int32 {
	return t.M_classID
}

func New_TL_channelParticipantsRecent() *TL_channelParticipantsRecent {
	return &TL_channelParticipantsRecent{
		M_classID: TL_CLASS_channelParticipantsRecent,
	}
}

func (t *TL_channelParticipantsRecent) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantsRecent))

	return ec.GetBuffer()
}

func (t *TL_channelParticipantsRecent) Decode(b []byte) error {
	return nil
}

func (t *TL_channelParticipantsRecent) String() string {
	return fmt.Sprintf("- channelParticipantsRecent#de3f3c79\n")
}

// channelParticipantsAdmins#b4608969
type TL_channelParticipantsAdmins struct {
	M_classID int32
}

func (t *TL_channelParticipantsAdmins) ClassID() int32 {
	return t.M_classID
}

func New_TL_channelParticipantsAdmins() *TL_channelParticipantsAdmins {
	return &TL_channelParticipantsAdmins{
		M_classID: TL_CLASS_channelParticipantsAdmins,
	}
}

func (t *TL_channelParticipantsAdmins) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantsAdmins))

	return ec.GetBuffer()
}

func (t *TL_channelParticipantsAdmins) Decode(b []byte) error {
	return nil
}

func (t *TL_channelParticipantsAdmins) String() string {
	return fmt.Sprintf("- channelParticipantsAdmins#b4608969\n")
}

// channelParticipantsKicked#a3b54985
type TL_channelParticipantsKicked struct {
	M_classID int32
	M_q       string
}

func (t *TL_channelParticipantsKicked) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelParticipantsKicked) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_channelParticipantsKicked) Get_q() string {
	return t.M_q
}

func New_TL_channelParticipantsKicked() *TL_channelParticipantsKicked {
	return &TL_channelParticipantsKicked{
		M_classID: TL_CLASS_channelParticipantsKicked,
	}
}

func (t *TL_channelParticipantsKicked) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantsKicked))
	ec.String(t.Get_q())

	return ec.GetBuffer()
}

func (t *TL_channelParticipantsKicked) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_q = dc.String()

	return dc.err
}

func (t *TL_channelParticipantsKicked) String() string {
	return fmt.Sprintf("- channelParticipantsKicked#a3b54985\n-- q : %v\n", t.M_q)
}

// channelParticipantsBots#b0d1865b
type TL_channelParticipantsBots struct {
	M_classID int32
}

func (t *TL_channelParticipantsBots) ClassID() int32 {
	return t.M_classID
}

func New_TL_channelParticipantsBots() *TL_channelParticipantsBots {
	return &TL_channelParticipantsBots{
		M_classID: TL_CLASS_channelParticipantsBots,
	}
}

func (t *TL_channelParticipantsBots) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantsBots))

	return ec.GetBuffer()
}

func (t *TL_channelParticipantsBots) Decode(b []byte) error {
	return nil
}

func (t *TL_channelParticipantsBots) String() string {
	return fmt.Sprintf("- channelParticipantsBots#b0d1865b\n")
}

// channelParticipantsBanned#1427a5e1
type TL_channelParticipantsBanned struct {
	M_classID int32
	M_q       string
}

func (t *TL_channelParticipantsBanned) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelParticipantsBanned) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_channelParticipantsBanned) Get_q() string {
	return t.M_q
}

func New_TL_channelParticipantsBanned() *TL_channelParticipantsBanned {
	return &TL_channelParticipantsBanned{
		M_classID: TL_CLASS_channelParticipantsBanned,
	}
}

func (t *TL_channelParticipantsBanned) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantsBanned))
	ec.String(t.Get_q())

	return ec.GetBuffer()
}

func (t *TL_channelParticipantsBanned) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_q = dc.String()

	return dc.err
}

func (t *TL_channelParticipantsBanned) String() string {
	return fmt.Sprintf("- channelParticipantsBanned#1427a5e1\n-- q : %v\n", t.M_q)
}

// channelParticipantsSearch#656ac4b
type TL_channelParticipantsSearch struct {
	M_classID int32
	M_q       string
}

func (t *TL_channelParticipantsSearch) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelParticipantsSearch) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_channelParticipantsSearch) Get_q() string {
	return t.M_q
}

func New_TL_channelParticipantsSearch() *TL_channelParticipantsSearch {
	return &TL_channelParticipantsSearch{
		M_classID: TL_CLASS_channelParticipantsSearch,
	}
}

func (t *TL_channelParticipantsSearch) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelParticipantsSearch))
	ec.String(t.Get_q())

	return ec.GetBuffer()
}

func (t *TL_channelParticipantsSearch) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_q = dc.String()

	return dc.err
}

func (t *TL_channelParticipantsSearch) String() string {
	return fmt.Sprintf("- channelParticipantsSearch#656ac4b\n-- q : %v\n", t.M_q)
}

// channels_channelParticipants#f56ee2a8
type TL_channels_channelParticipants struct {
	M_classID      int32
	M_count        int32
	M_participants []TLObject
	M_users        []TLObject
}

func (t *TL_channels_channelParticipants) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_channelParticipants) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_channels_channelParticipants) Get_count() int32 {
	return t.M_count
}

func (t *TL_channels_channelParticipants) Set_participants(M_participants []TLObject) {
	t.M_participants = M_participants
}

func (t *TL_channels_channelParticipants) Get_participants() []TLObject {
	return t.M_participants
}

func (t *TL_channels_channelParticipants) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_channels_channelParticipants) Get_users() []TLObject {
	return t.M_users
}

func New_TL_channels_channelParticipants() *TL_channels_channelParticipants {
	return &TL_channels_channelParticipants{
		M_classID: TL_CLASS_channels_channelParticipants,
	}
}

func (t *TL_channels_channelParticipants) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_channelParticipants))
	ec.Int(t.Get_count())
	ec.Vector(t.Get_participants())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_channels_channelParticipants) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_count = dc.Int()
	t.M_participants = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_channels_channelParticipants) String() string {
	return fmt.Sprintf("- channels_channelParticipants#f56ee2a8\n-- count : %v\n-- participants : %v\n-- users : %v\n", t.M_count, t.M_participants, t.M_users)
}

// channels_channelParticipantsNotModified#f0173fe9
type TL_channels_channelParticipantsNotModified struct {
	M_classID int32
}

func (t *TL_channels_channelParticipantsNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_channels_channelParticipantsNotModified() *TL_channels_channelParticipantsNotModified {
	return &TL_channels_channelParticipantsNotModified{
		M_classID: TL_CLASS_channels_channelParticipantsNotModified,
	}
}

func (t *TL_channels_channelParticipantsNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_channelParticipantsNotModified))

	return ec.GetBuffer()
}

func (t *TL_channels_channelParticipantsNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_channels_channelParticipantsNotModified) String() string {
	return fmt.Sprintf("- channels_channelParticipantsNotModified#f0173fe9\n")
}

// channels_channelParticipant#d0d9b163
type TL_channels_channelParticipant struct {
	M_classID     int32
	M_participant TLObject
	M_users       []TLObject
}

func (t *TL_channels_channelParticipant) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_channelParticipant) Set_participant(M_participant TLObject) {
	t.M_participant = M_participant
}

func (t *TL_channels_channelParticipant) Get_participant() TLObject {
	return t.M_participant
}

func (t *TL_channels_channelParticipant) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_channels_channelParticipant) Get_users() []TLObject {
	return t.M_users
}

func New_TL_channels_channelParticipant() *TL_channels_channelParticipant {
	return &TL_channels_channelParticipant{
		M_classID: TL_CLASS_channels_channelParticipant,
	}
}

func (t *TL_channels_channelParticipant) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_channelParticipant))
	ec.TLObject(t.Get_participant())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_channels_channelParticipant) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_participant = dc.TLObject()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_channels_channelParticipant) String() string {
	return fmt.Sprintf("- channels_channelParticipant#d0d9b163\n-- participant : %v\n-- users : %v\n", t.M_participant, t.M_users)
}

// help_termsOfService#f1ee3e90
type TL_help_termsOfService struct {
	M_classID int32
	M_text    string
}

func (t *TL_help_termsOfService) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_termsOfService) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_help_termsOfService) Get_text() string {
	return t.M_text
}

func New_TL_help_termsOfService() *TL_help_termsOfService {
	return &TL_help_termsOfService{
		M_classID: TL_CLASS_help_termsOfService,
	}
}

func (t *TL_help_termsOfService) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_termsOfService))
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_help_termsOfService) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()

	return dc.err
}

func (t *TL_help_termsOfService) String() string {
	return fmt.Sprintf("- help_termsOfService#f1ee3e90\n-- text : %v\n", t.M_text)
}

// foundGif#162ecc1f
type TL_foundGif struct {
	M_classID      int32
	M_url          string
	M_thumb_url    string
	M_content_url  string
	M_content_type string
	M_w            int32
	M_h            int32
}

func (t *TL_foundGif) ClassID() int32 {
	return t.M_classID
}

func (t *TL_foundGif) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_foundGif) Get_url() string {
	return t.M_url
}

func (t *TL_foundGif) Set_thumb_url(M_thumb_url string) {
	t.M_thumb_url = M_thumb_url
}

func (t *TL_foundGif) Get_thumb_url() string {
	return t.M_thumb_url
}

func (t *TL_foundGif) Set_content_url(M_content_url string) {
	t.M_content_url = M_content_url
}

func (t *TL_foundGif) Get_content_url() string {
	return t.M_content_url
}

func (t *TL_foundGif) Set_content_type(M_content_type string) {
	t.M_content_type = M_content_type
}

func (t *TL_foundGif) Get_content_type() string {
	return t.M_content_type
}

func (t *TL_foundGif) Set_w(M_w int32) {
	t.M_w = M_w
}

func (t *TL_foundGif) Get_w() int32 {
	return t.M_w
}

func (t *TL_foundGif) Set_h(M_h int32) {
	t.M_h = M_h
}

func (t *TL_foundGif) Get_h() int32 {
	return t.M_h
}

func New_TL_foundGif() *TL_foundGif {
	return &TL_foundGif{
		M_classID: TL_CLASS_foundGif,
	}
}

func (t *TL_foundGif) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_foundGif))
	ec.String(t.Get_url())
	ec.String(t.Get_thumb_url())
	ec.String(t.Get_content_url())
	ec.String(t.Get_content_type())
	ec.Int(t.Get_w())
	ec.Int(t.Get_h())

	return ec.GetBuffer()
}

func (t *TL_foundGif) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_thumb_url = dc.String()
	t.M_content_url = dc.String()
	t.M_content_type = dc.String()
	t.M_w = dc.Int()
	t.M_h = dc.Int()

	return dc.err
}

func (t *TL_foundGif) String() string {
	return fmt.Sprintf("- foundGif#162ecc1f\n-- url : %v\n-- thumb_url : %v\n-- content_url : %v\n-- content_type : %v\n-- w : %v\n-- h : %v\n", t.M_url, t.M_thumb_url, t.M_content_url, t.M_content_type, t.M_w, t.M_h)
}

// foundGifCached#9c750409
type TL_foundGifCached struct {
	M_classID  int32
	M_url      string
	M_photo    TLObject
	M_document TLObject
}

func (t *TL_foundGifCached) ClassID() int32 {
	return t.M_classID
}

func (t *TL_foundGifCached) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_foundGifCached) Get_url() string {
	return t.M_url
}

func (t *TL_foundGifCached) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_foundGifCached) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_foundGifCached) Set_document(M_document TLObject) {
	t.M_document = M_document
}

func (t *TL_foundGifCached) Get_document() TLObject {
	return t.M_document
}

func New_TL_foundGifCached() *TL_foundGifCached {
	return &TL_foundGifCached{
		M_classID: TL_CLASS_foundGifCached,
	}
}

func (t *TL_foundGifCached) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_foundGifCached))
	ec.String(t.Get_url())
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_document())

	return ec.GetBuffer()
}

func (t *TL_foundGifCached) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_photo = dc.TLObject()
	t.M_document = dc.TLObject()

	return dc.err
}

func (t *TL_foundGifCached) String() string {
	return fmt.Sprintf("- foundGifCached#9c750409\n-- url : %v\n-- photo : %v\n-- document : %v\n", t.M_url, t.M_photo, t.M_document)
}

// messages_foundGifs#450a1c0a
type TL_messages_foundGifs struct {
	M_classID     int32
	M_next_offset int32
	M_results     []TLObject
}

func (t *TL_messages_foundGifs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_foundGifs) Set_next_offset(M_next_offset int32) {
	t.M_next_offset = M_next_offset
}

func (t *TL_messages_foundGifs) Get_next_offset() int32 {
	return t.M_next_offset
}

func (t *TL_messages_foundGifs) Set_results(M_results []TLObject) {
	t.M_results = M_results
}

func (t *TL_messages_foundGifs) Get_results() []TLObject {
	return t.M_results
}

func New_TL_messages_foundGifs() *TL_messages_foundGifs {
	return &TL_messages_foundGifs{
		M_classID: TL_CLASS_messages_foundGifs,
	}
}

func (t *TL_messages_foundGifs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_foundGifs))
	ec.Int(t.Get_next_offset())
	ec.Vector(t.Get_results())

	return ec.GetBuffer()
}

func (t *TL_messages_foundGifs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_next_offset = dc.Int()
	t.M_results = dc.Vector()

	return dc.err
}

func (t *TL_messages_foundGifs) String() string {
	return fmt.Sprintf("- messages_foundGifs#450a1c0a\n-- next_offset : %v\n-- results : %v\n", t.M_next_offset, t.M_results)
}

// messages_savedGifsNotModified#e8025ca2
type TL_messages_savedGifsNotModified struct {
	M_classID int32
}

func (t *TL_messages_savedGifsNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_messages_savedGifsNotModified() *TL_messages_savedGifsNotModified {
	return &TL_messages_savedGifsNotModified{
		M_classID: TL_CLASS_messages_savedGifsNotModified,
	}
}

func (t *TL_messages_savedGifsNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_savedGifsNotModified))

	return ec.GetBuffer()
}

func (t *TL_messages_savedGifsNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_messages_savedGifsNotModified) String() string {
	return fmt.Sprintf("- messages_savedGifsNotModified#e8025ca2\n")
}

// messages_savedGifs#2e0709a5
type TL_messages_savedGifs struct {
	M_classID int32
	M_hash    int32
	M_gifs    []TLObject
}

func (t *TL_messages_savedGifs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_savedGifs) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_savedGifs) Get_hash() int32 {
	return t.M_hash
}

func (t *TL_messages_savedGifs) Set_gifs(M_gifs []TLObject) {
	t.M_gifs = M_gifs
}

func (t *TL_messages_savedGifs) Get_gifs() []TLObject {
	return t.M_gifs
}

func New_TL_messages_savedGifs() *TL_messages_savedGifs {
	return &TL_messages_savedGifs{
		M_classID: TL_CLASS_messages_savedGifs,
	}
}

func (t *TL_messages_savedGifs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_savedGifs))
	ec.Int(t.Get_hash())
	ec.Vector(t.Get_gifs())

	return ec.GetBuffer()
}

func (t *TL_messages_savedGifs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()
	t.M_gifs = dc.Vector()

	return dc.err
}

func (t *TL_messages_savedGifs) String() string {
	return fmt.Sprintf("- messages_savedGifs#2e0709a5\n-- hash : %v\n-- gifs : %v\n", t.M_hash, t.M_gifs)
}

// inputBotInlineMessageMediaAuto#292fed13
type TL_inputBotInlineMessageMediaAuto struct {
	M_classID      int32
	M_flags        TLObject
	M_caption      string
	M_reply_markup TLObject
}

func (t *TL_inputBotInlineMessageMediaAuto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineMessageMediaAuto) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputBotInlineMessageMediaAuto) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputBotInlineMessageMediaAuto) Set_caption(M_caption string) {
	t.M_caption = M_caption
}

func (t *TL_inputBotInlineMessageMediaAuto) Get_caption() string {
	return t.M_caption
}

func (t *TL_inputBotInlineMessageMediaAuto) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_inputBotInlineMessageMediaAuto) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_inputBotInlineMessageMediaAuto() *TL_inputBotInlineMessageMediaAuto {
	return &TL_inputBotInlineMessageMediaAuto{
		M_classID: TL_CLASS_inputBotInlineMessageMediaAuto,
	}
}

func (t *TL_inputBotInlineMessageMediaAuto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineMessageMediaAuto))
	ec.String(t.Get_caption())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineMessageMediaAuto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_caption = dc.String()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineMessageMediaAuto) String() string {
	return fmt.Sprintf("- inputBotInlineMessageMediaAuto#292fed13\n-- flags : %v\n-- caption : %v\n-- reply_markup : %v\n", t.M_flags, t.M_caption, t.M_reply_markup)
}

// inputBotInlineMessageText#3dcd7a87
type TL_inputBotInlineMessageText struct {
	M_classID      int32
	M_flags        TLObject
	M_no_webpage   TLObject
	M_message      string
	M_entities     []TLObject
	M_reply_markup TLObject
}

func (t *TL_inputBotInlineMessageText) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineMessageText) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputBotInlineMessageText) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputBotInlineMessageText) Set_no_webpage(M_no_webpage TLObject) {
	t.M_no_webpage = M_no_webpage
}

func (t *TL_inputBotInlineMessageText) Get_no_webpage() TLObject {
	return t.M_no_webpage
}

func (t *TL_inputBotInlineMessageText) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_inputBotInlineMessageText) Get_message() string {
	return t.M_message
}

func (t *TL_inputBotInlineMessageText) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_inputBotInlineMessageText) Get_entities() []TLObject {
	return t.M_entities
}

func (t *TL_inputBotInlineMessageText) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_inputBotInlineMessageText) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_inputBotInlineMessageText() *TL_inputBotInlineMessageText {
	return &TL_inputBotInlineMessageText{
		M_classID: TL_CLASS_inputBotInlineMessageText,
	}
}

func (t *TL_inputBotInlineMessageText) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineMessageText))
	ec.TLObject(t.Get_no_webpage())
	ec.String(t.Get_message())
	ec.Vector(t.Get_entities())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineMessageText) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_no_webpage = dc.TLObject()
	t.M_message = dc.String()
	t.M_entities = dc.Vector()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineMessageText) String() string {
	return fmt.Sprintf("- inputBotInlineMessageText#3dcd7a87\n-- flags : %v\n-- no_webpage : %v\n-- message : %v\n-- entities : %v\n-- reply_markup : %v\n", t.M_flags, t.M_no_webpage, t.M_message, t.M_entities, t.M_reply_markup)
}

// inputBotInlineMessageMediaGeo#c1b15d65
type TL_inputBotInlineMessageMediaGeo struct {
	M_classID      int32
	M_flags        TLObject
	M_geo_point    TLObject
	M_period       int32
	M_reply_markup TLObject
}

func (t *TL_inputBotInlineMessageMediaGeo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineMessageMediaGeo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputBotInlineMessageMediaGeo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputBotInlineMessageMediaGeo) Set_geo_point(M_geo_point TLObject) {
	t.M_geo_point = M_geo_point
}

func (t *TL_inputBotInlineMessageMediaGeo) Get_geo_point() TLObject {
	return t.M_geo_point
}

func (t *TL_inputBotInlineMessageMediaGeo) Set_period(M_period int32) {
	t.M_period = M_period
}

func (t *TL_inputBotInlineMessageMediaGeo) Get_period() int32 {
	return t.M_period
}

func (t *TL_inputBotInlineMessageMediaGeo) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_inputBotInlineMessageMediaGeo) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_inputBotInlineMessageMediaGeo() *TL_inputBotInlineMessageMediaGeo {
	return &TL_inputBotInlineMessageMediaGeo{
		M_classID: TL_CLASS_inputBotInlineMessageMediaGeo,
	}
}

func (t *TL_inputBotInlineMessageMediaGeo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineMessageMediaGeo))
	ec.TLObject(t.Get_geo_point())
	ec.Int(t.Get_period())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineMessageMediaGeo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo_point = dc.TLObject()
	t.M_period = dc.Int()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineMessageMediaGeo) String() string {
	return fmt.Sprintf("- inputBotInlineMessageMediaGeo#c1b15d65\n-- flags : %v\n-- geo_point : %v\n-- period : %v\n-- reply_markup : %v\n", t.M_flags, t.M_geo_point, t.M_period, t.M_reply_markup)
}

// inputBotInlineMessageMediaVenue#aaafadc8
type TL_inputBotInlineMessageMediaVenue struct {
	M_classID      int32
	M_flags        TLObject
	M_geo_point    TLObject
	M_title        string
	M_address      string
	M_provider     string
	M_venue_id     string
	M_reply_markup TLObject
}

func (t *TL_inputBotInlineMessageMediaVenue) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineMessageMediaVenue) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputBotInlineMessageMediaVenue) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputBotInlineMessageMediaVenue) Set_geo_point(M_geo_point TLObject) {
	t.M_geo_point = M_geo_point
}

func (t *TL_inputBotInlineMessageMediaVenue) Get_geo_point() TLObject {
	return t.M_geo_point
}

func (t *TL_inputBotInlineMessageMediaVenue) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_inputBotInlineMessageMediaVenue) Get_title() string {
	return t.M_title
}

func (t *TL_inputBotInlineMessageMediaVenue) Set_address(M_address string) {
	t.M_address = M_address
}

func (t *TL_inputBotInlineMessageMediaVenue) Get_address() string {
	return t.M_address
}

func (t *TL_inputBotInlineMessageMediaVenue) Set_provider(M_provider string) {
	t.M_provider = M_provider
}

func (t *TL_inputBotInlineMessageMediaVenue) Get_provider() string {
	return t.M_provider
}

func (t *TL_inputBotInlineMessageMediaVenue) Set_venue_id(M_venue_id string) {
	t.M_venue_id = M_venue_id
}

func (t *TL_inputBotInlineMessageMediaVenue) Get_venue_id() string {
	return t.M_venue_id
}

func (t *TL_inputBotInlineMessageMediaVenue) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_inputBotInlineMessageMediaVenue) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_inputBotInlineMessageMediaVenue() *TL_inputBotInlineMessageMediaVenue {
	return &TL_inputBotInlineMessageMediaVenue{
		M_classID: TL_CLASS_inputBotInlineMessageMediaVenue,
	}
}

func (t *TL_inputBotInlineMessageMediaVenue) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineMessageMediaVenue))
	ec.TLObject(t.Get_geo_point())
	ec.String(t.Get_title())
	ec.String(t.Get_address())
	ec.String(t.Get_provider())
	ec.String(t.Get_venue_id())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineMessageMediaVenue) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo_point = dc.TLObject()
	t.M_title = dc.String()
	t.M_address = dc.String()
	t.M_provider = dc.String()
	t.M_venue_id = dc.String()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineMessageMediaVenue) String() string {
	return fmt.Sprintf("- inputBotInlineMessageMediaVenue#aaafadc8\n-- flags : %v\n-- geo_point : %v\n-- title : %v\n-- address : %v\n-- provider : %v\n-- venue_id : %v\n-- reply_markup : %v\n", t.M_flags, t.M_geo_point, t.M_title, t.M_address, t.M_provider, t.M_venue_id, t.M_reply_markup)
}

// inputBotInlineMessageMediaContact#2daf01a7
type TL_inputBotInlineMessageMediaContact struct {
	M_classID      int32
	M_flags        TLObject
	M_phone_number string
	M_first_name   string
	M_last_name    string
	M_reply_markup TLObject
}

func (t *TL_inputBotInlineMessageMediaContact) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineMessageMediaContact) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputBotInlineMessageMediaContact) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputBotInlineMessageMediaContact) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_inputBotInlineMessageMediaContact) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_inputBotInlineMessageMediaContact) Set_first_name(M_first_name string) {
	t.M_first_name = M_first_name
}

func (t *TL_inputBotInlineMessageMediaContact) Get_first_name() string {
	return t.M_first_name
}

func (t *TL_inputBotInlineMessageMediaContact) Set_last_name(M_last_name string) {
	t.M_last_name = M_last_name
}

func (t *TL_inputBotInlineMessageMediaContact) Get_last_name() string {
	return t.M_last_name
}

func (t *TL_inputBotInlineMessageMediaContact) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_inputBotInlineMessageMediaContact) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_inputBotInlineMessageMediaContact() *TL_inputBotInlineMessageMediaContact {
	return &TL_inputBotInlineMessageMediaContact{
		M_classID: TL_CLASS_inputBotInlineMessageMediaContact,
	}
}

func (t *TL_inputBotInlineMessageMediaContact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineMessageMediaContact))
	ec.String(t.Get_phone_number())
	ec.String(t.Get_first_name())
	ec.String(t.Get_last_name())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineMessageMediaContact) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_first_name = dc.String()
	t.M_last_name = dc.String()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineMessageMediaContact) String() string {
	return fmt.Sprintf("- inputBotInlineMessageMediaContact#2daf01a7\n-- flags : %v\n-- phone_number : %v\n-- first_name : %v\n-- last_name : %v\n-- reply_markup : %v\n", t.M_flags, t.M_phone_number, t.M_first_name, t.M_last_name, t.M_reply_markup)
}

// inputBotInlineMessageGame#4b425864
type TL_inputBotInlineMessageGame struct {
	M_classID      int32
	M_flags        TLObject
	M_reply_markup TLObject
}

func (t *TL_inputBotInlineMessageGame) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineMessageGame) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputBotInlineMessageGame) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputBotInlineMessageGame) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_inputBotInlineMessageGame) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_inputBotInlineMessageGame() *TL_inputBotInlineMessageGame {
	return &TL_inputBotInlineMessageGame{
		M_classID: TL_CLASS_inputBotInlineMessageGame,
	}
}

func (t *TL_inputBotInlineMessageGame) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineMessageGame))
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineMessageGame) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineMessageGame) String() string {
	return fmt.Sprintf("- inputBotInlineMessageGame#4b425864\n-- flags : %v\n-- reply_markup : %v\n", t.M_flags, t.M_reply_markup)
}

// inputBotInlineResult#2cbbe15a
type TL_inputBotInlineResult struct {
	M_classID      int32
	M_flags        TLObject
	M_id           string
	M_type         string
	M_title        TLObject
	M_description  TLObject
	M_url          TLObject
	M_thumb_url    TLObject
	M_content_url  TLObject
	M_content_type TLObject
	M_w            TLObject
	M_h            TLObject
	M_duration     TLObject
	M_send_message TLObject
}

func (t *TL_inputBotInlineResult) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineResult) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputBotInlineResult) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputBotInlineResult) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_inputBotInlineResult) Get_id() string {
	return t.M_id
}

func (t *TL_inputBotInlineResult) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_inputBotInlineResult) Get_type() string {
	return t.M_type
}

func (t *TL_inputBotInlineResult) Set_title(M_title TLObject) {
	t.M_title = M_title
}

func (t *TL_inputBotInlineResult) Get_title() TLObject {
	return t.M_title
}

func (t *TL_inputBotInlineResult) Set_description(M_description TLObject) {
	t.M_description = M_description
}

func (t *TL_inputBotInlineResult) Get_description() TLObject {
	return t.M_description
}

func (t *TL_inputBotInlineResult) Set_url(M_url TLObject) {
	t.M_url = M_url
}

func (t *TL_inputBotInlineResult) Get_url() TLObject {
	return t.M_url
}

func (t *TL_inputBotInlineResult) Set_thumb_url(M_thumb_url TLObject) {
	t.M_thumb_url = M_thumb_url
}

func (t *TL_inputBotInlineResult) Get_thumb_url() TLObject {
	return t.M_thumb_url
}

func (t *TL_inputBotInlineResult) Set_content_url(M_content_url TLObject) {
	t.M_content_url = M_content_url
}

func (t *TL_inputBotInlineResult) Get_content_url() TLObject {
	return t.M_content_url
}

func (t *TL_inputBotInlineResult) Set_content_type(M_content_type TLObject) {
	t.M_content_type = M_content_type
}

func (t *TL_inputBotInlineResult) Get_content_type() TLObject {
	return t.M_content_type
}

func (t *TL_inputBotInlineResult) Set_w(M_w TLObject) {
	t.M_w = M_w
}

func (t *TL_inputBotInlineResult) Get_w() TLObject {
	return t.M_w
}

func (t *TL_inputBotInlineResult) Set_h(M_h TLObject) {
	t.M_h = M_h
}

func (t *TL_inputBotInlineResult) Get_h() TLObject {
	return t.M_h
}

func (t *TL_inputBotInlineResult) Set_duration(M_duration TLObject) {
	t.M_duration = M_duration
}

func (t *TL_inputBotInlineResult) Get_duration() TLObject {
	return t.M_duration
}

func (t *TL_inputBotInlineResult) Set_send_message(M_send_message TLObject) {
	t.M_send_message = M_send_message
}

func (t *TL_inputBotInlineResult) Get_send_message() TLObject {
	return t.M_send_message
}

func New_TL_inputBotInlineResult() *TL_inputBotInlineResult {
	return &TL_inputBotInlineResult{
		M_classID: TL_CLASS_inputBotInlineResult,
	}
}

func (t *TL_inputBotInlineResult) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineResult))
	ec.String(t.Get_id())
	ec.String(t.Get_type())
	ec.TLObject(t.Get_title())
	ec.TLObject(t.Get_description())
	ec.TLObject(t.Get_url())
	ec.TLObject(t.Get_thumb_url())
	ec.TLObject(t.Get_content_url())
	ec.TLObject(t.Get_content_type())
	ec.TLObject(t.Get_w())
	ec.TLObject(t.Get_h())
	ec.TLObject(t.Get_duration())
	ec.TLObject(t.Get_send_message())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineResult) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_type = dc.String()
	t.M_title = dc.TLObject()
	t.M_description = dc.TLObject()
	t.M_url = dc.TLObject()
	t.M_thumb_url = dc.TLObject()
	t.M_content_url = dc.TLObject()
	t.M_content_type = dc.TLObject()
	t.M_w = dc.TLObject()
	t.M_h = dc.TLObject()
	t.M_duration = dc.TLObject()
	t.M_send_message = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineResult) String() string {
	return fmt.Sprintf("- inputBotInlineResult#2cbbe15a\n-- flags : %v\n-- id : %v\n-- type : %v\n-- title : %v\n-- description : %v\n-- url : %v\n-- thumb_url : %v\n-- content_url : %v\n-- content_type : %v\n-- w : %v\n-- h : %v\n-- duration : %v\n-- send_message : %v\n", t.M_flags, t.M_id, t.M_type, t.M_title, t.M_description, t.M_url, t.M_thumb_url, t.M_content_url, t.M_content_type, t.M_w, t.M_h, t.M_duration, t.M_send_message)
}

// inputBotInlineResultPhoto#a8d864a7
type TL_inputBotInlineResultPhoto struct {
	M_classID      int32
	M_id           string
	M_type         string
	M_photo        TLObject
	M_send_message TLObject
}

func (t *TL_inputBotInlineResultPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineResultPhoto) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_inputBotInlineResultPhoto) Get_id() string {
	return t.M_id
}

func (t *TL_inputBotInlineResultPhoto) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_inputBotInlineResultPhoto) Get_type() string {
	return t.M_type
}

func (t *TL_inputBotInlineResultPhoto) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_inputBotInlineResultPhoto) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_inputBotInlineResultPhoto) Set_send_message(M_send_message TLObject) {
	t.M_send_message = M_send_message
}

func (t *TL_inputBotInlineResultPhoto) Get_send_message() TLObject {
	return t.M_send_message
}

func New_TL_inputBotInlineResultPhoto() *TL_inputBotInlineResultPhoto {
	return &TL_inputBotInlineResultPhoto{
		M_classID: TL_CLASS_inputBotInlineResultPhoto,
	}
}

func (t *TL_inputBotInlineResultPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineResultPhoto))
	ec.String(t.Get_id())
	ec.String(t.Get_type())
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_send_message())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineResultPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_type = dc.String()
	t.M_photo = dc.TLObject()
	t.M_send_message = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineResultPhoto) String() string {
	return fmt.Sprintf("- inputBotInlineResultPhoto#a8d864a7\n-- id : %v\n-- type : %v\n-- photo : %v\n-- send_message : %v\n", t.M_id, t.M_type, t.M_photo, t.M_send_message)
}

// inputBotInlineResultDocument#fff8fdc4
type TL_inputBotInlineResultDocument struct {
	M_classID      int32
	M_flags        TLObject
	M_id           string
	M_type         string
	M_title        TLObject
	M_description  TLObject
	M_document     TLObject
	M_send_message TLObject
}

func (t *TL_inputBotInlineResultDocument) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineResultDocument) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputBotInlineResultDocument) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputBotInlineResultDocument) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_inputBotInlineResultDocument) Get_id() string {
	return t.M_id
}

func (t *TL_inputBotInlineResultDocument) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_inputBotInlineResultDocument) Get_type() string {
	return t.M_type
}

func (t *TL_inputBotInlineResultDocument) Set_title(M_title TLObject) {
	t.M_title = M_title
}

func (t *TL_inputBotInlineResultDocument) Get_title() TLObject {
	return t.M_title
}

func (t *TL_inputBotInlineResultDocument) Set_description(M_description TLObject) {
	t.M_description = M_description
}

func (t *TL_inputBotInlineResultDocument) Get_description() TLObject {
	return t.M_description
}

func (t *TL_inputBotInlineResultDocument) Set_document(M_document TLObject) {
	t.M_document = M_document
}

func (t *TL_inputBotInlineResultDocument) Get_document() TLObject {
	return t.M_document
}

func (t *TL_inputBotInlineResultDocument) Set_send_message(M_send_message TLObject) {
	t.M_send_message = M_send_message
}

func (t *TL_inputBotInlineResultDocument) Get_send_message() TLObject {
	return t.M_send_message
}

func New_TL_inputBotInlineResultDocument() *TL_inputBotInlineResultDocument {
	return &TL_inputBotInlineResultDocument{
		M_classID: TL_CLASS_inputBotInlineResultDocument,
	}
}

func (t *TL_inputBotInlineResultDocument) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineResultDocument))
	ec.String(t.Get_id())
	ec.String(t.Get_type())
	ec.TLObject(t.Get_title())
	ec.TLObject(t.Get_description())
	ec.TLObject(t.Get_document())
	ec.TLObject(t.Get_send_message())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineResultDocument) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_type = dc.String()
	t.M_title = dc.TLObject()
	t.M_description = dc.TLObject()
	t.M_document = dc.TLObject()
	t.M_send_message = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineResultDocument) String() string {
	return fmt.Sprintf("- inputBotInlineResultDocument#fff8fdc4\n-- flags : %v\n-- id : %v\n-- type : %v\n-- title : %v\n-- description : %v\n-- document : %v\n-- send_message : %v\n", t.M_flags, t.M_id, t.M_type, t.M_title, t.M_description, t.M_document, t.M_send_message)
}

// inputBotInlineResultGame#4fa417f2
type TL_inputBotInlineResultGame struct {
	M_classID      int32
	M_id           string
	M_short_name   string
	M_send_message TLObject
}

func (t *TL_inputBotInlineResultGame) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineResultGame) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_inputBotInlineResultGame) Get_id() string {
	return t.M_id
}

func (t *TL_inputBotInlineResultGame) Set_short_name(M_short_name string) {
	t.M_short_name = M_short_name
}

func (t *TL_inputBotInlineResultGame) Get_short_name() string {
	return t.M_short_name
}

func (t *TL_inputBotInlineResultGame) Set_send_message(M_send_message TLObject) {
	t.M_send_message = M_send_message
}

func (t *TL_inputBotInlineResultGame) Get_send_message() TLObject {
	return t.M_send_message
}

func New_TL_inputBotInlineResultGame() *TL_inputBotInlineResultGame {
	return &TL_inputBotInlineResultGame{
		M_classID: TL_CLASS_inputBotInlineResultGame,
	}
}

func (t *TL_inputBotInlineResultGame) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineResultGame))
	ec.String(t.Get_id())
	ec.String(t.Get_short_name())
	ec.TLObject(t.Get_send_message())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineResultGame) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_short_name = dc.String()
	t.M_send_message = dc.TLObject()

	return dc.err
}

func (t *TL_inputBotInlineResultGame) String() string {
	return fmt.Sprintf("- inputBotInlineResultGame#4fa417f2\n-- id : %v\n-- short_name : %v\n-- send_message : %v\n", t.M_id, t.M_short_name, t.M_send_message)
}

// botInlineMessageMediaAuto#a74b15b
type TL_botInlineMessageMediaAuto struct {
	M_classID      int32
	M_flags        TLObject
	M_caption      string
	M_reply_markup TLObject
}

func (t *TL_botInlineMessageMediaAuto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_botInlineMessageMediaAuto) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_botInlineMessageMediaAuto) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_botInlineMessageMediaAuto) Set_caption(M_caption string) {
	t.M_caption = M_caption
}

func (t *TL_botInlineMessageMediaAuto) Get_caption() string {
	return t.M_caption
}

func (t *TL_botInlineMessageMediaAuto) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_botInlineMessageMediaAuto) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_botInlineMessageMediaAuto() *TL_botInlineMessageMediaAuto {
	return &TL_botInlineMessageMediaAuto{
		M_classID: TL_CLASS_botInlineMessageMediaAuto,
	}
}

func (t *TL_botInlineMessageMediaAuto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_botInlineMessageMediaAuto))
	ec.String(t.Get_caption())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_botInlineMessageMediaAuto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_caption = dc.String()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_botInlineMessageMediaAuto) String() string {
	return fmt.Sprintf("- botInlineMessageMediaAuto#a74b15b\n-- flags : %v\n-- caption : %v\n-- reply_markup : %v\n", t.M_flags, t.M_caption, t.M_reply_markup)
}

// botInlineMessageText#8c7f65e2
type TL_botInlineMessageText struct {
	M_classID      int32
	M_flags        TLObject
	M_no_webpage   TLObject
	M_message      string
	M_entities     []TLObject
	M_reply_markup TLObject
}

func (t *TL_botInlineMessageText) ClassID() int32 {
	return t.M_classID
}

func (t *TL_botInlineMessageText) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_botInlineMessageText) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_botInlineMessageText) Set_no_webpage(M_no_webpage TLObject) {
	t.M_no_webpage = M_no_webpage
}

func (t *TL_botInlineMessageText) Get_no_webpage() TLObject {
	return t.M_no_webpage
}

func (t *TL_botInlineMessageText) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_botInlineMessageText) Get_message() string {
	return t.M_message
}

func (t *TL_botInlineMessageText) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_botInlineMessageText) Get_entities() []TLObject {
	return t.M_entities
}

func (t *TL_botInlineMessageText) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_botInlineMessageText) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_botInlineMessageText() *TL_botInlineMessageText {
	return &TL_botInlineMessageText{
		M_classID: TL_CLASS_botInlineMessageText,
	}
}

func (t *TL_botInlineMessageText) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_botInlineMessageText))
	ec.TLObject(t.Get_no_webpage())
	ec.String(t.Get_message())
	ec.Vector(t.Get_entities())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_botInlineMessageText) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_no_webpage = dc.TLObject()
	t.M_message = dc.String()
	t.M_entities = dc.Vector()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_botInlineMessageText) String() string {
	return fmt.Sprintf("- botInlineMessageText#8c7f65e2\n-- flags : %v\n-- no_webpage : %v\n-- message : %v\n-- entities : %v\n-- reply_markup : %v\n", t.M_flags, t.M_no_webpage, t.M_message, t.M_entities, t.M_reply_markup)
}

// botInlineMessageMediaGeo#b722de65
type TL_botInlineMessageMediaGeo struct {
	M_classID      int32
	M_flags        TLObject
	M_geo          TLObject
	M_period       int32
	M_reply_markup TLObject
}

func (t *TL_botInlineMessageMediaGeo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_botInlineMessageMediaGeo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_botInlineMessageMediaGeo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_botInlineMessageMediaGeo) Set_geo(M_geo TLObject) {
	t.M_geo = M_geo
}

func (t *TL_botInlineMessageMediaGeo) Get_geo() TLObject {
	return t.M_geo
}

func (t *TL_botInlineMessageMediaGeo) Set_period(M_period int32) {
	t.M_period = M_period
}

func (t *TL_botInlineMessageMediaGeo) Get_period() int32 {
	return t.M_period
}

func (t *TL_botInlineMessageMediaGeo) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_botInlineMessageMediaGeo) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_botInlineMessageMediaGeo() *TL_botInlineMessageMediaGeo {
	return &TL_botInlineMessageMediaGeo{
		M_classID: TL_CLASS_botInlineMessageMediaGeo,
	}
}

func (t *TL_botInlineMessageMediaGeo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_botInlineMessageMediaGeo))
	ec.TLObject(t.Get_geo())
	ec.Int(t.Get_period())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_botInlineMessageMediaGeo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo = dc.TLObject()
	t.M_period = dc.Int()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_botInlineMessageMediaGeo) String() string {
	return fmt.Sprintf("- botInlineMessageMediaGeo#b722de65\n-- flags : %v\n-- geo : %v\n-- period : %v\n-- reply_markup : %v\n", t.M_flags, t.M_geo, t.M_period, t.M_reply_markup)
}

// botInlineMessageMediaVenue#4366232e
type TL_botInlineMessageMediaVenue struct {
	M_classID      int32
	M_flags        TLObject
	M_geo          TLObject
	M_title        string
	M_address      string
	M_provider     string
	M_venue_id     string
	M_reply_markup TLObject
}

func (t *TL_botInlineMessageMediaVenue) ClassID() int32 {
	return t.M_classID
}

func (t *TL_botInlineMessageMediaVenue) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_botInlineMessageMediaVenue) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_botInlineMessageMediaVenue) Set_geo(M_geo TLObject) {
	t.M_geo = M_geo
}

func (t *TL_botInlineMessageMediaVenue) Get_geo() TLObject {
	return t.M_geo
}

func (t *TL_botInlineMessageMediaVenue) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_botInlineMessageMediaVenue) Get_title() string {
	return t.M_title
}

func (t *TL_botInlineMessageMediaVenue) Set_address(M_address string) {
	t.M_address = M_address
}

func (t *TL_botInlineMessageMediaVenue) Get_address() string {
	return t.M_address
}

func (t *TL_botInlineMessageMediaVenue) Set_provider(M_provider string) {
	t.M_provider = M_provider
}

func (t *TL_botInlineMessageMediaVenue) Get_provider() string {
	return t.M_provider
}

func (t *TL_botInlineMessageMediaVenue) Set_venue_id(M_venue_id string) {
	t.M_venue_id = M_venue_id
}

func (t *TL_botInlineMessageMediaVenue) Get_venue_id() string {
	return t.M_venue_id
}

func (t *TL_botInlineMessageMediaVenue) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_botInlineMessageMediaVenue) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_botInlineMessageMediaVenue() *TL_botInlineMessageMediaVenue {
	return &TL_botInlineMessageMediaVenue{
		M_classID: TL_CLASS_botInlineMessageMediaVenue,
	}
}

func (t *TL_botInlineMessageMediaVenue) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_botInlineMessageMediaVenue))
	ec.TLObject(t.Get_geo())
	ec.String(t.Get_title())
	ec.String(t.Get_address())
	ec.String(t.Get_provider())
	ec.String(t.Get_venue_id())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_botInlineMessageMediaVenue) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_geo = dc.TLObject()
	t.M_title = dc.String()
	t.M_address = dc.String()
	t.M_provider = dc.String()
	t.M_venue_id = dc.String()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_botInlineMessageMediaVenue) String() string {
	return fmt.Sprintf("- botInlineMessageMediaVenue#4366232e\n-- flags : %v\n-- geo : %v\n-- title : %v\n-- address : %v\n-- provider : %v\n-- venue_id : %v\n-- reply_markup : %v\n", t.M_flags, t.M_geo, t.M_title, t.M_address, t.M_provider, t.M_venue_id, t.M_reply_markup)
}

// botInlineMessageMediaContact#35edb4d4
type TL_botInlineMessageMediaContact struct {
	M_classID      int32
	M_flags        TLObject
	M_phone_number string
	M_first_name   string
	M_last_name    string
	M_reply_markup TLObject
}

func (t *TL_botInlineMessageMediaContact) ClassID() int32 {
	return t.M_classID
}

func (t *TL_botInlineMessageMediaContact) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_botInlineMessageMediaContact) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_botInlineMessageMediaContact) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_botInlineMessageMediaContact) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_botInlineMessageMediaContact) Set_first_name(M_first_name string) {
	t.M_first_name = M_first_name
}

func (t *TL_botInlineMessageMediaContact) Get_first_name() string {
	return t.M_first_name
}

func (t *TL_botInlineMessageMediaContact) Set_last_name(M_last_name string) {
	t.M_last_name = M_last_name
}

func (t *TL_botInlineMessageMediaContact) Get_last_name() string {
	return t.M_last_name
}

func (t *TL_botInlineMessageMediaContact) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_botInlineMessageMediaContact) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_botInlineMessageMediaContact() *TL_botInlineMessageMediaContact {
	return &TL_botInlineMessageMediaContact{
		M_classID: TL_CLASS_botInlineMessageMediaContact,
	}
}

func (t *TL_botInlineMessageMediaContact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_botInlineMessageMediaContact))
	ec.String(t.Get_phone_number())
	ec.String(t.Get_first_name())
	ec.String(t.Get_last_name())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_botInlineMessageMediaContact) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_first_name = dc.String()
	t.M_last_name = dc.String()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_botInlineMessageMediaContact) String() string {
	return fmt.Sprintf("- botInlineMessageMediaContact#35edb4d4\n-- flags : %v\n-- phone_number : %v\n-- first_name : %v\n-- last_name : %v\n-- reply_markup : %v\n", t.M_flags, t.M_phone_number, t.M_first_name, t.M_last_name, t.M_reply_markup)
}

// botInlineResult#9bebaeb9
type TL_botInlineResult struct {
	M_classID      int32
	M_flags        TLObject
	M_id           string
	M_type         string
	M_title        TLObject
	M_description  TLObject
	M_url          TLObject
	M_thumb_url    TLObject
	M_content_url  TLObject
	M_content_type TLObject
	M_w            TLObject
	M_h            TLObject
	M_duration     TLObject
	M_send_message TLObject
}

func (t *TL_botInlineResult) ClassID() int32 {
	return t.M_classID
}

func (t *TL_botInlineResult) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_botInlineResult) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_botInlineResult) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_botInlineResult) Get_id() string {
	return t.M_id
}

func (t *TL_botInlineResult) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_botInlineResult) Get_type() string {
	return t.M_type
}

func (t *TL_botInlineResult) Set_title(M_title TLObject) {
	t.M_title = M_title
}

func (t *TL_botInlineResult) Get_title() TLObject {
	return t.M_title
}

func (t *TL_botInlineResult) Set_description(M_description TLObject) {
	t.M_description = M_description
}

func (t *TL_botInlineResult) Get_description() TLObject {
	return t.M_description
}

func (t *TL_botInlineResult) Set_url(M_url TLObject) {
	t.M_url = M_url
}

func (t *TL_botInlineResult) Get_url() TLObject {
	return t.M_url
}

func (t *TL_botInlineResult) Set_thumb_url(M_thumb_url TLObject) {
	t.M_thumb_url = M_thumb_url
}

func (t *TL_botInlineResult) Get_thumb_url() TLObject {
	return t.M_thumb_url
}

func (t *TL_botInlineResult) Set_content_url(M_content_url TLObject) {
	t.M_content_url = M_content_url
}

func (t *TL_botInlineResult) Get_content_url() TLObject {
	return t.M_content_url
}

func (t *TL_botInlineResult) Set_content_type(M_content_type TLObject) {
	t.M_content_type = M_content_type
}

func (t *TL_botInlineResult) Get_content_type() TLObject {
	return t.M_content_type
}

func (t *TL_botInlineResult) Set_w(M_w TLObject) {
	t.M_w = M_w
}

func (t *TL_botInlineResult) Get_w() TLObject {
	return t.M_w
}

func (t *TL_botInlineResult) Set_h(M_h TLObject) {
	t.M_h = M_h
}

func (t *TL_botInlineResult) Get_h() TLObject {
	return t.M_h
}

func (t *TL_botInlineResult) Set_duration(M_duration TLObject) {
	t.M_duration = M_duration
}

func (t *TL_botInlineResult) Get_duration() TLObject {
	return t.M_duration
}

func (t *TL_botInlineResult) Set_send_message(M_send_message TLObject) {
	t.M_send_message = M_send_message
}

func (t *TL_botInlineResult) Get_send_message() TLObject {
	return t.M_send_message
}

func New_TL_botInlineResult() *TL_botInlineResult {
	return &TL_botInlineResult{
		M_classID: TL_CLASS_botInlineResult,
	}
}

func (t *TL_botInlineResult) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_botInlineResult))
	ec.String(t.Get_id())
	ec.String(t.Get_type())
	ec.TLObject(t.Get_title())
	ec.TLObject(t.Get_description())
	ec.TLObject(t.Get_url())
	ec.TLObject(t.Get_thumb_url())
	ec.TLObject(t.Get_content_url())
	ec.TLObject(t.Get_content_type())
	ec.TLObject(t.Get_w())
	ec.TLObject(t.Get_h())
	ec.TLObject(t.Get_duration())
	ec.TLObject(t.Get_send_message())

	return ec.GetBuffer()
}

func (t *TL_botInlineResult) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_type = dc.String()
	t.M_title = dc.TLObject()
	t.M_description = dc.TLObject()
	t.M_url = dc.TLObject()
	t.M_thumb_url = dc.TLObject()
	t.M_content_url = dc.TLObject()
	t.M_content_type = dc.TLObject()
	t.M_w = dc.TLObject()
	t.M_h = dc.TLObject()
	t.M_duration = dc.TLObject()
	t.M_send_message = dc.TLObject()

	return dc.err
}

func (t *TL_botInlineResult) String() string {
	return fmt.Sprintf("- botInlineResult#9bebaeb9\n-- flags : %v\n-- id : %v\n-- type : %v\n-- title : %v\n-- description : %v\n-- url : %v\n-- thumb_url : %v\n-- content_url : %v\n-- content_type : %v\n-- w : %v\n-- h : %v\n-- duration : %v\n-- send_message : %v\n", t.M_flags, t.M_id, t.M_type, t.M_title, t.M_description, t.M_url, t.M_thumb_url, t.M_content_url, t.M_content_type, t.M_w, t.M_h, t.M_duration, t.M_send_message)
}

// botInlineMediaResult#17db940b
type TL_botInlineMediaResult struct {
	M_classID      int32
	M_flags        TLObject
	M_id           string
	M_type         string
	M_photo        TLObject
	M_document     TLObject
	M_title        TLObject
	M_description  TLObject
	M_send_message TLObject
}

func (t *TL_botInlineMediaResult) ClassID() int32 {
	return t.M_classID
}

func (t *TL_botInlineMediaResult) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_botInlineMediaResult) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_botInlineMediaResult) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_botInlineMediaResult) Get_id() string {
	return t.M_id
}

func (t *TL_botInlineMediaResult) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_botInlineMediaResult) Get_type() string {
	return t.M_type
}

func (t *TL_botInlineMediaResult) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_botInlineMediaResult) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_botInlineMediaResult) Set_document(M_document TLObject) {
	t.M_document = M_document
}

func (t *TL_botInlineMediaResult) Get_document() TLObject {
	return t.M_document
}

func (t *TL_botInlineMediaResult) Set_title(M_title TLObject) {
	t.M_title = M_title
}

func (t *TL_botInlineMediaResult) Get_title() TLObject {
	return t.M_title
}

func (t *TL_botInlineMediaResult) Set_description(M_description TLObject) {
	t.M_description = M_description
}

func (t *TL_botInlineMediaResult) Get_description() TLObject {
	return t.M_description
}

func (t *TL_botInlineMediaResult) Set_send_message(M_send_message TLObject) {
	t.M_send_message = M_send_message
}

func (t *TL_botInlineMediaResult) Get_send_message() TLObject {
	return t.M_send_message
}

func New_TL_botInlineMediaResult() *TL_botInlineMediaResult {
	return &TL_botInlineMediaResult{
		M_classID: TL_CLASS_botInlineMediaResult,
	}
}

func (t *TL_botInlineMediaResult) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_botInlineMediaResult))
	ec.String(t.Get_id())
	ec.String(t.Get_type())
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_document())
	ec.TLObject(t.Get_title())
	ec.TLObject(t.Get_description())
	ec.TLObject(t.Get_send_message())

	return ec.GetBuffer()
}

func (t *TL_botInlineMediaResult) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_type = dc.String()
	t.M_photo = dc.TLObject()
	t.M_document = dc.TLObject()
	t.M_title = dc.TLObject()
	t.M_description = dc.TLObject()
	t.M_send_message = dc.TLObject()

	return dc.err
}

func (t *TL_botInlineMediaResult) String() string {
	return fmt.Sprintf("- botInlineMediaResult#17db940b\n-- flags : %v\n-- id : %v\n-- type : %v\n-- photo : %v\n-- document : %v\n-- title : %v\n-- description : %v\n-- send_message : %v\n", t.M_flags, t.M_id, t.M_type, t.M_photo, t.M_document, t.M_title, t.M_description, t.M_send_message)
}

// messages_botResults#947ca848
type TL_messages_botResults struct {
	M_classID     int32
	M_flags       TLObject
	M_gallery     TLObject
	M_query_id    int64
	M_next_offset TLObject
	M_switch_pm   TLObject
	M_results     []TLObject
	M_cache_time  int32
	M_users       []TLObject
}

func (t *TL_messages_botResults) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_botResults) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_botResults) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_botResults) Set_gallery(M_gallery TLObject) {
	t.M_gallery = M_gallery
}

func (t *TL_messages_botResults) Get_gallery() TLObject {
	return t.M_gallery
}

func (t *TL_messages_botResults) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_messages_botResults) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_messages_botResults) Set_next_offset(M_next_offset TLObject) {
	t.M_next_offset = M_next_offset
}

func (t *TL_messages_botResults) Get_next_offset() TLObject {
	return t.M_next_offset
}

func (t *TL_messages_botResults) Set_switch_pm(M_switch_pm TLObject) {
	t.M_switch_pm = M_switch_pm
}

func (t *TL_messages_botResults) Get_switch_pm() TLObject {
	return t.M_switch_pm
}

func (t *TL_messages_botResults) Set_results(M_results []TLObject) {
	t.M_results = M_results
}

func (t *TL_messages_botResults) Get_results() []TLObject {
	return t.M_results
}

func (t *TL_messages_botResults) Set_cache_time(M_cache_time int32) {
	t.M_cache_time = M_cache_time
}

func (t *TL_messages_botResults) Get_cache_time() int32 {
	return t.M_cache_time
}

func (t *TL_messages_botResults) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_botResults) Get_users() []TLObject {
	return t.M_users
}

func New_TL_messages_botResults() *TL_messages_botResults {
	return &TL_messages_botResults{
		M_classID: TL_CLASS_messages_botResults,
	}
}

func (t *TL_messages_botResults) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_botResults))
	ec.TLObject(t.Get_gallery())
	ec.Long(t.Get_query_id())
	ec.TLObject(t.Get_next_offset())
	ec.TLObject(t.Get_switch_pm())
	ec.Vector(t.Get_results())
	ec.Int(t.Get_cache_time())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messages_botResults) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_gallery = dc.TLObject()
	t.M_query_id = dc.Long()
	t.M_next_offset = dc.TLObject()
	t.M_switch_pm = dc.TLObject()
	t.M_results = dc.Vector()
	t.M_cache_time = dc.Int()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_messages_botResults) String() string {
	return fmt.Sprintf("- messages_botResults#947ca848\n-- flags : %v\n-- gallery : %v\n-- query_id : %v\n-- next_offset : %v\n-- switch_pm : %v\n-- results : %v\n-- cache_time : %v\n-- users : %v\n", t.M_flags, t.M_gallery, t.M_query_id, t.M_next_offset, t.M_switch_pm, t.M_results, t.M_cache_time, t.M_users)
}

// exportedMessageLink#1f486803
type TL_exportedMessageLink struct {
	M_classID int32
	M_link    string
}

func (t *TL_exportedMessageLink) ClassID() int32 {
	return t.M_classID
}

func (t *TL_exportedMessageLink) Set_link(M_link string) {
	t.M_link = M_link
}

func (t *TL_exportedMessageLink) Get_link() string {
	return t.M_link
}

func New_TL_exportedMessageLink() *TL_exportedMessageLink {
	return &TL_exportedMessageLink{
		M_classID: TL_CLASS_exportedMessageLink,
	}
}

func (t *TL_exportedMessageLink) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_exportedMessageLink))
	ec.String(t.Get_link())

	return ec.GetBuffer()
}

func (t *TL_exportedMessageLink) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_link = dc.String()

	return dc.err
}

func (t *TL_exportedMessageLink) String() string {
	return fmt.Sprintf("- exportedMessageLink#1f486803\n-- link : %v\n", t.M_link)
}

// messageFwdHeader#559ebe6d
type TL_messageFwdHeader struct {
	M_classID           int32
	M_flags             TLObject
	M_from_id           TLObject
	M_date              int32
	M_channel_id        TLObject
	M_channel_post      TLObject
	M_post_author       TLObject
	M_saved_from_peer   TLObject
	M_saved_from_msg_id TLObject
}

func (t *TL_messageFwdHeader) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messageFwdHeader) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messageFwdHeader) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messageFwdHeader) Set_from_id(M_from_id TLObject) {
	t.M_from_id = M_from_id
}

func (t *TL_messageFwdHeader) Get_from_id() TLObject {
	return t.M_from_id
}

func (t *TL_messageFwdHeader) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_messageFwdHeader) Get_date() int32 {
	return t.M_date
}

func (t *TL_messageFwdHeader) Set_channel_id(M_channel_id TLObject) {
	t.M_channel_id = M_channel_id
}

func (t *TL_messageFwdHeader) Get_channel_id() TLObject {
	return t.M_channel_id
}

func (t *TL_messageFwdHeader) Set_channel_post(M_channel_post TLObject) {
	t.M_channel_post = M_channel_post
}

func (t *TL_messageFwdHeader) Get_channel_post() TLObject {
	return t.M_channel_post
}

func (t *TL_messageFwdHeader) Set_post_author(M_post_author TLObject) {
	t.M_post_author = M_post_author
}

func (t *TL_messageFwdHeader) Get_post_author() TLObject {
	return t.M_post_author
}

func (t *TL_messageFwdHeader) Set_saved_from_peer(M_saved_from_peer TLObject) {
	t.M_saved_from_peer = M_saved_from_peer
}

func (t *TL_messageFwdHeader) Get_saved_from_peer() TLObject {
	return t.M_saved_from_peer
}

func (t *TL_messageFwdHeader) Set_saved_from_msg_id(M_saved_from_msg_id TLObject) {
	t.M_saved_from_msg_id = M_saved_from_msg_id
}

func (t *TL_messageFwdHeader) Get_saved_from_msg_id() TLObject {
	return t.M_saved_from_msg_id
}

func New_TL_messageFwdHeader() *TL_messageFwdHeader {
	return &TL_messageFwdHeader{
		M_classID: TL_CLASS_messageFwdHeader,
	}
}

func (t *TL_messageFwdHeader) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messageFwdHeader))
	ec.TLObject(t.Get_from_id())
	ec.Int(t.Get_date())
	ec.TLObject(t.Get_channel_id())
	ec.TLObject(t.Get_channel_post())
	ec.TLObject(t.Get_post_author())
	ec.TLObject(t.Get_saved_from_peer())
	ec.TLObject(t.Get_saved_from_msg_id())

	return ec.GetBuffer()
}

func (t *TL_messageFwdHeader) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_from_id = dc.TLObject()
	t.M_date = dc.Int()
	t.M_channel_id = dc.TLObject()
	t.M_channel_post = dc.TLObject()
	t.M_post_author = dc.TLObject()
	t.M_saved_from_peer = dc.TLObject()
	t.M_saved_from_msg_id = dc.TLObject()

	return dc.err
}

func (t *TL_messageFwdHeader) String() string {
	return fmt.Sprintf("- messageFwdHeader#559ebe6d\n-- flags : %v\n-- from_id : %v\n-- date : %v\n-- channel_id : %v\n-- channel_post : %v\n-- post_author : %v\n-- saved_from_peer : %v\n-- saved_from_msg_id : %v\n", t.M_flags, t.M_from_id, t.M_date, t.M_channel_id, t.M_channel_post, t.M_post_author, t.M_saved_from_peer, t.M_saved_from_msg_id)
}

// auth_codeTypeSms#72a3158c
type TL_auth_codeTypeSms struct {
	M_classID int32
}

func (t *TL_auth_codeTypeSms) ClassID() int32 {
	return t.M_classID
}

func New_TL_auth_codeTypeSms() *TL_auth_codeTypeSms {
	return &TL_auth_codeTypeSms{
		M_classID: TL_CLASS_auth_codeTypeSms,
	}
}

func (t *TL_auth_codeTypeSms) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_codeTypeSms))

	return ec.GetBuffer()
}

func (t *TL_auth_codeTypeSms) Decode(b []byte) error {
	return nil
}

func (t *TL_auth_codeTypeSms) String() string {
	return fmt.Sprintf("- auth_codeTypeSms#72a3158c\n")
}

// auth_codeTypeCall#741cd3e3
type TL_auth_codeTypeCall struct {
	M_classID int32
}

func (t *TL_auth_codeTypeCall) ClassID() int32 {
	return t.M_classID
}

func New_TL_auth_codeTypeCall() *TL_auth_codeTypeCall {
	return &TL_auth_codeTypeCall{
		M_classID: TL_CLASS_auth_codeTypeCall,
	}
}

func (t *TL_auth_codeTypeCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_codeTypeCall))

	return ec.GetBuffer()
}

func (t *TL_auth_codeTypeCall) Decode(b []byte) error {
	return nil
}

func (t *TL_auth_codeTypeCall) String() string {
	return fmt.Sprintf("- auth_codeTypeCall#741cd3e3\n")
}

// auth_codeTypeFlashCall#226ccefb
type TL_auth_codeTypeFlashCall struct {
	M_classID int32
}

func (t *TL_auth_codeTypeFlashCall) ClassID() int32 {
	return t.M_classID
}

func New_TL_auth_codeTypeFlashCall() *TL_auth_codeTypeFlashCall {
	return &TL_auth_codeTypeFlashCall{
		M_classID: TL_CLASS_auth_codeTypeFlashCall,
	}
}

func (t *TL_auth_codeTypeFlashCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_codeTypeFlashCall))

	return ec.GetBuffer()
}

func (t *TL_auth_codeTypeFlashCall) Decode(b []byte) error {
	return nil
}

func (t *TL_auth_codeTypeFlashCall) String() string {
	return fmt.Sprintf("- auth_codeTypeFlashCall#226ccefb\n")
}

// auth_sentCodeTypeApp#3dbb5986
type TL_auth_sentCodeTypeApp struct {
	M_classID int32
	M_length  int32
}

func (t *TL_auth_sentCodeTypeApp) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_sentCodeTypeApp) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_auth_sentCodeTypeApp) Get_length() int32 {
	return t.M_length
}

func New_TL_auth_sentCodeTypeApp() *TL_auth_sentCodeTypeApp {
	return &TL_auth_sentCodeTypeApp{
		M_classID: TL_CLASS_auth_sentCodeTypeApp,
	}
}

func (t *TL_auth_sentCodeTypeApp) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_sentCodeTypeApp))
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_auth_sentCodeTypeApp) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_auth_sentCodeTypeApp) String() string {
	return fmt.Sprintf("- auth_sentCodeTypeApp#3dbb5986\n-- length : %v\n", t.M_length)
}

// auth_sentCodeTypeSms#c000bba2
type TL_auth_sentCodeTypeSms struct {
	M_classID int32
	M_length  int32
}

func (t *TL_auth_sentCodeTypeSms) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_sentCodeTypeSms) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_auth_sentCodeTypeSms) Get_length() int32 {
	return t.M_length
}

func New_TL_auth_sentCodeTypeSms() *TL_auth_sentCodeTypeSms {
	return &TL_auth_sentCodeTypeSms{
		M_classID: TL_CLASS_auth_sentCodeTypeSms,
	}
}

func (t *TL_auth_sentCodeTypeSms) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_sentCodeTypeSms))
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_auth_sentCodeTypeSms) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_auth_sentCodeTypeSms) String() string {
	return fmt.Sprintf("- auth_sentCodeTypeSms#c000bba2\n-- length : %v\n", t.M_length)
}

// auth_sentCodeTypeCall#5353e5a7
type TL_auth_sentCodeTypeCall struct {
	M_classID int32
	M_length  int32
}

func (t *TL_auth_sentCodeTypeCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_sentCodeTypeCall) Set_length(M_length int32) {
	t.M_length = M_length
}

func (t *TL_auth_sentCodeTypeCall) Get_length() int32 {
	return t.M_length
}

func New_TL_auth_sentCodeTypeCall() *TL_auth_sentCodeTypeCall {
	return &TL_auth_sentCodeTypeCall{
		M_classID: TL_CLASS_auth_sentCodeTypeCall,
	}
}

func (t *TL_auth_sentCodeTypeCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_sentCodeTypeCall))
	ec.Int(t.Get_length())

	return ec.GetBuffer()
}

func (t *TL_auth_sentCodeTypeCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_length = dc.Int()

	return dc.err
}

func (t *TL_auth_sentCodeTypeCall) String() string {
	return fmt.Sprintf("- auth_sentCodeTypeCall#5353e5a7\n-- length : %v\n", t.M_length)
}

// auth_sentCodeTypeFlashCall#ab03c6d9
type TL_auth_sentCodeTypeFlashCall struct {
	M_classID int32
	M_pattern string
}

func (t *TL_auth_sentCodeTypeFlashCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_sentCodeTypeFlashCall) Set_pattern(M_pattern string) {
	t.M_pattern = M_pattern
}

func (t *TL_auth_sentCodeTypeFlashCall) Get_pattern() string {
	return t.M_pattern
}

func New_TL_auth_sentCodeTypeFlashCall() *TL_auth_sentCodeTypeFlashCall {
	return &TL_auth_sentCodeTypeFlashCall{
		M_classID: TL_CLASS_auth_sentCodeTypeFlashCall,
	}
}

func (t *TL_auth_sentCodeTypeFlashCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_sentCodeTypeFlashCall))
	ec.String(t.Get_pattern())

	return ec.GetBuffer()
}

func (t *TL_auth_sentCodeTypeFlashCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pattern = dc.String()

	return dc.err
}

func (t *TL_auth_sentCodeTypeFlashCall) String() string {
	return fmt.Sprintf("- auth_sentCodeTypeFlashCall#ab03c6d9\n-- pattern : %v\n", t.M_pattern)
}

// messages_botCallbackAnswer#36585ea4
type TL_messages_botCallbackAnswer struct {
	M_classID    int32
	M_flags      TLObject
	M_alert      TLObject
	M_has_url    TLObject
	M_native_ui  TLObject
	M_message    TLObject
	M_url        TLObject
	M_cache_time int32
}

func (t *TL_messages_botCallbackAnswer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_botCallbackAnswer) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_botCallbackAnswer) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_botCallbackAnswer) Set_alert(M_alert TLObject) {
	t.M_alert = M_alert
}

func (t *TL_messages_botCallbackAnswer) Get_alert() TLObject {
	return t.M_alert
}

func (t *TL_messages_botCallbackAnswer) Set_has_url(M_has_url TLObject) {
	t.M_has_url = M_has_url
}

func (t *TL_messages_botCallbackAnswer) Get_has_url() TLObject {
	return t.M_has_url
}

func (t *TL_messages_botCallbackAnswer) Set_native_ui(M_native_ui TLObject) {
	t.M_native_ui = M_native_ui
}

func (t *TL_messages_botCallbackAnswer) Get_native_ui() TLObject {
	return t.M_native_ui
}

func (t *TL_messages_botCallbackAnswer) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_messages_botCallbackAnswer) Get_message() TLObject {
	return t.M_message
}

func (t *TL_messages_botCallbackAnswer) Set_url(M_url TLObject) {
	t.M_url = M_url
}

func (t *TL_messages_botCallbackAnswer) Get_url() TLObject {
	return t.M_url
}

func (t *TL_messages_botCallbackAnswer) Set_cache_time(M_cache_time int32) {
	t.M_cache_time = M_cache_time
}

func (t *TL_messages_botCallbackAnswer) Get_cache_time() int32 {
	return t.M_cache_time
}

func New_TL_messages_botCallbackAnswer() *TL_messages_botCallbackAnswer {
	return &TL_messages_botCallbackAnswer{
		M_classID: TL_CLASS_messages_botCallbackAnswer,
	}
}

func (t *TL_messages_botCallbackAnswer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_botCallbackAnswer))
	ec.TLObject(t.Get_alert())
	ec.TLObject(t.Get_has_url())
	ec.TLObject(t.Get_native_ui())
	ec.TLObject(t.Get_message())
	ec.TLObject(t.Get_url())
	ec.Int(t.Get_cache_time())

	return ec.GetBuffer()
}

func (t *TL_messages_botCallbackAnswer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_alert = dc.TLObject()
	t.M_has_url = dc.TLObject()
	t.M_native_ui = dc.TLObject()
	t.M_message = dc.TLObject()
	t.M_url = dc.TLObject()
	t.M_cache_time = dc.Int()

	return dc.err
}

func (t *TL_messages_botCallbackAnswer) String() string {
	return fmt.Sprintf("- messages_botCallbackAnswer#36585ea4\n-- flags : %v\n-- alert : %v\n-- has_url : %v\n-- native_ui : %v\n-- message : %v\n-- url : %v\n-- cache_time : %v\n", t.M_flags, t.M_alert, t.M_has_url, t.M_native_ui, t.M_message, t.M_url, t.M_cache_time)
}

// messages_messageEditData#26b5dde6
type TL_messages_messageEditData struct {
	M_classID int32
	M_flags   TLObject
	M_caption TLObject
}

func (t *TL_messages_messageEditData) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_messageEditData) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_messageEditData) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_messageEditData) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_messages_messageEditData) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_messages_messageEditData() *TL_messages_messageEditData {
	return &TL_messages_messageEditData{
		M_classID: TL_CLASS_messages_messageEditData,
	}
}

func (t *TL_messages_messageEditData) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_messageEditData))
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_messages_messageEditData) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_messages_messageEditData) String() string {
	return fmt.Sprintf("- messages_messageEditData#26b5dde6\n-- flags : %v\n-- caption : %v\n", t.M_flags, t.M_caption)
}

// inputBotInlineMessageID#890c3d89
type TL_inputBotInlineMessageID struct {
	M_classID     int32
	M_dc_id       int32
	M_id          int64
	M_access_hash int64
}

func (t *TL_inputBotInlineMessageID) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputBotInlineMessageID) Set_dc_id(M_dc_id int32) {
	t.M_dc_id = M_dc_id
}

func (t *TL_inputBotInlineMessageID) Get_dc_id() int32 {
	return t.M_dc_id
}

func (t *TL_inputBotInlineMessageID) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputBotInlineMessageID) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputBotInlineMessageID) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputBotInlineMessageID) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputBotInlineMessageID() *TL_inputBotInlineMessageID {
	return &TL_inputBotInlineMessageID{
		M_classID: TL_CLASS_inputBotInlineMessageID,
	}
}

func (t *TL_inputBotInlineMessageID) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputBotInlineMessageID))
	ec.Int(t.Get_dc_id())
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputBotInlineMessageID) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_dc_id = dc.Int()
	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputBotInlineMessageID) String() string {
	return fmt.Sprintf("- inputBotInlineMessageID#890c3d89\n-- dc_id : %v\n-- id : %v\n-- access_hash : %v\n", t.M_dc_id, t.M_id, t.M_access_hash)
}

// inlineBotSwitchPM#3c20629f
type TL_inlineBotSwitchPM struct {
	M_classID     int32
	M_text        string
	M_start_param string
}

func (t *TL_inlineBotSwitchPM) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inlineBotSwitchPM) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_inlineBotSwitchPM) Get_text() string {
	return t.M_text
}

func (t *TL_inlineBotSwitchPM) Set_start_param(M_start_param string) {
	t.M_start_param = M_start_param
}

func (t *TL_inlineBotSwitchPM) Get_start_param() string {
	return t.M_start_param
}

func New_TL_inlineBotSwitchPM() *TL_inlineBotSwitchPM {
	return &TL_inlineBotSwitchPM{
		M_classID: TL_CLASS_inlineBotSwitchPM,
	}
}

func (t *TL_inlineBotSwitchPM) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inlineBotSwitchPM))
	ec.String(t.Get_text())
	ec.String(t.Get_start_param())

	return ec.GetBuffer()
}

func (t *TL_inlineBotSwitchPM) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()
	t.M_start_param = dc.String()

	return dc.err
}

func (t *TL_inlineBotSwitchPM) String() string {
	return fmt.Sprintf("- inlineBotSwitchPM#3c20629f\n-- text : %v\n-- start_param : %v\n", t.M_text, t.M_start_param)
}

// messages_peerDialogs#3371c354
type TL_messages_peerDialogs struct {
	M_classID  int32
	M_dialogs  []TLObject
	M_messages []TLObject
	M_chats    []TLObject
	M_users    []TLObject
	M_state    TLObject
}

func (t *TL_messages_peerDialogs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_peerDialogs) Set_dialogs(M_dialogs []TLObject) {
	t.M_dialogs = M_dialogs
}

func (t *TL_messages_peerDialogs) Get_dialogs() []TLObject {
	return t.M_dialogs
}

func (t *TL_messages_peerDialogs) Set_messages(M_messages []TLObject) {
	t.M_messages = M_messages
}

func (t *TL_messages_peerDialogs) Get_messages() []TLObject {
	return t.M_messages
}

func (t *TL_messages_peerDialogs) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_messages_peerDialogs) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_messages_peerDialogs) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_peerDialogs) Get_users() []TLObject {
	return t.M_users
}

func (t *TL_messages_peerDialogs) Set_state(M_state TLObject) {
	t.M_state = M_state
}

func (t *TL_messages_peerDialogs) Get_state() TLObject {
	return t.M_state
}

func New_TL_messages_peerDialogs() *TL_messages_peerDialogs {
	return &TL_messages_peerDialogs{
		M_classID: TL_CLASS_messages_peerDialogs,
	}
}

func (t *TL_messages_peerDialogs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_peerDialogs))
	ec.Vector(t.Get_dialogs())
	ec.Vector(t.Get_messages())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())
	ec.TLObject(t.Get_state())

	return ec.GetBuffer()
}

func (t *TL_messages_peerDialogs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_dialogs = dc.Vector()
	t.M_messages = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()
	t.M_state = dc.TLObject()

	return dc.err
}

func (t *TL_messages_peerDialogs) String() string {
	return fmt.Sprintf("- messages_peerDialogs#3371c354\n-- dialogs : %v\n-- messages : %v\n-- chats : %v\n-- users : %v\n-- state : %v\n", t.M_dialogs, t.M_messages, t.M_chats, t.M_users, t.M_state)
}

// topPeer#edcdc05b
type TL_topPeer struct {
	M_classID int32
	M_peer    TLObject
	M_rating  float64
}

func (t *TL_topPeer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_topPeer) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_topPeer) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_topPeer) Set_rating(M_rating float64) {
	t.M_rating = M_rating
}

func (t *TL_topPeer) Get_rating() float64 {
	return t.M_rating
}

func New_TL_topPeer() *TL_topPeer {
	return &TL_topPeer{
		M_classID: TL_CLASS_topPeer,
	}
}

func (t *TL_topPeer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_topPeer))
	ec.TLObject(t.Get_peer())
	ec.Double(t.Get_rating())

	return ec.GetBuffer()
}

func (t *TL_topPeer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_rating = dc.Double()

	return dc.err
}

func (t *TL_topPeer) String() string {
	return fmt.Sprintf("- topPeer#edcdc05b\n-- peer : %v\n-- rating : %v\n", t.M_peer, t.M_rating)
}

// topPeerCategoryBotsPM#ab661b5b
type TL_topPeerCategoryBotsPM struct {
	M_classID int32
}

func (t *TL_topPeerCategoryBotsPM) ClassID() int32 {
	return t.M_classID
}

func New_TL_topPeerCategoryBotsPM() *TL_topPeerCategoryBotsPM {
	return &TL_topPeerCategoryBotsPM{
		M_classID: TL_CLASS_topPeerCategoryBotsPM,
	}
}

func (t *TL_topPeerCategoryBotsPM) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_topPeerCategoryBotsPM))

	return ec.GetBuffer()
}

func (t *TL_topPeerCategoryBotsPM) Decode(b []byte) error {
	return nil
}

func (t *TL_topPeerCategoryBotsPM) String() string {
	return fmt.Sprintf("- topPeerCategoryBotsPM#ab661b5b\n")
}

// topPeerCategoryBotsInline#148677e2
type TL_topPeerCategoryBotsInline struct {
	M_classID int32
}

func (t *TL_topPeerCategoryBotsInline) ClassID() int32 {
	return t.M_classID
}

func New_TL_topPeerCategoryBotsInline() *TL_topPeerCategoryBotsInline {
	return &TL_topPeerCategoryBotsInline{
		M_classID: TL_CLASS_topPeerCategoryBotsInline,
	}
}

func (t *TL_topPeerCategoryBotsInline) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_topPeerCategoryBotsInline))

	return ec.GetBuffer()
}

func (t *TL_topPeerCategoryBotsInline) Decode(b []byte) error {
	return nil
}

func (t *TL_topPeerCategoryBotsInline) String() string {
	return fmt.Sprintf("- topPeerCategoryBotsInline#148677e2\n")
}

// topPeerCategoryCorrespondents#637b7ed
type TL_topPeerCategoryCorrespondents struct {
	M_classID int32
}

func (t *TL_topPeerCategoryCorrespondents) ClassID() int32 {
	return t.M_classID
}

func New_TL_topPeerCategoryCorrespondents() *TL_topPeerCategoryCorrespondents {
	return &TL_topPeerCategoryCorrespondents{
		M_classID: TL_CLASS_topPeerCategoryCorrespondents,
	}
}

func (t *TL_topPeerCategoryCorrespondents) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_topPeerCategoryCorrespondents))

	return ec.GetBuffer()
}

func (t *TL_topPeerCategoryCorrespondents) Decode(b []byte) error {
	return nil
}

func (t *TL_topPeerCategoryCorrespondents) String() string {
	return fmt.Sprintf("- topPeerCategoryCorrespondents#637b7ed\n")
}

// topPeerCategoryGroups#bd17a14a
type TL_topPeerCategoryGroups struct {
	M_classID int32
}

func (t *TL_topPeerCategoryGroups) ClassID() int32 {
	return t.M_classID
}

func New_TL_topPeerCategoryGroups() *TL_topPeerCategoryGroups {
	return &TL_topPeerCategoryGroups{
		M_classID: TL_CLASS_topPeerCategoryGroups,
	}
}

func (t *TL_topPeerCategoryGroups) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_topPeerCategoryGroups))

	return ec.GetBuffer()
}

func (t *TL_topPeerCategoryGroups) Decode(b []byte) error {
	return nil
}

func (t *TL_topPeerCategoryGroups) String() string {
	return fmt.Sprintf("- topPeerCategoryGroups#bd17a14a\n")
}

// topPeerCategoryChannels#161d9628
type TL_topPeerCategoryChannels struct {
	M_classID int32
}

func (t *TL_topPeerCategoryChannels) ClassID() int32 {
	return t.M_classID
}

func New_TL_topPeerCategoryChannels() *TL_topPeerCategoryChannels {
	return &TL_topPeerCategoryChannels{
		M_classID: TL_CLASS_topPeerCategoryChannels,
	}
}

func (t *TL_topPeerCategoryChannels) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_topPeerCategoryChannels))

	return ec.GetBuffer()
}

func (t *TL_topPeerCategoryChannels) Decode(b []byte) error {
	return nil
}

func (t *TL_topPeerCategoryChannels) String() string {
	return fmt.Sprintf("- topPeerCategoryChannels#161d9628\n")
}

// topPeerCategoryPhoneCalls#1e76a78c
type TL_topPeerCategoryPhoneCalls struct {
	M_classID int32
}

func (t *TL_topPeerCategoryPhoneCalls) ClassID() int32 {
	return t.M_classID
}

func New_TL_topPeerCategoryPhoneCalls() *TL_topPeerCategoryPhoneCalls {
	return &TL_topPeerCategoryPhoneCalls{
		M_classID: TL_CLASS_topPeerCategoryPhoneCalls,
	}
}

func (t *TL_topPeerCategoryPhoneCalls) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_topPeerCategoryPhoneCalls))

	return ec.GetBuffer()
}

func (t *TL_topPeerCategoryPhoneCalls) Decode(b []byte) error {
	return nil
}

func (t *TL_topPeerCategoryPhoneCalls) String() string {
	return fmt.Sprintf("- topPeerCategoryPhoneCalls#1e76a78c\n")
}

// topPeerCategoryPeers#fb834291
type TL_topPeerCategoryPeers struct {
	M_classID  int32
	M_category TLObject
	M_count    int32
	M_peers    []TLObject
}

func (t *TL_topPeerCategoryPeers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_topPeerCategoryPeers) Set_category(M_category TLObject) {
	t.M_category = M_category
}

func (t *TL_topPeerCategoryPeers) Get_category() TLObject {
	return t.M_category
}

func (t *TL_topPeerCategoryPeers) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_topPeerCategoryPeers) Get_count() int32 {
	return t.M_count
}

func (t *TL_topPeerCategoryPeers) Set_peers(M_peers []TLObject) {
	t.M_peers = M_peers
}

func (t *TL_topPeerCategoryPeers) Get_peers() []TLObject {
	return t.M_peers
}

func New_TL_topPeerCategoryPeers() *TL_topPeerCategoryPeers {
	return &TL_topPeerCategoryPeers{
		M_classID: TL_CLASS_topPeerCategoryPeers,
	}
}

func (t *TL_topPeerCategoryPeers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_topPeerCategoryPeers))
	ec.TLObject(t.Get_category())
	ec.Int(t.Get_count())
	ec.Vector(t.Get_peers())

	return ec.GetBuffer()
}

func (t *TL_topPeerCategoryPeers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_category = dc.TLObject()
	t.M_count = dc.Int()
	t.M_peers = dc.Vector()

	return dc.err
}

func (t *TL_topPeerCategoryPeers) String() string {
	return fmt.Sprintf("- topPeerCategoryPeers#fb834291\n-- category : %v\n-- count : %v\n-- peers : %v\n", t.M_category, t.M_count, t.M_peers)
}

// contacts_topPeersNotModified#de266ef5
type TL_contacts_topPeersNotModified struct {
	M_classID int32
}

func (t *TL_contacts_topPeersNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_contacts_topPeersNotModified() *TL_contacts_topPeersNotModified {
	return &TL_contacts_topPeersNotModified{
		M_classID: TL_CLASS_contacts_topPeersNotModified,
	}
}

func (t *TL_contacts_topPeersNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_topPeersNotModified))

	return ec.GetBuffer()
}

func (t *TL_contacts_topPeersNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_contacts_topPeersNotModified) String() string {
	return fmt.Sprintf("- contacts_topPeersNotModified#de266ef5\n")
}

// contacts_topPeers#70b772a8
type TL_contacts_topPeers struct {
	M_classID    int32
	M_categories []TLObject
	M_chats      []TLObject
	M_users      []TLObject
}

func (t *TL_contacts_topPeers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_topPeers) Set_categories(M_categories []TLObject) {
	t.M_categories = M_categories
}

func (t *TL_contacts_topPeers) Get_categories() []TLObject {
	return t.M_categories
}

func (t *TL_contacts_topPeers) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_contacts_topPeers) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_contacts_topPeers) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_contacts_topPeers) Get_users() []TLObject {
	return t.M_users
}

func New_TL_contacts_topPeers() *TL_contacts_topPeers {
	return &TL_contacts_topPeers{
		M_classID: TL_CLASS_contacts_topPeers,
	}
}

func (t *TL_contacts_topPeers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_topPeers))
	ec.Vector(t.Get_categories())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_contacts_topPeers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_categories = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_contacts_topPeers) String() string {
	return fmt.Sprintf("- contacts_topPeers#70b772a8\n-- categories : %v\n-- chats : %v\n-- users : %v\n", t.M_categories, t.M_chats, t.M_users)
}

// draftMessageEmpty#ba4baec5
type TL_draftMessageEmpty struct {
	M_classID int32
}

func (t *TL_draftMessageEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_draftMessageEmpty() *TL_draftMessageEmpty {
	return &TL_draftMessageEmpty{
		M_classID: TL_CLASS_draftMessageEmpty,
	}
}

func (t *TL_draftMessageEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_draftMessageEmpty))

	return ec.GetBuffer()
}

func (t *TL_draftMessageEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_draftMessageEmpty) String() string {
	return fmt.Sprintf("- draftMessageEmpty#ba4baec5\n")
}

// draftMessage#fd8e711f
type TL_draftMessage struct {
	M_classID         int32
	M_flags           TLObject
	M_no_webpage      TLObject
	M_reply_to_msg_id TLObject
	M_message         string
	M_entities        []TLObject
	M_date            int32
}

func (t *TL_draftMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_draftMessage) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_draftMessage) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_draftMessage) Set_no_webpage(M_no_webpage TLObject) {
	t.M_no_webpage = M_no_webpage
}

func (t *TL_draftMessage) Get_no_webpage() TLObject {
	return t.M_no_webpage
}

func (t *TL_draftMessage) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_draftMessage) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_draftMessage) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_draftMessage) Get_message() string {
	return t.M_message
}

func (t *TL_draftMessage) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_draftMessage) Get_entities() []TLObject {
	return t.M_entities
}

func (t *TL_draftMessage) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_draftMessage) Get_date() int32 {
	return t.M_date
}

func New_TL_draftMessage() *TL_draftMessage {
	return &TL_draftMessage{
		M_classID: TL_CLASS_draftMessage,
	}
}

func (t *TL_draftMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_draftMessage))
	ec.TLObject(t.Get_no_webpage())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.String(t.Get_message())
	ec.Vector(t.Get_entities())
	ec.Int(t.Get_date())

	return ec.GetBuffer()
}

func (t *TL_draftMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_no_webpage = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_message = dc.String()
	t.M_entities = dc.Vector()
	t.M_date = dc.Int()

	return dc.err
}

func (t *TL_draftMessage) String() string {
	return fmt.Sprintf("- draftMessage#fd8e711f\n-- flags : %v\n-- no_webpage : %v\n-- reply_to_msg_id : %v\n-- message : %v\n-- entities : %v\n-- date : %v\n", t.M_flags, t.M_no_webpage, t.M_reply_to_msg_id, t.M_message, t.M_entities, t.M_date)
}

// messages_featuredStickersNotModified#4ede3cf
type TL_messages_featuredStickersNotModified struct {
	M_classID int32
}

func (t *TL_messages_featuredStickersNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_messages_featuredStickersNotModified() *TL_messages_featuredStickersNotModified {
	return &TL_messages_featuredStickersNotModified{
		M_classID: TL_CLASS_messages_featuredStickersNotModified,
	}
}

func (t *TL_messages_featuredStickersNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_featuredStickersNotModified))

	return ec.GetBuffer()
}

func (t *TL_messages_featuredStickersNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_messages_featuredStickersNotModified) String() string {
	return fmt.Sprintf("- messages_featuredStickersNotModified#4ede3cf\n")
}

// messages_featuredStickers#f89d88e5
type TL_messages_featuredStickers struct {
	M_classID int32
	M_hash    int32
	M_sets    []TLObject
	M_unread  []int64
}

func (t *TL_messages_featuredStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_featuredStickers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_featuredStickers) Get_hash() int32 {
	return t.M_hash
}

func (t *TL_messages_featuredStickers) Set_sets(M_sets []TLObject) {
	t.M_sets = M_sets
}

func (t *TL_messages_featuredStickers) Get_sets() []TLObject {
	return t.M_sets
}

func (t *TL_messages_featuredStickers) Set_unread(M_unread []int64) {
	t.M_unread = M_unread
}

func (t *TL_messages_featuredStickers) Get_unread() []int64 {
	return t.M_unread
}

func New_TL_messages_featuredStickers() *TL_messages_featuredStickers {
	return &TL_messages_featuredStickers{
		M_classID: TL_CLASS_messages_featuredStickers,
	}
}

func (t *TL_messages_featuredStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_featuredStickers))
	ec.Int(t.Get_hash())
	ec.Vector(t.Get_sets())
	ec.VectorLong(t.Get_unread())

	return ec.GetBuffer()
}

func (t *TL_messages_featuredStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()
	t.M_sets = dc.Vector()
	t.M_unread = dc.VectorLong()

	return dc.err
}

func (t *TL_messages_featuredStickers) String() string {
	return fmt.Sprintf("- messages_featuredStickers#f89d88e5\n-- hash : %v\n-- sets : %v\n-- unread : %v\n", t.M_hash, t.M_sets, t.M_unread)
}

// messages_recentStickersNotModified#b17f890
type TL_messages_recentStickersNotModified struct {
	M_classID int32
}

func (t *TL_messages_recentStickersNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_messages_recentStickersNotModified() *TL_messages_recentStickersNotModified {
	return &TL_messages_recentStickersNotModified{
		M_classID: TL_CLASS_messages_recentStickersNotModified,
	}
}

func (t *TL_messages_recentStickersNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_recentStickersNotModified))

	return ec.GetBuffer()
}

func (t *TL_messages_recentStickersNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_messages_recentStickersNotModified) String() string {
	return fmt.Sprintf("- messages_recentStickersNotModified#b17f890\n")
}

// messages_recentStickers#5ce20970
type TL_messages_recentStickers struct {
	M_classID  int32
	M_hash     int32
	M_stickers []TLObject
}

func (t *TL_messages_recentStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_recentStickers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_recentStickers) Get_hash() int32 {
	return t.M_hash
}

func (t *TL_messages_recentStickers) Set_stickers(M_stickers []TLObject) {
	t.M_stickers = M_stickers
}

func (t *TL_messages_recentStickers) Get_stickers() []TLObject {
	return t.M_stickers
}

func New_TL_messages_recentStickers() *TL_messages_recentStickers {
	return &TL_messages_recentStickers{
		M_classID: TL_CLASS_messages_recentStickers,
	}
}

func (t *TL_messages_recentStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_recentStickers))
	ec.Int(t.Get_hash())
	ec.Vector(t.Get_stickers())

	return ec.GetBuffer()
}

func (t *TL_messages_recentStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()
	t.M_stickers = dc.Vector()

	return dc.err
}

func (t *TL_messages_recentStickers) String() string {
	return fmt.Sprintf("- messages_recentStickers#5ce20970\n-- hash : %v\n-- stickers : %v\n", t.M_hash, t.M_stickers)
}

// messages_archivedStickers#4fcba9c8
type TL_messages_archivedStickers struct {
	M_classID int32
	M_count   int32
	M_sets    []TLObject
}

func (t *TL_messages_archivedStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_archivedStickers) Set_count(M_count int32) {
	t.M_count = M_count
}

func (t *TL_messages_archivedStickers) Get_count() int32 {
	return t.M_count
}

func (t *TL_messages_archivedStickers) Set_sets(M_sets []TLObject) {
	t.M_sets = M_sets
}

func (t *TL_messages_archivedStickers) Get_sets() []TLObject {
	return t.M_sets
}

func New_TL_messages_archivedStickers() *TL_messages_archivedStickers {
	return &TL_messages_archivedStickers{
		M_classID: TL_CLASS_messages_archivedStickers,
	}
}

func (t *TL_messages_archivedStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_archivedStickers))
	ec.Int(t.Get_count())
	ec.Vector(t.Get_sets())

	return ec.GetBuffer()
}

func (t *TL_messages_archivedStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_count = dc.Int()
	t.M_sets = dc.Vector()

	return dc.err
}

func (t *TL_messages_archivedStickers) String() string {
	return fmt.Sprintf("- messages_archivedStickers#4fcba9c8\n-- count : %v\n-- sets : %v\n", t.M_count, t.M_sets)
}

// messages_stickerSetInstallResultSuccess#38641628
type TL_messages_stickerSetInstallResultSuccess struct {
	M_classID int32
}

func (t *TL_messages_stickerSetInstallResultSuccess) ClassID() int32 {
	return t.M_classID
}

func New_TL_messages_stickerSetInstallResultSuccess() *TL_messages_stickerSetInstallResultSuccess {
	return &TL_messages_stickerSetInstallResultSuccess{
		M_classID: TL_CLASS_messages_stickerSetInstallResultSuccess,
	}
}

func (t *TL_messages_stickerSetInstallResultSuccess) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_stickerSetInstallResultSuccess))

	return ec.GetBuffer()
}

func (t *TL_messages_stickerSetInstallResultSuccess) Decode(b []byte) error {
	return nil
}

func (t *TL_messages_stickerSetInstallResultSuccess) String() string {
	return fmt.Sprintf("- messages_stickerSetInstallResultSuccess#38641628\n")
}

// messages_stickerSetInstallResultArchive#35e410a8
type TL_messages_stickerSetInstallResultArchive struct {
	M_classID int32
	M_sets    []TLObject
}

func (t *TL_messages_stickerSetInstallResultArchive) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_stickerSetInstallResultArchive) Set_sets(M_sets []TLObject) {
	t.M_sets = M_sets
}

func (t *TL_messages_stickerSetInstallResultArchive) Get_sets() []TLObject {
	return t.M_sets
}

func New_TL_messages_stickerSetInstallResultArchive() *TL_messages_stickerSetInstallResultArchive {
	return &TL_messages_stickerSetInstallResultArchive{
		M_classID: TL_CLASS_messages_stickerSetInstallResultArchive,
	}
}

func (t *TL_messages_stickerSetInstallResultArchive) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_stickerSetInstallResultArchive))
	ec.Vector(t.Get_sets())

	return ec.GetBuffer()
}

func (t *TL_messages_stickerSetInstallResultArchive) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_sets = dc.Vector()

	return dc.err
}

func (t *TL_messages_stickerSetInstallResultArchive) String() string {
	return fmt.Sprintf("- messages_stickerSetInstallResultArchive#35e410a8\n-- sets : %v\n", t.M_sets)
}

// stickerSetCovered#6410a5d2
type TL_stickerSetCovered struct {
	M_classID int32
	M_set     TLObject
	M_cover   TLObject
}

func (t *TL_stickerSetCovered) ClassID() int32 {
	return t.M_classID
}

func (t *TL_stickerSetCovered) Set_set(M_set TLObject) {
	t.M_set = M_set
}

func (t *TL_stickerSetCovered) Get_set() TLObject {
	return t.M_set
}

func (t *TL_stickerSetCovered) Set_cover(M_cover TLObject) {
	t.M_cover = M_cover
}

func (t *TL_stickerSetCovered) Get_cover() TLObject {
	return t.M_cover
}

func New_TL_stickerSetCovered() *TL_stickerSetCovered {
	return &TL_stickerSetCovered{
		M_classID: TL_CLASS_stickerSetCovered,
	}
}

func (t *TL_stickerSetCovered) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_stickerSetCovered))
	ec.TLObject(t.Get_set())
	ec.TLObject(t.Get_cover())

	return ec.GetBuffer()
}

func (t *TL_stickerSetCovered) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_set = dc.TLObject()
	t.M_cover = dc.TLObject()

	return dc.err
}

func (t *TL_stickerSetCovered) String() string {
	return fmt.Sprintf("- stickerSetCovered#6410a5d2\n-- set : %v\n-- cover : %v\n", t.M_set, t.M_cover)
}

// stickerSetMultiCovered#3407e51b
type TL_stickerSetMultiCovered struct {
	M_classID int32
	M_set     TLObject
	M_covers  []TLObject
}

func (t *TL_stickerSetMultiCovered) ClassID() int32 {
	return t.M_classID
}

func (t *TL_stickerSetMultiCovered) Set_set(M_set TLObject) {
	t.M_set = M_set
}

func (t *TL_stickerSetMultiCovered) Get_set() TLObject {
	return t.M_set
}

func (t *TL_stickerSetMultiCovered) Set_covers(M_covers []TLObject) {
	t.M_covers = M_covers
}

func (t *TL_stickerSetMultiCovered) Get_covers() []TLObject {
	return t.M_covers
}

func New_TL_stickerSetMultiCovered() *TL_stickerSetMultiCovered {
	return &TL_stickerSetMultiCovered{
		M_classID: TL_CLASS_stickerSetMultiCovered,
	}
}

func (t *TL_stickerSetMultiCovered) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_stickerSetMultiCovered))
	ec.TLObject(t.Get_set())
	ec.Vector(t.Get_covers())

	return ec.GetBuffer()
}

func (t *TL_stickerSetMultiCovered) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_set = dc.TLObject()
	t.M_covers = dc.Vector()

	return dc.err
}

func (t *TL_stickerSetMultiCovered) String() string {
	return fmt.Sprintf("- stickerSetMultiCovered#3407e51b\n-- set : %v\n-- covers : %v\n", t.M_set, t.M_covers)
}

// maskCoords#aed6dbb2
type TL_maskCoords struct {
	M_classID int32
	M_n       int32
	M_x       float64
	M_y       float64
	M_zoom    float64
}

func (t *TL_maskCoords) ClassID() int32 {
	return t.M_classID
}

func (t *TL_maskCoords) Set_n(M_n int32) {
	t.M_n = M_n
}

func (t *TL_maskCoords) Get_n() int32 {
	return t.M_n
}

func (t *TL_maskCoords) Set_x(M_x float64) {
	t.M_x = M_x
}

func (t *TL_maskCoords) Get_x() float64 {
	return t.M_x
}

func (t *TL_maskCoords) Set_y(M_y float64) {
	t.M_y = M_y
}

func (t *TL_maskCoords) Get_y() float64 {
	return t.M_y
}

func (t *TL_maskCoords) Set_zoom(M_zoom float64) {
	t.M_zoom = M_zoom
}

func (t *TL_maskCoords) Get_zoom() float64 {
	return t.M_zoom
}

func New_TL_maskCoords() *TL_maskCoords {
	return &TL_maskCoords{
		M_classID: TL_CLASS_maskCoords,
	}
}

func (t *TL_maskCoords) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_maskCoords))
	ec.Int(t.Get_n())
	ec.Double(t.Get_x())
	ec.Double(t.Get_y())
	ec.Double(t.Get_zoom())

	return ec.GetBuffer()
}

func (t *TL_maskCoords) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_n = dc.Int()
	t.M_x = dc.Double()
	t.M_y = dc.Double()
	t.M_zoom = dc.Double()

	return dc.err
}

func (t *TL_maskCoords) String() string {
	return fmt.Sprintf("- maskCoords#aed6dbb2\n-- n : %v\n-- x : %v\n-- y : %v\n-- zoom : %v\n", t.M_n, t.M_x, t.M_y, t.M_zoom)
}

// inputStickeredMediaPhoto#4a992157
type TL_inputStickeredMediaPhoto struct {
	M_classID int32
	M_id      TLObject
}

func (t *TL_inputStickeredMediaPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputStickeredMediaPhoto) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_inputStickeredMediaPhoto) Get_id() TLObject {
	return t.M_id
}

func New_TL_inputStickeredMediaPhoto() *TL_inputStickeredMediaPhoto {
	return &TL_inputStickeredMediaPhoto{
		M_classID: TL_CLASS_inputStickeredMediaPhoto,
	}
}

func (t *TL_inputStickeredMediaPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputStickeredMediaPhoto))
	ec.TLObject(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_inputStickeredMediaPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()

	return dc.err
}

func (t *TL_inputStickeredMediaPhoto) String() string {
	return fmt.Sprintf("- inputStickeredMediaPhoto#4a992157\n-- id : %v\n", t.M_id)
}

// inputStickeredMediaDocument#438865b
type TL_inputStickeredMediaDocument struct {
	M_classID int32
	M_id      TLObject
}

func (t *TL_inputStickeredMediaDocument) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputStickeredMediaDocument) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_inputStickeredMediaDocument) Get_id() TLObject {
	return t.M_id
}

func New_TL_inputStickeredMediaDocument() *TL_inputStickeredMediaDocument {
	return &TL_inputStickeredMediaDocument{
		M_classID: TL_CLASS_inputStickeredMediaDocument,
	}
}

func (t *TL_inputStickeredMediaDocument) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputStickeredMediaDocument))
	ec.TLObject(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_inputStickeredMediaDocument) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()

	return dc.err
}

func (t *TL_inputStickeredMediaDocument) String() string {
	return fmt.Sprintf("- inputStickeredMediaDocument#438865b\n-- id : %v\n", t.M_id)
}

// game#bdf9653b
type TL_game struct {
	M_classID     int32
	M_flags       TLObject
	M_id          int64
	M_access_hash int64
	M_short_name  string
	M_title       string
	M_description string
	M_photo       TLObject
	M_document    TLObject
}

func (t *TL_game) ClassID() int32 {
	return t.M_classID
}

func (t *TL_game) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_game) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_game) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_game) Get_id() int64 {
	return t.M_id
}

func (t *TL_game) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_game) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_game) Set_short_name(M_short_name string) {
	t.M_short_name = M_short_name
}

func (t *TL_game) Get_short_name() string {
	return t.M_short_name
}

func (t *TL_game) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_game) Get_title() string {
	return t.M_title
}

func (t *TL_game) Set_description(M_description string) {
	t.M_description = M_description
}

func (t *TL_game) Get_description() string {
	return t.M_description
}

func (t *TL_game) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_game) Get_photo() TLObject {
	return t.M_photo
}

func (t *TL_game) Set_document(M_document TLObject) {
	t.M_document = M_document
}

func (t *TL_game) Get_document() TLObject {
	return t.M_document
}

func New_TL_game() *TL_game {
	return &TL_game{
		M_classID: TL_CLASS_game,
	}
}

func (t *TL_game) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_game))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.String(t.Get_short_name())
	ec.String(t.Get_title())
	ec.String(t.Get_description())
	ec.TLObject(t.Get_photo())
	ec.TLObject(t.Get_document())

	return ec.GetBuffer()
}

func (t *TL_game) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_short_name = dc.String()
	t.M_title = dc.String()
	t.M_description = dc.String()
	t.M_photo = dc.TLObject()
	t.M_document = dc.TLObject()

	return dc.err
}

func (t *TL_game) String() string {
	return fmt.Sprintf("- game#bdf9653b\n-- flags : %v\n-- id : %v\n-- access_hash : %v\n-- short_name : %v\n-- title : %v\n-- description : %v\n-- photo : %v\n-- document : %v\n", t.M_flags, t.M_id, t.M_access_hash, t.M_short_name, t.M_title, t.M_description, t.M_photo, t.M_document)
}

// inputGameID#32c3e77
type TL_inputGameID struct {
	M_classID     int32
	M_id          int64
	M_access_hash int64
}

func (t *TL_inputGameID) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputGameID) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputGameID) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputGameID) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputGameID) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputGameID() *TL_inputGameID {
	return &TL_inputGameID{
		M_classID: TL_CLASS_inputGameID,
	}
}

func (t *TL_inputGameID) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputGameID))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputGameID) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputGameID) String() string {
	return fmt.Sprintf("- inputGameID#32c3e77\n-- id : %v\n-- access_hash : %v\n", t.M_id, t.M_access_hash)
}

// inputGameShortName#c331e80a
type TL_inputGameShortName struct {
	M_classID    int32
	M_bot_id     TLObject
	M_short_name string
}

func (t *TL_inputGameShortName) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputGameShortName) Set_bot_id(M_bot_id TLObject) {
	t.M_bot_id = M_bot_id
}

func (t *TL_inputGameShortName) Get_bot_id() TLObject {
	return t.M_bot_id
}

func (t *TL_inputGameShortName) Set_short_name(M_short_name string) {
	t.M_short_name = M_short_name
}

func (t *TL_inputGameShortName) Get_short_name() string {
	return t.M_short_name
}

func New_TL_inputGameShortName() *TL_inputGameShortName {
	return &TL_inputGameShortName{
		M_classID: TL_CLASS_inputGameShortName,
	}
}

func (t *TL_inputGameShortName) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputGameShortName))
	ec.TLObject(t.Get_bot_id())
	ec.String(t.Get_short_name())

	return ec.GetBuffer()
}

func (t *TL_inputGameShortName) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_bot_id = dc.TLObject()
	t.M_short_name = dc.String()

	return dc.err
}

func (t *TL_inputGameShortName) String() string {
	return fmt.Sprintf("- inputGameShortName#c331e80a\n-- bot_id : %v\n-- short_name : %v\n", t.M_bot_id, t.M_short_name)
}

// highScore#58fffcd0
type TL_highScore struct {
	M_classID int32
	M_pos     int32
	M_user_id int32
	M_score   int32
}

func (t *TL_highScore) ClassID() int32 {
	return t.M_classID
}

func (t *TL_highScore) Set_pos(M_pos int32) {
	t.M_pos = M_pos
}

func (t *TL_highScore) Get_pos() int32 {
	return t.M_pos
}

func (t *TL_highScore) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_highScore) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_highScore) Set_score(M_score int32) {
	t.M_score = M_score
}

func (t *TL_highScore) Get_score() int32 {
	return t.M_score
}

func New_TL_highScore() *TL_highScore {
	return &TL_highScore{
		M_classID: TL_CLASS_highScore,
	}
}

func (t *TL_highScore) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_highScore))
	ec.Int(t.Get_pos())
	ec.Int(t.Get_user_id())
	ec.Int(t.Get_score())

	return ec.GetBuffer()
}

func (t *TL_highScore) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pos = dc.Int()
	t.M_user_id = dc.Int()
	t.M_score = dc.Int()

	return dc.err
}

func (t *TL_highScore) String() string {
	return fmt.Sprintf("- highScore#58fffcd0\n-- pos : %v\n-- user_id : %v\n-- score : %v\n", t.M_pos, t.M_user_id, t.M_score)
}

// messages_highScores#9a3bfd99
type TL_messages_highScores struct {
	M_classID int32
	M_scores  []TLObject
	M_users   []TLObject
}

func (t *TL_messages_highScores) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_highScores) Set_scores(M_scores []TLObject) {
	t.M_scores = M_scores
}

func (t *TL_messages_highScores) Get_scores() []TLObject {
	return t.M_scores
}

func (t *TL_messages_highScores) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_highScores) Get_users() []TLObject {
	return t.M_users
}

func New_TL_messages_highScores() *TL_messages_highScores {
	return &TL_messages_highScores{
		M_classID: TL_CLASS_messages_highScores,
	}
}

func (t *TL_messages_highScores) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_highScores))
	ec.Vector(t.Get_scores())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_messages_highScores) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_scores = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_messages_highScores) String() string {
	return fmt.Sprintf("- messages_highScores#9a3bfd99\n-- scores : %v\n-- users : %v\n", t.M_scores, t.M_users)
}

// textEmpty#dc3d824f
type TL_textEmpty struct {
	M_classID int32
}

func (t *TL_textEmpty) ClassID() int32 {
	return t.M_classID
}

func New_TL_textEmpty() *TL_textEmpty {
	return &TL_textEmpty{
		M_classID: TL_CLASS_textEmpty,
	}
}

func (t *TL_textEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textEmpty))

	return ec.GetBuffer()
}

func (t *TL_textEmpty) Decode(b []byte) error {
	return nil
}

func (t *TL_textEmpty) String() string {
	return fmt.Sprintf("- textEmpty#dc3d824f\n")
}

// textPlain#744694e0
type TL_textPlain struct {
	M_classID int32
	M_text    string
}

func (t *TL_textPlain) ClassID() int32 {
	return t.M_classID
}

func (t *TL_textPlain) Set_text(M_text string) {
	t.M_text = M_text
}

func (t *TL_textPlain) Get_text() string {
	return t.M_text
}

func New_TL_textPlain() *TL_textPlain {
	return &TL_textPlain{
		M_classID: TL_CLASS_textPlain,
	}
}

func (t *TL_textPlain) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textPlain))
	ec.String(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_textPlain) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.String()

	return dc.err
}

func (t *TL_textPlain) String() string {
	return fmt.Sprintf("- textPlain#744694e0\n-- text : %v\n", t.M_text)
}

// textBold#6724abc4
type TL_textBold struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_textBold) ClassID() int32 {
	return t.M_classID
}

func (t *TL_textBold) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_textBold) Get_text() TLObject {
	return t.M_text
}

func New_TL_textBold() *TL_textBold {
	return &TL_textBold{
		M_classID: TL_CLASS_textBold,
	}
}

func (t *TL_textBold) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textBold))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_textBold) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_textBold) String() string {
	return fmt.Sprintf("- textBold#6724abc4\n-- text : %v\n", t.M_text)
}

// textItalic#d912a59c
type TL_textItalic struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_textItalic) ClassID() int32 {
	return t.M_classID
}

func (t *TL_textItalic) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_textItalic) Get_text() TLObject {
	return t.M_text
}

func New_TL_textItalic() *TL_textItalic {
	return &TL_textItalic{
		M_classID: TL_CLASS_textItalic,
	}
}

func (t *TL_textItalic) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textItalic))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_textItalic) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_textItalic) String() string {
	return fmt.Sprintf("- textItalic#d912a59c\n-- text : %v\n", t.M_text)
}

// textUnderline#c12622c4
type TL_textUnderline struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_textUnderline) ClassID() int32 {
	return t.M_classID
}

func (t *TL_textUnderline) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_textUnderline) Get_text() TLObject {
	return t.M_text
}

func New_TL_textUnderline() *TL_textUnderline {
	return &TL_textUnderline{
		M_classID: TL_CLASS_textUnderline,
	}
}

func (t *TL_textUnderline) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textUnderline))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_textUnderline) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_textUnderline) String() string {
	return fmt.Sprintf("- textUnderline#c12622c4\n-- text : %v\n", t.M_text)
}

// textStrike#9bf8bb95
type TL_textStrike struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_textStrike) ClassID() int32 {
	return t.M_classID
}

func (t *TL_textStrike) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_textStrike) Get_text() TLObject {
	return t.M_text
}

func New_TL_textStrike() *TL_textStrike {
	return &TL_textStrike{
		M_classID: TL_CLASS_textStrike,
	}
}

func (t *TL_textStrike) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textStrike))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_textStrike) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_textStrike) String() string {
	return fmt.Sprintf("- textStrike#9bf8bb95\n-- text : %v\n", t.M_text)
}

// textFixed#6c3f19b9
type TL_textFixed struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_textFixed) ClassID() int32 {
	return t.M_classID
}

func (t *TL_textFixed) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_textFixed) Get_text() TLObject {
	return t.M_text
}

func New_TL_textFixed() *TL_textFixed {
	return &TL_textFixed{
		M_classID: TL_CLASS_textFixed,
	}
}

func (t *TL_textFixed) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textFixed))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_textFixed) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_textFixed) String() string {
	return fmt.Sprintf("- textFixed#6c3f19b9\n-- text : %v\n", t.M_text)
}

// textUrl#3c2884c1
type TL_textUrl struct {
	M_classID    int32
	M_text       TLObject
	M_url        string
	M_webpage_id int64
}

func (t *TL_textUrl) ClassID() int32 {
	return t.M_classID
}

func (t *TL_textUrl) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_textUrl) Get_text() TLObject {
	return t.M_text
}

func (t *TL_textUrl) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_textUrl) Get_url() string {
	return t.M_url
}

func (t *TL_textUrl) Set_webpage_id(M_webpage_id int64) {
	t.M_webpage_id = M_webpage_id
}

func (t *TL_textUrl) Get_webpage_id() int64 {
	return t.M_webpage_id
}

func New_TL_textUrl() *TL_textUrl {
	return &TL_textUrl{
		M_classID: TL_CLASS_textUrl,
	}
}

func (t *TL_textUrl) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textUrl))
	ec.TLObject(t.Get_text())
	ec.String(t.Get_url())
	ec.Long(t.Get_webpage_id())

	return ec.GetBuffer()
}

func (t *TL_textUrl) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()
	t.M_url = dc.String()
	t.M_webpage_id = dc.Long()

	return dc.err
}

func (t *TL_textUrl) String() string {
	return fmt.Sprintf("- textUrl#3c2884c1\n-- text : %v\n-- url : %v\n-- webpage_id : %v\n", t.M_text, t.M_url, t.M_webpage_id)
}

// textEmail#de5a0dd6
type TL_textEmail struct {
	M_classID int32
	M_text    TLObject
	M_email   string
}

func (t *TL_textEmail) ClassID() int32 {
	return t.M_classID
}

func (t *TL_textEmail) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_textEmail) Get_text() TLObject {
	return t.M_text
}

func (t *TL_textEmail) Set_email(M_email string) {
	t.M_email = M_email
}

func (t *TL_textEmail) Get_email() string {
	return t.M_email
}

func New_TL_textEmail() *TL_textEmail {
	return &TL_textEmail{
		M_classID: TL_CLASS_textEmail,
	}
}

func (t *TL_textEmail) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textEmail))
	ec.TLObject(t.Get_text())
	ec.String(t.Get_email())

	return ec.GetBuffer()
}

func (t *TL_textEmail) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()
	t.M_email = dc.String()

	return dc.err
}

func (t *TL_textEmail) String() string {
	return fmt.Sprintf("- textEmail#de5a0dd6\n-- text : %v\n-- email : %v\n", t.M_text, t.M_email)
}

// textConcat#7e6260d7
type TL_textConcat struct {
	M_classID int32
	M_texts   []TLObject
}

func (t *TL_textConcat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_textConcat) Set_texts(M_texts []TLObject) {
	t.M_texts = M_texts
}

func (t *TL_textConcat) Get_texts() []TLObject {
	return t.M_texts
}

func New_TL_textConcat() *TL_textConcat {
	return &TL_textConcat{
		M_classID: TL_CLASS_textConcat,
	}
}

func (t *TL_textConcat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_textConcat))
	ec.Vector(t.Get_texts())

	return ec.GetBuffer()
}

func (t *TL_textConcat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_texts = dc.Vector()

	return dc.err
}

func (t *TL_textConcat) String() string {
	return fmt.Sprintf("- textConcat#7e6260d7\n-- texts : %v\n", t.M_texts)
}

// pageBlockUnsupported#13567e8a
type TL_pageBlockUnsupported struct {
	M_classID int32
}

func (t *TL_pageBlockUnsupported) ClassID() int32 {
	return t.M_classID
}

func New_TL_pageBlockUnsupported() *TL_pageBlockUnsupported {
	return &TL_pageBlockUnsupported{
		M_classID: TL_CLASS_pageBlockUnsupported,
	}
}

func (t *TL_pageBlockUnsupported) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockUnsupported))

	return ec.GetBuffer()
}

func (t *TL_pageBlockUnsupported) Decode(b []byte) error {
	return nil
}

func (t *TL_pageBlockUnsupported) String() string {
	return fmt.Sprintf("- pageBlockUnsupported#13567e8a\n")
}

// pageBlockTitle#70abc3fd
type TL_pageBlockTitle struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_pageBlockTitle) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockTitle) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_pageBlockTitle) Get_text() TLObject {
	return t.M_text
}

func New_TL_pageBlockTitle() *TL_pageBlockTitle {
	return &TL_pageBlockTitle{
		M_classID: TL_CLASS_pageBlockTitle,
	}
}

func (t *TL_pageBlockTitle) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockTitle))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_pageBlockTitle) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockTitle) String() string {
	return fmt.Sprintf("- pageBlockTitle#70abc3fd\n-- text : %v\n", t.M_text)
}

// pageBlockSubtitle#8ffa9a1f
type TL_pageBlockSubtitle struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_pageBlockSubtitle) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockSubtitle) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_pageBlockSubtitle) Get_text() TLObject {
	return t.M_text
}

func New_TL_pageBlockSubtitle() *TL_pageBlockSubtitle {
	return &TL_pageBlockSubtitle{
		M_classID: TL_CLASS_pageBlockSubtitle,
	}
}

func (t *TL_pageBlockSubtitle) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockSubtitle))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_pageBlockSubtitle) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockSubtitle) String() string {
	return fmt.Sprintf("- pageBlockSubtitle#8ffa9a1f\n-- text : %v\n", t.M_text)
}

// pageBlockAuthorDate#baafe5e0
type TL_pageBlockAuthorDate struct {
	M_classID        int32
	M_author         TLObject
	M_published_date int32
}

func (t *TL_pageBlockAuthorDate) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockAuthorDate) Set_author(M_author TLObject) {
	t.M_author = M_author
}

func (t *TL_pageBlockAuthorDate) Get_author() TLObject {
	return t.M_author
}

func (t *TL_pageBlockAuthorDate) Set_published_date(M_published_date int32) {
	t.M_published_date = M_published_date
}

func (t *TL_pageBlockAuthorDate) Get_published_date() int32 {
	return t.M_published_date
}

func New_TL_pageBlockAuthorDate() *TL_pageBlockAuthorDate {
	return &TL_pageBlockAuthorDate{
		M_classID: TL_CLASS_pageBlockAuthorDate,
	}
}

func (t *TL_pageBlockAuthorDate) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockAuthorDate))
	ec.TLObject(t.Get_author())
	ec.Int(t.Get_published_date())

	return ec.GetBuffer()
}

func (t *TL_pageBlockAuthorDate) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_author = dc.TLObject()
	t.M_published_date = dc.Int()

	return dc.err
}

func (t *TL_pageBlockAuthorDate) String() string {
	return fmt.Sprintf("- pageBlockAuthorDate#baafe5e0\n-- author : %v\n-- published_date : %v\n", t.M_author, t.M_published_date)
}

// pageBlockHeader#bfd064ec
type TL_pageBlockHeader struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_pageBlockHeader) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockHeader) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_pageBlockHeader) Get_text() TLObject {
	return t.M_text
}

func New_TL_pageBlockHeader() *TL_pageBlockHeader {
	return &TL_pageBlockHeader{
		M_classID: TL_CLASS_pageBlockHeader,
	}
}

func (t *TL_pageBlockHeader) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockHeader))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_pageBlockHeader) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockHeader) String() string {
	return fmt.Sprintf("- pageBlockHeader#bfd064ec\n-- text : %v\n", t.M_text)
}

// pageBlockSubheader#f12bb6e1
type TL_pageBlockSubheader struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_pageBlockSubheader) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockSubheader) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_pageBlockSubheader) Get_text() TLObject {
	return t.M_text
}

func New_TL_pageBlockSubheader() *TL_pageBlockSubheader {
	return &TL_pageBlockSubheader{
		M_classID: TL_CLASS_pageBlockSubheader,
	}
}

func (t *TL_pageBlockSubheader) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockSubheader))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_pageBlockSubheader) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockSubheader) String() string {
	return fmt.Sprintf("- pageBlockSubheader#f12bb6e1\n-- text : %v\n", t.M_text)
}

// pageBlockParagraph#467a0766
type TL_pageBlockParagraph struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_pageBlockParagraph) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockParagraph) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_pageBlockParagraph) Get_text() TLObject {
	return t.M_text
}

func New_TL_pageBlockParagraph() *TL_pageBlockParagraph {
	return &TL_pageBlockParagraph{
		M_classID: TL_CLASS_pageBlockParagraph,
	}
}

func (t *TL_pageBlockParagraph) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockParagraph))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_pageBlockParagraph) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockParagraph) String() string {
	return fmt.Sprintf("- pageBlockParagraph#467a0766\n-- text : %v\n", t.M_text)
}

// pageBlockPreformatted#c070d93e
type TL_pageBlockPreformatted struct {
	M_classID  int32
	M_text     TLObject
	M_language string
}

func (t *TL_pageBlockPreformatted) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockPreformatted) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_pageBlockPreformatted) Get_text() TLObject {
	return t.M_text
}

func (t *TL_pageBlockPreformatted) Set_language(M_language string) {
	t.M_language = M_language
}

func (t *TL_pageBlockPreformatted) Get_language() string {
	return t.M_language
}

func New_TL_pageBlockPreformatted() *TL_pageBlockPreformatted {
	return &TL_pageBlockPreformatted{
		M_classID: TL_CLASS_pageBlockPreformatted,
	}
}

func (t *TL_pageBlockPreformatted) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockPreformatted))
	ec.TLObject(t.Get_text())
	ec.String(t.Get_language())

	return ec.GetBuffer()
}

func (t *TL_pageBlockPreformatted) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()
	t.M_language = dc.String()

	return dc.err
}

func (t *TL_pageBlockPreformatted) String() string {
	return fmt.Sprintf("- pageBlockPreformatted#c070d93e\n-- text : %v\n-- language : %v\n", t.M_text, t.M_language)
}

// pageBlockFooter#48870999
type TL_pageBlockFooter struct {
	M_classID int32
	M_text    TLObject
}

func (t *TL_pageBlockFooter) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockFooter) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_pageBlockFooter) Get_text() TLObject {
	return t.M_text
}

func New_TL_pageBlockFooter() *TL_pageBlockFooter {
	return &TL_pageBlockFooter{
		M_classID: TL_CLASS_pageBlockFooter,
	}
}

func (t *TL_pageBlockFooter) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockFooter))
	ec.TLObject(t.Get_text())

	return ec.GetBuffer()
}

func (t *TL_pageBlockFooter) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockFooter) String() string {
	return fmt.Sprintf("- pageBlockFooter#48870999\n-- text : %v\n", t.M_text)
}

// pageBlockDivider#db20b188
type TL_pageBlockDivider struct {
	M_classID int32
}

func (t *TL_pageBlockDivider) ClassID() int32 {
	return t.M_classID
}

func New_TL_pageBlockDivider() *TL_pageBlockDivider {
	return &TL_pageBlockDivider{
		M_classID: TL_CLASS_pageBlockDivider,
	}
}

func (t *TL_pageBlockDivider) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockDivider))

	return ec.GetBuffer()
}

func (t *TL_pageBlockDivider) Decode(b []byte) error {
	return nil
}

func (t *TL_pageBlockDivider) String() string {
	return fmt.Sprintf("- pageBlockDivider#db20b188\n")
}

// pageBlockAnchor#ce0d37b0
type TL_pageBlockAnchor struct {
	M_classID int32
	M_name    string
}

func (t *TL_pageBlockAnchor) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockAnchor) Set_name(M_name string) {
	t.M_name = M_name
}

func (t *TL_pageBlockAnchor) Get_name() string {
	return t.M_name
}

func New_TL_pageBlockAnchor() *TL_pageBlockAnchor {
	return &TL_pageBlockAnchor{
		M_classID: TL_CLASS_pageBlockAnchor,
	}
}

func (t *TL_pageBlockAnchor) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockAnchor))
	ec.String(t.Get_name())

	return ec.GetBuffer()
}

func (t *TL_pageBlockAnchor) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_name = dc.String()

	return dc.err
}

func (t *TL_pageBlockAnchor) String() string {
	return fmt.Sprintf("- pageBlockAnchor#ce0d37b0\n-- name : %v\n", t.M_name)
}

// pageBlockList#3a58c7f4
type TL_pageBlockList struct {
	M_classID int32
	M_ordered TLObject
	M_items   []TLObject
}

func (t *TL_pageBlockList) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockList) Set_ordered(M_ordered TLObject) {
	t.M_ordered = M_ordered
}

func (t *TL_pageBlockList) Get_ordered() TLObject {
	return t.M_ordered
}

func (t *TL_pageBlockList) Set_items(M_items []TLObject) {
	t.M_items = M_items
}

func (t *TL_pageBlockList) Get_items() []TLObject {
	return t.M_items
}

func New_TL_pageBlockList() *TL_pageBlockList {
	return &TL_pageBlockList{
		M_classID: TL_CLASS_pageBlockList,
	}
}

func (t *TL_pageBlockList) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockList))
	ec.TLObject(t.Get_ordered())
	ec.Vector(t.Get_items())

	return ec.GetBuffer()
}

func (t *TL_pageBlockList) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_ordered = dc.TLObject()
	t.M_items = dc.Vector()

	return dc.err
}

func (t *TL_pageBlockList) String() string {
	return fmt.Sprintf("- pageBlockList#3a58c7f4\n-- ordered : %v\n-- items : %v\n", t.M_ordered, t.M_items)
}

// pageBlockBlockquote#263d7c26
type TL_pageBlockBlockquote struct {
	M_classID int32
	M_text    TLObject
	M_caption TLObject
}

func (t *TL_pageBlockBlockquote) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockBlockquote) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_pageBlockBlockquote) Get_text() TLObject {
	return t.M_text
}

func (t *TL_pageBlockBlockquote) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_pageBlockBlockquote) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_pageBlockBlockquote() *TL_pageBlockBlockquote {
	return &TL_pageBlockBlockquote{
		M_classID: TL_CLASS_pageBlockBlockquote,
	}
}

func (t *TL_pageBlockBlockquote) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockBlockquote))
	ec.TLObject(t.Get_text())
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_pageBlockBlockquote) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()
	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockBlockquote) String() string {
	return fmt.Sprintf("- pageBlockBlockquote#263d7c26\n-- text : %v\n-- caption : %v\n", t.M_text, t.M_caption)
}

// pageBlockPullquote#4f4456d3
type TL_pageBlockPullquote struct {
	M_classID int32
	M_text    TLObject
	M_caption TLObject
}

func (t *TL_pageBlockPullquote) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockPullquote) Set_text(M_text TLObject) {
	t.M_text = M_text
}

func (t *TL_pageBlockPullquote) Get_text() TLObject {
	return t.M_text
}

func (t *TL_pageBlockPullquote) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_pageBlockPullquote) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_pageBlockPullquote() *TL_pageBlockPullquote {
	return &TL_pageBlockPullquote{
		M_classID: TL_CLASS_pageBlockPullquote,
	}
}

func (t *TL_pageBlockPullquote) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockPullquote))
	ec.TLObject(t.Get_text())
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_pageBlockPullquote) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_text = dc.TLObject()
	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockPullquote) String() string {
	return fmt.Sprintf("- pageBlockPullquote#4f4456d3\n-- text : %v\n-- caption : %v\n", t.M_text, t.M_caption)
}

// pageBlockPhoto#e9c69982
type TL_pageBlockPhoto struct {
	M_classID  int32
	M_photo_id int64
	M_caption  TLObject
}

func (t *TL_pageBlockPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockPhoto) Set_photo_id(M_photo_id int64) {
	t.M_photo_id = M_photo_id
}

func (t *TL_pageBlockPhoto) Get_photo_id() int64 {
	return t.M_photo_id
}

func (t *TL_pageBlockPhoto) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_pageBlockPhoto) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_pageBlockPhoto() *TL_pageBlockPhoto {
	return &TL_pageBlockPhoto{
		M_classID: TL_CLASS_pageBlockPhoto,
	}
}

func (t *TL_pageBlockPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockPhoto))
	ec.Long(t.Get_photo_id())
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_pageBlockPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_photo_id = dc.Long()
	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockPhoto) String() string {
	return fmt.Sprintf("- pageBlockPhoto#e9c69982\n-- photo_id : %v\n-- caption : %v\n", t.M_photo_id, t.M_caption)
}

// pageBlockVideo#d9d71866
type TL_pageBlockVideo struct {
	M_classID  int32
	M_flags    TLObject
	M_autoplay TLObject
	M_loop     TLObject
	M_video_id int64
	M_caption  TLObject
}

func (t *TL_pageBlockVideo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockVideo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_pageBlockVideo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_pageBlockVideo) Set_autoplay(M_autoplay TLObject) {
	t.M_autoplay = M_autoplay
}

func (t *TL_pageBlockVideo) Get_autoplay() TLObject {
	return t.M_autoplay
}

func (t *TL_pageBlockVideo) Set_loop(M_loop TLObject) {
	t.M_loop = M_loop
}

func (t *TL_pageBlockVideo) Get_loop() TLObject {
	return t.M_loop
}

func (t *TL_pageBlockVideo) Set_video_id(M_video_id int64) {
	t.M_video_id = M_video_id
}

func (t *TL_pageBlockVideo) Get_video_id() int64 {
	return t.M_video_id
}

func (t *TL_pageBlockVideo) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_pageBlockVideo) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_pageBlockVideo() *TL_pageBlockVideo {
	return &TL_pageBlockVideo{
		M_classID: TL_CLASS_pageBlockVideo,
	}
}

func (t *TL_pageBlockVideo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockVideo))
	ec.TLObject(t.Get_autoplay())
	ec.TLObject(t.Get_loop())
	ec.Long(t.Get_video_id())
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_pageBlockVideo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_autoplay = dc.TLObject()
	t.M_loop = dc.TLObject()
	t.M_video_id = dc.Long()
	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockVideo) String() string {
	return fmt.Sprintf("- pageBlockVideo#d9d71866\n-- flags : %v\n-- autoplay : %v\n-- loop : %v\n-- video_id : %v\n-- caption : %v\n", t.M_flags, t.M_autoplay, t.M_loop, t.M_video_id, t.M_caption)
}

// pageBlockCover#39f23300
type TL_pageBlockCover struct {
	M_classID int32
	M_cover   TLObject
}

func (t *TL_pageBlockCover) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockCover) Set_cover(M_cover TLObject) {
	t.M_cover = M_cover
}

func (t *TL_pageBlockCover) Get_cover() TLObject {
	return t.M_cover
}

func New_TL_pageBlockCover() *TL_pageBlockCover {
	return &TL_pageBlockCover{
		M_classID: TL_CLASS_pageBlockCover,
	}
}

func (t *TL_pageBlockCover) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockCover))
	ec.TLObject(t.Get_cover())

	return ec.GetBuffer()
}

func (t *TL_pageBlockCover) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_cover = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockCover) String() string {
	return fmt.Sprintf("- pageBlockCover#39f23300\n-- cover : %v\n", t.M_cover)
}

// pageBlockEmbed#cde200d1
type TL_pageBlockEmbed struct {
	M_classID         int32
	M_flags           TLObject
	M_full_width      TLObject
	M_allow_scrolling TLObject
	M_url             TLObject
	M_html            TLObject
	M_poster_photo_id TLObject
	M_w               int32
	M_h               int32
	M_caption         TLObject
}

func (t *TL_pageBlockEmbed) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockEmbed) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_pageBlockEmbed) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_pageBlockEmbed) Set_full_width(M_full_width TLObject) {
	t.M_full_width = M_full_width
}

func (t *TL_pageBlockEmbed) Get_full_width() TLObject {
	return t.M_full_width
}

func (t *TL_pageBlockEmbed) Set_allow_scrolling(M_allow_scrolling TLObject) {
	t.M_allow_scrolling = M_allow_scrolling
}

func (t *TL_pageBlockEmbed) Get_allow_scrolling() TLObject {
	return t.M_allow_scrolling
}

func (t *TL_pageBlockEmbed) Set_url(M_url TLObject) {
	t.M_url = M_url
}

func (t *TL_pageBlockEmbed) Get_url() TLObject {
	return t.M_url
}

func (t *TL_pageBlockEmbed) Set_html(M_html TLObject) {
	t.M_html = M_html
}

func (t *TL_pageBlockEmbed) Get_html() TLObject {
	return t.M_html
}

func (t *TL_pageBlockEmbed) Set_poster_photo_id(M_poster_photo_id TLObject) {
	t.M_poster_photo_id = M_poster_photo_id
}

func (t *TL_pageBlockEmbed) Get_poster_photo_id() TLObject {
	return t.M_poster_photo_id
}

func (t *TL_pageBlockEmbed) Set_w(M_w int32) {
	t.M_w = M_w
}

func (t *TL_pageBlockEmbed) Get_w() int32 {
	return t.M_w
}

func (t *TL_pageBlockEmbed) Set_h(M_h int32) {
	t.M_h = M_h
}

func (t *TL_pageBlockEmbed) Get_h() int32 {
	return t.M_h
}

func (t *TL_pageBlockEmbed) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_pageBlockEmbed) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_pageBlockEmbed() *TL_pageBlockEmbed {
	return &TL_pageBlockEmbed{
		M_classID: TL_CLASS_pageBlockEmbed,
	}
}

func (t *TL_pageBlockEmbed) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockEmbed))
	ec.TLObject(t.Get_full_width())
	ec.TLObject(t.Get_allow_scrolling())
	ec.TLObject(t.Get_url())
	ec.TLObject(t.Get_html())
	ec.TLObject(t.Get_poster_photo_id())
	ec.Int(t.Get_w())
	ec.Int(t.Get_h())
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_pageBlockEmbed) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_full_width = dc.TLObject()
	t.M_allow_scrolling = dc.TLObject()
	t.M_url = dc.TLObject()
	t.M_html = dc.TLObject()
	t.M_poster_photo_id = dc.TLObject()
	t.M_w = dc.Int()
	t.M_h = dc.Int()
	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockEmbed) String() string {
	return fmt.Sprintf("- pageBlockEmbed#cde200d1\n-- flags : %v\n-- full_width : %v\n-- allow_scrolling : %v\n-- url : %v\n-- html : %v\n-- poster_photo_id : %v\n-- w : %v\n-- h : %v\n-- caption : %v\n", t.M_flags, t.M_full_width, t.M_allow_scrolling, t.M_url, t.M_html, t.M_poster_photo_id, t.M_w, t.M_h, t.M_caption)
}

// pageBlockEmbedPost#292c7be9
type TL_pageBlockEmbedPost struct {
	M_classID         int32
	M_url             string
	M_webpage_id      int64
	M_author_photo_id int64
	M_author          string
	M_date            int32
	M_blocks          []TLObject
	M_caption         TLObject
}

func (t *TL_pageBlockEmbedPost) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockEmbedPost) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_pageBlockEmbedPost) Get_url() string {
	return t.M_url
}

func (t *TL_pageBlockEmbedPost) Set_webpage_id(M_webpage_id int64) {
	t.M_webpage_id = M_webpage_id
}

func (t *TL_pageBlockEmbedPost) Get_webpage_id() int64 {
	return t.M_webpage_id
}

func (t *TL_pageBlockEmbedPost) Set_author_photo_id(M_author_photo_id int64) {
	t.M_author_photo_id = M_author_photo_id
}

func (t *TL_pageBlockEmbedPost) Get_author_photo_id() int64 {
	return t.M_author_photo_id
}

func (t *TL_pageBlockEmbedPost) Set_author(M_author string) {
	t.M_author = M_author
}

func (t *TL_pageBlockEmbedPost) Get_author() string {
	return t.M_author
}

func (t *TL_pageBlockEmbedPost) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_pageBlockEmbedPost) Get_date() int32 {
	return t.M_date
}

func (t *TL_pageBlockEmbedPost) Set_blocks(M_blocks []TLObject) {
	t.M_blocks = M_blocks
}

func (t *TL_pageBlockEmbedPost) Get_blocks() []TLObject {
	return t.M_blocks
}

func (t *TL_pageBlockEmbedPost) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_pageBlockEmbedPost) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_pageBlockEmbedPost() *TL_pageBlockEmbedPost {
	return &TL_pageBlockEmbedPost{
		M_classID: TL_CLASS_pageBlockEmbedPost,
	}
}

func (t *TL_pageBlockEmbedPost) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockEmbedPost))
	ec.String(t.Get_url())
	ec.Long(t.Get_webpage_id())
	ec.Long(t.Get_author_photo_id())
	ec.String(t.Get_author())
	ec.Int(t.Get_date())
	ec.Vector(t.Get_blocks())
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_pageBlockEmbedPost) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_webpage_id = dc.Long()
	t.M_author_photo_id = dc.Long()
	t.M_author = dc.String()
	t.M_date = dc.Int()
	t.M_blocks = dc.Vector()
	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockEmbedPost) String() string {
	return fmt.Sprintf("- pageBlockEmbedPost#292c7be9\n-- url : %v\n-- webpage_id : %v\n-- author_photo_id : %v\n-- author : %v\n-- date : %v\n-- blocks : %v\n-- caption : %v\n", t.M_url, t.M_webpage_id, t.M_author_photo_id, t.M_author, t.M_date, t.M_blocks, t.M_caption)
}

// pageBlockCollage#8b31c4f
type TL_pageBlockCollage struct {
	M_classID int32
	M_items   []TLObject
	M_caption TLObject
}

func (t *TL_pageBlockCollage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockCollage) Set_items(M_items []TLObject) {
	t.M_items = M_items
}

func (t *TL_pageBlockCollage) Get_items() []TLObject {
	return t.M_items
}

func (t *TL_pageBlockCollage) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_pageBlockCollage) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_pageBlockCollage() *TL_pageBlockCollage {
	return &TL_pageBlockCollage{
		M_classID: TL_CLASS_pageBlockCollage,
	}
}

func (t *TL_pageBlockCollage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockCollage))
	ec.Vector(t.Get_items())
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_pageBlockCollage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_items = dc.Vector()
	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockCollage) String() string {
	return fmt.Sprintf("- pageBlockCollage#8b31c4f\n-- items : %v\n-- caption : %v\n", t.M_items, t.M_caption)
}

// pageBlockSlideshow#130c8963
type TL_pageBlockSlideshow struct {
	M_classID int32
	M_items   []TLObject
	M_caption TLObject
}

func (t *TL_pageBlockSlideshow) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockSlideshow) Set_items(M_items []TLObject) {
	t.M_items = M_items
}

func (t *TL_pageBlockSlideshow) Get_items() []TLObject {
	return t.M_items
}

func (t *TL_pageBlockSlideshow) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_pageBlockSlideshow) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_pageBlockSlideshow() *TL_pageBlockSlideshow {
	return &TL_pageBlockSlideshow{
		M_classID: TL_CLASS_pageBlockSlideshow,
	}
}

func (t *TL_pageBlockSlideshow) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockSlideshow))
	ec.Vector(t.Get_items())
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_pageBlockSlideshow) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_items = dc.Vector()
	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockSlideshow) String() string {
	return fmt.Sprintf("- pageBlockSlideshow#130c8963\n-- items : %v\n-- caption : %v\n", t.M_items, t.M_caption)
}

// pageBlockChannel#ef1751b5
type TL_pageBlockChannel struct {
	M_classID int32
	M_channel TLObject
}

func (t *TL_pageBlockChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockChannel) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_pageBlockChannel) Get_channel() TLObject {
	return t.M_channel
}

func New_TL_pageBlockChannel() *TL_pageBlockChannel {
	return &TL_pageBlockChannel{
		M_classID: TL_CLASS_pageBlockChannel,
	}
}

func (t *TL_pageBlockChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockChannel))
	ec.TLObject(t.Get_channel())

	return ec.GetBuffer()
}

func (t *TL_pageBlockChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockChannel) String() string {
	return fmt.Sprintf("- pageBlockChannel#ef1751b5\n-- channel : %v\n", t.M_channel)
}

// pageBlockAudio#31b81a7f
type TL_pageBlockAudio struct {
	M_classID  int32
	M_audio_id int64
	M_caption  TLObject
}

func (t *TL_pageBlockAudio) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageBlockAudio) Set_audio_id(M_audio_id int64) {
	t.M_audio_id = M_audio_id
}

func (t *TL_pageBlockAudio) Get_audio_id() int64 {
	return t.M_audio_id
}

func (t *TL_pageBlockAudio) Set_caption(M_caption TLObject) {
	t.M_caption = M_caption
}

func (t *TL_pageBlockAudio) Get_caption() TLObject {
	return t.M_caption
}

func New_TL_pageBlockAudio() *TL_pageBlockAudio {
	return &TL_pageBlockAudio{
		M_classID: TL_CLASS_pageBlockAudio,
	}
}

func (t *TL_pageBlockAudio) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageBlockAudio))
	ec.Long(t.Get_audio_id())
	ec.TLObject(t.Get_caption())

	return ec.GetBuffer()
}

func (t *TL_pageBlockAudio) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_audio_id = dc.Long()
	t.M_caption = dc.TLObject()

	return dc.err
}

func (t *TL_pageBlockAudio) String() string {
	return fmt.Sprintf("- pageBlockAudio#31b81a7f\n-- audio_id : %v\n-- caption : %v\n", t.M_audio_id, t.M_caption)
}

// pagePart#8e3f9ebe
type TL_pagePart struct {
	M_classID   int32
	M_blocks    []TLObject
	M_photos    []TLObject
	M_documents []TLObject
}

func (t *TL_pagePart) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pagePart) Set_blocks(M_blocks []TLObject) {
	t.M_blocks = M_blocks
}

func (t *TL_pagePart) Get_blocks() []TLObject {
	return t.M_blocks
}

func (t *TL_pagePart) Set_photos(M_photos []TLObject) {
	t.M_photos = M_photos
}

func (t *TL_pagePart) Get_photos() []TLObject {
	return t.M_photos
}

func (t *TL_pagePart) Set_documents(M_documents []TLObject) {
	t.M_documents = M_documents
}

func (t *TL_pagePart) Get_documents() []TLObject {
	return t.M_documents
}

func New_TL_pagePart() *TL_pagePart {
	return &TL_pagePart{
		M_classID: TL_CLASS_pagePart,
	}
}

func (t *TL_pagePart) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pagePart))
	ec.Vector(t.Get_blocks())
	ec.Vector(t.Get_photos())
	ec.Vector(t.Get_documents())

	return ec.GetBuffer()
}

func (t *TL_pagePart) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_blocks = dc.Vector()
	t.M_photos = dc.Vector()
	t.M_documents = dc.Vector()

	return dc.err
}

func (t *TL_pagePart) String() string {
	return fmt.Sprintf("- pagePart#8e3f9ebe\n-- blocks : %v\n-- photos : %v\n-- documents : %v\n", t.M_blocks, t.M_photos, t.M_documents)
}

// pageFull#556ec7aa
type TL_pageFull struct {
	M_classID   int32
	M_blocks    []TLObject
	M_photos    []TLObject
	M_documents []TLObject
}

func (t *TL_pageFull) ClassID() int32 {
	return t.M_classID
}

func (t *TL_pageFull) Set_blocks(M_blocks []TLObject) {
	t.M_blocks = M_blocks
}

func (t *TL_pageFull) Get_blocks() []TLObject {
	return t.M_blocks
}

func (t *TL_pageFull) Set_photos(M_photos []TLObject) {
	t.M_photos = M_photos
}

func (t *TL_pageFull) Get_photos() []TLObject {
	return t.M_photos
}

func (t *TL_pageFull) Set_documents(M_documents []TLObject) {
	t.M_documents = M_documents
}

func (t *TL_pageFull) Get_documents() []TLObject {
	return t.M_documents
}

func New_TL_pageFull() *TL_pageFull {
	return &TL_pageFull{
		M_classID: TL_CLASS_pageFull,
	}
}

func (t *TL_pageFull) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_pageFull))
	ec.Vector(t.Get_blocks())
	ec.Vector(t.Get_photos())
	ec.Vector(t.Get_documents())

	return ec.GetBuffer()
}

func (t *TL_pageFull) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_blocks = dc.Vector()
	t.M_photos = dc.Vector()
	t.M_documents = dc.Vector()

	return dc.err
}

func (t *TL_pageFull) String() string {
	return fmt.Sprintf("- pageFull#556ec7aa\n-- blocks : %v\n-- photos : %v\n-- documents : %v\n", t.M_blocks, t.M_photos, t.M_documents)
}

// phoneCallDiscardReasonMissed#85e42301
type TL_phoneCallDiscardReasonMissed struct {
	M_classID int32
}

func (t *TL_phoneCallDiscardReasonMissed) ClassID() int32 {
	return t.M_classID
}

func New_TL_phoneCallDiscardReasonMissed() *TL_phoneCallDiscardReasonMissed {
	return &TL_phoneCallDiscardReasonMissed{
		M_classID: TL_CLASS_phoneCallDiscardReasonMissed,
	}
}

func (t *TL_phoneCallDiscardReasonMissed) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallDiscardReasonMissed))

	return ec.GetBuffer()
}

func (t *TL_phoneCallDiscardReasonMissed) Decode(b []byte) error {
	return nil
}

func (t *TL_phoneCallDiscardReasonMissed) String() string {
	return fmt.Sprintf("- phoneCallDiscardReasonMissed#85e42301\n")
}

// phoneCallDiscardReasonDisconnect#e095c1a0
type TL_phoneCallDiscardReasonDisconnect struct {
	M_classID int32
}

func (t *TL_phoneCallDiscardReasonDisconnect) ClassID() int32 {
	return t.M_classID
}

func New_TL_phoneCallDiscardReasonDisconnect() *TL_phoneCallDiscardReasonDisconnect {
	return &TL_phoneCallDiscardReasonDisconnect{
		M_classID: TL_CLASS_phoneCallDiscardReasonDisconnect,
	}
}

func (t *TL_phoneCallDiscardReasonDisconnect) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallDiscardReasonDisconnect))

	return ec.GetBuffer()
}

func (t *TL_phoneCallDiscardReasonDisconnect) Decode(b []byte) error {
	return nil
}

func (t *TL_phoneCallDiscardReasonDisconnect) String() string {
	return fmt.Sprintf("- phoneCallDiscardReasonDisconnect#e095c1a0\n")
}

// phoneCallDiscardReasonHangup#57adc690
type TL_phoneCallDiscardReasonHangup struct {
	M_classID int32
}

func (t *TL_phoneCallDiscardReasonHangup) ClassID() int32 {
	return t.M_classID
}

func New_TL_phoneCallDiscardReasonHangup() *TL_phoneCallDiscardReasonHangup {
	return &TL_phoneCallDiscardReasonHangup{
		M_classID: TL_CLASS_phoneCallDiscardReasonHangup,
	}
}

func (t *TL_phoneCallDiscardReasonHangup) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallDiscardReasonHangup))

	return ec.GetBuffer()
}

func (t *TL_phoneCallDiscardReasonHangup) Decode(b []byte) error {
	return nil
}

func (t *TL_phoneCallDiscardReasonHangup) String() string {
	return fmt.Sprintf("- phoneCallDiscardReasonHangup#57adc690\n")
}

// phoneCallDiscardReasonBusy#faf7e8c9
type TL_phoneCallDiscardReasonBusy struct {
	M_classID int32
}

func (t *TL_phoneCallDiscardReasonBusy) ClassID() int32 {
	return t.M_classID
}

func New_TL_phoneCallDiscardReasonBusy() *TL_phoneCallDiscardReasonBusy {
	return &TL_phoneCallDiscardReasonBusy{
		M_classID: TL_CLASS_phoneCallDiscardReasonBusy,
	}
}

func (t *TL_phoneCallDiscardReasonBusy) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallDiscardReasonBusy))

	return ec.GetBuffer()
}

func (t *TL_phoneCallDiscardReasonBusy) Decode(b []byte) error {
	return nil
}

func (t *TL_phoneCallDiscardReasonBusy) String() string {
	return fmt.Sprintf("- phoneCallDiscardReasonBusy#faf7e8c9\n")
}

// dataJSON#7d748d04
type TL_dataJSON struct {
	M_classID int32
	M_data    string
}

func (t *TL_dataJSON) ClassID() int32 {
	return t.M_classID
}

func (t *TL_dataJSON) Set_data(M_data string) {
	t.M_data = M_data
}

func (t *TL_dataJSON) Get_data() string {
	return t.M_data
}

func New_TL_dataJSON() *TL_dataJSON {
	return &TL_dataJSON{
		M_classID: TL_CLASS_dataJSON,
	}
}

func (t *TL_dataJSON) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_dataJSON))
	ec.String(t.Get_data())

	return ec.GetBuffer()
}

func (t *TL_dataJSON) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_data = dc.String()

	return dc.err
}

func (t *TL_dataJSON) String() string {
	return fmt.Sprintf("- dataJSON#7d748d04\n-- data : %v\n", t.M_data)
}

// labeledPrice#cb296bf8
type TL_labeledPrice struct {
	M_classID int32
	M_label   string
	M_amount  int64
}

func (t *TL_labeledPrice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_labeledPrice) Set_label(M_label string) {
	t.M_label = M_label
}

func (t *TL_labeledPrice) Get_label() string {
	return t.M_label
}

func (t *TL_labeledPrice) Set_amount(M_amount int64) {
	t.M_amount = M_amount
}

func (t *TL_labeledPrice) Get_amount() int64 {
	return t.M_amount
}

func New_TL_labeledPrice() *TL_labeledPrice {
	return &TL_labeledPrice{
		M_classID: TL_CLASS_labeledPrice,
	}
}

func (t *TL_labeledPrice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_labeledPrice))
	ec.String(t.Get_label())
	ec.Long(t.Get_amount())

	return ec.GetBuffer()
}

func (t *TL_labeledPrice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_label = dc.String()
	t.M_amount = dc.Long()

	return dc.err
}

func (t *TL_labeledPrice) String() string {
	return fmt.Sprintf("- labeledPrice#cb296bf8\n-- label : %v\n-- amount : %v\n", t.M_label, t.M_amount)
}

// invoice#c30aa358
type TL_invoice struct {
	M_classID                    int32
	M_flags                      TLObject
	M_test                       TLObject
	M_name_requested             TLObject
	M_phone_requested            TLObject
	M_email_requested            TLObject
	M_shipping_address_requested TLObject
	M_flexible                   TLObject
	M_phone_to_provider          TLObject
	M_email_to_provider          TLObject
	M_currency                   string
	M_prices                     []TLObject
}

func (t *TL_invoice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_invoice) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_invoice) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_invoice) Set_test(M_test TLObject) {
	t.M_test = M_test
}

func (t *TL_invoice) Get_test() TLObject {
	return t.M_test
}

func (t *TL_invoice) Set_name_requested(M_name_requested TLObject) {
	t.M_name_requested = M_name_requested
}

func (t *TL_invoice) Get_name_requested() TLObject {
	return t.M_name_requested
}

func (t *TL_invoice) Set_phone_requested(M_phone_requested TLObject) {
	t.M_phone_requested = M_phone_requested
}

func (t *TL_invoice) Get_phone_requested() TLObject {
	return t.M_phone_requested
}

func (t *TL_invoice) Set_email_requested(M_email_requested TLObject) {
	t.M_email_requested = M_email_requested
}

func (t *TL_invoice) Get_email_requested() TLObject {
	return t.M_email_requested
}

func (t *TL_invoice) Set_shipping_address_requested(M_shipping_address_requested TLObject) {
	t.M_shipping_address_requested = M_shipping_address_requested
}

func (t *TL_invoice) Get_shipping_address_requested() TLObject {
	return t.M_shipping_address_requested
}

func (t *TL_invoice) Set_flexible(M_flexible TLObject) {
	t.M_flexible = M_flexible
}

func (t *TL_invoice) Get_flexible() TLObject {
	return t.M_flexible
}

func (t *TL_invoice) Set_phone_to_provider(M_phone_to_provider TLObject) {
	t.M_phone_to_provider = M_phone_to_provider
}

func (t *TL_invoice) Get_phone_to_provider() TLObject {
	return t.M_phone_to_provider
}

func (t *TL_invoice) Set_email_to_provider(M_email_to_provider TLObject) {
	t.M_email_to_provider = M_email_to_provider
}

func (t *TL_invoice) Get_email_to_provider() TLObject {
	return t.M_email_to_provider
}

func (t *TL_invoice) Set_currency(M_currency string) {
	t.M_currency = M_currency
}

func (t *TL_invoice) Get_currency() string {
	return t.M_currency
}

func (t *TL_invoice) Set_prices(M_prices []TLObject) {
	t.M_prices = M_prices
}

func (t *TL_invoice) Get_prices() []TLObject {
	return t.M_prices
}

func New_TL_invoice() *TL_invoice {
	return &TL_invoice{
		M_classID: TL_CLASS_invoice,
	}
}

func (t *TL_invoice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_invoice))
	ec.TLObject(t.Get_test())
	ec.TLObject(t.Get_name_requested())
	ec.TLObject(t.Get_phone_requested())
	ec.TLObject(t.Get_email_requested())
	ec.TLObject(t.Get_shipping_address_requested())
	ec.TLObject(t.Get_flexible())
	ec.TLObject(t.Get_phone_to_provider())
	ec.TLObject(t.Get_email_to_provider())
	ec.String(t.Get_currency())
	ec.Vector(t.Get_prices())

	return ec.GetBuffer()
}

func (t *TL_invoice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_test = dc.TLObject()
	t.M_name_requested = dc.TLObject()
	t.M_phone_requested = dc.TLObject()
	t.M_email_requested = dc.TLObject()
	t.M_shipping_address_requested = dc.TLObject()
	t.M_flexible = dc.TLObject()
	t.M_phone_to_provider = dc.TLObject()
	t.M_email_to_provider = dc.TLObject()
	t.M_currency = dc.String()
	t.M_prices = dc.Vector()

	return dc.err
}

func (t *TL_invoice) String() string {
	return fmt.Sprintf("- invoice#c30aa358\n-- flags : %v\n-- test : %v\n-- name_requested : %v\n-- phone_requested : %v\n-- email_requested : %v\n-- shipping_address_requested : %v\n-- flexible : %v\n-- phone_to_provider : %v\n-- email_to_provider : %v\n-- currency : %v\n-- prices : %v\n", t.M_flags, t.M_test, t.M_name_requested, t.M_phone_requested, t.M_email_requested, t.M_shipping_address_requested, t.M_flexible, t.M_phone_to_provider, t.M_email_to_provider, t.M_currency, t.M_prices)
}

// paymentCharge#ea02c27e
type TL_paymentCharge struct {
	M_classID            int32
	M_id                 string
	M_provider_charge_id string
}

func (t *TL_paymentCharge) ClassID() int32 {
	return t.M_classID
}

func (t *TL_paymentCharge) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_paymentCharge) Get_id() string {
	return t.M_id
}

func (t *TL_paymentCharge) Set_provider_charge_id(M_provider_charge_id string) {
	t.M_provider_charge_id = M_provider_charge_id
}

func (t *TL_paymentCharge) Get_provider_charge_id() string {
	return t.M_provider_charge_id
}

func New_TL_paymentCharge() *TL_paymentCharge {
	return &TL_paymentCharge{
		M_classID: TL_CLASS_paymentCharge,
	}
}

func (t *TL_paymentCharge) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_paymentCharge))
	ec.String(t.Get_id())
	ec.String(t.Get_provider_charge_id())

	return ec.GetBuffer()
}

func (t *TL_paymentCharge) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_provider_charge_id = dc.String()

	return dc.err
}

func (t *TL_paymentCharge) String() string {
	return fmt.Sprintf("- paymentCharge#ea02c27e\n-- id : %v\n-- provider_charge_id : %v\n", t.M_id, t.M_provider_charge_id)
}

// postAddress#1e8caaeb
type TL_postAddress struct {
	M_classID      int32
	M_street_line1 string
	M_street_line2 string
	M_city         string
	M_state        string
	M_country_iso2 string
	M_post_code    string
}

func (t *TL_postAddress) ClassID() int32 {
	return t.M_classID
}

func (t *TL_postAddress) Set_street_line1(M_street_line1 string) {
	t.M_street_line1 = M_street_line1
}

func (t *TL_postAddress) Get_street_line1() string {
	return t.M_street_line1
}

func (t *TL_postAddress) Set_street_line2(M_street_line2 string) {
	t.M_street_line2 = M_street_line2
}

func (t *TL_postAddress) Get_street_line2() string {
	return t.M_street_line2
}

func (t *TL_postAddress) Set_city(M_city string) {
	t.M_city = M_city
}

func (t *TL_postAddress) Get_city() string {
	return t.M_city
}

func (t *TL_postAddress) Set_state(M_state string) {
	t.M_state = M_state
}

func (t *TL_postAddress) Get_state() string {
	return t.M_state
}

func (t *TL_postAddress) Set_country_iso2(M_country_iso2 string) {
	t.M_country_iso2 = M_country_iso2
}

func (t *TL_postAddress) Get_country_iso2() string {
	return t.M_country_iso2
}

func (t *TL_postAddress) Set_post_code(M_post_code string) {
	t.M_post_code = M_post_code
}

func (t *TL_postAddress) Get_post_code() string {
	return t.M_post_code
}

func New_TL_postAddress() *TL_postAddress {
	return &TL_postAddress{
		M_classID: TL_CLASS_postAddress,
	}
}

func (t *TL_postAddress) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_postAddress))
	ec.String(t.Get_street_line1())
	ec.String(t.Get_street_line2())
	ec.String(t.Get_city())
	ec.String(t.Get_state())
	ec.String(t.Get_country_iso2())
	ec.String(t.Get_post_code())

	return ec.GetBuffer()
}

func (t *TL_postAddress) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_street_line1 = dc.String()
	t.M_street_line2 = dc.String()
	t.M_city = dc.String()
	t.M_state = dc.String()
	t.M_country_iso2 = dc.String()
	t.M_post_code = dc.String()

	return dc.err
}

func (t *TL_postAddress) String() string {
	return fmt.Sprintf("- postAddress#1e8caaeb\n-- street_line1 : %v\n-- street_line2 : %v\n-- city : %v\n-- state : %v\n-- country_iso2 : %v\n-- post_code : %v\n", t.M_street_line1, t.M_street_line2, t.M_city, t.M_state, t.M_country_iso2, t.M_post_code)
}

// paymentRequestedInfo#909c3f94
type TL_paymentRequestedInfo struct {
	M_classID          int32
	M_flags            TLObject
	M_name             TLObject
	M_phone            TLObject
	M_email            TLObject
	M_shipping_address TLObject
}

func (t *TL_paymentRequestedInfo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_paymentRequestedInfo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_paymentRequestedInfo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_paymentRequestedInfo) Set_name(M_name TLObject) {
	t.M_name = M_name
}

func (t *TL_paymentRequestedInfo) Get_name() TLObject {
	return t.M_name
}

func (t *TL_paymentRequestedInfo) Set_phone(M_phone TLObject) {
	t.M_phone = M_phone
}

func (t *TL_paymentRequestedInfo) Get_phone() TLObject {
	return t.M_phone
}

func (t *TL_paymentRequestedInfo) Set_email(M_email TLObject) {
	t.M_email = M_email
}

func (t *TL_paymentRequestedInfo) Get_email() TLObject {
	return t.M_email
}

func (t *TL_paymentRequestedInfo) Set_shipping_address(M_shipping_address TLObject) {
	t.M_shipping_address = M_shipping_address
}

func (t *TL_paymentRequestedInfo) Get_shipping_address() TLObject {
	return t.M_shipping_address
}

func New_TL_paymentRequestedInfo() *TL_paymentRequestedInfo {
	return &TL_paymentRequestedInfo{
		M_classID: TL_CLASS_paymentRequestedInfo,
	}
}

func (t *TL_paymentRequestedInfo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_paymentRequestedInfo))
	ec.TLObject(t.Get_name())
	ec.TLObject(t.Get_phone())
	ec.TLObject(t.Get_email())
	ec.TLObject(t.Get_shipping_address())

	return ec.GetBuffer()
}

func (t *TL_paymentRequestedInfo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_name = dc.TLObject()
	t.M_phone = dc.TLObject()
	t.M_email = dc.TLObject()
	t.M_shipping_address = dc.TLObject()

	return dc.err
}

func (t *TL_paymentRequestedInfo) String() string {
	return fmt.Sprintf("- paymentRequestedInfo#909c3f94\n-- flags : %v\n-- name : %v\n-- phone : %v\n-- email : %v\n-- shipping_address : %v\n", t.M_flags, t.M_name, t.M_phone, t.M_email, t.M_shipping_address)
}

// paymentSavedCredentialsCard#cdc27a1f
type TL_paymentSavedCredentialsCard struct {
	M_classID int32
	M_id      string
	M_title   string
}

func (t *TL_paymentSavedCredentialsCard) ClassID() int32 {
	return t.M_classID
}

func (t *TL_paymentSavedCredentialsCard) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_paymentSavedCredentialsCard) Get_id() string {
	return t.M_id
}

func (t *TL_paymentSavedCredentialsCard) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_paymentSavedCredentialsCard) Get_title() string {
	return t.M_title
}

func New_TL_paymentSavedCredentialsCard() *TL_paymentSavedCredentialsCard {
	return &TL_paymentSavedCredentialsCard{
		M_classID: TL_CLASS_paymentSavedCredentialsCard,
	}
}

func (t *TL_paymentSavedCredentialsCard) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_paymentSavedCredentialsCard))
	ec.String(t.Get_id())
	ec.String(t.Get_title())

	return ec.GetBuffer()
}

func (t *TL_paymentSavedCredentialsCard) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_title = dc.String()

	return dc.err
}

func (t *TL_paymentSavedCredentialsCard) String() string {
	return fmt.Sprintf("- paymentSavedCredentialsCard#cdc27a1f\n-- id : %v\n-- title : %v\n", t.M_id, t.M_title)
}

// webDocument#c61acbd8
type TL_webDocument struct {
	M_classID     int32
	M_url         string
	M_access_hash int64
	M_size        int32
	M_mime_type   string
	M_attributes  []TLObject
	M_dc_id       int32
}

func (t *TL_webDocument) ClassID() int32 {
	return t.M_classID
}

func (t *TL_webDocument) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_webDocument) Get_url() string {
	return t.M_url
}

func (t *TL_webDocument) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_webDocument) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_webDocument) Set_size(M_size int32) {
	t.M_size = M_size
}

func (t *TL_webDocument) Get_size() int32 {
	return t.M_size
}

func (t *TL_webDocument) Set_mime_type(M_mime_type string) {
	t.M_mime_type = M_mime_type
}

func (t *TL_webDocument) Get_mime_type() string {
	return t.M_mime_type
}

func (t *TL_webDocument) Set_attributes(M_attributes []TLObject) {
	t.M_attributes = M_attributes
}

func (t *TL_webDocument) Get_attributes() []TLObject {
	return t.M_attributes
}

func (t *TL_webDocument) Set_dc_id(M_dc_id int32) {
	t.M_dc_id = M_dc_id
}

func (t *TL_webDocument) Get_dc_id() int32 {
	return t.M_dc_id
}

func New_TL_webDocument() *TL_webDocument {
	return &TL_webDocument{
		M_classID: TL_CLASS_webDocument,
	}
}

func (t *TL_webDocument) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_webDocument))
	ec.String(t.Get_url())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_size())
	ec.String(t.Get_mime_type())
	ec.Vector(t.Get_attributes())
	ec.Int(t.Get_dc_id())

	return ec.GetBuffer()
}

func (t *TL_webDocument) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_access_hash = dc.Long()
	t.M_size = dc.Int()
	t.M_mime_type = dc.String()
	t.M_attributes = dc.Vector()
	t.M_dc_id = dc.Int()

	return dc.err
}

func (t *TL_webDocument) String() string {
	return fmt.Sprintf("- webDocument#c61acbd8\n-- url : %v\n-- access_hash : %v\n-- size : %v\n-- mime_type : %v\n-- attributes : %v\n-- dc_id : %v\n", t.M_url, t.M_access_hash, t.M_size, t.M_mime_type, t.M_attributes, t.M_dc_id)
}

// inputWebDocument#9bed434d
type TL_inputWebDocument struct {
	M_classID    int32
	M_url        string
	M_size       int32
	M_mime_type  string
	M_attributes []TLObject
}

func (t *TL_inputWebDocument) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputWebDocument) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_inputWebDocument) Get_url() string {
	return t.M_url
}

func (t *TL_inputWebDocument) Set_size(M_size int32) {
	t.M_size = M_size
}

func (t *TL_inputWebDocument) Get_size() int32 {
	return t.M_size
}

func (t *TL_inputWebDocument) Set_mime_type(M_mime_type string) {
	t.M_mime_type = M_mime_type
}

func (t *TL_inputWebDocument) Get_mime_type() string {
	return t.M_mime_type
}

func (t *TL_inputWebDocument) Set_attributes(M_attributes []TLObject) {
	t.M_attributes = M_attributes
}

func (t *TL_inputWebDocument) Get_attributes() []TLObject {
	return t.M_attributes
}

func New_TL_inputWebDocument() *TL_inputWebDocument {
	return &TL_inputWebDocument{
		M_classID: TL_CLASS_inputWebDocument,
	}
}

func (t *TL_inputWebDocument) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputWebDocument))
	ec.String(t.Get_url())
	ec.Int(t.Get_size())
	ec.String(t.Get_mime_type())
	ec.Vector(t.Get_attributes())

	return ec.GetBuffer()
}

func (t *TL_inputWebDocument) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_size = dc.Int()
	t.M_mime_type = dc.String()
	t.M_attributes = dc.Vector()

	return dc.err
}

func (t *TL_inputWebDocument) String() string {
	return fmt.Sprintf("- inputWebDocument#9bed434d\n-- url : %v\n-- size : %v\n-- mime_type : %v\n-- attributes : %v\n", t.M_url, t.M_size, t.M_mime_type, t.M_attributes)
}

// inputWebFileLocation#c239d686
type TL_inputWebFileLocation struct {
	M_classID     int32
	M_url         string
	M_access_hash int64
}

func (t *TL_inputWebFileLocation) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputWebFileLocation) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_inputWebFileLocation) Get_url() string {
	return t.M_url
}

func (t *TL_inputWebFileLocation) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputWebFileLocation) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputWebFileLocation() *TL_inputWebFileLocation {
	return &TL_inputWebFileLocation{
		M_classID: TL_CLASS_inputWebFileLocation,
	}
}

func (t *TL_inputWebFileLocation) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputWebFileLocation))
	ec.String(t.Get_url())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputWebFileLocation) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputWebFileLocation) String() string {
	return fmt.Sprintf("- inputWebFileLocation#c239d686\n-- url : %v\n-- access_hash : %v\n", t.M_url, t.M_access_hash)
}

// upload_webFile#21e753bc
type TL_upload_webFile struct {
	M_classID   int32
	M_size      int32
	M_mime_type string
	M_file_type TLObject
	M_mtime     int32
	M_bytes     TLObject
}

func (t *TL_upload_webFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_webFile) Set_size(M_size int32) {
	t.M_size = M_size
}

func (t *TL_upload_webFile) Get_size() int32 {
	return t.M_size
}

func (t *TL_upload_webFile) Set_mime_type(M_mime_type string) {
	t.M_mime_type = M_mime_type
}

func (t *TL_upload_webFile) Get_mime_type() string {
	return t.M_mime_type
}

func (t *TL_upload_webFile) Set_file_type(M_file_type TLObject) {
	t.M_file_type = M_file_type
}

func (t *TL_upload_webFile) Get_file_type() TLObject {
	return t.M_file_type
}

func (t *TL_upload_webFile) Set_mtime(M_mtime int32) {
	t.M_mtime = M_mtime
}

func (t *TL_upload_webFile) Get_mtime() int32 {
	return t.M_mtime
}

func (t *TL_upload_webFile) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_upload_webFile) Get_bytes() TLObject {
	return t.M_bytes
}

func New_TL_upload_webFile() *TL_upload_webFile {
	return &TL_upload_webFile{
		M_classID: TL_CLASS_upload_webFile,
	}
}

func (t *TL_upload_webFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_webFile))
	ec.Int(t.Get_size())
	ec.String(t.Get_mime_type())
	ec.TLObject(t.Get_file_type())
	ec.Int(t.Get_mtime())
	ec.TLObject(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_upload_webFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_size = dc.Int()
	t.M_mime_type = dc.String()
	t.M_file_type = dc.TLObject()
	t.M_mtime = dc.Int()
	t.M_bytes = dc.TLObject()

	return dc.err
}

func (t *TL_upload_webFile) String() string {
	return fmt.Sprintf("- upload_webFile#21e753bc\n-- size : %v\n-- mime_type : %v\n-- file_type : %v\n-- mtime : %v\n-- bytes : %v\n", t.M_size, t.M_mime_type, t.M_file_type, t.M_mtime, t.M_bytes)
}

// payments_paymentForm#3f56aea3
type TL_payments_paymentForm struct {
	M_classID              int32
	M_flags                TLObject
	M_can_save_credentials TLObject
	M_password_missing     TLObject
	M_bot_id               int32
	M_invoice              TLObject
	M_provider_id          int32
	M_url                  string
	M_native_provider      TLObject
	M_native_params        TLObject
	M_saved_info           TLObject
	M_saved_credentials    TLObject
	M_users                []TLObject
}

func (t *TL_payments_paymentForm) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_paymentForm) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_payments_paymentForm) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_payments_paymentForm) Set_can_save_credentials(M_can_save_credentials TLObject) {
	t.M_can_save_credentials = M_can_save_credentials
}

func (t *TL_payments_paymentForm) Get_can_save_credentials() TLObject {
	return t.M_can_save_credentials
}

func (t *TL_payments_paymentForm) Set_password_missing(M_password_missing TLObject) {
	t.M_password_missing = M_password_missing
}

func (t *TL_payments_paymentForm) Get_password_missing() TLObject {
	return t.M_password_missing
}

func (t *TL_payments_paymentForm) Set_bot_id(M_bot_id int32) {
	t.M_bot_id = M_bot_id
}

func (t *TL_payments_paymentForm) Get_bot_id() int32 {
	return t.M_bot_id
}

func (t *TL_payments_paymentForm) Set_invoice(M_invoice TLObject) {
	t.M_invoice = M_invoice
}

func (t *TL_payments_paymentForm) Get_invoice() TLObject {
	return t.M_invoice
}

func (t *TL_payments_paymentForm) Set_provider_id(M_provider_id int32) {
	t.M_provider_id = M_provider_id
}

func (t *TL_payments_paymentForm) Get_provider_id() int32 {
	return t.M_provider_id
}

func (t *TL_payments_paymentForm) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_payments_paymentForm) Get_url() string {
	return t.M_url
}

func (t *TL_payments_paymentForm) Set_native_provider(M_native_provider TLObject) {
	t.M_native_provider = M_native_provider
}

func (t *TL_payments_paymentForm) Get_native_provider() TLObject {
	return t.M_native_provider
}

func (t *TL_payments_paymentForm) Set_native_params(M_native_params TLObject) {
	t.M_native_params = M_native_params
}

func (t *TL_payments_paymentForm) Get_native_params() TLObject {
	return t.M_native_params
}

func (t *TL_payments_paymentForm) Set_saved_info(M_saved_info TLObject) {
	t.M_saved_info = M_saved_info
}

func (t *TL_payments_paymentForm) Get_saved_info() TLObject {
	return t.M_saved_info
}

func (t *TL_payments_paymentForm) Set_saved_credentials(M_saved_credentials TLObject) {
	t.M_saved_credentials = M_saved_credentials
}

func (t *TL_payments_paymentForm) Get_saved_credentials() TLObject {
	return t.M_saved_credentials
}

func (t *TL_payments_paymentForm) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_payments_paymentForm) Get_users() []TLObject {
	return t.M_users
}

func New_TL_payments_paymentForm() *TL_payments_paymentForm {
	return &TL_payments_paymentForm{
		M_classID: TL_CLASS_payments_paymentForm,
	}
}

func (t *TL_payments_paymentForm) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_paymentForm))
	ec.TLObject(t.Get_can_save_credentials())
	ec.TLObject(t.Get_password_missing())
	ec.Int(t.Get_bot_id())
	ec.TLObject(t.Get_invoice())
	ec.Int(t.Get_provider_id())
	ec.String(t.Get_url())
	ec.TLObject(t.Get_native_provider())
	ec.TLObject(t.Get_native_params())
	ec.TLObject(t.Get_saved_info())
	ec.TLObject(t.Get_saved_credentials())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_payments_paymentForm) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_can_save_credentials = dc.TLObject()
	t.M_password_missing = dc.TLObject()
	t.M_bot_id = dc.Int()
	t.M_invoice = dc.TLObject()
	t.M_provider_id = dc.Int()
	t.M_url = dc.String()
	t.M_native_provider = dc.TLObject()
	t.M_native_params = dc.TLObject()
	t.M_saved_info = dc.TLObject()
	t.M_saved_credentials = dc.TLObject()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_payments_paymentForm) String() string {
	return fmt.Sprintf("- payments_paymentForm#3f56aea3\n-- flags : %v\n-- can_save_credentials : %v\n-- password_missing : %v\n-- bot_id : %v\n-- invoice : %v\n-- provider_id : %v\n-- url : %v\n-- native_provider : %v\n-- native_params : %v\n-- saved_info : %v\n-- saved_credentials : %v\n-- users : %v\n", t.M_flags, t.M_can_save_credentials, t.M_password_missing, t.M_bot_id, t.M_invoice, t.M_provider_id, t.M_url, t.M_native_provider, t.M_native_params, t.M_saved_info, t.M_saved_credentials, t.M_users)
}

// payments_validatedRequestedInfo#d1451883
type TL_payments_validatedRequestedInfo struct {
	M_classID          int32
	M_flags            TLObject
	M_id               TLObject
	M_shipping_options []TLObject
}

func (t *TL_payments_validatedRequestedInfo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_validatedRequestedInfo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_payments_validatedRequestedInfo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_payments_validatedRequestedInfo) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_payments_validatedRequestedInfo) Get_id() TLObject {
	return t.M_id
}

func (t *TL_payments_validatedRequestedInfo) Set_shipping_options(M_shipping_options []TLObject) {
	t.M_shipping_options = M_shipping_options
}

func (t *TL_payments_validatedRequestedInfo) Get_shipping_options() []TLObject {
	return t.M_shipping_options
}

func New_TL_payments_validatedRequestedInfo() *TL_payments_validatedRequestedInfo {
	return &TL_payments_validatedRequestedInfo{
		M_classID: TL_CLASS_payments_validatedRequestedInfo,
	}
}

func (t *TL_payments_validatedRequestedInfo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_validatedRequestedInfo))
	ec.TLObject(t.Get_id())
	ec.Vector(t.Get_shipping_options())

	return ec.GetBuffer()
}

func (t *TL_payments_validatedRequestedInfo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()
	t.M_shipping_options = dc.Vector()

	return dc.err
}

func (t *TL_payments_validatedRequestedInfo) String() string {
	return fmt.Sprintf("- payments_validatedRequestedInfo#d1451883\n-- flags : %v\n-- id : %v\n-- shipping_options : %v\n", t.M_flags, t.M_id, t.M_shipping_options)
}

// payments_paymentResult#4e5f810d
type TL_payments_paymentResult struct {
	M_classID int32
	M_updates TLObject
}

func (t *TL_payments_paymentResult) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_paymentResult) Set_updates(M_updates TLObject) {
	t.M_updates = M_updates
}

func (t *TL_payments_paymentResult) Get_updates() TLObject {
	return t.M_updates
}

func New_TL_payments_paymentResult() *TL_payments_paymentResult {
	return &TL_payments_paymentResult{
		M_classID: TL_CLASS_payments_paymentResult,
	}
}

func (t *TL_payments_paymentResult) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_paymentResult))
	ec.TLObject(t.Get_updates())

	return ec.GetBuffer()
}

func (t *TL_payments_paymentResult) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_updates = dc.TLObject()

	return dc.err
}

func (t *TL_payments_paymentResult) String() string {
	return fmt.Sprintf("- payments_paymentResult#4e5f810d\n-- updates : %v\n", t.M_updates)
}

// payments_paymentVerficationNeeded#6b56b921
type TL_payments_paymentVerficationNeeded struct {
	M_classID int32
	M_url     string
}

func (t *TL_payments_paymentVerficationNeeded) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_paymentVerficationNeeded) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_payments_paymentVerficationNeeded) Get_url() string {
	return t.M_url
}

func New_TL_payments_paymentVerficationNeeded() *TL_payments_paymentVerficationNeeded {
	return &TL_payments_paymentVerficationNeeded{
		M_classID: TL_CLASS_payments_paymentVerficationNeeded,
	}
}

func (t *TL_payments_paymentVerficationNeeded) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_paymentVerficationNeeded))
	ec.String(t.Get_url())

	return ec.GetBuffer()
}

func (t *TL_payments_paymentVerficationNeeded) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()

	return dc.err
}

func (t *TL_payments_paymentVerficationNeeded) String() string {
	return fmt.Sprintf("- payments_paymentVerficationNeeded#6b56b921\n-- url : %v\n", t.M_url)
}

// payments_paymentReceipt#500911e1
type TL_payments_paymentReceipt struct {
	M_classID           int32
	M_flags             TLObject
	M_date              int32
	M_bot_id            int32
	M_invoice           TLObject
	M_provider_id       int32
	M_info              TLObject
	M_shipping          TLObject
	M_currency          string
	M_total_amount      int64
	M_credentials_title string
	M_users             []TLObject
}

func (t *TL_payments_paymentReceipt) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_paymentReceipt) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_payments_paymentReceipt) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_payments_paymentReceipt) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_payments_paymentReceipt) Get_date() int32 {
	return t.M_date
}

func (t *TL_payments_paymentReceipt) Set_bot_id(M_bot_id int32) {
	t.M_bot_id = M_bot_id
}

func (t *TL_payments_paymentReceipt) Get_bot_id() int32 {
	return t.M_bot_id
}

func (t *TL_payments_paymentReceipt) Set_invoice(M_invoice TLObject) {
	t.M_invoice = M_invoice
}

func (t *TL_payments_paymentReceipt) Get_invoice() TLObject {
	return t.M_invoice
}

func (t *TL_payments_paymentReceipt) Set_provider_id(M_provider_id int32) {
	t.M_provider_id = M_provider_id
}

func (t *TL_payments_paymentReceipt) Get_provider_id() int32 {
	return t.M_provider_id
}

func (t *TL_payments_paymentReceipt) Set_info(M_info TLObject) {
	t.M_info = M_info
}

func (t *TL_payments_paymentReceipt) Get_info() TLObject {
	return t.M_info
}

func (t *TL_payments_paymentReceipt) Set_shipping(M_shipping TLObject) {
	t.M_shipping = M_shipping
}

func (t *TL_payments_paymentReceipt) Get_shipping() TLObject {
	return t.M_shipping
}

func (t *TL_payments_paymentReceipt) Set_currency(M_currency string) {
	t.M_currency = M_currency
}

func (t *TL_payments_paymentReceipt) Get_currency() string {
	return t.M_currency
}

func (t *TL_payments_paymentReceipt) Set_total_amount(M_total_amount int64) {
	t.M_total_amount = M_total_amount
}

func (t *TL_payments_paymentReceipt) Get_total_amount() int64 {
	return t.M_total_amount
}

func (t *TL_payments_paymentReceipt) Set_credentials_title(M_credentials_title string) {
	t.M_credentials_title = M_credentials_title
}

func (t *TL_payments_paymentReceipt) Get_credentials_title() string {
	return t.M_credentials_title
}

func (t *TL_payments_paymentReceipt) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_payments_paymentReceipt) Get_users() []TLObject {
	return t.M_users
}

func New_TL_payments_paymentReceipt() *TL_payments_paymentReceipt {
	return &TL_payments_paymentReceipt{
		M_classID: TL_CLASS_payments_paymentReceipt,
	}
}

func (t *TL_payments_paymentReceipt) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_paymentReceipt))
	ec.Int(t.Get_date())
	ec.Int(t.Get_bot_id())
	ec.TLObject(t.Get_invoice())
	ec.Int(t.Get_provider_id())
	ec.TLObject(t.Get_info())
	ec.TLObject(t.Get_shipping())
	ec.String(t.Get_currency())
	ec.Long(t.Get_total_amount())
	ec.String(t.Get_credentials_title())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_payments_paymentReceipt) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_date = dc.Int()
	t.M_bot_id = dc.Int()
	t.M_invoice = dc.TLObject()
	t.M_provider_id = dc.Int()
	t.M_info = dc.TLObject()
	t.M_shipping = dc.TLObject()
	t.M_currency = dc.String()
	t.M_total_amount = dc.Long()
	t.M_credentials_title = dc.String()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_payments_paymentReceipt) String() string {
	return fmt.Sprintf("- payments_paymentReceipt#500911e1\n-- flags : %v\n-- date : %v\n-- bot_id : %v\n-- invoice : %v\n-- provider_id : %v\n-- info : %v\n-- shipping : %v\n-- currency : %v\n-- total_amount : %v\n-- credentials_title : %v\n-- users : %v\n", t.M_flags, t.M_date, t.M_bot_id, t.M_invoice, t.M_provider_id, t.M_info, t.M_shipping, t.M_currency, t.M_total_amount, t.M_credentials_title, t.M_users)
}

// payments_savedInfo#fb8fe43c
type TL_payments_savedInfo struct {
	M_classID               int32
	M_flags                 TLObject
	M_has_saved_credentials TLObject
	M_saved_info            TLObject
}

func (t *TL_payments_savedInfo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_savedInfo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_payments_savedInfo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_payments_savedInfo) Set_has_saved_credentials(M_has_saved_credentials TLObject) {
	t.M_has_saved_credentials = M_has_saved_credentials
}

func (t *TL_payments_savedInfo) Get_has_saved_credentials() TLObject {
	return t.M_has_saved_credentials
}

func (t *TL_payments_savedInfo) Set_saved_info(M_saved_info TLObject) {
	t.M_saved_info = M_saved_info
}

func (t *TL_payments_savedInfo) Get_saved_info() TLObject {
	return t.M_saved_info
}

func New_TL_payments_savedInfo() *TL_payments_savedInfo {
	return &TL_payments_savedInfo{
		M_classID: TL_CLASS_payments_savedInfo,
	}
}

func (t *TL_payments_savedInfo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_savedInfo))
	ec.TLObject(t.Get_has_saved_credentials())
	ec.TLObject(t.Get_saved_info())

	return ec.GetBuffer()
}

func (t *TL_payments_savedInfo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_has_saved_credentials = dc.TLObject()
	t.M_saved_info = dc.TLObject()

	return dc.err
}

func (t *TL_payments_savedInfo) String() string {
	return fmt.Sprintf("- payments_savedInfo#fb8fe43c\n-- flags : %v\n-- has_saved_credentials : %v\n-- saved_info : %v\n", t.M_flags, t.M_has_saved_credentials, t.M_saved_info)
}

// inputPaymentCredentialsSaved#c10eb2cf
type TL_inputPaymentCredentialsSaved struct {
	M_classID      int32
	M_id           string
	M_tmp_password TLObject
}

func (t *TL_inputPaymentCredentialsSaved) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPaymentCredentialsSaved) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_inputPaymentCredentialsSaved) Get_id() string {
	return t.M_id
}

func (t *TL_inputPaymentCredentialsSaved) Set_tmp_password(M_tmp_password TLObject) {
	t.M_tmp_password = M_tmp_password
}

func (t *TL_inputPaymentCredentialsSaved) Get_tmp_password() TLObject {
	return t.M_tmp_password
}

func New_TL_inputPaymentCredentialsSaved() *TL_inputPaymentCredentialsSaved {
	return &TL_inputPaymentCredentialsSaved{
		M_classID: TL_CLASS_inputPaymentCredentialsSaved,
	}
}

func (t *TL_inputPaymentCredentialsSaved) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPaymentCredentialsSaved))
	ec.String(t.Get_id())
	ec.TLObject(t.Get_tmp_password())

	return ec.GetBuffer()
}

func (t *TL_inputPaymentCredentialsSaved) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_tmp_password = dc.TLObject()

	return dc.err
}

func (t *TL_inputPaymentCredentialsSaved) String() string {
	return fmt.Sprintf("- inputPaymentCredentialsSaved#c10eb2cf\n-- id : %v\n-- tmp_password : %v\n", t.M_id, t.M_tmp_password)
}

// inputPaymentCredentials#3417d728
type TL_inputPaymentCredentials struct {
	M_classID int32
	M_flags   TLObject
	M_save    TLObject
	M_data    TLObject
}

func (t *TL_inputPaymentCredentials) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPaymentCredentials) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputPaymentCredentials) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputPaymentCredentials) Set_save(M_save TLObject) {
	t.M_save = M_save
}

func (t *TL_inputPaymentCredentials) Get_save() TLObject {
	return t.M_save
}

func (t *TL_inputPaymentCredentials) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_inputPaymentCredentials) Get_data() TLObject {
	return t.M_data
}

func New_TL_inputPaymentCredentials() *TL_inputPaymentCredentials {
	return &TL_inputPaymentCredentials{
		M_classID: TL_CLASS_inputPaymentCredentials,
	}
}

func (t *TL_inputPaymentCredentials) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPaymentCredentials))
	ec.TLObject(t.Get_save())
	ec.TLObject(t.Get_data())

	return ec.GetBuffer()
}

func (t *TL_inputPaymentCredentials) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_save = dc.TLObject()
	t.M_data = dc.TLObject()

	return dc.err
}

func (t *TL_inputPaymentCredentials) String() string {
	return fmt.Sprintf("- inputPaymentCredentials#3417d728\n-- flags : %v\n-- save : %v\n-- data : %v\n", t.M_flags, t.M_save, t.M_data)
}

// inputPaymentCredentialsApplePay#aa1c39f
type TL_inputPaymentCredentialsApplePay struct {
	M_classID      int32
	M_payment_data TLObject
}

func (t *TL_inputPaymentCredentialsApplePay) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPaymentCredentialsApplePay) Set_payment_data(M_payment_data TLObject) {
	t.M_payment_data = M_payment_data
}

func (t *TL_inputPaymentCredentialsApplePay) Get_payment_data() TLObject {
	return t.M_payment_data
}

func New_TL_inputPaymentCredentialsApplePay() *TL_inputPaymentCredentialsApplePay {
	return &TL_inputPaymentCredentialsApplePay{
		M_classID: TL_CLASS_inputPaymentCredentialsApplePay,
	}
}

func (t *TL_inputPaymentCredentialsApplePay) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPaymentCredentialsApplePay))
	ec.TLObject(t.Get_payment_data())

	return ec.GetBuffer()
}

func (t *TL_inputPaymentCredentialsApplePay) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_payment_data = dc.TLObject()

	return dc.err
}

func (t *TL_inputPaymentCredentialsApplePay) String() string {
	return fmt.Sprintf("- inputPaymentCredentialsApplePay#aa1c39f\n-- payment_data : %v\n", t.M_payment_data)
}

// inputPaymentCredentialsAndroidPay#795667a6
type TL_inputPaymentCredentialsAndroidPay struct {
	M_classID       int32
	M_payment_token TLObject
}

func (t *TL_inputPaymentCredentialsAndroidPay) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPaymentCredentialsAndroidPay) Set_payment_token(M_payment_token TLObject) {
	t.M_payment_token = M_payment_token
}

func (t *TL_inputPaymentCredentialsAndroidPay) Get_payment_token() TLObject {
	return t.M_payment_token
}

func New_TL_inputPaymentCredentialsAndroidPay() *TL_inputPaymentCredentialsAndroidPay {
	return &TL_inputPaymentCredentialsAndroidPay{
		M_classID: TL_CLASS_inputPaymentCredentialsAndroidPay,
	}
}

func (t *TL_inputPaymentCredentialsAndroidPay) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPaymentCredentialsAndroidPay))
	ec.TLObject(t.Get_payment_token())

	return ec.GetBuffer()
}

func (t *TL_inputPaymentCredentialsAndroidPay) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_payment_token = dc.TLObject()

	return dc.err
}

func (t *TL_inputPaymentCredentialsAndroidPay) String() string {
	return fmt.Sprintf("- inputPaymentCredentialsAndroidPay#795667a6\n-- payment_token : %v\n", t.M_payment_token)
}

// account_tmpPassword#db64fd34
type TL_account_tmpPassword struct {
	M_classID      int32
	M_tmp_password TLObject
	M_valid_until  int32
}

func (t *TL_account_tmpPassword) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_tmpPassword) Set_tmp_password(M_tmp_password TLObject) {
	t.M_tmp_password = M_tmp_password
}

func (t *TL_account_tmpPassword) Get_tmp_password() TLObject {
	return t.M_tmp_password
}

func (t *TL_account_tmpPassword) Set_valid_until(M_valid_until int32) {
	t.M_valid_until = M_valid_until
}

func (t *TL_account_tmpPassword) Get_valid_until() int32 {
	return t.M_valid_until
}

func New_TL_account_tmpPassword() *TL_account_tmpPassword {
	return &TL_account_tmpPassword{
		M_classID: TL_CLASS_account_tmpPassword,
	}
}

func (t *TL_account_tmpPassword) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_tmpPassword))
	ec.TLObject(t.Get_tmp_password())
	ec.Int(t.Get_valid_until())

	return ec.GetBuffer()
}

func (t *TL_account_tmpPassword) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_tmp_password = dc.TLObject()
	t.M_valid_until = dc.Int()

	return dc.err
}

func (t *TL_account_tmpPassword) String() string {
	return fmt.Sprintf("- account_tmpPassword#db64fd34\n-- tmp_password : %v\n-- valid_until : %v\n", t.M_tmp_password, t.M_valid_until)
}

// shippingOption#b6213cdf
type TL_shippingOption struct {
	M_classID int32
	M_id      string
	M_title   string
	M_prices  []TLObject
}

func (t *TL_shippingOption) ClassID() int32 {
	return t.M_classID
}

func (t *TL_shippingOption) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_shippingOption) Get_id() string {
	return t.M_id
}

func (t *TL_shippingOption) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_shippingOption) Get_title() string {
	return t.M_title
}

func (t *TL_shippingOption) Set_prices(M_prices []TLObject) {
	t.M_prices = M_prices
}

func (t *TL_shippingOption) Get_prices() []TLObject {
	return t.M_prices
}

func New_TL_shippingOption() *TL_shippingOption {
	return &TL_shippingOption{
		M_classID: TL_CLASS_shippingOption,
	}
}

func (t *TL_shippingOption) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_shippingOption))
	ec.String(t.Get_id())
	ec.String(t.Get_title())
	ec.Vector(t.Get_prices())

	return ec.GetBuffer()
}

func (t *TL_shippingOption) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.String()
	t.M_title = dc.String()
	t.M_prices = dc.Vector()

	return dc.err
}

func (t *TL_shippingOption) String() string {
	return fmt.Sprintf("- shippingOption#b6213cdf\n-- id : %v\n-- title : %v\n-- prices : %v\n", t.M_id, t.M_title, t.M_prices)
}

// inputStickerSetItem#ffa0a496
type TL_inputStickerSetItem struct {
	M_classID     int32
	M_flags       TLObject
	M_document    TLObject
	M_emoji       string
	M_mask_coords TLObject
}

func (t *TL_inputStickerSetItem) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputStickerSetItem) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_inputStickerSetItem) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_inputStickerSetItem) Set_document(M_document TLObject) {
	t.M_document = M_document
}

func (t *TL_inputStickerSetItem) Get_document() TLObject {
	return t.M_document
}

func (t *TL_inputStickerSetItem) Set_emoji(M_emoji string) {
	t.M_emoji = M_emoji
}

func (t *TL_inputStickerSetItem) Get_emoji() string {
	return t.M_emoji
}

func (t *TL_inputStickerSetItem) Set_mask_coords(M_mask_coords TLObject) {
	t.M_mask_coords = M_mask_coords
}

func (t *TL_inputStickerSetItem) Get_mask_coords() TLObject {
	return t.M_mask_coords
}

func New_TL_inputStickerSetItem() *TL_inputStickerSetItem {
	return &TL_inputStickerSetItem{
		M_classID: TL_CLASS_inputStickerSetItem,
	}
}

func (t *TL_inputStickerSetItem) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputStickerSetItem))
	ec.TLObject(t.Get_document())
	ec.String(t.Get_emoji())
	ec.TLObject(t.Get_mask_coords())

	return ec.GetBuffer()
}

func (t *TL_inputStickerSetItem) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_document = dc.TLObject()
	t.M_emoji = dc.String()
	t.M_mask_coords = dc.TLObject()

	return dc.err
}

func (t *TL_inputStickerSetItem) String() string {
	return fmt.Sprintf("- inputStickerSetItem#ffa0a496\n-- flags : %v\n-- document : %v\n-- emoji : %v\n-- mask_coords : %v\n", t.M_flags, t.M_document, t.M_emoji, t.M_mask_coords)
}

// inputPhoneCall#1e36fded
type TL_inputPhoneCall struct {
	M_classID     int32
	M_id          int64
	M_access_hash int64
}

func (t *TL_inputPhoneCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputPhoneCall) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_inputPhoneCall) Get_id() int64 {
	return t.M_id
}

func (t *TL_inputPhoneCall) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_inputPhoneCall) Get_access_hash() int64 {
	return t.M_access_hash
}

func New_TL_inputPhoneCall() *TL_inputPhoneCall {
	return &TL_inputPhoneCall{
		M_classID: TL_CLASS_inputPhoneCall,
	}
}

func (t *TL_inputPhoneCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputPhoneCall))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())

	return ec.GetBuffer()
}

func (t *TL_inputPhoneCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()

	return dc.err
}

func (t *TL_inputPhoneCall) String() string {
	return fmt.Sprintf("- inputPhoneCall#1e36fded\n-- id : %v\n-- access_hash : %v\n", t.M_id, t.M_access_hash)
}

// phoneCallEmpty#5366c915
type TL_phoneCallEmpty struct {
	M_classID int32
	M_id      int64
}

func (t *TL_phoneCallEmpty) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phoneCallEmpty) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_phoneCallEmpty) Get_id() int64 {
	return t.M_id
}

func New_TL_phoneCallEmpty() *TL_phoneCallEmpty {
	return &TL_phoneCallEmpty{
		M_classID: TL_CLASS_phoneCallEmpty,
	}
}

func (t *TL_phoneCallEmpty) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallEmpty))
	ec.Long(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_phoneCallEmpty) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()

	return dc.err
}

func (t *TL_phoneCallEmpty) String() string {
	return fmt.Sprintf("- phoneCallEmpty#5366c915\n-- id : %v\n", t.M_id)
}

// phoneCallWaiting#1b8f4ad1
type TL_phoneCallWaiting struct {
	M_classID        int32
	M_flags          TLObject
	M_id             int64
	M_access_hash    int64
	M_date           int32
	M_admin_id       int32
	M_participant_id int32
	M_protocol       TLObject
	M_receive_date   TLObject
}

func (t *TL_phoneCallWaiting) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phoneCallWaiting) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_phoneCallWaiting) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_phoneCallWaiting) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_phoneCallWaiting) Get_id() int64 {
	return t.M_id
}

func (t *TL_phoneCallWaiting) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_phoneCallWaiting) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_phoneCallWaiting) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_phoneCallWaiting) Get_date() int32 {
	return t.M_date
}

func (t *TL_phoneCallWaiting) Set_admin_id(M_admin_id int32) {
	t.M_admin_id = M_admin_id
}

func (t *TL_phoneCallWaiting) Get_admin_id() int32 {
	return t.M_admin_id
}

func (t *TL_phoneCallWaiting) Set_participant_id(M_participant_id int32) {
	t.M_participant_id = M_participant_id
}

func (t *TL_phoneCallWaiting) Get_participant_id() int32 {
	return t.M_participant_id
}

func (t *TL_phoneCallWaiting) Set_protocol(M_protocol TLObject) {
	t.M_protocol = M_protocol
}

func (t *TL_phoneCallWaiting) Get_protocol() TLObject {
	return t.M_protocol
}

func (t *TL_phoneCallWaiting) Set_receive_date(M_receive_date TLObject) {
	t.M_receive_date = M_receive_date
}

func (t *TL_phoneCallWaiting) Get_receive_date() TLObject {
	return t.M_receive_date
}

func New_TL_phoneCallWaiting() *TL_phoneCallWaiting {
	return &TL_phoneCallWaiting{
		M_classID: TL_CLASS_phoneCallWaiting,
	}
}

func (t *TL_phoneCallWaiting) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallWaiting))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_date())
	ec.Int(t.Get_admin_id())
	ec.Int(t.Get_participant_id())
	ec.TLObject(t.Get_protocol())
	ec.TLObject(t.Get_receive_date())

	return ec.GetBuffer()
}

func (t *TL_phoneCallWaiting) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_date = dc.Int()
	t.M_admin_id = dc.Int()
	t.M_participant_id = dc.Int()
	t.M_protocol = dc.TLObject()
	t.M_receive_date = dc.TLObject()

	return dc.err
}

func (t *TL_phoneCallWaiting) String() string {
	return fmt.Sprintf("- phoneCallWaiting#1b8f4ad1\n-- flags : %v\n-- id : %v\n-- access_hash : %v\n-- date : %v\n-- admin_id : %v\n-- participant_id : %v\n-- protocol : %v\n-- receive_date : %v\n", t.M_flags, t.M_id, t.M_access_hash, t.M_date, t.M_admin_id, t.M_participant_id, t.M_protocol, t.M_receive_date)
}

// phoneCallRequested#83761ce4
type TL_phoneCallRequested struct {
	M_classID        int32
	M_id             int64
	M_access_hash    int64
	M_date           int32
	M_admin_id       int32
	M_participant_id int32
	M_g_a_hash       TLObject
	M_protocol       TLObject
}

func (t *TL_phoneCallRequested) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phoneCallRequested) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_phoneCallRequested) Get_id() int64 {
	return t.M_id
}

func (t *TL_phoneCallRequested) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_phoneCallRequested) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_phoneCallRequested) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_phoneCallRequested) Get_date() int32 {
	return t.M_date
}

func (t *TL_phoneCallRequested) Set_admin_id(M_admin_id int32) {
	t.M_admin_id = M_admin_id
}

func (t *TL_phoneCallRequested) Get_admin_id() int32 {
	return t.M_admin_id
}

func (t *TL_phoneCallRequested) Set_participant_id(M_participant_id int32) {
	t.M_participant_id = M_participant_id
}

func (t *TL_phoneCallRequested) Get_participant_id() int32 {
	return t.M_participant_id
}

func (t *TL_phoneCallRequested) Set_g_a_hash(M_g_a_hash TLObject) {
	t.M_g_a_hash = M_g_a_hash
}

func (t *TL_phoneCallRequested) Get_g_a_hash() TLObject {
	return t.M_g_a_hash
}

func (t *TL_phoneCallRequested) Set_protocol(M_protocol TLObject) {
	t.M_protocol = M_protocol
}

func (t *TL_phoneCallRequested) Get_protocol() TLObject {
	return t.M_protocol
}

func New_TL_phoneCallRequested() *TL_phoneCallRequested {
	return &TL_phoneCallRequested{
		M_classID: TL_CLASS_phoneCallRequested,
	}
}

func (t *TL_phoneCallRequested) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallRequested))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_date())
	ec.Int(t.Get_admin_id())
	ec.Int(t.Get_participant_id())
	ec.TLObject(t.Get_g_a_hash())
	ec.TLObject(t.Get_protocol())

	return ec.GetBuffer()
}

func (t *TL_phoneCallRequested) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_date = dc.Int()
	t.M_admin_id = dc.Int()
	t.M_participant_id = dc.Int()
	t.M_g_a_hash = dc.TLObject()
	t.M_protocol = dc.TLObject()

	return dc.err
}

func (t *TL_phoneCallRequested) String() string {
	return fmt.Sprintf("- phoneCallRequested#83761ce4\n-- id : %v\n-- access_hash : %v\n-- date : %v\n-- admin_id : %v\n-- participant_id : %v\n-- g_a_hash : %v\n-- protocol : %v\n", t.M_id, t.M_access_hash, t.M_date, t.M_admin_id, t.M_participant_id, t.M_g_a_hash, t.M_protocol)
}

// phoneCallAccepted#6d003d3f
type TL_phoneCallAccepted struct {
	M_classID        int32
	M_id             int64
	M_access_hash    int64
	M_date           int32
	M_admin_id       int32
	M_participant_id int32
	M_g_b            TLObject
	M_protocol       TLObject
}

func (t *TL_phoneCallAccepted) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phoneCallAccepted) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_phoneCallAccepted) Get_id() int64 {
	return t.M_id
}

func (t *TL_phoneCallAccepted) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_phoneCallAccepted) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_phoneCallAccepted) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_phoneCallAccepted) Get_date() int32 {
	return t.M_date
}

func (t *TL_phoneCallAccepted) Set_admin_id(M_admin_id int32) {
	t.M_admin_id = M_admin_id
}

func (t *TL_phoneCallAccepted) Get_admin_id() int32 {
	return t.M_admin_id
}

func (t *TL_phoneCallAccepted) Set_participant_id(M_participant_id int32) {
	t.M_participant_id = M_participant_id
}

func (t *TL_phoneCallAccepted) Get_participant_id() int32 {
	return t.M_participant_id
}

func (t *TL_phoneCallAccepted) Set_g_b(M_g_b TLObject) {
	t.M_g_b = M_g_b
}

func (t *TL_phoneCallAccepted) Get_g_b() TLObject {
	return t.M_g_b
}

func (t *TL_phoneCallAccepted) Set_protocol(M_protocol TLObject) {
	t.M_protocol = M_protocol
}

func (t *TL_phoneCallAccepted) Get_protocol() TLObject {
	return t.M_protocol
}

func New_TL_phoneCallAccepted() *TL_phoneCallAccepted {
	return &TL_phoneCallAccepted{
		M_classID: TL_CLASS_phoneCallAccepted,
	}
}

func (t *TL_phoneCallAccepted) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallAccepted))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_date())
	ec.Int(t.Get_admin_id())
	ec.Int(t.Get_participant_id())
	ec.TLObject(t.Get_g_b())
	ec.TLObject(t.Get_protocol())

	return ec.GetBuffer()
}

func (t *TL_phoneCallAccepted) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_date = dc.Int()
	t.M_admin_id = dc.Int()
	t.M_participant_id = dc.Int()
	t.M_g_b = dc.TLObject()
	t.M_protocol = dc.TLObject()

	return dc.err
}

func (t *TL_phoneCallAccepted) String() string {
	return fmt.Sprintf("- phoneCallAccepted#6d003d3f\n-- id : %v\n-- access_hash : %v\n-- date : %v\n-- admin_id : %v\n-- participant_id : %v\n-- g_b : %v\n-- protocol : %v\n", t.M_id, t.M_access_hash, t.M_date, t.M_admin_id, t.M_participant_id, t.M_g_b, t.M_protocol)
}

// phoneCall#ffe6ab67
type TL_phoneCall struct {
	M_classID                 int32
	M_id                      int64
	M_access_hash             int64
	M_date                    int32
	M_admin_id                int32
	M_participant_id          int32
	M_g_a_or_b                TLObject
	M_key_fingerprint         int64
	M_protocol                TLObject
	M_connection              TLObject
	M_alternative_connections []TLObject
	M_start_date              int32
}

func (t *TL_phoneCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phoneCall) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_phoneCall) Get_id() int64 {
	return t.M_id
}

func (t *TL_phoneCall) Set_access_hash(M_access_hash int64) {
	t.M_access_hash = M_access_hash
}

func (t *TL_phoneCall) Get_access_hash() int64 {
	return t.M_access_hash
}

func (t *TL_phoneCall) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_phoneCall) Get_date() int32 {
	return t.M_date
}

func (t *TL_phoneCall) Set_admin_id(M_admin_id int32) {
	t.M_admin_id = M_admin_id
}

func (t *TL_phoneCall) Get_admin_id() int32 {
	return t.M_admin_id
}

func (t *TL_phoneCall) Set_participant_id(M_participant_id int32) {
	t.M_participant_id = M_participant_id
}

func (t *TL_phoneCall) Get_participant_id() int32 {
	return t.M_participant_id
}

func (t *TL_phoneCall) Set_g_a_or_b(M_g_a_or_b TLObject) {
	t.M_g_a_or_b = M_g_a_or_b
}

func (t *TL_phoneCall) Get_g_a_or_b() TLObject {
	return t.M_g_a_or_b
}

func (t *TL_phoneCall) Set_key_fingerprint(M_key_fingerprint int64) {
	t.M_key_fingerprint = M_key_fingerprint
}

func (t *TL_phoneCall) Get_key_fingerprint() int64 {
	return t.M_key_fingerprint
}

func (t *TL_phoneCall) Set_protocol(M_protocol TLObject) {
	t.M_protocol = M_protocol
}

func (t *TL_phoneCall) Get_protocol() TLObject {
	return t.M_protocol
}

func (t *TL_phoneCall) Set_connection(M_connection TLObject) {
	t.M_connection = M_connection
}

func (t *TL_phoneCall) Get_connection() TLObject {
	return t.M_connection
}

func (t *TL_phoneCall) Set_alternative_connections(M_alternative_connections []TLObject) {
	t.M_alternative_connections = M_alternative_connections
}

func (t *TL_phoneCall) Get_alternative_connections() []TLObject {
	return t.M_alternative_connections
}

func (t *TL_phoneCall) Set_start_date(M_start_date int32) {
	t.M_start_date = M_start_date
}

func (t *TL_phoneCall) Get_start_date() int32 {
	return t.M_start_date
}

func New_TL_phoneCall() *TL_phoneCall {
	return &TL_phoneCall{
		M_classID: TL_CLASS_phoneCall,
	}
}

func (t *TL_phoneCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCall))
	ec.Long(t.Get_id())
	ec.Long(t.Get_access_hash())
	ec.Int(t.Get_date())
	ec.Int(t.Get_admin_id())
	ec.Int(t.Get_participant_id())
	ec.TLObject(t.Get_g_a_or_b())
	ec.Long(t.Get_key_fingerprint())
	ec.TLObject(t.Get_protocol())
	ec.TLObject(t.Get_connection())
	ec.Vector(t.Get_alternative_connections())
	ec.Int(t.Get_start_date())

	return ec.GetBuffer()
}

func (t *TL_phoneCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_access_hash = dc.Long()
	t.M_date = dc.Int()
	t.M_admin_id = dc.Int()
	t.M_participant_id = dc.Int()
	t.M_g_a_or_b = dc.TLObject()
	t.M_key_fingerprint = dc.Long()
	t.M_protocol = dc.TLObject()
	t.M_connection = dc.TLObject()
	t.M_alternative_connections = dc.Vector()
	t.M_start_date = dc.Int()

	return dc.err
}

func (t *TL_phoneCall) String() string {
	return fmt.Sprintf("- phoneCall#ffe6ab67\n-- id : %v\n-- access_hash : %v\n-- date : %v\n-- admin_id : %v\n-- participant_id : %v\n-- g_a_or_b : %v\n-- key_fingerprint : %v\n-- protocol : %v\n-- connection : %v\n-- alternative_connections : %v\n-- start_date : %v\n", t.M_id, t.M_access_hash, t.M_date, t.M_admin_id, t.M_participant_id, t.M_g_a_or_b, t.M_key_fingerprint, t.M_protocol, t.M_connection, t.M_alternative_connections, t.M_start_date)
}

// phoneCallDiscarded#50ca4de1
type TL_phoneCallDiscarded struct {
	M_classID     int32
	M_flags       TLObject
	M_need_rating TLObject
	M_need_debug  TLObject
	M_id          int64
	M_reason      TLObject
	M_duration    TLObject
}

func (t *TL_phoneCallDiscarded) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phoneCallDiscarded) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_phoneCallDiscarded) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_phoneCallDiscarded) Set_need_rating(M_need_rating TLObject) {
	t.M_need_rating = M_need_rating
}

func (t *TL_phoneCallDiscarded) Get_need_rating() TLObject {
	return t.M_need_rating
}

func (t *TL_phoneCallDiscarded) Set_need_debug(M_need_debug TLObject) {
	t.M_need_debug = M_need_debug
}

func (t *TL_phoneCallDiscarded) Get_need_debug() TLObject {
	return t.M_need_debug
}

func (t *TL_phoneCallDiscarded) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_phoneCallDiscarded) Get_id() int64 {
	return t.M_id
}

func (t *TL_phoneCallDiscarded) Set_reason(M_reason TLObject) {
	t.M_reason = M_reason
}

func (t *TL_phoneCallDiscarded) Get_reason() TLObject {
	return t.M_reason
}

func (t *TL_phoneCallDiscarded) Set_duration(M_duration TLObject) {
	t.M_duration = M_duration
}

func (t *TL_phoneCallDiscarded) Get_duration() TLObject {
	return t.M_duration
}

func New_TL_phoneCallDiscarded() *TL_phoneCallDiscarded {
	return &TL_phoneCallDiscarded{
		M_classID: TL_CLASS_phoneCallDiscarded,
	}
}

func (t *TL_phoneCallDiscarded) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallDiscarded))
	ec.TLObject(t.Get_need_rating())
	ec.TLObject(t.Get_need_debug())
	ec.Long(t.Get_id())
	ec.TLObject(t.Get_reason())
	ec.TLObject(t.Get_duration())

	return ec.GetBuffer()
}

func (t *TL_phoneCallDiscarded) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_need_rating = dc.TLObject()
	t.M_need_debug = dc.TLObject()
	t.M_id = dc.Long()
	t.M_reason = dc.TLObject()
	t.M_duration = dc.TLObject()

	return dc.err
}

func (t *TL_phoneCallDiscarded) String() string {
	return fmt.Sprintf("- phoneCallDiscarded#50ca4de1\n-- flags : %v\n-- need_rating : %v\n-- need_debug : %v\n-- id : %v\n-- reason : %v\n-- duration : %v\n", t.M_flags, t.M_need_rating, t.M_need_debug, t.M_id, t.M_reason, t.M_duration)
}

// phoneConnection#9d4c17c0
type TL_phoneConnection struct {
	M_classID  int32
	M_id       int64
	M_ip       string
	M_ipv6     string
	M_port     int32
	M_peer_tag TLObject
}

func (t *TL_phoneConnection) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phoneConnection) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_phoneConnection) Get_id() int64 {
	return t.M_id
}

func (t *TL_phoneConnection) Set_ip(M_ip string) {
	t.M_ip = M_ip
}

func (t *TL_phoneConnection) Get_ip() string {
	return t.M_ip
}

func (t *TL_phoneConnection) Set_ipv6(M_ipv6 string) {
	t.M_ipv6 = M_ipv6
}

func (t *TL_phoneConnection) Get_ipv6() string {
	return t.M_ipv6
}

func (t *TL_phoneConnection) Set_port(M_port int32) {
	t.M_port = M_port
}

func (t *TL_phoneConnection) Get_port() int32 {
	return t.M_port
}

func (t *TL_phoneConnection) Set_peer_tag(M_peer_tag TLObject) {
	t.M_peer_tag = M_peer_tag
}

func (t *TL_phoneConnection) Get_peer_tag() TLObject {
	return t.M_peer_tag
}

func New_TL_phoneConnection() *TL_phoneConnection {
	return &TL_phoneConnection{
		M_classID: TL_CLASS_phoneConnection,
	}
}

func (t *TL_phoneConnection) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneConnection))
	ec.Long(t.Get_id())
	ec.String(t.Get_ip())
	ec.String(t.Get_ipv6())
	ec.Int(t.Get_port())
	ec.TLObject(t.Get_peer_tag())

	return ec.GetBuffer()
}

func (t *TL_phoneConnection) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_ip = dc.String()
	t.M_ipv6 = dc.String()
	t.M_port = dc.Int()
	t.M_peer_tag = dc.TLObject()

	return dc.err
}

func (t *TL_phoneConnection) String() string {
	return fmt.Sprintf("- phoneConnection#9d4c17c0\n-- id : %v\n-- ip : %v\n-- ipv6 : %v\n-- port : %v\n-- peer_tag : %v\n", t.M_id, t.M_ip, t.M_ipv6, t.M_port, t.M_peer_tag)
}

// phoneCallProtocol#a2bb35cb
type TL_phoneCallProtocol struct {
	M_classID       int32
	M_flags         TLObject
	M_udp_p2p       TLObject
	M_udp_reflector TLObject
	M_min_layer     int32
	M_max_layer     int32
}

func (t *TL_phoneCallProtocol) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phoneCallProtocol) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_phoneCallProtocol) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_phoneCallProtocol) Set_udp_p2p(M_udp_p2p TLObject) {
	t.M_udp_p2p = M_udp_p2p
}

func (t *TL_phoneCallProtocol) Get_udp_p2p() TLObject {
	return t.M_udp_p2p
}

func (t *TL_phoneCallProtocol) Set_udp_reflector(M_udp_reflector TLObject) {
	t.M_udp_reflector = M_udp_reflector
}

func (t *TL_phoneCallProtocol) Get_udp_reflector() TLObject {
	return t.M_udp_reflector
}

func (t *TL_phoneCallProtocol) Set_min_layer(M_min_layer int32) {
	t.M_min_layer = M_min_layer
}

func (t *TL_phoneCallProtocol) Get_min_layer() int32 {
	return t.M_min_layer
}

func (t *TL_phoneCallProtocol) Set_max_layer(M_max_layer int32) {
	t.M_max_layer = M_max_layer
}

func (t *TL_phoneCallProtocol) Get_max_layer() int32 {
	return t.M_max_layer
}

func New_TL_phoneCallProtocol() *TL_phoneCallProtocol {
	return &TL_phoneCallProtocol{
		M_classID: TL_CLASS_phoneCallProtocol,
	}
}

func (t *TL_phoneCallProtocol) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phoneCallProtocol))
	ec.TLObject(t.Get_udp_p2p())
	ec.TLObject(t.Get_udp_reflector())
	ec.Int(t.Get_min_layer())
	ec.Int(t.Get_max_layer())

	return ec.GetBuffer()
}

func (t *TL_phoneCallProtocol) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_udp_p2p = dc.TLObject()
	t.M_udp_reflector = dc.TLObject()
	t.M_min_layer = dc.Int()
	t.M_max_layer = dc.Int()

	return dc.err
}

func (t *TL_phoneCallProtocol) String() string {
	return fmt.Sprintf("- phoneCallProtocol#a2bb35cb\n-- flags : %v\n-- udp_p2p : %v\n-- udp_reflector : %v\n-- min_layer : %v\n-- max_layer : %v\n", t.M_flags, t.M_udp_p2p, t.M_udp_reflector, t.M_min_layer, t.M_max_layer)
}

// phone_phoneCall#ec82e140
type TL_phone_phoneCall struct {
	M_classID    int32
	M_phone_call TLObject
	M_users      []TLObject
}

func (t *TL_phone_phoneCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phone_phoneCall) Set_phone_call(M_phone_call TLObject) {
	t.M_phone_call = M_phone_call
}

func (t *TL_phone_phoneCall) Get_phone_call() TLObject {
	return t.M_phone_call
}

func (t *TL_phone_phoneCall) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_phone_phoneCall) Get_users() []TLObject {
	return t.M_users
}

func New_TL_phone_phoneCall() *TL_phone_phoneCall {
	return &TL_phone_phoneCall{
		M_classID: TL_CLASS_phone_phoneCall,
	}
}

func (t *TL_phone_phoneCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phone_phoneCall))
	ec.TLObject(t.Get_phone_call())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_phone_phoneCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_call = dc.TLObject()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_phone_phoneCall) String() string {
	return fmt.Sprintf("- phone_phoneCall#ec82e140\n-- phone_call : %v\n-- users : %v\n", t.M_phone_call, t.M_users)
}

// upload_cdnFileReuploadNeeded#eea8e46e
type TL_upload_cdnFileReuploadNeeded struct {
	M_classID       int32
	M_request_token TLObject
}

func (t *TL_upload_cdnFileReuploadNeeded) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_cdnFileReuploadNeeded) Set_request_token(M_request_token TLObject) {
	t.M_request_token = M_request_token
}

func (t *TL_upload_cdnFileReuploadNeeded) Get_request_token() TLObject {
	return t.M_request_token
}

func New_TL_upload_cdnFileReuploadNeeded() *TL_upload_cdnFileReuploadNeeded {
	return &TL_upload_cdnFileReuploadNeeded{
		M_classID: TL_CLASS_upload_cdnFileReuploadNeeded,
	}
}

func (t *TL_upload_cdnFileReuploadNeeded) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_cdnFileReuploadNeeded))
	ec.TLObject(t.Get_request_token())

	return ec.GetBuffer()
}

func (t *TL_upload_cdnFileReuploadNeeded) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_request_token = dc.TLObject()

	return dc.err
}

func (t *TL_upload_cdnFileReuploadNeeded) String() string {
	return fmt.Sprintf("- upload_cdnFileReuploadNeeded#eea8e46e\n-- request_token : %v\n", t.M_request_token)
}

// upload_cdnFile#a99fca4f
type TL_upload_cdnFile struct {
	M_classID int32
	M_bytes   TLObject
}

func (t *TL_upload_cdnFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_cdnFile) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_upload_cdnFile) Get_bytes() TLObject {
	return t.M_bytes
}

func New_TL_upload_cdnFile() *TL_upload_cdnFile {
	return &TL_upload_cdnFile{
		M_classID: TL_CLASS_upload_cdnFile,
	}
}

func (t *TL_upload_cdnFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_cdnFile))
	ec.TLObject(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_upload_cdnFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_bytes = dc.TLObject()

	return dc.err
}

func (t *TL_upload_cdnFile) String() string {
	return fmt.Sprintf("- upload_cdnFile#a99fca4f\n-- bytes : %v\n", t.M_bytes)
}

// cdnPublicKey#c982eaba
type TL_cdnPublicKey struct {
	M_classID    int32
	M_dc_id      int32
	M_public_key string
}

func (t *TL_cdnPublicKey) ClassID() int32 {
	return t.M_classID
}

func (t *TL_cdnPublicKey) Set_dc_id(M_dc_id int32) {
	t.M_dc_id = M_dc_id
}

func (t *TL_cdnPublicKey) Get_dc_id() int32 {
	return t.M_dc_id
}

func (t *TL_cdnPublicKey) Set_public_key(M_public_key string) {
	t.M_public_key = M_public_key
}

func (t *TL_cdnPublicKey) Get_public_key() string {
	return t.M_public_key
}

func New_TL_cdnPublicKey() *TL_cdnPublicKey {
	return &TL_cdnPublicKey{
		M_classID: TL_CLASS_cdnPublicKey,
	}
}

func (t *TL_cdnPublicKey) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_cdnPublicKey))
	ec.Int(t.Get_dc_id())
	ec.String(t.Get_public_key())

	return ec.GetBuffer()
}

func (t *TL_cdnPublicKey) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_dc_id = dc.Int()
	t.M_public_key = dc.String()

	return dc.err
}

func (t *TL_cdnPublicKey) String() string {
	return fmt.Sprintf("- cdnPublicKey#c982eaba\n-- dc_id : %v\n-- public_key : %v\n", t.M_dc_id, t.M_public_key)
}

// cdnConfig#5725e40a
type TL_cdnConfig struct {
	M_classID     int32
	M_public_keys []TLObject
}

func (t *TL_cdnConfig) ClassID() int32 {
	return t.M_classID
}

func (t *TL_cdnConfig) Set_public_keys(M_public_keys []TLObject) {
	t.M_public_keys = M_public_keys
}

func (t *TL_cdnConfig) Get_public_keys() []TLObject {
	return t.M_public_keys
}

func New_TL_cdnConfig() *TL_cdnConfig {
	return &TL_cdnConfig{
		M_classID: TL_CLASS_cdnConfig,
	}
}

func (t *TL_cdnConfig) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_cdnConfig))
	ec.Vector(t.Get_public_keys())

	return ec.GetBuffer()
}

func (t *TL_cdnConfig) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_public_keys = dc.Vector()

	return dc.err
}

func (t *TL_cdnConfig) String() string {
	return fmt.Sprintf("- cdnConfig#5725e40a\n-- public_keys : %v\n", t.M_public_keys)
}

// langPackString#cad181f6
type TL_langPackString struct {
	M_classID int32
	M_key     string
	M_value   string
}

func (t *TL_langPackString) ClassID() int32 {
	return t.M_classID
}

func (t *TL_langPackString) Set_key(M_key string) {
	t.M_key = M_key
}

func (t *TL_langPackString) Get_key() string {
	return t.M_key
}

func (t *TL_langPackString) Set_value(M_value string) {
	t.M_value = M_value
}

func (t *TL_langPackString) Get_value() string {
	return t.M_value
}

func New_TL_langPackString() *TL_langPackString {
	return &TL_langPackString{
		M_classID: TL_CLASS_langPackString,
	}
}

func (t *TL_langPackString) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_langPackString))
	ec.String(t.Get_key())
	ec.String(t.Get_value())

	return ec.GetBuffer()
}

func (t *TL_langPackString) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_key = dc.String()
	t.M_value = dc.String()

	return dc.err
}

func (t *TL_langPackString) String() string {
	return fmt.Sprintf("- langPackString#cad181f6\n-- key : %v\n-- value : %v\n", t.M_key, t.M_value)
}

// langPackStringPluralized#6c47ac9f
type TL_langPackStringPluralized struct {
	M_classID     int32
	M_flags       TLObject
	M_key         string
	M_zero_value  TLObject
	M_one_value   TLObject
	M_two_value   TLObject
	M_few_value   TLObject
	M_many_value  TLObject
	M_other_value string
}

func (t *TL_langPackStringPluralized) ClassID() int32 {
	return t.M_classID
}

func (t *TL_langPackStringPluralized) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_langPackStringPluralized) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_langPackStringPluralized) Set_key(M_key string) {
	t.M_key = M_key
}

func (t *TL_langPackStringPluralized) Get_key() string {
	return t.M_key
}

func (t *TL_langPackStringPluralized) Set_zero_value(M_zero_value TLObject) {
	t.M_zero_value = M_zero_value
}

func (t *TL_langPackStringPluralized) Get_zero_value() TLObject {
	return t.M_zero_value
}

func (t *TL_langPackStringPluralized) Set_one_value(M_one_value TLObject) {
	t.M_one_value = M_one_value
}

func (t *TL_langPackStringPluralized) Get_one_value() TLObject {
	return t.M_one_value
}

func (t *TL_langPackStringPluralized) Set_two_value(M_two_value TLObject) {
	t.M_two_value = M_two_value
}

func (t *TL_langPackStringPluralized) Get_two_value() TLObject {
	return t.M_two_value
}

func (t *TL_langPackStringPluralized) Set_few_value(M_few_value TLObject) {
	t.M_few_value = M_few_value
}

func (t *TL_langPackStringPluralized) Get_few_value() TLObject {
	return t.M_few_value
}

func (t *TL_langPackStringPluralized) Set_many_value(M_many_value TLObject) {
	t.M_many_value = M_many_value
}

func (t *TL_langPackStringPluralized) Get_many_value() TLObject {
	return t.M_many_value
}

func (t *TL_langPackStringPluralized) Set_other_value(M_other_value string) {
	t.M_other_value = M_other_value
}

func (t *TL_langPackStringPluralized) Get_other_value() string {
	return t.M_other_value
}

func New_TL_langPackStringPluralized() *TL_langPackStringPluralized {
	return &TL_langPackStringPluralized{
		M_classID: TL_CLASS_langPackStringPluralized,
	}
}

func (t *TL_langPackStringPluralized) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_langPackStringPluralized))
	ec.String(t.Get_key())
	ec.TLObject(t.Get_zero_value())
	ec.TLObject(t.Get_one_value())
	ec.TLObject(t.Get_two_value())
	ec.TLObject(t.Get_few_value())
	ec.TLObject(t.Get_many_value())
	ec.String(t.Get_other_value())

	return ec.GetBuffer()
}

func (t *TL_langPackStringPluralized) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_key = dc.String()
	t.M_zero_value = dc.TLObject()
	t.M_one_value = dc.TLObject()
	t.M_two_value = dc.TLObject()
	t.M_few_value = dc.TLObject()
	t.M_many_value = dc.TLObject()
	t.M_other_value = dc.String()

	return dc.err
}

func (t *TL_langPackStringPluralized) String() string {
	return fmt.Sprintf("- langPackStringPluralized#6c47ac9f\n-- flags : %v\n-- key : %v\n-- zero_value : %v\n-- one_value : %v\n-- two_value : %v\n-- few_value : %v\n-- many_value : %v\n-- other_value : %v\n", t.M_flags, t.M_key, t.M_zero_value, t.M_one_value, t.M_two_value, t.M_few_value, t.M_many_value, t.M_other_value)
}

// langPackStringDeleted#2979eeb2
type TL_langPackStringDeleted struct {
	M_classID int32
	M_key     string
}

func (t *TL_langPackStringDeleted) ClassID() int32 {
	return t.M_classID
}

func (t *TL_langPackStringDeleted) Set_key(M_key string) {
	t.M_key = M_key
}

func (t *TL_langPackStringDeleted) Get_key() string {
	return t.M_key
}

func New_TL_langPackStringDeleted() *TL_langPackStringDeleted {
	return &TL_langPackStringDeleted{
		M_classID: TL_CLASS_langPackStringDeleted,
	}
}

func (t *TL_langPackStringDeleted) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_langPackStringDeleted))
	ec.String(t.Get_key())

	return ec.GetBuffer()
}

func (t *TL_langPackStringDeleted) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_key = dc.String()

	return dc.err
}

func (t *TL_langPackStringDeleted) String() string {
	return fmt.Sprintf("- langPackStringDeleted#2979eeb2\n-- key : %v\n", t.M_key)
}

// langPackDifference#f385c1f6
type TL_langPackDifference struct {
	M_classID      int32
	M_lang_code    string
	M_from_version int32
	M_version      int32
	M_strings      []TLObject
}

func (t *TL_langPackDifference) ClassID() int32 {
	return t.M_classID
}

func (t *TL_langPackDifference) Set_lang_code(M_lang_code string) {
	t.M_lang_code = M_lang_code
}

func (t *TL_langPackDifference) Get_lang_code() string {
	return t.M_lang_code
}

func (t *TL_langPackDifference) Set_from_version(M_from_version int32) {
	t.M_from_version = M_from_version
}

func (t *TL_langPackDifference) Get_from_version() int32 {
	return t.M_from_version
}

func (t *TL_langPackDifference) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_langPackDifference) Get_version() int32 {
	return t.M_version
}

func (t *TL_langPackDifference) Set_strings(M_strings []TLObject) {
	t.M_strings = M_strings
}

func (t *TL_langPackDifference) Get_strings() []TLObject {
	return t.M_strings
}

func New_TL_langPackDifference() *TL_langPackDifference {
	return &TL_langPackDifference{
		M_classID: TL_CLASS_langPackDifference,
	}
}

func (t *TL_langPackDifference) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_langPackDifference))
	ec.String(t.Get_lang_code())
	ec.Int(t.Get_from_version())
	ec.Int(t.Get_version())
	ec.Vector(t.Get_strings())

	return ec.GetBuffer()
}

func (t *TL_langPackDifference) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_lang_code = dc.String()
	t.M_from_version = dc.Int()
	t.M_version = dc.Int()
	t.M_strings = dc.Vector()

	return dc.err
}

func (t *TL_langPackDifference) String() string {
	return fmt.Sprintf("- langPackDifference#f385c1f6\n-- lang_code : %v\n-- from_version : %v\n-- version : %v\n-- strings : %v\n", t.M_lang_code, t.M_from_version, t.M_version, t.M_strings)
}

// langPackLanguage#117698f1
type TL_langPackLanguage struct {
	M_classID     int32
	M_name        string
	M_native_name string
	M_lang_code   string
}

func (t *TL_langPackLanguage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_langPackLanguage) Set_name(M_name string) {
	t.M_name = M_name
}

func (t *TL_langPackLanguage) Get_name() string {
	return t.M_name
}

func (t *TL_langPackLanguage) Set_native_name(M_native_name string) {
	t.M_native_name = M_native_name
}

func (t *TL_langPackLanguage) Get_native_name() string {
	return t.M_native_name
}

func (t *TL_langPackLanguage) Set_lang_code(M_lang_code string) {
	t.M_lang_code = M_lang_code
}

func (t *TL_langPackLanguage) Get_lang_code() string {
	return t.M_lang_code
}

func New_TL_langPackLanguage() *TL_langPackLanguage {
	return &TL_langPackLanguage{
		M_classID: TL_CLASS_langPackLanguage,
	}
}

func (t *TL_langPackLanguage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_langPackLanguage))
	ec.String(t.Get_name())
	ec.String(t.Get_native_name())
	ec.String(t.Get_lang_code())

	return ec.GetBuffer()
}

func (t *TL_langPackLanguage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_name = dc.String()
	t.M_native_name = dc.String()
	t.M_lang_code = dc.String()

	return dc.err
}

func (t *TL_langPackLanguage) String() string {
	return fmt.Sprintf("- langPackLanguage#117698f1\n-- name : %v\n-- native_name : %v\n-- lang_code : %v\n", t.M_name, t.M_native_name, t.M_lang_code)
}

// channelAdminRights#5d7ceba5
type TL_channelAdminRights struct {
	M_classID         int32
	M_flags           TLObject
	M_change_info     TLObject
	M_post_messages   TLObject
	M_edit_messages   TLObject
	M_delete_messages TLObject
	M_ban_users       TLObject
	M_invite_users    TLObject
	M_invite_link     TLObject
	M_pin_messages    TLObject
	M_add_admins      TLObject
}

func (t *TL_channelAdminRights) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminRights) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channelAdminRights) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channelAdminRights) Set_change_info(M_change_info TLObject) {
	t.M_change_info = M_change_info
}

func (t *TL_channelAdminRights) Get_change_info() TLObject {
	return t.M_change_info
}

func (t *TL_channelAdminRights) Set_post_messages(M_post_messages TLObject) {
	t.M_post_messages = M_post_messages
}

func (t *TL_channelAdminRights) Get_post_messages() TLObject {
	return t.M_post_messages
}

func (t *TL_channelAdminRights) Set_edit_messages(M_edit_messages TLObject) {
	t.M_edit_messages = M_edit_messages
}

func (t *TL_channelAdminRights) Get_edit_messages() TLObject {
	return t.M_edit_messages
}

func (t *TL_channelAdminRights) Set_delete_messages(M_delete_messages TLObject) {
	t.M_delete_messages = M_delete_messages
}

func (t *TL_channelAdminRights) Get_delete_messages() TLObject {
	return t.M_delete_messages
}

func (t *TL_channelAdminRights) Set_ban_users(M_ban_users TLObject) {
	t.M_ban_users = M_ban_users
}

func (t *TL_channelAdminRights) Get_ban_users() TLObject {
	return t.M_ban_users
}

func (t *TL_channelAdminRights) Set_invite_users(M_invite_users TLObject) {
	t.M_invite_users = M_invite_users
}

func (t *TL_channelAdminRights) Get_invite_users() TLObject {
	return t.M_invite_users
}

func (t *TL_channelAdminRights) Set_invite_link(M_invite_link TLObject) {
	t.M_invite_link = M_invite_link
}

func (t *TL_channelAdminRights) Get_invite_link() TLObject {
	return t.M_invite_link
}

func (t *TL_channelAdminRights) Set_pin_messages(M_pin_messages TLObject) {
	t.M_pin_messages = M_pin_messages
}

func (t *TL_channelAdminRights) Get_pin_messages() TLObject {
	return t.M_pin_messages
}

func (t *TL_channelAdminRights) Set_add_admins(M_add_admins TLObject) {
	t.M_add_admins = M_add_admins
}

func (t *TL_channelAdminRights) Get_add_admins() TLObject {
	return t.M_add_admins
}

func New_TL_channelAdminRights() *TL_channelAdminRights {
	return &TL_channelAdminRights{
		M_classID: TL_CLASS_channelAdminRights,
	}
}

func (t *TL_channelAdminRights) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminRights))
	ec.TLObject(t.Get_change_info())
	ec.TLObject(t.Get_post_messages())
	ec.TLObject(t.Get_edit_messages())
	ec.TLObject(t.Get_delete_messages())
	ec.TLObject(t.Get_ban_users())
	ec.TLObject(t.Get_invite_users())
	ec.TLObject(t.Get_invite_link())
	ec.TLObject(t.Get_pin_messages())
	ec.TLObject(t.Get_add_admins())

	return ec.GetBuffer()
}

func (t *TL_channelAdminRights) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_change_info = dc.TLObject()
	t.M_post_messages = dc.TLObject()
	t.M_edit_messages = dc.TLObject()
	t.M_delete_messages = dc.TLObject()
	t.M_ban_users = dc.TLObject()
	t.M_invite_users = dc.TLObject()
	t.M_invite_link = dc.TLObject()
	t.M_pin_messages = dc.TLObject()
	t.M_add_admins = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminRights) String() string {
	return fmt.Sprintf("- channelAdminRights#5d7ceba5\n-- flags : %v\n-- change_info : %v\n-- post_messages : %v\n-- edit_messages : %v\n-- delete_messages : %v\n-- ban_users : %v\n-- invite_users : %v\n-- invite_link : %v\n-- pin_messages : %v\n-- add_admins : %v\n", t.M_flags, t.M_change_info, t.M_post_messages, t.M_edit_messages, t.M_delete_messages, t.M_ban_users, t.M_invite_users, t.M_invite_link, t.M_pin_messages, t.M_add_admins)
}

// channelBannedRights#58cf4249
type TL_channelBannedRights struct {
	M_classID       int32
	M_flags         TLObject
	M_view_messages TLObject
	M_send_messages TLObject
	M_send_media    TLObject
	M_send_stickers TLObject
	M_send_gifs     TLObject
	M_send_games    TLObject
	M_send_inline   TLObject
	M_embed_links   TLObject
	M_until_date    int32
}

func (t *TL_channelBannedRights) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelBannedRights) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channelBannedRights) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channelBannedRights) Set_view_messages(M_view_messages TLObject) {
	t.M_view_messages = M_view_messages
}

func (t *TL_channelBannedRights) Get_view_messages() TLObject {
	return t.M_view_messages
}

func (t *TL_channelBannedRights) Set_send_messages(M_send_messages TLObject) {
	t.M_send_messages = M_send_messages
}

func (t *TL_channelBannedRights) Get_send_messages() TLObject {
	return t.M_send_messages
}

func (t *TL_channelBannedRights) Set_send_media(M_send_media TLObject) {
	t.M_send_media = M_send_media
}

func (t *TL_channelBannedRights) Get_send_media() TLObject {
	return t.M_send_media
}

func (t *TL_channelBannedRights) Set_send_stickers(M_send_stickers TLObject) {
	t.M_send_stickers = M_send_stickers
}

func (t *TL_channelBannedRights) Get_send_stickers() TLObject {
	return t.M_send_stickers
}

func (t *TL_channelBannedRights) Set_send_gifs(M_send_gifs TLObject) {
	t.M_send_gifs = M_send_gifs
}

func (t *TL_channelBannedRights) Get_send_gifs() TLObject {
	return t.M_send_gifs
}

func (t *TL_channelBannedRights) Set_send_games(M_send_games TLObject) {
	t.M_send_games = M_send_games
}

func (t *TL_channelBannedRights) Get_send_games() TLObject {
	return t.M_send_games
}

func (t *TL_channelBannedRights) Set_send_inline(M_send_inline TLObject) {
	t.M_send_inline = M_send_inline
}

func (t *TL_channelBannedRights) Get_send_inline() TLObject {
	return t.M_send_inline
}

func (t *TL_channelBannedRights) Set_embed_links(M_embed_links TLObject) {
	t.M_embed_links = M_embed_links
}

func (t *TL_channelBannedRights) Get_embed_links() TLObject {
	return t.M_embed_links
}

func (t *TL_channelBannedRights) Set_until_date(M_until_date int32) {
	t.M_until_date = M_until_date
}

func (t *TL_channelBannedRights) Get_until_date() int32 {
	return t.M_until_date
}

func New_TL_channelBannedRights() *TL_channelBannedRights {
	return &TL_channelBannedRights{
		M_classID: TL_CLASS_channelBannedRights,
	}
}

func (t *TL_channelBannedRights) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelBannedRights))
	ec.TLObject(t.Get_view_messages())
	ec.TLObject(t.Get_send_messages())
	ec.TLObject(t.Get_send_media())
	ec.TLObject(t.Get_send_stickers())
	ec.TLObject(t.Get_send_gifs())
	ec.TLObject(t.Get_send_games())
	ec.TLObject(t.Get_send_inline())
	ec.TLObject(t.Get_embed_links())
	ec.Int(t.Get_until_date())

	return ec.GetBuffer()
}

func (t *TL_channelBannedRights) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_view_messages = dc.TLObject()
	t.M_send_messages = dc.TLObject()
	t.M_send_media = dc.TLObject()
	t.M_send_stickers = dc.TLObject()
	t.M_send_gifs = dc.TLObject()
	t.M_send_games = dc.TLObject()
	t.M_send_inline = dc.TLObject()
	t.M_embed_links = dc.TLObject()
	t.M_until_date = dc.Int()

	return dc.err
}

func (t *TL_channelBannedRights) String() string {
	return fmt.Sprintf("- channelBannedRights#58cf4249\n-- flags : %v\n-- view_messages : %v\n-- send_messages : %v\n-- send_media : %v\n-- send_stickers : %v\n-- send_gifs : %v\n-- send_games : %v\n-- send_inline : %v\n-- embed_links : %v\n-- until_date : %v\n", t.M_flags, t.M_view_messages, t.M_send_messages, t.M_send_media, t.M_send_stickers, t.M_send_gifs, t.M_send_games, t.M_send_inline, t.M_embed_links, t.M_until_date)
}

// channelAdminLogEventActionChangeTitle#e6dfb825
type TL_channelAdminLogEventActionChangeTitle struct {
	M_classID    int32
	M_prev_value string
	M_new_value  string
}

func (t *TL_channelAdminLogEventActionChangeTitle) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionChangeTitle) Set_prev_value(M_prev_value string) {
	t.M_prev_value = M_prev_value
}

func (t *TL_channelAdminLogEventActionChangeTitle) Get_prev_value() string {
	return t.M_prev_value
}

func (t *TL_channelAdminLogEventActionChangeTitle) Set_new_value(M_new_value string) {
	t.M_new_value = M_new_value
}

func (t *TL_channelAdminLogEventActionChangeTitle) Get_new_value() string {
	return t.M_new_value
}

func New_TL_channelAdminLogEventActionChangeTitle() *TL_channelAdminLogEventActionChangeTitle {
	return &TL_channelAdminLogEventActionChangeTitle{
		M_classID: TL_CLASS_channelAdminLogEventActionChangeTitle,
	}
}

func (t *TL_channelAdminLogEventActionChangeTitle) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionChangeTitle))
	ec.String(t.Get_prev_value())
	ec.String(t.Get_new_value())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionChangeTitle) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_prev_value = dc.String()
	t.M_new_value = dc.String()

	return dc.err
}

func (t *TL_channelAdminLogEventActionChangeTitle) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionChangeTitle#e6dfb825\n-- prev_value : %v\n-- new_value : %v\n", t.M_prev_value, t.M_new_value)
}

// channelAdminLogEventActionChangeAbout#55188a2e
type TL_channelAdminLogEventActionChangeAbout struct {
	M_classID    int32
	M_prev_value string
	M_new_value  string
}

func (t *TL_channelAdminLogEventActionChangeAbout) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionChangeAbout) Set_prev_value(M_prev_value string) {
	t.M_prev_value = M_prev_value
}

func (t *TL_channelAdminLogEventActionChangeAbout) Get_prev_value() string {
	return t.M_prev_value
}

func (t *TL_channelAdminLogEventActionChangeAbout) Set_new_value(M_new_value string) {
	t.M_new_value = M_new_value
}

func (t *TL_channelAdminLogEventActionChangeAbout) Get_new_value() string {
	return t.M_new_value
}

func New_TL_channelAdminLogEventActionChangeAbout() *TL_channelAdminLogEventActionChangeAbout {
	return &TL_channelAdminLogEventActionChangeAbout{
		M_classID: TL_CLASS_channelAdminLogEventActionChangeAbout,
	}
}

func (t *TL_channelAdminLogEventActionChangeAbout) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionChangeAbout))
	ec.String(t.Get_prev_value())
	ec.String(t.Get_new_value())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionChangeAbout) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_prev_value = dc.String()
	t.M_new_value = dc.String()

	return dc.err
}

func (t *TL_channelAdminLogEventActionChangeAbout) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionChangeAbout#55188a2e\n-- prev_value : %v\n-- new_value : %v\n", t.M_prev_value, t.M_new_value)
}

// channelAdminLogEventActionChangeUsername#6a4afc38
type TL_channelAdminLogEventActionChangeUsername struct {
	M_classID    int32
	M_prev_value string
	M_new_value  string
}

func (t *TL_channelAdminLogEventActionChangeUsername) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionChangeUsername) Set_prev_value(M_prev_value string) {
	t.M_prev_value = M_prev_value
}

func (t *TL_channelAdminLogEventActionChangeUsername) Get_prev_value() string {
	return t.M_prev_value
}

func (t *TL_channelAdminLogEventActionChangeUsername) Set_new_value(M_new_value string) {
	t.M_new_value = M_new_value
}

func (t *TL_channelAdminLogEventActionChangeUsername) Get_new_value() string {
	return t.M_new_value
}

func New_TL_channelAdminLogEventActionChangeUsername() *TL_channelAdminLogEventActionChangeUsername {
	return &TL_channelAdminLogEventActionChangeUsername{
		M_classID: TL_CLASS_channelAdminLogEventActionChangeUsername,
	}
}

func (t *TL_channelAdminLogEventActionChangeUsername) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionChangeUsername))
	ec.String(t.Get_prev_value())
	ec.String(t.Get_new_value())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionChangeUsername) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_prev_value = dc.String()
	t.M_new_value = dc.String()

	return dc.err
}

func (t *TL_channelAdminLogEventActionChangeUsername) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionChangeUsername#6a4afc38\n-- prev_value : %v\n-- new_value : %v\n", t.M_prev_value, t.M_new_value)
}

// channelAdminLogEventActionChangePhoto#b82f55c3
type TL_channelAdminLogEventActionChangePhoto struct {
	M_classID    int32
	M_prev_photo TLObject
	M_new_photo  TLObject
}

func (t *TL_channelAdminLogEventActionChangePhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionChangePhoto) Set_prev_photo(M_prev_photo TLObject) {
	t.M_prev_photo = M_prev_photo
}

func (t *TL_channelAdminLogEventActionChangePhoto) Get_prev_photo() TLObject {
	return t.M_prev_photo
}

func (t *TL_channelAdminLogEventActionChangePhoto) Set_new_photo(M_new_photo TLObject) {
	t.M_new_photo = M_new_photo
}

func (t *TL_channelAdminLogEventActionChangePhoto) Get_new_photo() TLObject {
	return t.M_new_photo
}

func New_TL_channelAdminLogEventActionChangePhoto() *TL_channelAdminLogEventActionChangePhoto {
	return &TL_channelAdminLogEventActionChangePhoto{
		M_classID: TL_CLASS_channelAdminLogEventActionChangePhoto,
	}
}

func (t *TL_channelAdminLogEventActionChangePhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionChangePhoto))
	ec.TLObject(t.Get_prev_photo())
	ec.TLObject(t.Get_new_photo())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionChangePhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_prev_photo = dc.TLObject()
	t.M_new_photo = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionChangePhoto) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionChangePhoto#b82f55c3\n-- prev_photo : %v\n-- new_photo : %v\n", t.M_prev_photo, t.M_new_photo)
}

// channelAdminLogEventActionToggleInvites#1b7907ae
type TL_channelAdminLogEventActionToggleInvites struct {
	M_classID   int32
	M_new_value TLObject
}

func (t *TL_channelAdminLogEventActionToggleInvites) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionToggleInvites) Set_new_value(M_new_value TLObject) {
	t.M_new_value = M_new_value
}

func (t *TL_channelAdminLogEventActionToggleInvites) Get_new_value() TLObject {
	return t.M_new_value
}

func New_TL_channelAdminLogEventActionToggleInvites() *TL_channelAdminLogEventActionToggleInvites {
	return &TL_channelAdminLogEventActionToggleInvites{
		M_classID: TL_CLASS_channelAdminLogEventActionToggleInvites,
	}
}

func (t *TL_channelAdminLogEventActionToggleInvites) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionToggleInvites))
	ec.TLObject(t.Get_new_value())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionToggleInvites) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_new_value = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionToggleInvites) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionToggleInvites#1b7907ae\n-- new_value : %v\n", t.M_new_value)
}

// channelAdminLogEventActionToggleSignatures#26ae0971
type TL_channelAdminLogEventActionToggleSignatures struct {
	M_classID   int32
	M_new_value TLObject
}

func (t *TL_channelAdminLogEventActionToggleSignatures) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionToggleSignatures) Set_new_value(M_new_value TLObject) {
	t.M_new_value = M_new_value
}

func (t *TL_channelAdminLogEventActionToggleSignatures) Get_new_value() TLObject {
	return t.M_new_value
}

func New_TL_channelAdminLogEventActionToggleSignatures() *TL_channelAdminLogEventActionToggleSignatures {
	return &TL_channelAdminLogEventActionToggleSignatures{
		M_classID: TL_CLASS_channelAdminLogEventActionToggleSignatures,
	}
}

func (t *TL_channelAdminLogEventActionToggleSignatures) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionToggleSignatures))
	ec.TLObject(t.Get_new_value())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionToggleSignatures) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_new_value = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionToggleSignatures) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionToggleSignatures#26ae0971\n-- new_value : %v\n", t.M_new_value)
}

// channelAdminLogEventActionUpdatePinned#e9e82c18
type TL_channelAdminLogEventActionUpdatePinned struct {
	M_classID int32
	M_message TLObject
}

func (t *TL_channelAdminLogEventActionUpdatePinned) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionUpdatePinned) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_channelAdminLogEventActionUpdatePinned) Get_message() TLObject {
	return t.M_message
}

func New_TL_channelAdminLogEventActionUpdatePinned() *TL_channelAdminLogEventActionUpdatePinned {
	return &TL_channelAdminLogEventActionUpdatePinned{
		M_classID: TL_CLASS_channelAdminLogEventActionUpdatePinned,
	}
}

func (t *TL_channelAdminLogEventActionUpdatePinned) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionUpdatePinned))
	ec.TLObject(t.Get_message())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionUpdatePinned) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionUpdatePinned) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionUpdatePinned#e9e82c18\n-- message : %v\n", t.M_message)
}

// channelAdminLogEventActionEditMessage#709b2405
type TL_channelAdminLogEventActionEditMessage struct {
	M_classID      int32
	M_prev_message TLObject
	M_new_message  TLObject
}

func (t *TL_channelAdminLogEventActionEditMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionEditMessage) Set_prev_message(M_prev_message TLObject) {
	t.M_prev_message = M_prev_message
}

func (t *TL_channelAdminLogEventActionEditMessage) Get_prev_message() TLObject {
	return t.M_prev_message
}

func (t *TL_channelAdminLogEventActionEditMessage) Set_new_message(M_new_message TLObject) {
	t.M_new_message = M_new_message
}

func (t *TL_channelAdminLogEventActionEditMessage) Get_new_message() TLObject {
	return t.M_new_message
}

func New_TL_channelAdminLogEventActionEditMessage() *TL_channelAdminLogEventActionEditMessage {
	return &TL_channelAdminLogEventActionEditMessage{
		M_classID: TL_CLASS_channelAdminLogEventActionEditMessage,
	}
}

func (t *TL_channelAdminLogEventActionEditMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionEditMessage))
	ec.TLObject(t.Get_prev_message())
	ec.TLObject(t.Get_new_message())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionEditMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_prev_message = dc.TLObject()
	t.M_new_message = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionEditMessage) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionEditMessage#709b2405\n-- prev_message : %v\n-- new_message : %v\n", t.M_prev_message, t.M_new_message)
}

// channelAdminLogEventActionDeleteMessage#42e047bb
type TL_channelAdminLogEventActionDeleteMessage struct {
	M_classID int32
	M_message TLObject
}

func (t *TL_channelAdminLogEventActionDeleteMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionDeleteMessage) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_channelAdminLogEventActionDeleteMessage) Get_message() TLObject {
	return t.M_message
}

func New_TL_channelAdminLogEventActionDeleteMessage() *TL_channelAdminLogEventActionDeleteMessage {
	return &TL_channelAdminLogEventActionDeleteMessage{
		M_classID: TL_CLASS_channelAdminLogEventActionDeleteMessage,
	}
}

func (t *TL_channelAdminLogEventActionDeleteMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionDeleteMessage))
	ec.TLObject(t.Get_message())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionDeleteMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionDeleteMessage) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionDeleteMessage#42e047bb\n-- message : %v\n", t.M_message)
}

// channelAdminLogEventActionParticipantJoin#183040d3
type TL_channelAdminLogEventActionParticipantJoin struct {
	M_classID int32
}

func (t *TL_channelAdminLogEventActionParticipantJoin) ClassID() int32 {
	return t.M_classID
}

func New_TL_channelAdminLogEventActionParticipantJoin() *TL_channelAdminLogEventActionParticipantJoin {
	return &TL_channelAdminLogEventActionParticipantJoin{
		M_classID: TL_CLASS_channelAdminLogEventActionParticipantJoin,
	}
}

func (t *TL_channelAdminLogEventActionParticipantJoin) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionParticipantJoin))

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionParticipantJoin) Decode(b []byte) error {
	return nil
}

func (t *TL_channelAdminLogEventActionParticipantJoin) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionParticipantJoin#183040d3\n")
}

// channelAdminLogEventActionParticipantLeave#f89777f2
type TL_channelAdminLogEventActionParticipantLeave struct {
	M_classID int32
}

func (t *TL_channelAdminLogEventActionParticipantLeave) ClassID() int32 {
	return t.M_classID
}

func New_TL_channelAdminLogEventActionParticipantLeave() *TL_channelAdminLogEventActionParticipantLeave {
	return &TL_channelAdminLogEventActionParticipantLeave{
		M_classID: TL_CLASS_channelAdminLogEventActionParticipantLeave,
	}
}

func (t *TL_channelAdminLogEventActionParticipantLeave) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionParticipantLeave))

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionParticipantLeave) Decode(b []byte) error {
	return nil
}

func (t *TL_channelAdminLogEventActionParticipantLeave) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionParticipantLeave#f89777f2\n")
}

// channelAdminLogEventActionParticipantInvite#e31c34d8
type TL_channelAdminLogEventActionParticipantInvite struct {
	M_classID     int32
	M_participant TLObject
}

func (t *TL_channelAdminLogEventActionParticipantInvite) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionParticipantInvite) Set_participant(M_participant TLObject) {
	t.M_participant = M_participant
}

func (t *TL_channelAdminLogEventActionParticipantInvite) Get_participant() TLObject {
	return t.M_participant
}

func New_TL_channelAdminLogEventActionParticipantInvite() *TL_channelAdminLogEventActionParticipantInvite {
	return &TL_channelAdminLogEventActionParticipantInvite{
		M_classID: TL_CLASS_channelAdminLogEventActionParticipantInvite,
	}
}

func (t *TL_channelAdminLogEventActionParticipantInvite) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionParticipantInvite))
	ec.TLObject(t.Get_participant())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionParticipantInvite) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_participant = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionParticipantInvite) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionParticipantInvite#e31c34d8\n-- participant : %v\n", t.M_participant)
}

// channelAdminLogEventActionParticipantToggleBan#e6d83d7e
type TL_channelAdminLogEventActionParticipantToggleBan struct {
	M_classID          int32
	M_prev_participant TLObject
	M_new_participant  TLObject
}

func (t *TL_channelAdminLogEventActionParticipantToggleBan) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionParticipantToggleBan) Set_prev_participant(M_prev_participant TLObject) {
	t.M_prev_participant = M_prev_participant
}

func (t *TL_channelAdminLogEventActionParticipantToggleBan) Get_prev_participant() TLObject {
	return t.M_prev_participant
}

func (t *TL_channelAdminLogEventActionParticipantToggleBan) Set_new_participant(M_new_participant TLObject) {
	t.M_new_participant = M_new_participant
}

func (t *TL_channelAdminLogEventActionParticipantToggleBan) Get_new_participant() TLObject {
	return t.M_new_participant
}

func New_TL_channelAdminLogEventActionParticipantToggleBan() *TL_channelAdminLogEventActionParticipantToggleBan {
	return &TL_channelAdminLogEventActionParticipantToggleBan{
		M_classID: TL_CLASS_channelAdminLogEventActionParticipantToggleBan,
	}
}

func (t *TL_channelAdminLogEventActionParticipantToggleBan) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionParticipantToggleBan))
	ec.TLObject(t.Get_prev_participant())
	ec.TLObject(t.Get_new_participant())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionParticipantToggleBan) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_prev_participant = dc.TLObject()
	t.M_new_participant = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionParticipantToggleBan) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionParticipantToggleBan#e6d83d7e\n-- prev_participant : %v\n-- new_participant : %v\n", t.M_prev_participant, t.M_new_participant)
}

// channelAdminLogEventActionParticipantToggleAdmin#d5676710
type TL_channelAdminLogEventActionParticipantToggleAdmin struct {
	M_classID          int32
	M_prev_participant TLObject
	M_new_participant  TLObject
}

func (t *TL_channelAdminLogEventActionParticipantToggleAdmin) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionParticipantToggleAdmin) Set_prev_participant(M_prev_participant TLObject) {
	t.M_prev_participant = M_prev_participant
}

func (t *TL_channelAdminLogEventActionParticipantToggleAdmin) Get_prev_participant() TLObject {
	return t.M_prev_participant
}

func (t *TL_channelAdminLogEventActionParticipantToggleAdmin) Set_new_participant(M_new_participant TLObject) {
	t.M_new_participant = M_new_participant
}

func (t *TL_channelAdminLogEventActionParticipantToggleAdmin) Get_new_participant() TLObject {
	return t.M_new_participant
}

func New_TL_channelAdminLogEventActionParticipantToggleAdmin() *TL_channelAdminLogEventActionParticipantToggleAdmin {
	return &TL_channelAdminLogEventActionParticipantToggleAdmin{
		M_classID: TL_CLASS_channelAdminLogEventActionParticipantToggleAdmin,
	}
}

func (t *TL_channelAdminLogEventActionParticipantToggleAdmin) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionParticipantToggleAdmin))
	ec.TLObject(t.Get_prev_participant())
	ec.TLObject(t.Get_new_participant())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionParticipantToggleAdmin) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_prev_participant = dc.TLObject()
	t.M_new_participant = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionParticipantToggleAdmin) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionParticipantToggleAdmin#d5676710\n-- prev_participant : %v\n-- new_participant : %v\n", t.M_prev_participant, t.M_new_participant)
}

// channelAdminLogEventActionChangeStickerSet#b1c3caa7
type TL_channelAdminLogEventActionChangeStickerSet struct {
	M_classID         int32
	M_prev_stickerset TLObject
	M_new_stickerset  TLObject
}

func (t *TL_channelAdminLogEventActionChangeStickerSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionChangeStickerSet) Set_prev_stickerset(M_prev_stickerset TLObject) {
	t.M_prev_stickerset = M_prev_stickerset
}

func (t *TL_channelAdminLogEventActionChangeStickerSet) Get_prev_stickerset() TLObject {
	return t.M_prev_stickerset
}

func (t *TL_channelAdminLogEventActionChangeStickerSet) Set_new_stickerset(M_new_stickerset TLObject) {
	t.M_new_stickerset = M_new_stickerset
}

func (t *TL_channelAdminLogEventActionChangeStickerSet) Get_new_stickerset() TLObject {
	return t.M_new_stickerset
}

func New_TL_channelAdminLogEventActionChangeStickerSet() *TL_channelAdminLogEventActionChangeStickerSet {
	return &TL_channelAdminLogEventActionChangeStickerSet{
		M_classID: TL_CLASS_channelAdminLogEventActionChangeStickerSet,
	}
}

func (t *TL_channelAdminLogEventActionChangeStickerSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionChangeStickerSet))
	ec.TLObject(t.Get_prev_stickerset())
	ec.TLObject(t.Get_new_stickerset())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionChangeStickerSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_prev_stickerset = dc.TLObject()
	t.M_new_stickerset = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionChangeStickerSet) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionChangeStickerSet#b1c3caa7\n-- prev_stickerset : %v\n-- new_stickerset : %v\n", t.M_prev_stickerset, t.M_new_stickerset)
}

// channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1
type TL_channelAdminLogEventActionTogglePreHistoryHidden struct {
	M_classID   int32
	M_new_value TLObject
}

func (t *TL_channelAdminLogEventActionTogglePreHistoryHidden) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventActionTogglePreHistoryHidden) Set_new_value(M_new_value TLObject) {
	t.M_new_value = M_new_value
}

func (t *TL_channelAdminLogEventActionTogglePreHistoryHidden) Get_new_value() TLObject {
	return t.M_new_value
}

func New_TL_channelAdminLogEventActionTogglePreHistoryHidden() *TL_channelAdminLogEventActionTogglePreHistoryHidden {
	return &TL_channelAdminLogEventActionTogglePreHistoryHidden{
		M_classID: TL_CLASS_channelAdminLogEventActionTogglePreHistoryHidden,
	}
}

func (t *TL_channelAdminLogEventActionTogglePreHistoryHidden) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventActionTogglePreHistoryHidden))
	ec.TLObject(t.Get_new_value())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventActionTogglePreHistoryHidden) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_new_value = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventActionTogglePreHistoryHidden) String() string {
	return fmt.Sprintf("- channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1\n-- new_value : %v\n", t.M_new_value)
}

// channelAdminLogEvent#3b5a3e40
type TL_channelAdminLogEvent struct {
	M_classID int32
	M_id      int64
	M_date    int32
	M_user_id int32
	M_action  TLObject
}

func (t *TL_channelAdminLogEvent) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEvent) Set_id(M_id int64) {
	t.M_id = M_id
}

func (t *TL_channelAdminLogEvent) Get_id() int64 {
	return t.M_id
}

func (t *TL_channelAdminLogEvent) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_channelAdminLogEvent) Get_date() int32 {
	return t.M_date
}

func (t *TL_channelAdminLogEvent) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_channelAdminLogEvent) Get_user_id() int32 {
	return t.M_user_id
}

func (t *TL_channelAdminLogEvent) Set_action(M_action TLObject) {
	t.M_action = M_action
}

func (t *TL_channelAdminLogEvent) Get_action() TLObject {
	return t.M_action
}

func New_TL_channelAdminLogEvent() *TL_channelAdminLogEvent {
	return &TL_channelAdminLogEvent{
		M_classID: TL_CLASS_channelAdminLogEvent,
	}
}

func (t *TL_channelAdminLogEvent) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEvent))
	ec.Long(t.Get_id())
	ec.Int(t.Get_date())
	ec.Int(t.Get_user_id())
	ec.TLObject(t.Get_action())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEvent) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Long()
	t.M_date = dc.Int()
	t.M_user_id = dc.Int()
	t.M_action = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEvent) String() string {
	return fmt.Sprintf("- channelAdminLogEvent#3b5a3e40\n-- id : %v\n-- date : %v\n-- user_id : %v\n-- action : %v\n", t.M_id, t.M_date, t.M_user_id, t.M_action)
}

// channels_adminLogResults#ed8af74d
type TL_channels_adminLogResults struct {
	M_classID int32
	M_events  []TLObject
	M_chats   []TLObject
	M_users   []TLObject
}

func (t *TL_channels_adminLogResults) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_adminLogResults) Set_events(M_events []TLObject) {
	t.M_events = M_events
}

func (t *TL_channels_adminLogResults) Get_events() []TLObject {
	return t.M_events
}

func (t *TL_channels_adminLogResults) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_channels_adminLogResults) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_channels_adminLogResults) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_channels_adminLogResults) Get_users() []TLObject {
	return t.M_users
}

func New_TL_channels_adminLogResults() *TL_channels_adminLogResults {
	return &TL_channels_adminLogResults{
		M_classID: TL_CLASS_channels_adminLogResults,
	}
}

func (t *TL_channels_adminLogResults) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_adminLogResults))
	ec.Vector(t.Get_events())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_channels_adminLogResults) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_events = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_channels_adminLogResults) String() string {
	return fmt.Sprintf("- channels_adminLogResults#ed8af74d\n-- events : %v\n-- chats : %v\n-- users : %v\n", t.M_events, t.M_chats, t.M_users)
}

// channelAdminLogEventsFilter#ea107ae4
type TL_channelAdminLogEventsFilter struct {
	M_classID  int32
	M_flags    TLObject
	M_join     TLObject
	M_leave    TLObject
	M_invite   TLObject
	M_ban      TLObject
	M_unban    TLObject
	M_kick     TLObject
	M_unkick   TLObject
	M_promote  TLObject
	M_demote   TLObject
	M_info     TLObject
	M_settings TLObject
	M_pinned   TLObject
	M_edit     TLObject
	M_delete   TLObject
}

func (t *TL_channelAdminLogEventsFilter) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channelAdminLogEventsFilter) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channelAdminLogEventsFilter) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channelAdminLogEventsFilter) Set_join(M_join TLObject) {
	t.M_join = M_join
}

func (t *TL_channelAdminLogEventsFilter) Get_join() TLObject {
	return t.M_join
}

func (t *TL_channelAdminLogEventsFilter) Set_leave(M_leave TLObject) {
	t.M_leave = M_leave
}

func (t *TL_channelAdminLogEventsFilter) Get_leave() TLObject {
	return t.M_leave
}

func (t *TL_channelAdminLogEventsFilter) Set_invite(M_invite TLObject) {
	t.M_invite = M_invite
}

func (t *TL_channelAdminLogEventsFilter) Get_invite() TLObject {
	return t.M_invite
}

func (t *TL_channelAdminLogEventsFilter) Set_ban(M_ban TLObject) {
	t.M_ban = M_ban
}

func (t *TL_channelAdminLogEventsFilter) Get_ban() TLObject {
	return t.M_ban
}

func (t *TL_channelAdminLogEventsFilter) Set_unban(M_unban TLObject) {
	t.M_unban = M_unban
}

func (t *TL_channelAdminLogEventsFilter) Get_unban() TLObject {
	return t.M_unban
}

func (t *TL_channelAdminLogEventsFilter) Set_kick(M_kick TLObject) {
	t.M_kick = M_kick
}

func (t *TL_channelAdminLogEventsFilter) Get_kick() TLObject {
	return t.M_kick
}

func (t *TL_channelAdminLogEventsFilter) Set_unkick(M_unkick TLObject) {
	t.M_unkick = M_unkick
}

func (t *TL_channelAdminLogEventsFilter) Get_unkick() TLObject {
	return t.M_unkick
}

func (t *TL_channelAdminLogEventsFilter) Set_promote(M_promote TLObject) {
	t.M_promote = M_promote
}

func (t *TL_channelAdminLogEventsFilter) Get_promote() TLObject {
	return t.M_promote
}

func (t *TL_channelAdminLogEventsFilter) Set_demote(M_demote TLObject) {
	t.M_demote = M_demote
}

func (t *TL_channelAdminLogEventsFilter) Get_demote() TLObject {
	return t.M_demote
}

func (t *TL_channelAdminLogEventsFilter) Set_info(M_info TLObject) {
	t.M_info = M_info
}

func (t *TL_channelAdminLogEventsFilter) Get_info() TLObject {
	return t.M_info
}

func (t *TL_channelAdminLogEventsFilter) Set_settings(M_settings TLObject) {
	t.M_settings = M_settings
}

func (t *TL_channelAdminLogEventsFilter) Get_settings() TLObject {
	return t.M_settings
}

func (t *TL_channelAdminLogEventsFilter) Set_pinned(M_pinned TLObject) {
	t.M_pinned = M_pinned
}

func (t *TL_channelAdminLogEventsFilter) Get_pinned() TLObject {
	return t.M_pinned
}

func (t *TL_channelAdminLogEventsFilter) Set_edit(M_edit TLObject) {
	t.M_edit = M_edit
}

func (t *TL_channelAdminLogEventsFilter) Get_edit() TLObject {
	return t.M_edit
}

func (t *TL_channelAdminLogEventsFilter) Set_delete(M_delete TLObject) {
	t.M_delete = M_delete
}

func (t *TL_channelAdminLogEventsFilter) Get_delete() TLObject {
	return t.M_delete
}

func New_TL_channelAdminLogEventsFilter() *TL_channelAdminLogEventsFilter {
	return &TL_channelAdminLogEventsFilter{
		M_classID: TL_CLASS_channelAdminLogEventsFilter,
	}
}

func (t *TL_channelAdminLogEventsFilter) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channelAdminLogEventsFilter))
	ec.TLObject(t.Get_join())
	ec.TLObject(t.Get_leave())
	ec.TLObject(t.Get_invite())
	ec.TLObject(t.Get_ban())
	ec.TLObject(t.Get_unban())
	ec.TLObject(t.Get_kick())
	ec.TLObject(t.Get_unkick())
	ec.TLObject(t.Get_promote())
	ec.TLObject(t.Get_demote())
	ec.TLObject(t.Get_info())
	ec.TLObject(t.Get_settings())
	ec.TLObject(t.Get_pinned())
	ec.TLObject(t.Get_edit())
	ec.TLObject(t.Get_delete())

	return ec.GetBuffer()
}

func (t *TL_channelAdminLogEventsFilter) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_join = dc.TLObject()
	t.M_leave = dc.TLObject()
	t.M_invite = dc.TLObject()
	t.M_ban = dc.TLObject()
	t.M_unban = dc.TLObject()
	t.M_kick = dc.TLObject()
	t.M_unkick = dc.TLObject()
	t.M_promote = dc.TLObject()
	t.M_demote = dc.TLObject()
	t.M_info = dc.TLObject()
	t.M_settings = dc.TLObject()
	t.M_pinned = dc.TLObject()
	t.M_edit = dc.TLObject()
	t.M_delete = dc.TLObject()

	return dc.err
}

func (t *TL_channelAdminLogEventsFilter) String() string {
	return fmt.Sprintf("- channelAdminLogEventsFilter#ea107ae4\n-- flags : %v\n-- join : %v\n-- leave : %v\n-- invite : %v\n-- ban : %v\n-- unban : %v\n-- kick : %v\n-- unkick : %v\n-- promote : %v\n-- demote : %v\n-- info : %v\n-- settings : %v\n-- pinned : %v\n-- edit : %v\n-- delete : %v\n", t.M_flags, t.M_join, t.M_leave, t.M_invite, t.M_ban, t.M_unban, t.M_kick, t.M_unkick, t.M_promote, t.M_demote, t.M_info, t.M_settings, t.M_pinned, t.M_edit, t.M_delete)
}

// popularContact#5ce14175
type TL_popularContact struct {
	M_classID   int32
	M_client_id int64
	M_importers int32
}

func (t *TL_popularContact) ClassID() int32 {
	return t.M_classID
}

func (t *TL_popularContact) Set_client_id(M_client_id int64) {
	t.M_client_id = M_client_id
}

func (t *TL_popularContact) Get_client_id() int64 {
	return t.M_client_id
}

func (t *TL_popularContact) Set_importers(M_importers int32) {
	t.M_importers = M_importers
}

func (t *TL_popularContact) Get_importers() int32 {
	return t.M_importers
}

func New_TL_popularContact() *TL_popularContact {
	return &TL_popularContact{
		M_classID: TL_CLASS_popularContact,
	}
}

func (t *TL_popularContact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_popularContact))
	ec.Long(t.Get_client_id())
	ec.Int(t.Get_importers())

	return ec.GetBuffer()
}

func (t *TL_popularContact) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_client_id = dc.Long()
	t.M_importers = dc.Int()

	return dc.err
}

func (t *TL_popularContact) String() string {
	return fmt.Sprintf("- popularContact#5ce14175\n-- client_id : %v\n-- importers : %v\n", t.M_client_id, t.M_importers)
}

// cdnFileHash#77eec38f
type TL_cdnFileHash struct {
	M_classID int32
	M_offset  int32
	M_limit   int32
	M_hash    TLObject
}

func (t *TL_cdnFileHash) ClassID() int32 {
	return t.M_classID
}

func (t *TL_cdnFileHash) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_cdnFileHash) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_cdnFileHash) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_cdnFileHash) Get_limit() int32 {
	return t.M_limit
}

func (t *TL_cdnFileHash) Set_hash(M_hash TLObject) {
	t.M_hash = M_hash
}

func (t *TL_cdnFileHash) Get_hash() TLObject {
	return t.M_hash
}

func New_TL_cdnFileHash() *TL_cdnFileHash {
	return &TL_cdnFileHash{
		M_classID: TL_CLASS_cdnFileHash,
	}
}

func (t *TL_cdnFileHash) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_cdnFileHash))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_limit())
	ec.TLObject(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_cdnFileHash) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_limit = dc.Int()
	t.M_hash = dc.TLObject()

	return dc.err
}

func (t *TL_cdnFileHash) String() string {
	return fmt.Sprintf("- cdnFileHash#77eec38f\n-- offset : %v\n-- limit : %v\n-- hash : %v\n", t.M_offset, t.M_limit, t.M_hash)
}

// messages_favedStickersNotModified#9e8fa6d3
type TL_messages_favedStickersNotModified struct {
	M_classID int32
}

func (t *TL_messages_favedStickersNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_messages_favedStickersNotModified() *TL_messages_favedStickersNotModified {
	return &TL_messages_favedStickersNotModified{
		M_classID: TL_CLASS_messages_favedStickersNotModified,
	}
}

func (t *TL_messages_favedStickersNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_favedStickersNotModified))

	return ec.GetBuffer()
}

func (t *TL_messages_favedStickersNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_messages_favedStickersNotModified) String() string {
	return fmt.Sprintf("- messages_favedStickersNotModified#9e8fa6d3\n")
}

// messages_favedStickers#f37f2f16
type TL_messages_favedStickers struct {
	M_classID  int32
	M_hash     int32
	M_packs    []TLObject
	M_stickers []TLObject
}

func (t *TL_messages_favedStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_favedStickers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_favedStickers) Get_hash() int32 {
	return t.M_hash
}

func (t *TL_messages_favedStickers) Set_packs(M_packs []TLObject) {
	t.M_packs = M_packs
}

func (t *TL_messages_favedStickers) Get_packs() []TLObject {
	return t.M_packs
}

func (t *TL_messages_favedStickers) Set_stickers(M_stickers []TLObject) {
	t.M_stickers = M_stickers
}

func (t *TL_messages_favedStickers) Get_stickers() []TLObject {
	return t.M_stickers
}

func New_TL_messages_favedStickers() *TL_messages_favedStickers {
	return &TL_messages_favedStickers{
		M_classID: TL_CLASS_messages_favedStickers,
	}
}

func (t *TL_messages_favedStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_favedStickers))
	ec.Int(t.Get_hash())
	ec.Vector(t.Get_packs())
	ec.Vector(t.Get_stickers())

	return ec.GetBuffer()
}

func (t *TL_messages_favedStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()
	t.M_packs = dc.Vector()
	t.M_stickers = dc.Vector()

	return dc.err
}

func (t *TL_messages_favedStickers) String() string {
	return fmt.Sprintf("- messages_favedStickers#f37f2f16\n-- hash : %v\n-- packs : %v\n-- stickers : %v\n", t.M_hash, t.M_packs, t.M_stickers)
}

// recentMeUrlUnknown#46e1d13d
type TL_recentMeUrlUnknown struct {
	M_classID int32
	M_url     string
}

func (t *TL_recentMeUrlUnknown) ClassID() int32 {
	return t.M_classID
}

func (t *TL_recentMeUrlUnknown) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_recentMeUrlUnknown) Get_url() string {
	return t.M_url
}

func New_TL_recentMeUrlUnknown() *TL_recentMeUrlUnknown {
	return &TL_recentMeUrlUnknown{
		M_classID: TL_CLASS_recentMeUrlUnknown,
	}
}

func (t *TL_recentMeUrlUnknown) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_recentMeUrlUnknown))
	ec.String(t.Get_url())

	return ec.GetBuffer()
}

func (t *TL_recentMeUrlUnknown) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()

	return dc.err
}

func (t *TL_recentMeUrlUnknown) String() string {
	return fmt.Sprintf("- recentMeUrlUnknown#46e1d13d\n-- url : %v\n", t.M_url)
}

// recentMeUrlUser#8dbc3336
type TL_recentMeUrlUser struct {
	M_classID int32
	M_url     string
	M_user_id int32
}

func (t *TL_recentMeUrlUser) ClassID() int32 {
	return t.M_classID
}

func (t *TL_recentMeUrlUser) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_recentMeUrlUser) Get_url() string {
	return t.M_url
}

func (t *TL_recentMeUrlUser) Set_user_id(M_user_id int32) {
	t.M_user_id = M_user_id
}

func (t *TL_recentMeUrlUser) Get_user_id() int32 {
	return t.M_user_id
}

func New_TL_recentMeUrlUser() *TL_recentMeUrlUser {
	return &TL_recentMeUrlUser{
		M_classID: TL_CLASS_recentMeUrlUser,
	}
}

func (t *TL_recentMeUrlUser) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_recentMeUrlUser))
	ec.String(t.Get_url())
	ec.Int(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_recentMeUrlUser) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_user_id = dc.Int()

	return dc.err
}

func (t *TL_recentMeUrlUser) String() string {
	return fmt.Sprintf("- recentMeUrlUser#8dbc3336\n-- url : %v\n-- user_id : %v\n", t.M_url, t.M_user_id)
}

// recentMeUrlChat#a01b22f9
type TL_recentMeUrlChat struct {
	M_classID int32
	M_url     string
	M_chat_id int32
}

func (t *TL_recentMeUrlChat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_recentMeUrlChat) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_recentMeUrlChat) Get_url() string {
	return t.M_url
}

func (t *TL_recentMeUrlChat) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_recentMeUrlChat) Get_chat_id() int32 {
	return t.M_chat_id
}

func New_TL_recentMeUrlChat() *TL_recentMeUrlChat {
	return &TL_recentMeUrlChat{
		M_classID: TL_CLASS_recentMeUrlChat,
	}
}

func (t *TL_recentMeUrlChat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_recentMeUrlChat))
	ec.String(t.Get_url())
	ec.Int(t.Get_chat_id())

	return ec.GetBuffer()
}

func (t *TL_recentMeUrlChat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_chat_id = dc.Int()

	return dc.err
}

func (t *TL_recentMeUrlChat) String() string {
	return fmt.Sprintf("- recentMeUrlChat#a01b22f9\n-- url : %v\n-- chat_id : %v\n", t.M_url, t.M_chat_id)
}

// recentMeUrlChatInvite#eb49081d
type TL_recentMeUrlChatInvite struct {
	M_classID     int32
	M_url         string
	M_chat_invite TLObject
}

func (t *TL_recentMeUrlChatInvite) ClassID() int32 {
	return t.M_classID
}

func (t *TL_recentMeUrlChatInvite) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_recentMeUrlChatInvite) Get_url() string {
	return t.M_url
}

func (t *TL_recentMeUrlChatInvite) Set_chat_invite(M_chat_invite TLObject) {
	t.M_chat_invite = M_chat_invite
}

func (t *TL_recentMeUrlChatInvite) Get_chat_invite() TLObject {
	return t.M_chat_invite
}

func New_TL_recentMeUrlChatInvite() *TL_recentMeUrlChatInvite {
	return &TL_recentMeUrlChatInvite{
		M_classID: TL_CLASS_recentMeUrlChatInvite,
	}
}

func (t *TL_recentMeUrlChatInvite) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_recentMeUrlChatInvite))
	ec.String(t.Get_url())
	ec.TLObject(t.Get_chat_invite())

	return ec.GetBuffer()
}

func (t *TL_recentMeUrlChatInvite) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_chat_invite = dc.TLObject()

	return dc.err
}

func (t *TL_recentMeUrlChatInvite) String() string {
	return fmt.Sprintf("- recentMeUrlChatInvite#eb49081d\n-- url : %v\n-- chat_invite : %v\n", t.M_url, t.M_chat_invite)
}

// recentMeUrlStickerSet#bc0a57dc
type TL_recentMeUrlStickerSet struct {
	M_classID int32
	M_url     string
	M_set     TLObject
}

func (t *TL_recentMeUrlStickerSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_recentMeUrlStickerSet) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_recentMeUrlStickerSet) Get_url() string {
	return t.M_url
}

func (t *TL_recentMeUrlStickerSet) Set_set(M_set TLObject) {
	t.M_set = M_set
}

func (t *TL_recentMeUrlStickerSet) Get_set() TLObject {
	return t.M_set
}

func New_TL_recentMeUrlStickerSet() *TL_recentMeUrlStickerSet {
	return &TL_recentMeUrlStickerSet{
		M_classID: TL_CLASS_recentMeUrlStickerSet,
	}
}

func (t *TL_recentMeUrlStickerSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_recentMeUrlStickerSet))
	ec.String(t.Get_url())
	ec.TLObject(t.Get_set())

	return ec.GetBuffer()
}

func (t *TL_recentMeUrlStickerSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_set = dc.TLObject()

	return dc.err
}

func (t *TL_recentMeUrlStickerSet) String() string {
	return fmt.Sprintf("- recentMeUrlStickerSet#bc0a57dc\n-- url : %v\n-- set : %v\n", t.M_url, t.M_set)
}

// help_recentMeUrls#e0310d7
type TL_help_recentMeUrls struct {
	M_classID int32
	M_urls    []TLObject
	M_chats   []TLObject
	M_users   []TLObject
}

func (t *TL_help_recentMeUrls) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_recentMeUrls) Set_urls(M_urls []TLObject) {
	t.M_urls = M_urls
}

func (t *TL_help_recentMeUrls) Get_urls() []TLObject {
	return t.M_urls
}

func (t *TL_help_recentMeUrls) Set_chats(M_chats []TLObject) {
	t.M_chats = M_chats
}

func (t *TL_help_recentMeUrls) Get_chats() []TLObject {
	return t.M_chats
}

func (t *TL_help_recentMeUrls) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_help_recentMeUrls) Get_users() []TLObject {
	return t.M_users
}

func New_TL_help_recentMeUrls() *TL_help_recentMeUrls {
	return &TL_help_recentMeUrls{
		M_classID: TL_CLASS_help_recentMeUrls,
	}
}

func (t *TL_help_recentMeUrls) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_recentMeUrls))
	ec.Vector(t.Get_urls())
	ec.Vector(t.Get_chats())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_help_recentMeUrls) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_urls = dc.Vector()
	t.M_chats = dc.Vector()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_help_recentMeUrls) String() string {
	return fmt.Sprintf("- help_recentMeUrls#e0310d7\n-- urls : %v\n-- chats : %v\n-- users : %v\n", t.M_urls, t.M_chats, t.M_users)
}

// inputSingleMedia#5eaa7809
type TL_inputSingleMedia struct {
	M_classID   int32
	M_media     TLObject
	M_random_id int64
}

func (t *TL_inputSingleMedia) ClassID() int32 {
	return t.M_classID
}

func (t *TL_inputSingleMedia) Set_media(M_media TLObject) {
	t.M_media = M_media
}

func (t *TL_inputSingleMedia) Get_media() TLObject {
	return t.M_media
}

func (t *TL_inputSingleMedia) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_inputSingleMedia) Get_random_id() int64 {
	return t.M_random_id
}

func New_TL_inputSingleMedia() *TL_inputSingleMedia {
	return &TL_inputSingleMedia{
		M_classID: TL_CLASS_inputSingleMedia,
	}
}

func (t *TL_inputSingleMedia) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_inputSingleMedia))
	ec.TLObject(t.Get_media())
	ec.Long(t.Get_random_id())

	return ec.GetBuffer()
}

func (t *TL_inputSingleMedia) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_media = dc.TLObject()
	t.M_random_id = dc.Long()

	return dc.err
}

func (t *TL_inputSingleMedia) String() string {
	return fmt.Sprintf("- inputSingleMedia#5eaa7809\n-- media : %v\n-- random_id : %v\n", t.M_media, t.M_random_id)
}

// invokeAfterMsg#cb9f372d
type TL_invokeAfterMsg struct {
	M_classID int32
	M_msg_id  int64
	M_query   TLObject
}

func (t *TL_invokeAfterMsg) ClassID() int32 {
	return t.M_classID
}

func (t *TL_invokeAfterMsg) Set_msg_id(M_msg_id int64) {
	t.M_msg_id = M_msg_id
}

func (t *TL_invokeAfterMsg) Get_msg_id() int64 {
	return t.M_msg_id
}

func (t *TL_invokeAfterMsg) Set_query(M_query TLObject) {
	t.M_query = M_query
}

func (t *TL_invokeAfterMsg) Get_query() TLObject {
	return t.M_query
}

func New_TL_invokeAfterMsg() *TL_invokeAfterMsg {
	return &TL_invokeAfterMsg{
		M_classID: TL_CLASS_invokeAfterMsg,
	}
}

func (t *TL_invokeAfterMsg) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_invokeAfterMsg))
	ec.Long(t.Get_msg_id())
	ec.TLObject(t.Get_query())

	return ec.GetBuffer()
}

func (t *TL_invokeAfterMsg) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_id = dc.Long()
	t.M_query = dc.TLObject()

	return dc.err
}

func (t *TL_invokeAfterMsg) String() string {
	return fmt.Sprintf("- invokeAfterMsg#cb9f372d\n-- msg_id : %v\n-- query : %v\n", t.M_msg_id, t.M_query)
}

// invokeAfterMsgs#3dc4b4f0
type TL_invokeAfterMsgs struct {
	M_classID int32
	M_msg_ids []int64
	M_query   TLObject
}

func (t *TL_invokeAfterMsgs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_invokeAfterMsgs) Set_msg_ids(M_msg_ids []int64) {
	t.M_msg_ids = M_msg_ids
}

func (t *TL_invokeAfterMsgs) Get_msg_ids() []int64 {
	return t.M_msg_ids
}

func (t *TL_invokeAfterMsgs) Set_query(M_query TLObject) {
	t.M_query = M_query
}

func (t *TL_invokeAfterMsgs) Get_query() TLObject {
	return t.M_query
}

func New_TL_invokeAfterMsgs() *TL_invokeAfterMsgs {
	return &TL_invokeAfterMsgs{
		M_classID: TL_CLASS_invokeAfterMsgs,
	}
}

func (t *TL_invokeAfterMsgs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_invokeAfterMsgs))
	ec.VectorLong(t.Get_msg_ids())
	ec.TLObject(t.Get_query())

	return ec.GetBuffer()
}

func (t *TL_invokeAfterMsgs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_ids = dc.VectorLong()
	t.M_query = dc.TLObject()

	return dc.err
}

func (t *TL_invokeAfterMsgs) String() string {
	return fmt.Sprintf("- invokeAfterMsgs#3dc4b4f0\n-- msg_ids : %v\n-- query : %v\n", t.M_msg_ids, t.M_query)
}

// initConnection#c7481da6
type TL_initConnection struct {
	M_classID          int32
	M_api_id           int32
	M_device_model     string
	M_system_version   string
	M_app_version      string
	M_system_lang_code string
	M_lang_pack        string
	M_lang_code        string
	M_query            TLObject
}

func (t *TL_initConnection) ClassID() int32 {
	return t.M_classID
}

func (t *TL_initConnection) Set_api_id(M_api_id int32) {
	t.M_api_id = M_api_id
}

func (t *TL_initConnection) Get_api_id() int32 {
	return t.M_api_id
}

func (t *TL_initConnection) Set_device_model(M_device_model string) {
	t.M_device_model = M_device_model
}

func (t *TL_initConnection) Get_device_model() string {
	return t.M_device_model
}

func (t *TL_initConnection) Set_system_version(M_system_version string) {
	t.M_system_version = M_system_version
}

func (t *TL_initConnection) Get_system_version() string {
	return t.M_system_version
}

func (t *TL_initConnection) Set_app_version(M_app_version string) {
	t.M_app_version = M_app_version
}

func (t *TL_initConnection) Get_app_version() string {
	return t.M_app_version
}

func (t *TL_initConnection) Set_system_lang_code(M_system_lang_code string) {
	t.M_system_lang_code = M_system_lang_code
}

func (t *TL_initConnection) Get_system_lang_code() string {
	return t.M_system_lang_code
}

func (t *TL_initConnection) Set_lang_pack(M_lang_pack string) {
	t.M_lang_pack = M_lang_pack
}

func (t *TL_initConnection) Get_lang_pack() string {
	return t.M_lang_pack
}

func (t *TL_initConnection) Set_lang_code(M_lang_code string) {
	t.M_lang_code = M_lang_code
}

func (t *TL_initConnection) Get_lang_code() string {
	return t.M_lang_code
}

func (t *TL_initConnection) Set_query(M_query TLObject) {
	t.M_query = M_query
}

func (t *TL_initConnection) Get_query() TLObject {
	return t.M_query
}

func New_TL_initConnection() *TL_initConnection {
	return &TL_initConnection{
		M_classID: TL_CLASS_initConnection,
	}
}

func (t *TL_initConnection) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_initConnection))
	ec.Int(t.Get_api_id())
	ec.String(t.Get_device_model())
	ec.String(t.Get_system_version())
	ec.String(t.Get_app_version())
	ec.String(t.Get_system_lang_code())
	ec.String(t.Get_lang_pack())
	ec.String(t.Get_lang_code())
	ec.TLObject(t.Get_query())

	return ec.GetBuffer()
}

func (t *TL_initConnection) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_api_id = dc.Int()
	t.M_device_model = dc.String()
	t.M_system_version = dc.String()
	t.M_app_version = dc.String()
	t.M_system_lang_code = dc.String()
	t.M_lang_pack = dc.String()
	t.M_lang_code = dc.String()
	t.M_query = dc.TLObject()

	return dc.err
}

func (t *TL_initConnection) String() string {
	return fmt.Sprintf("- initConnection#c7481da6\n-- api_id : %v\n-- device_model : %v\n-- system_version : %v\n-- app_version : %v\n-- system_lang_code : %v\n-- lang_pack : %v\n-- lang_code : %v\n-- query : %v\n", t.M_api_id, t.M_device_model, t.M_system_version, t.M_app_version, t.M_system_lang_code, t.M_lang_pack, t.M_lang_code, t.M_query)
}

// invokeWithLayer#da9b0d0d
type TL_invokeWithLayer struct {
	M_classID int32
	M_layer   int32
	M_query   TLObject
}

func (t *TL_invokeWithLayer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_invokeWithLayer) Set_layer(M_layer int32) {
	t.M_layer = M_layer
}

func (t *TL_invokeWithLayer) Get_layer() int32 {
	return t.M_layer
}

func (t *TL_invokeWithLayer) Set_query(M_query TLObject) {
	t.M_query = M_query
}

func (t *TL_invokeWithLayer) Get_query() TLObject {
	return t.M_query
}

func New_TL_invokeWithLayer() *TL_invokeWithLayer {
	return &TL_invokeWithLayer{
		M_classID: TL_CLASS_invokeWithLayer,
	}
}

func (t *TL_invokeWithLayer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_invokeWithLayer))
	ec.Int(t.Get_layer())
	ec.TLObject(t.Get_query())

	return ec.GetBuffer()
}

func (t *TL_invokeWithLayer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_layer = dc.Int()
	t.M_query = dc.TLObject()

	return dc.err
}

func (t *TL_invokeWithLayer) String() string {
	return fmt.Sprintf("- invokeWithLayer#da9b0d0d\n-- layer : %v\n-- query : %v\n", t.M_layer, t.M_query)
}

// invokeWithoutUpdates#bf9459b7
type TL_invokeWithoutUpdates struct {
	M_classID int32
	M_query   TLObject
}

func (t *TL_invokeWithoutUpdates) ClassID() int32 {
	return t.M_classID
}

func (t *TL_invokeWithoutUpdates) Set_query(M_query TLObject) {
	t.M_query = M_query
}

func (t *TL_invokeWithoutUpdates) Get_query() TLObject {
	return t.M_query
}

func New_TL_invokeWithoutUpdates() *TL_invokeWithoutUpdates {
	return &TL_invokeWithoutUpdates{
		M_classID: TL_CLASS_invokeWithoutUpdates,
	}
}

func (t *TL_invokeWithoutUpdates) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_invokeWithoutUpdates))
	ec.TLObject(t.Get_query())

	return ec.GetBuffer()
}

func (t *TL_invokeWithoutUpdates) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_query = dc.TLObject()

	return dc.err
}

func (t *TL_invokeWithoutUpdates) String() string {
	return fmt.Sprintf("- invokeWithoutUpdates#bf9459b7\n-- query : %v\n", t.M_query)
}

// auth_checkPhone#6fe51dfb
type TL_auth_checkPhone struct {
	M_classID      int32
	M_phone_number string
}

func (t *TL_auth_checkPhone) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_checkPhone) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_auth_checkPhone) Get_phone_number() string {
	return t.M_phone_number
}

func New_TL_auth_checkPhone() *TL_auth_checkPhone {
	return &TL_auth_checkPhone{
		M_classID: TL_CLASS_auth_checkPhone,
	}
}

func (t *TL_auth_checkPhone) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_checkPhone))
	ec.String(t.Get_phone_number())

	return ec.GetBuffer()
}

func (t *TL_auth_checkPhone) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()

	return dc.err
}

func (t *TL_auth_checkPhone) String() string {
	return fmt.Sprintf("- auth_checkPhone#6fe51dfb\n-- phone_number : %v\n", t.M_phone_number)
}

// auth_sendCode#86aef0ec
type TL_auth_sendCode struct {
	M_classID         int32
	M_flags           TLObject
	M_allow_flashcall TLObject
	M_phone_number    string
	M_current_number  TLObject
	M_api_id          int32
	M_api_hash        string
}

func (t *TL_auth_sendCode) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_sendCode) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_auth_sendCode) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_auth_sendCode) Set_allow_flashcall(M_allow_flashcall TLObject) {
	t.M_allow_flashcall = M_allow_flashcall
}

func (t *TL_auth_sendCode) Get_allow_flashcall() TLObject {
	return t.M_allow_flashcall
}

func (t *TL_auth_sendCode) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_auth_sendCode) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_auth_sendCode) Set_current_number(M_current_number TLObject) {
	t.M_current_number = M_current_number
}

func (t *TL_auth_sendCode) Get_current_number() TLObject {
	return t.M_current_number
}

func (t *TL_auth_sendCode) Set_api_id(M_api_id int32) {
	t.M_api_id = M_api_id
}

func (t *TL_auth_sendCode) Get_api_id() int32 {
	return t.M_api_id
}

func (t *TL_auth_sendCode) Set_api_hash(M_api_hash string) {
	t.M_api_hash = M_api_hash
}

func (t *TL_auth_sendCode) Get_api_hash() string {
	return t.M_api_hash
}

func New_TL_auth_sendCode() *TL_auth_sendCode {
	return &TL_auth_sendCode{
		M_classID: TL_CLASS_auth_sendCode,
	}
}

func (t *TL_auth_sendCode) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_sendCode))
	ec.TLObject(t.Get_allow_flashcall())
	ec.String(t.Get_phone_number())
	ec.TLObject(t.Get_current_number())
	ec.Int(t.Get_api_id())
	ec.String(t.Get_api_hash())

	return ec.GetBuffer()
}

func (t *TL_auth_sendCode) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_allow_flashcall = dc.TLObject()
	t.M_phone_number = dc.String()
	t.M_current_number = dc.TLObject()
	t.M_api_id = dc.Int()
	t.M_api_hash = dc.String()

	return dc.err
}

func (t *TL_auth_sendCode) String() string {
	return fmt.Sprintf("- auth_sendCode#86aef0ec\n-- flags : %v\n-- allow_flashcall : %v\n-- phone_number : %v\n-- current_number : %v\n-- api_id : %v\n-- api_hash : %v\n", t.M_flags, t.M_allow_flashcall, t.M_phone_number, t.M_current_number, t.M_api_id, t.M_api_hash)
}

// auth_signUp#1b067634
type TL_auth_signUp struct {
	M_classID         int32
	M_phone_number    string
	M_phone_code_hash string
	M_phone_code      string
	M_first_name      string
	M_last_name       string
}

func (t *TL_auth_signUp) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_signUp) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_auth_signUp) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_auth_signUp) Set_phone_code_hash(M_phone_code_hash string) {
	t.M_phone_code_hash = M_phone_code_hash
}

func (t *TL_auth_signUp) Get_phone_code_hash() string {
	return t.M_phone_code_hash
}

func (t *TL_auth_signUp) Set_phone_code(M_phone_code string) {
	t.M_phone_code = M_phone_code
}

func (t *TL_auth_signUp) Get_phone_code() string {
	return t.M_phone_code
}

func (t *TL_auth_signUp) Set_first_name(M_first_name string) {
	t.M_first_name = M_first_name
}

func (t *TL_auth_signUp) Get_first_name() string {
	return t.M_first_name
}

func (t *TL_auth_signUp) Set_last_name(M_last_name string) {
	t.M_last_name = M_last_name
}

func (t *TL_auth_signUp) Get_last_name() string {
	return t.M_last_name
}

func New_TL_auth_signUp() *TL_auth_signUp {
	return &TL_auth_signUp{
		M_classID: TL_CLASS_auth_signUp,
	}
}

func (t *TL_auth_signUp) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_signUp))
	ec.String(t.Get_phone_number())
	ec.String(t.Get_phone_code_hash())
	ec.String(t.Get_phone_code())
	ec.String(t.Get_first_name())
	ec.String(t.Get_last_name())

	return ec.GetBuffer()
}

func (t *TL_auth_signUp) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_phone_code_hash = dc.String()
	t.M_phone_code = dc.String()
	t.M_first_name = dc.String()
	t.M_last_name = dc.String()

	return dc.err
}

func (t *TL_auth_signUp) String() string {
	return fmt.Sprintf("- auth_signUp#1b067634\n-- phone_number : %v\n-- phone_code_hash : %v\n-- phone_code : %v\n-- first_name : %v\n-- last_name : %v\n", t.M_phone_number, t.M_phone_code_hash, t.M_phone_code, t.M_first_name, t.M_last_name)
}

// auth_signIn#bcd51581
type TL_auth_signIn struct {
	M_classID         int32
	M_phone_number    string
	M_phone_code_hash string
	M_phone_code      string
}

func (t *TL_auth_signIn) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_signIn) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_auth_signIn) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_auth_signIn) Set_phone_code_hash(M_phone_code_hash string) {
	t.M_phone_code_hash = M_phone_code_hash
}

func (t *TL_auth_signIn) Get_phone_code_hash() string {
	return t.M_phone_code_hash
}

func (t *TL_auth_signIn) Set_phone_code(M_phone_code string) {
	t.M_phone_code = M_phone_code
}

func (t *TL_auth_signIn) Get_phone_code() string {
	return t.M_phone_code
}

func New_TL_auth_signIn() *TL_auth_signIn {
	return &TL_auth_signIn{
		M_classID: TL_CLASS_auth_signIn,
	}
}

func (t *TL_auth_signIn) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_signIn))
	ec.String(t.Get_phone_number())
	ec.String(t.Get_phone_code_hash())
	ec.String(t.Get_phone_code())

	return ec.GetBuffer()
}

func (t *TL_auth_signIn) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_phone_code_hash = dc.String()
	t.M_phone_code = dc.String()

	return dc.err
}

func (t *TL_auth_signIn) String() string {
	return fmt.Sprintf("- auth_signIn#bcd51581\n-- phone_number : %v\n-- phone_code_hash : %v\n-- phone_code : %v\n", t.M_phone_number, t.M_phone_code_hash, t.M_phone_code)
}

// auth_logOut#5717da40
type TL_auth_logOut struct {
	M_classID int32
}

func (t *TL_auth_logOut) ClassID() int32 {
	return t.M_classID
}

func New_TL_auth_logOut() *TL_auth_logOut {
	return &TL_auth_logOut{
		M_classID: TL_CLASS_auth_logOut,
	}
}

func (t *TL_auth_logOut) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_logOut))

	return ec.GetBuffer()
}

func (t *TL_auth_logOut) Decode(b []byte) error {
	return nil
}

func (t *TL_auth_logOut) String() string {
	return fmt.Sprintf("- auth_logOut#5717da40\n")
}

// auth_resetAuthorizations#9fab0d1a
type TL_auth_resetAuthorizations struct {
	M_classID int32
}

func (t *TL_auth_resetAuthorizations) ClassID() int32 {
	return t.M_classID
}

func New_TL_auth_resetAuthorizations() *TL_auth_resetAuthorizations {
	return &TL_auth_resetAuthorizations{
		M_classID: TL_CLASS_auth_resetAuthorizations,
	}
}

func (t *TL_auth_resetAuthorizations) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_resetAuthorizations))

	return ec.GetBuffer()
}

func (t *TL_auth_resetAuthorizations) Decode(b []byte) error {
	return nil
}

func (t *TL_auth_resetAuthorizations) String() string {
	return fmt.Sprintf("- auth_resetAuthorizations#9fab0d1a\n")
}

// auth_sendInvites#771c1d97
type TL_auth_sendInvites struct {
	M_classID       int32
	M_phone_numbers []string
	M_message       string
}

func (t *TL_auth_sendInvites) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_sendInvites) Set_phone_numbers(M_phone_numbers []string) {
	t.M_phone_numbers = M_phone_numbers
}

func (t *TL_auth_sendInvites) Get_phone_numbers() []string {
	return t.M_phone_numbers
}

func (t *TL_auth_sendInvites) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_auth_sendInvites) Get_message() string {
	return t.M_message
}

func New_TL_auth_sendInvites() *TL_auth_sendInvites {
	return &TL_auth_sendInvites{
		M_classID: TL_CLASS_auth_sendInvites,
	}
}

func (t *TL_auth_sendInvites) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_sendInvites))
	ec.VectorString(t.Get_phone_numbers())
	ec.String(t.Get_message())

	return ec.GetBuffer()
}

func (t *TL_auth_sendInvites) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_numbers = dc.VectorString()
	t.M_message = dc.String()

	return dc.err
}

func (t *TL_auth_sendInvites) String() string {
	return fmt.Sprintf("- auth_sendInvites#771c1d97\n-- phone_numbers : %v\n-- message : %v\n", t.M_phone_numbers, t.M_message)
}

// auth_exportAuthorization#e5bfffcd
type TL_auth_exportAuthorization struct {
	M_classID int32
	M_dc_id   int32
}

func (t *TL_auth_exportAuthorization) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_exportAuthorization) Set_dc_id(M_dc_id int32) {
	t.M_dc_id = M_dc_id
}

func (t *TL_auth_exportAuthorization) Get_dc_id() int32 {
	return t.M_dc_id
}

func New_TL_auth_exportAuthorization() *TL_auth_exportAuthorization {
	return &TL_auth_exportAuthorization{
		M_classID: TL_CLASS_auth_exportAuthorization,
	}
}

func (t *TL_auth_exportAuthorization) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_exportAuthorization))
	ec.Int(t.Get_dc_id())

	return ec.GetBuffer()
}

func (t *TL_auth_exportAuthorization) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_dc_id = dc.Int()

	return dc.err
}

func (t *TL_auth_exportAuthorization) String() string {
	return fmt.Sprintf("- auth_exportAuthorization#e5bfffcd\n-- dc_id : %v\n", t.M_dc_id)
}

// auth_importAuthorization#e3ef9613
type TL_auth_importAuthorization struct {
	M_classID int32
	M_id      int32
	M_bytes   TLObject
}

func (t *TL_auth_importAuthorization) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_importAuthorization) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_auth_importAuthorization) Get_id() int32 {
	return t.M_id
}

func (t *TL_auth_importAuthorization) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_auth_importAuthorization) Get_bytes() TLObject {
	return t.M_bytes
}

func New_TL_auth_importAuthorization() *TL_auth_importAuthorization {
	return &TL_auth_importAuthorization{
		M_classID: TL_CLASS_auth_importAuthorization,
	}
}

func (t *TL_auth_importAuthorization) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_importAuthorization))
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_auth_importAuthorization) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_bytes = dc.TLObject()

	return dc.err
}

func (t *TL_auth_importAuthorization) String() string {
	return fmt.Sprintf("- auth_importAuthorization#e3ef9613\n-- id : %v\n-- bytes : %v\n", t.M_id, t.M_bytes)
}

// auth_bindTempAuthKey#cdd42a05
type TL_auth_bindTempAuthKey struct {
	M_classID           int32
	M_perm_auth_key_id  int64
	M_nonce             int64
	M_expires_at        int32
	M_encrypted_message TLObject
}

func (t *TL_auth_bindTempAuthKey) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_bindTempAuthKey) Set_perm_auth_key_id(M_perm_auth_key_id int64) {
	t.M_perm_auth_key_id = M_perm_auth_key_id
}

func (t *TL_auth_bindTempAuthKey) Get_perm_auth_key_id() int64 {
	return t.M_perm_auth_key_id
}

func (t *TL_auth_bindTempAuthKey) Set_nonce(M_nonce int64) {
	t.M_nonce = M_nonce
}

func (t *TL_auth_bindTempAuthKey) Get_nonce() int64 {
	return t.M_nonce
}

func (t *TL_auth_bindTempAuthKey) Set_expires_at(M_expires_at int32) {
	t.M_expires_at = M_expires_at
}

func (t *TL_auth_bindTempAuthKey) Get_expires_at() int32 {
	return t.M_expires_at
}

func (t *TL_auth_bindTempAuthKey) Set_encrypted_message(M_encrypted_message TLObject) {
	t.M_encrypted_message = M_encrypted_message
}

func (t *TL_auth_bindTempAuthKey) Get_encrypted_message() TLObject {
	return t.M_encrypted_message
}

func New_TL_auth_bindTempAuthKey() *TL_auth_bindTempAuthKey {
	return &TL_auth_bindTempAuthKey{
		M_classID: TL_CLASS_auth_bindTempAuthKey,
	}
}

func (t *TL_auth_bindTempAuthKey) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_bindTempAuthKey))
	ec.Long(t.Get_perm_auth_key_id())
	ec.Long(t.Get_nonce())
	ec.Int(t.Get_expires_at())
	ec.TLObject(t.Get_encrypted_message())

	return ec.GetBuffer()
}

func (t *TL_auth_bindTempAuthKey) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_perm_auth_key_id = dc.Long()
	t.M_nonce = dc.Long()
	t.M_expires_at = dc.Int()
	t.M_encrypted_message = dc.TLObject()

	return dc.err
}

func (t *TL_auth_bindTempAuthKey) String() string {
	return fmt.Sprintf("- auth_bindTempAuthKey#cdd42a05\n-- perm_auth_key_id : %v\n-- nonce : %v\n-- expires_at : %v\n-- encrypted_message : %v\n", t.M_perm_auth_key_id, t.M_nonce, t.M_expires_at, t.M_encrypted_message)
}

// auth_importBotAuthorization#67a3ff2c
type TL_auth_importBotAuthorization struct {
	M_classID        int32
	M_flags          int32
	M_api_id         int32
	M_api_hash       string
	M_bot_auth_token string
}

func (t *TL_auth_importBotAuthorization) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_importBotAuthorization) Set_flags(M_flags int32) {
	t.M_flags = M_flags
}

func (t *TL_auth_importBotAuthorization) Get_flags() int32 {
	return t.M_flags
}

func (t *TL_auth_importBotAuthorization) Set_api_id(M_api_id int32) {
	t.M_api_id = M_api_id
}

func (t *TL_auth_importBotAuthorization) Get_api_id() int32 {
	return t.M_api_id
}

func (t *TL_auth_importBotAuthorization) Set_api_hash(M_api_hash string) {
	t.M_api_hash = M_api_hash
}

func (t *TL_auth_importBotAuthorization) Get_api_hash() string {
	return t.M_api_hash
}

func (t *TL_auth_importBotAuthorization) Set_bot_auth_token(M_bot_auth_token string) {
	t.M_bot_auth_token = M_bot_auth_token
}

func (t *TL_auth_importBotAuthorization) Get_bot_auth_token() string {
	return t.M_bot_auth_token
}

func New_TL_auth_importBotAuthorization() *TL_auth_importBotAuthorization {
	return &TL_auth_importBotAuthorization{
		M_classID: TL_CLASS_auth_importBotAuthorization,
	}
}

func (t *TL_auth_importBotAuthorization) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_importBotAuthorization))
	ec.Int(t.Get_flags())
	ec.Int(t.Get_api_id())
	ec.String(t.Get_api_hash())
	ec.String(t.Get_bot_auth_token())

	return ec.GetBuffer()
}

func (t *TL_auth_importBotAuthorization) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_flags = dc.Int()
	t.M_api_id = dc.Int()
	t.M_api_hash = dc.String()
	t.M_bot_auth_token = dc.String()

	return dc.err
}

func (t *TL_auth_importBotAuthorization) String() string {
	return fmt.Sprintf("- auth_importBotAuthorization#67a3ff2c\n-- flags : %v\n-- api_id : %v\n-- api_hash : %v\n-- bot_auth_token : %v\n", t.M_flags, t.M_api_id, t.M_api_hash, t.M_bot_auth_token)
}

// auth_checkPassword#a63011e
type TL_auth_checkPassword struct {
	M_classID       int32
	M_password_hash TLObject
}

func (t *TL_auth_checkPassword) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_checkPassword) Set_password_hash(M_password_hash TLObject) {
	t.M_password_hash = M_password_hash
}

func (t *TL_auth_checkPassword) Get_password_hash() TLObject {
	return t.M_password_hash
}

func New_TL_auth_checkPassword() *TL_auth_checkPassword {
	return &TL_auth_checkPassword{
		M_classID: TL_CLASS_auth_checkPassword,
	}
}

func (t *TL_auth_checkPassword) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_checkPassword))
	ec.TLObject(t.Get_password_hash())

	return ec.GetBuffer()
}

func (t *TL_auth_checkPassword) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_password_hash = dc.TLObject()

	return dc.err
}

func (t *TL_auth_checkPassword) String() string {
	return fmt.Sprintf("- auth_checkPassword#a63011e\n-- password_hash : %v\n", t.M_password_hash)
}

// auth_requestPasswordRecovery#d897bc66
type TL_auth_requestPasswordRecovery struct {
	M_classID int32
}

func (t *TL_auth_requestPasswordRecovery) ClassID() int32 {
	return t.M_classID
}

func New_TL_auth_requestPasswordRecovery() *TL_auth_requestPasswordRecovery {
	return &TL_auth_requestPasswordRecovery{
		M_classID: TL_CLASS_auth_requestPasswordRecovery,
	}
}

func (t *TL_auth_requestPasswordRecovery) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_requestPasswordRecovery))

	return ec.GetBuffer()
}

func (t *TL_auth_requestPasswordRecovery) Decode(b []byte) error {
	return nil
}

func (t *TL_auth_requestPasswordRecovery) String() string {
	return fmt.Sprintf("- auth_requestPasswordRecovery#d897bc66\n")
}

// auth_recoverPassword#4ea56e92
type TL_auth_recoverPassword struct {
	M_classID int32
	M_code    string
}

func (t *TL_auth_recoverPassword) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_recoverPassword) Set_code(M_code string) {
	t.M_code = M_code
}

func (t *TL_auth_recoverPassword) Get_code() string {
	return t.M_code
}

func New_TL_auth_recoverPassword() *TL_auth_recoverPassword {
	return &TL_auth_recoverPassword{
		M_classID: TL_CLASS_auth_recoverPassword,
	}
}

func (t *TL_auth_recoverPassword) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_recoverPassword))
	ec.String(t.Get_code())

	return ec.GetBuffer()
}

func (t *TL_auth_recoverPassword) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_code = dc.String()

	return dc.err
}

func (t *TL_auth_recoverPassword) String() string {
	return fmt.Sprintf("- auth_recoverPassword#4ea56e92\n-- code : %v\n", t.M_code)
}

// auth_resendCode#3ef1a9bf
type TL_auth_resendCode struct {
	M_classID         int32
	M_phone_number    string
	M_phone_code_hash string
}

func (t *TL_auth_resendCode) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_resendCode) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_auth_resendCode) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_auth_resendCode) Set_phone_code_hash(M_phone_code_hash string) {
	t.M_phone_code_hash = M_phone_code_hash
}

func (t *TL_auth_resendCode) Get_phone_code_hash() string {
	return t.M_phone_code_hash
}

func New_TL_auth_resendCode() *TL_auth_resendCode {
	return &TL_auth_resendCode{
		M_classID: TL_CLASS_auth_resendCode,
	}
}

func (t *TL_auth_resendCode) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_resendCode))
	ec.String(t.Get_phone_number())
	ec.String(t.Get_phone_code_hash())

	return ec.GetBuffer()
}

func (t *TL_auth_resendCode) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_phone_code_hash = dc.String()

	return dc.err
}

func (t *TL_auth_resendCode) String() string {
	return fmt.Sprintf("- auth_resendCode#3ef1a9bf\n-- phone_number : %v\n-- phone_code_hash : %v\n", t.M_phone_number, t.M_phone_code_hash)
}

// auth_cancelCode#1f040578
type TL_auth_cancelCode struct {
	M_classID         int32
	M_phone_number    string
	M_phone_code_hash string
}

func (t *TL_auth_cancelCode) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_cancelCode) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_auth_cancelCode) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_auth_cancelCode) Set_phone_code_hash(M_phone_code_hash string) {
	t.M_phone_code_hash = M_phone_code_hash
}

func (t *TL_auth_cancelCode) Get_phone_code_hash() string {
	return t.M_phone_code_hash
}

func New_TL_auth_cancelCode() *TL_auth_cancelCode {
	return &TL_auth_cancelCode{
		M_classID: TL_CLASS_auth_cancelCode,
	}
}

func (t *TL_auth_cancelCode) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_cancelCode))
	ec.String(t.Get_phone_number())
	ec.String(t.Get_phone_code_hash())

	return ec.GetBuffer()
}

func (t *TL_auth_cancelCode) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_phone_code_hash = dc.String()

	return dc.err
}

func (t *TL_auth_cancelCode) String() string {
	return fmt.Sprintf("- auth_cancelCode#1f040578\n-- phone_number : %v\n-- phone_code_hash : %v\n", t.M_phone_number, t.M_phone_code_hash)
}

// auth_dropTempAuthKeys#8e48a188
type TL_auth_dropTempAuthKeys struct {
	M_classID          int32
	M_except_auth_keys []int64
}

func (t *TL_auth_dropTempAuthKeys) ClassID() int32 {
	return t.M_classID
}

func (t *TL_auth_dropTempAuthKeys) Set_except_auth_keys(M_except_auth_keys []int64) {
	t.M_except_auth_keys = M_except_auth_keys
}

func (t *TL_auth_dropTempAuthKeys) Get_except_auth_keys() []int64 {
	return t.M_except_auth_keys
}

func New_TL_auth_dropTempAuthKeys() *TL_auth_dropTempAuthKeys {
	return &TL_auth_dropTempAuthKeys{
		M_classID: TL_CLASS_auth_dropTempAuthKeys,
	}
}

func (t *TL_auth_dropTempAuthKeys) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_auth_dropTempAuthKeys))
	ec.VectorLong(t.Get_except_auth_keys())

	return ec.GetBuffer()
}

func (t *TL_auth_dropTempAuthKeys) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_except_auth_keys = dc.VectorLong()

	return dc.err
}

func (t *TL_auth_dropTempAuthKeys) String() string {
	return fmt.Sprintf("- auth_dropTempAuthKeys#8e48a188\n-- except_auth_keys : %v\n", t.M_except_auth_keys)
}

// account_registerDevice#637ea878
type TL_account_registerDevice struct {
	M_classID    int32
	M_token_type int32
	M_token      string
}

func (t *TL_account_registerDevice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_registerDevice) Set_token_type(M_token_type int32) {
	t.M_token_type = M_token_type
}

func (t *TL_account_registerDevice) Get_token_type() int32 {
	return t.M_token_type
}

func (t *TL_account_registerDevice) Set_token(M_token string) {
	t.M_token = M_token
}

func (t *TL_account_registerDevice) Get_token() string {
	return t.M_token
}

func New_TL_account_registerDevice() *TL_account_registerDevice {
	return &TL_account_registerDevice{
		M_classID: TL_CLASS_account_registerDevice,
	}
}

func (t *TL_account_registerDevice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_registerDevice))
	ec.Int(t.Get_token_type())
	ec.String(t.Get_token())

	return ec.GetBuffer()
}

func (t *TL_account_registerDevice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_token_type = dc.Int()
	t.M_token = dc.String()

	return dc.err
}

func (t *TL_account_registerDevice) String() string {
	return fmt.Sprintf("- account_registerDevice#637ea878\n-- token_type : %v\n-- token : %v\n", t.M_token_type, t.M_token)
}

// account_unregisterDevice#65c55b40
type TL_account_unregisterDevice struct {
	M_classID    int32
	M_token_type int32
	M_token      string
}

func (t *TL_account_unregisterDevice) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_unregisterDevice) Set_token_type(M_token_type int32) {
	t.M_token_type = M_token_type
}

func (t *TL_account_unregisterDevice) Get_token_type() int32 {
	return t.M_token_type
}

func (t *TL_account_unregisterDevice) Set_token(M_token string) {
	t.M_token = M_token
}

func (t *TL_account_unregisterDevice) Get_token() string {
	return t.M_token
}

func New_TL_account_unregisterDevice() *TL_account_unregisterDevice {
	return &TL_account_unregisterDevice{
		M_classID: TL_CLASS_account_unregisterDevice,
	}
}

func (t *TL_account_unregisterDevice) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_unregisterDevice))
	ec.Int(t.Get_token_type())
	ec.String(t.Get_token())

	return ec.GetBuffer()
}

func (t *TL_account_unregisterDevice) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_token_type = dc.Int()
	t.M_token = dc.String()

	return dc.err
}

func (t *TL_account_unregisterDevice) String() string {
	return fmt.Sprintf("- account_unregisterDevice#65c55b40\n-- token_type : %v\n-- token : %v\n", t.M_token_type, t.M_token)
}

// account_updateNotifySettings#84be5b93
type TL_account_updateNotifySettings struct {
	M_classID  int32
	M_peer     TLObject
	M_settings TLObject
}

func (t *TL_account_updateNotifySettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_updateNotifySettings) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_account_updateNotifySettings) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_account_updateNotifySettings) Set_settings(M_settings TLObject) {
	t.M_settings = M_settings
}

func (t *TL_account_updateNotifySettings) Get_settings() TLObject {
	return t.M_settings
}

func New_TL_account_updateNotifySettings() *TL_account_updateNotifySettings {
	return &TL_account_updateNotifySettings{
		M_classID: TL_CLASS_account_updateNotifySettings,
	}
}

func (t *TL_account_updateNotifySettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_updateNotifySettings))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_settings())

	return ec.GetBuffer()
}

func (t *TL_account_updateNotifySettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_settings = dc.TLObject()

	return dc.err
}

func (t *TL_account_updateNotifySettings) String() string {
	return fmt.Sprintf("- account_updateNotifySettings#84be5b93\n-- peer : %v\n-- settings : %v\n", t.M_peer, t.M_settings)
}

// account_getNotifySettings#12b3ad31
type TL_account_getNotifySettings struct {
	M_classID int32
	M_peer    TLObject
}

func (t *TL_account_getNotifySettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_getNotifySettings) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_account_getNotifySettings) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_account_getNotifySettings() *TL_account_getNotifySettings {
	return &TL_account_getNotifySettings{
		M_classID: TL_CLASS_account_getNotifySettings,
	}
}

func (t *TL_account_getNotifySettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_getNotifySettings))
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_account_getNotifySettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_account_getNotifySettings) String() string {
	return fmt.Sprintf("- account_getNotifySettings#12b3ad31\n-- peer : %v\n", t.M_peer)
}

// account_resetNotifySettings#db7e1747
type TL_account_resetNotifySettings struct {
	M_classID int32
}

func (t *TL_account_resetNotifySettings) ClassID() int32 {
	return t.M_classID
}

func New_TL_account_resetNotifySettings() *TL_account_resetNotifySettings {
	return &TL_account_resetNotifySettings{
		M_classID: TL_CLASS_account_resetNotifySettings,
	}
}

func (t *TL_account_resetNotifySettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_resetNotifySettings))

	return ec.GetBuffer()
}

func (t *TL_account_resetNotifySettings) Decode(b []byte) error {
	return nil
}

func (t *TL_account_resetNotifySettings) String() string {
	return fmt.Sprintf("- account_resetNotifySettings#db7e1747\n")
}

// account_updateProfile#78515775
type TL_account_updateProfile struct {
	M_classID    int32
	M_flags      TLObject
	M_first_name TLObject
	M_last_name  TLObject
	M_about      TLObject
}

func (t *TL_account_updateProfile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_updateProfile) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_account_updateProfile) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_account_updateProfile) Set_first_name(M_first_name TLObject) {
	t.M_first_name = M_first_name
}

func (t *TL_account_updateProfile) Get_first_name() TLObject {
	return t.M_first_name
}

func (t *TL_account_updateProfile) Set_last_name(M_last_name TLObject) {
	t.M_last_name = M_last_name
}

func (t *TL_account_updateProfile) Get_last_name() TLObject {
	return t.M_last_name
}

func (t *TL_account_updateProfile) Set_about(M_about TLObject) {
	t.M_about = M_about
}

func (t *TL_account_updateProfile) Get_about() TLObject {
	return t.M_about
}

func New_TL_account_updateProfile() *TL_account_updateProfile {
	return &TL_account_updateProfile{
		M_classID: TL_CLASS_account_updateProfile,
	}
}

func (t *TL_account_updateProfile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_updateProfile))
	ec.TLObject(t.Get_first_name())
	ec.TLObject(t.Get_last_name())
	ec.TLObject(t.Get_about())

	return ec.GetBuffer()
}

func (t *TL_account_updateProfile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_first_name = dc.TLObject()
	t.M_last_name = dc.TLObject()
	t.M_about = dc.TLObject()

	return dc.err
}

func (t *TL_account_updateProfile) String() string {
	return fmt.Sprintf("- account_updateProfile#78515775\n-- flags : %v\n-- first_name : %v\n-- last_name : %v\n-- about : %v\n", t.M_flags, t.M_first_name, t.M_last_name, t.M_about)
}

// account_updateStatus#6628562c
type TL_account_updateStatus struct {
	M_classID int32
	M_offline TLObject
}

func (t *TL_account_updateStatus) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_updateStatus) Set_offline(M_offline TLObject) {
	t.M_offline = M_offline
}

func (t *TL_account_updateStatus) Get_offline() TLObject {
	return t.M_offline
}

func New_TL_account_updateStatus() *TL_account_updateStatus {
	return &TL_account_updateStatus{
		M_classID: TL_CLASS_account_updateStatus,
	}
}

func (t *TL_account_updateStatus) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_updateStatus))
	ec.TLObject(t.Get_offline())

	return ec.GetBuffer()
}

func (t *TL_account_updateStatus) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offline = dc.TLObject()

	return dc.err
}

func (t *TL_account_updateStatus) String() string {
	return fmt.Sprintf("- account_updateStatus#6628562c\n-- offline : %v\n", t.M_offline)
}

// account_getWallPapers#c04cfac2
type TL_account_getWallPapers struct {
	M_classID int32
}

func (t *TL_account_getWallPapers) ClassID() int32 {
	return t.M_classID
}

func New_TL_account_getWallPapers() *TL_account_getWallPapers {
	return &TL_account_getWallPapers{
		M_classID: TL_CLASS_account_getWallPapers,
	}
}

func (t *TL_account_getWallPapers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_getWallPapers))

	return ec.GetBuffer()
}

func (t *TL_account_getWallPapers) Decode(b []byte) error {
	return nil
}

func (t *TL_account_getWallPapers) String() string {
	return fmt.Sprintf("- account_getWallPapers#c04cfac2\n")
}

// account_reportPeer#ae189d5f
type TL_account_reportPeer struct {
	M_classID int32
	M_peer    TLObject
	M_reason  TLObject
}

func (t *TL_account_reportPeer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_reportPeer) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_account_reportPeer) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_account_reportPeer) Set_reason(M_reason TLObject) {
	t.M_reason = M_reason
}

func (t *TL_account_reportPeer) Get_reason() TLObject {
	return t.M_reason
}

func New_TL_account_reportPeer() *TL_account_reportPeer {
	return &TL_account_reportPeer{
		M_classID: TL_CLASS_account_reportPeer,
	}
}

func (t *TL_account_reportPeer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_reportPeer))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_reason())

	return ec.GetBuffer()
}

func (t *TL_account_reportPeer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_reason = dc.TLObject()

	return dc.err
}

func (t *TL_account_reportPeer) String() string {
	return fmt.Sprintf("- account_reportPeer#ae189d5f\n-- peer : %v\n-- reason : %v\n", t.M_peer, t.M_reason)
}

// account_checkUsername#2714d86c
type TL_account_checkUsername struct {
	M_classID  int32
	M_username string
}

func (t *TL_account_checkUsername) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_checkUsername) Set_username(M_username string) {
	t.M_username = M_username
}

func (t *TL_account_checkUsername) Get_username() string {
	return t.M_username
}

func New_TL_account_checkUsername() *TL_account_checkUsername {
	return &TL_account_checkUsername{
		M_classID: TL_CLASS_account_checkUsername,
	}
}

func (t *TL_account_checkUsername) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_checkUsername))
	ec.String(t.Get_username())

	return ec.GetBuffer()
}

func (t *TL_account_checkUsername) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_username = dc.String()

	return dc.err
}

func (t *TL_account_checkUsername) String() string {
	return fmt.Sprintf("- account_checkUsername#2714d86c\n-- username : %v\n", t.M_username)
}

// account_updateUsername#3e0bdd7c
type TL_account_updateUsername struct {
	M_classID  int32
	M_username string
}

func (t *TL_account_updateUsername) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_updateUsername) Set_username(M_username string) {
	t.M_username = M_username
}

func (t *TL_account_updateUsername) Get_username() string {
	return t.M_username
}

func New_TL_account_updateUsername() *TL_account_updateUsername {
	return &TL_account_updateUsername{
		M_classID: TL_CLASS_account_updateUsername,
	}
}

func (t *TL_account_updateUsername) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_updateUsername))
	ec.String(t.Get_username())

	return ec.GetBuffer()
}

func (t *TL_account_updateUsername) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_username = dc.String()

	return dc.err
}

func (t *TL_account_updateUsername) String() string {
	return fmt.Sprintf("- account_updateUsername#3e0bdd7c\n-- username : %v\n", t.M_username)
}

// account_getPrivacy#dadbc950
type TL_account_getPrivacy struct {
	M_classID int32
	M_key     TLObject
}

func (t *TL_account_getPrivacy) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_getPrivacy) Set_key(M_key TLObject) {
	t.M_key = M_key
}

func (t *TL_account_getPrivacy) Get_key() TLObject {
	return t.M_key
}

func New_TL_account_getPrivacy() *TL_account_getPrivacy {
	return &TL_account_getPrivacy{
		M_classID: TL_CLASS_account_getPrivacy,
	}
}

func (t *TL_account_getPrivacy) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_getPrivacy))
	ec.TLObject(t.Get_key())

	return ec.GetBuffer()
}

func (t *TL_account_getPrivacy) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_key = dc.TLObject()

	return dc.err
}

func (t *TL_account_getPrivacy) String() string {
	return fmt.Sprintf("- account_getPrivacy#dadbc950\n-- key : %v\n", t.M_key)
}

// account_setPrivacy#c9f81ce8
type TL_account_setPrivacy struct {
	M_classID int32
	M_key     TLObject
	M_rules   []TLObject
}

func (t *TL_account_setPrivacy) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_setPrivacy) Set_key(M_key TLObject) {
	t.M_key = M_key
}

func (t *TL_account_setPrivacy) Get_key() TLObject {
	return t.M_key
}

func (t *TL_account_setPrivacy) Set_rules(M_rules []TLObject) {
	t.M_rules = M_rules
}

func (t *TL_account_setPrivacy) Get_rules() []TLObject {
	return t.M_rules
}

func New_TL_account_setPrivacy() *TL_account_setPrivacy {
	return &TL_account_setPrivacy{
		M_classID: TL_CLASS_account_setPrivacy,
	}
}

func (t *TL_account_setPrivacy) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_setPrivacy))
	ec.TLObject(t.Get_key())
	ec.Vector(t.Get_rules())

	return ec.GetBuffer()
}

func (t *TL_account_setPrivacy) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_key = dc.TLObject()
	t.M_rules = dc.Vector()

	return dc.err
}

func (t *TL_account_setPrivacy) String() string {
	return fmt.Sprintf("- account_setPrivacy#c9f81ce8\n-- key : %v\n-- rules : %v\n", t.M_key, t.M_rules)
}

// account_deleteAccount#418d4e0b
type TL_account_deleteAccount struct {
	M_classID int32
	M_reason  string
}

func (t *TL_account_deleteAccount) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_deleteAccount) Set_reason(M_reason string) {
	t.M_reason = M_reason
}

func (t *TL_account_deleteAccount) Get_reason() string {
	return t.M_reason
}

func New_TL_account_deleteAccount() *TL_account_deleteAccount {
	return &TL_account_deleteAccount{
		M_classID: TL_CLASS_account_deleteAccount,
	}
}

func (t *TL_account_deleteAccount) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_deleteAccount))
	ec.String(t.Get_reason())

	return ec.GetBuffer()
}

func (t *TL_account_deleteAccount) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_reason = dc.String()

	return dc.err
}

func (t *TL_account_deleteAccount) String() string {
	return fmt.Sprintf("- account_deleteAccount#418d4e0b\n-- reason : %v\n", t.M_reason)
}

// account_getAccountTTL#8fc711d
type TL_account_getAccountTTL struct {
	M_classID int32
}

func (t *TL_account_getAccountTTL) ClassID() int32 {
	return t.M_classID
}

func New_TL_account_getAccountTTL() *TL_account_getAccountTTL {
	return &TL_account_getAccountTTL{
		M_classID: TL_CLASS_account_getAccountTTL,
	}
}

func (t *TL_account_getAccountTTL) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_getAccountTTL))

	return ec.GetBuffer()
}

func (t *TL_account_getAccountTTL) Decode(b []byte) error {
	return nil
}

func (t *TL_account_getAccountTTL) String() string {
	return fmt.Sprintf("- account_getAccountTTL#8fc711d\n")
}

// account_setAccountTTL#2442485e
type TL_account_setAccountTTL struct {
	M_classID int32
	M_ttl     TLObject
}

func (t *TL_account_setAccountTTL) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_setAccountTTL) Set_ttl(M_ttl TLObject) {
	t.M_ttl = M_ttl
}

func (t *TL_account_setAccountTTL) Get_ttl() TLObject {
	return t.M_ttl
}

func New_TL_account_setAccountTTL() *TL_account_setAccountTTL {
	return &TL_account_setAccountTTL{
		M_classID: TL_CLASS_account_setAccountTTL,
	}
}

func (t *TL_account_setAccountTTL) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_setAccountTTL))
	ec.TLObject(t.Get_ttl())

	return ec.GetBuffer()
}

func (t *TL_account_setAccountTTL) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_ttl = dc.TLObject()

	return dc.err
}

func (t *TL_account_setAccountTTL) String() string {
	return fmt.Sprintf("- account_setAccountTTL#2442485e\n-- ttl : %v\n", t.M_ttl)
}

// account_sendChangePhoneCode#8e57deb
type TL_account_sendChangePhoneCode struct {
	M_classID         int32
	M_flags           TLObject
	M_allow_flashcall TLObject
	M_phone_number    string
	M_current_number  TLObject
}

func (t *TL_account_sendChangePhoneCode) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_sendChangePhoneCode) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_account_sendChangePhoneCode) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_account_sendChangePhoneCode) Set_allow_flashcall(M_allow_flashcall TLObject) {
	t.M_allow_flashcall = M_allow_flashcall
}

func (t *TL_account_sendChangePhoneCode) Get_allow_flashcall() TLObject {
	return t.M_allow_flashcall
}

func (t *TL_account_sendChangePhoneCode) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_account_sendChangePhoneCode) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_account_sendChangePhoneCode) Set_current_number(M_current_number TLObject) {
	t.M_current_number = M_current_number
}

func (t *TL_account_sendChangePhoneCode) Get_current_number() TLObject {
	return t.M_current_number
}

func New_TL_account_sendChangePhoneCode() *TL_account_sendChangePhoneCode {
	return &TL_account_sendChangePhoneCode{
		M_classID: TL_CLASS_account_sendChangePhoneCode,
	}
}

func (t *TL_account_sendChangePhoneCode) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_sendChangePhoneCode))
	ec.TLObject(t.Get_allow_flashcall())
	ec.String(t.Get_phone_number())
	ec.TLObject(t.Get_current_number())

	return ec.GetBuffer()
}

func (t *TL_account_sendChangePhoneCode) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_allow_flashcall = dc.TLObject()
	t.M_phone_number = dc.String()
	t.M_current_number = dc.TLObject()

	return dc.err
}

func (t *TL_account_sendChangePhoneCode) String() string {
	return fmt.Sprintf("- account_sendChangePhoneCode#8e57deb\n-- flags : %v\n-- allow_flashcall : %v\n-- phone_number : %v\n-- current_number : %v\n", t.M_flags, t.M_allow_flashcall, t.M_phone_number, t.M_current_number)
}

// account_changePhone#70c32edb
type TL_account_changePhone struct {
	M_classID         int32
	M_phone_number    string
	M_phone_code_hash string
	M_phone_code      string
}

func (t *TL_account_changePhone) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_changePhone) Set_phone_number(M_phone_number string) {
	t.M_phone_number = M_phone_number
}

func (t *TL_account_changePhone) Get_phone_number() string {
	return t.M_phone_number
}

func (t *TL_account_changePhone) Set_phone_code_hash(M_phone_code_hash string) {
	t.M_phone_code_hash = M_phone_code_hash
}

func (t *TL_account_changePhone) Get_phone_code_hash() string {
	return t.M_phone_code_hash
}

func (t *TL_account_changePhone) Set_phone_code(M_phone_code string) {
	t.M_phone_code = M_phone_code
}

func (t *TL_account_changePhone) Get_phone_code() string {
	return t.M_phone_code
}

func New_TL_account_changePhone() *TL_account_changePhone {
	return &TL_account_changePhone{
		M_classID: TL_CLASS_account_changePhone,
	}
}

func (t *TL_account_changePhone) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_changePhone))
	ec.String(t.Get_phone_number())
	ec.String(t.Get_phone_code_hash())
	ec.String(t.Get_phone_code())

	return ec.GetBuffer()
}

func (t *TL_account_changePhone) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_number = dc.String()
	t.M_phone_code_hash = dc.String()
	t.M_phone_code = dc.String()

	return dc.err
}

func (t *TL_account_changePhone) String() string {
	return fmt.Sprintf("- account_changePhone#70c32edb\n-- phone_number : %v\n-- phone_code_hash : %v\n-- phone_code : %v\n", t.M_phone_number, t.M_phone_code_hash, t.M_phone_code)
}

// account_updateDeviceLocked#38df3532
type TL_account_updateDeviceLocked struct {
	M_classID int32
	M_period  int32
}

func (t *TL_account_updateDeviceLocked) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_updateDeviceLocked) Set_period(M_period int32) {
	t.M_period = M_period
}

func (t *TL_account_updateDeviceLocked) Get_period() int32 {
	return t.M_period
}

func New_TL_account_updateDeviceLocked() *TL_account_updateDeviceLocked {
	return &TL_account_updateDeviceLocked{
		M_classID: TL_CLASS_account_updateDeviceLocked,
	}
}

func (t *TL_account_updateDeviceLocked) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_updateDeviceLocked))
	ec.Int(t.Get_period())

	return ec.GetBuffer()
}

func (t *TL_account_updateDeviceLocked) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_period = dc.Int()

	return dc.err
}

func (t *TL_account_updateDeviceLocked) String() string {
	return fmt.Sprintf("- account_updateDeviceLocked#38df3532\n-- period : %v\n", t.M_period)
}

// account_getAuthorizations#e320c158
type TL_account_getAuthorizations struct {
	M_classID int32
}

func (t *TL_account_getAuthorizations) ClassID() int32 {
	return t.M_classID
}

func New_TL_account_getAuthorizations() *TL_account_getAuthorizations {
	return &TL_account_getAuthorizations{
		M_classID: TL_CLASS_account_getAuthorizations,
	}
}

func (t *TL_account_getAuthorizations) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_getAuthorizations))

	return ec.GetBuffer()
}

func (t *TL_account_getAuthorizations) Decode(b []byte) error {
	return nil
}

func (t *TL_account_getAuthorizations) String() string {
	return fmt.Sprintf("- account_getAuthorizations#e320c158\n")
}

// account_resetAuthorization#df77f3bc
type TL_account_resetAuthorization struct {
	M_classID int32
	M_hash    int64
}

func (t *TL_account_resetAuthorization) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_resetAuthorization) Set_hash(M_hash int64) {
	t.M_hash = M_hash
}

func (t *TL_account_resetAuthorization) Get_hash() int64 {
	return t.M_hash
}

func New_TL_account_resetAuthorization() *TL_account_resetAuthorization {
	return &TL_account_resetAuthorization{
		M_classID: TL_CLASS_account_resetAuthorization,
	}
}

func (t *TL_account_resetAuthorization) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_resetAuthorization))
	ec.Long(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_account_resetAuthorization) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Long()

	return dc.err
}

func (t *TL_account_resetAuthorization) String() string {
	return fmt.Sprintf("- account_resetAuthorization#df77f3bc\n-- hash : %v\n", t.M_hash)
}

// account_getPassword#548a30f5
type TL_account_getPassword struct {
	M_classID int32
}

func (t *TL_account_getPassword) ClassID() int32 {
	return t.M_classID
}

func New_TL_account_getPassword() *TL_account_getPassword {
	return &TL_account_getPassword{
		M_classID: TL_CLASS_account_getPassword,
	}
}

func (t *TL_account_getPassword) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_getPassword))

	return ec.GetBuffer()
}

func (t *TL_account_getPassword) Decode(b []byte) error {
	return nil
}

func (t *TL_account_getPassword) String() string {
	return fmt.Sprintf("- account_getPassword#548a30f5\n")
}

// account_getPasswordSettings#bc8d11bb
type TL_account_getPasswordSettings struct {
	M_classID               int32
	M_current_password_hash TLObject
}

func (t *TL_account_getPasswordSettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_getPasswordSettings) Set_current_password_hash(M_current_password_hash TLObject) {
	t.M_current_password_hash = M_current_password_hash
}

func (t *TL_account_getPasswordSettings) Get_current_password_hash() TLObject {
	return t.M_current_password_hash
}

func New_TL_account_getPasswordSettings() *TL_account_getPasswordSettings {
	return &TL_account_getPasswordSettings{
		M_classID: TL_CLASS_account_getPasswordSettings,
	}
}

func (t *TL_account_getPasswordSettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_getPasswordSettings))
	ec.TLObject(t.Get_current_password_hash())

	return ec.GetBuffer()
}

func (t *TL_account_getPasswordSettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_current_password_hash = dc.TLObject()

	return dc.err
}

func (t *TL_account_getPasswordSettings) String() string {
	return fmt.Sprintf("- account_getPasswordSettings#bc8d11bb\n-- current_password_hash : %v\n", t.M_current_password_hash)
}

// account_updatePasswordSettings#fa7c4b86
type TL_account_updatePasswordSettings struct {
	M_classID               int32
	M_current_password_hash TLObject
	M_new_settings          TLObject
}

func (t *TL_account_updatePasswordSettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_updatePasswordSettings) Set_current_password_hash(M_current_password_hash TLObject) {
	t.M_current_password_hash = M_current_password_hash
}

func (t *TL_account_updatePasswordSettings) Get_current_password_hash() TLObject {
	return t.M_current_password_hash
}

func (t *TL_account_updatePasswordSettings) Set_new_settings(M_new_settings TLObject) {
	t.M_new_settings = M_new_settings
}

func (t *TL_account_updatePasswordSettings) Get_new_settings() TLObject {
	return t.M_new_settings
}

func New_TL_account_updatePasswordSettings() *TL_account_updatePasswordSettings {
	return &TL_account_updatePasswordSettings{
		M_classID: TL_CLASS_account_updatePasswordSettings,
	}
}

func (t *TL_account_updatePasswordSettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_updatePasswordSettings))
	ec.TLObject(t.Get_current_password_hash())
	ec.TLObject(t.Get_new_settings())

	return ec.GetBuffer()
}

func (t *TL_account_updatePasswordSettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_current_password_hash = dc.TLObject()
	t.M_new_settings = dc.TLObject()

	return dc.err
}

func (t *TL_account_updatePasswordSettings) String() string {
	return fmt.Sprintf("- account_updatePasswordSettings#fa7c4b86\n-- current_password_hash : %v\n-- new_settings : %v\n", t.M_current_password_hash, t.M_new_settings)
}

// account_sendConfirmPhoneCode#1516d7bd
type TL_account_sendConfirmPhoneCode struct {
	M_classID         int32
	M_flags           TLObject
	M_allow_flashcall TLObject
	M_hash            string
	M_current_number  TLObject
}

func (t *TL_account_sendConfirmPhoneCode) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_sendConfirmPhoneCode) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_account_sendConfirmPhoneCode) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_account_sendConfirmPhoneCode) Set_allow_flashcall(M_allow_flashcall TLObject) {
	t.M_allow_flashcall = M_allow_flashcall
}

func (t *TL_account_sendConfirmPhoneCode) Get_allow_flashcall() TLObject {
	return t.M_allow_flashcall
}

func (t *TL_account_sendConfirmPhoneCode) Set_hash(M_hash string) {
	t.M_hash = M_hash
}

func (t *TL_account_sendConfirmPhoneCode) Get_hash() string {
	return t.M_hash
}

func (t *TL_account_sendConfirmPhoneCode) Set_current_number(M_current_number TLObject) {
	t.M_current_number = M_current_number
}

func (t *TL_account_sendConfirmPhoneCode) Get_current_number() TLObject {
	return t.M_current_number
}

func New_TL_account_sendConfirmPhoneCode() *TL_account_sendConfirmPhoneCode {
	return &TL_account_sendConfirmPhoneCode{
		M_classID: TL_CLASS_account_sendConfirmPhoneCode,
	}
}

func (t *TL_account_sendConfirmPhoneCode) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_sendConfirmPhoneCode))
	ec.TLObject(t.Get_allow_flashcall())
	ec.String(t.Get_hash())
	ec.TLObject(t.Get_current_number())

	return ec.GetBuffer()
}

func (t *TL_account_sendConfirmPhoneCode) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_allow_flashcall = dc.TLObject()
	t.M_hash = dc.String()
	t.M_current_number = dc.TLObject()

	return dc.err
}

func (t *TL_account_sendConfirmPhoneCode) String() string {
	return fmt.Sprintf("- account_sendConfirmPhoneCode#1516d7bd\n-- flags : %v\n-- allow_flashcall : %v\n-- hash : %v\n-- current_number : %v\n", t.M_flags, t.M_allow_flashcall, t.M_hash, t.M_current_number)
}

// account_confirmPhone#5f2178c3
type TL_account_confirmPhone struct {
	M_classID         int32
	M_phone_code_hash string
	M_phone_code      string
}

func (t *TL_account_confirmPhone) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_confirmPhone) Set_phone_code_hash(M_phone_code_hash string) {
	t.M_phone_code_hash = M_phone_code_hash
}

func (t *TL_account_confirmPhone) Get_phone_code_hash() string {
	return t.M_phone_code_hash
}

func (t *TL_account_confirmPhone) Set_phone_code(M_phone_code string) {
	t.M_phone_code = M_phone_code
}

func (t *TL_account_confirmPhone) Get_phone_code() string {
	return t.M_phone_code
}

func New_TL_account_confirmPhone() *TL_account_confirmPhone {
	return &TL_account_confirmPhone{
		M_classID: TL_CLASS_account_confirmPhone,
	}
}

func (t *TL_account_confirmPhone) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_confirmPhone))
	ec.String(t.Get_phone_code_hash())
	ec.String(t.Get_phone_code())

	return ec.GetBuffer()
}

func (t *TL_account_confirmPhone) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_phone_code_hash = dc.String()
	t.M_phone_code = dc.String()

	return dc.err
}

func (t *TL_account_confirmPhone) String() string {
	return fmt.Sprintf("- account_confirmPhone#5f2178c3\n-- phone_code_hash : %v\n-- phone_code : %v\n", t.M_phone_code_hash, t.M_phone_code)
}

// account_getTmpPassword#4a82327e
type TL_account_getTmpPassword struct {
	M_classID       int32
	M_password_hash TLObject
	M_period        int32
}

func (t *TL_account_getTmpPassword) ClassID() int32 {
	return t.M_classID
}

func (t *TL_account_getTmpPassword) Set_password_hash(M_password_hash TLObject) {
	t.M_password_hash = M_password_hash
}

func (t *TL_account_getTmpPassword) Get_password_hash() TLObject {
	return t.M_password_hash
}

func (t *TL_account_getTmpPassword) Set_period(M_period int32) {
	t.M_period = M_period
}

func (t *TL_account_getTmpPassword) Get_period() int32 {
	return t.M_period
}

func New_TL_account_getTmpPassword() *TL_account_getTmpPassword {
	return &TL_account_getTmpPassword{
		M_classID: TL_CLASS_account_getTmpPassword,
	}
}

func (t *TL_account_getTmpPassword) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_account_getTmpPassword))
	ec.TLObject(t.Get_password_hash())
	ec.Int(t.Get_period())

	return ec.GetBuffer()
}

func (t *TL_account_getTmpPassword) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_password_hash = dc.TLObject()
	t.M_period = dc.Int()

	return dc.err
}

func (t *TL_account_getTmpPassword) String() string {
	return fmt.Sprintf("- account_getTmpPassword#4a82327e\n-- password_hash : %v\n-- period : %v\n", t.M_password_hash, t.M_period)
}

// users_getUsers#d91a548
type TL_users_getUsers struct {
	M_classID int32
	M_id      []TLObject
}

func (t *TL_users_getUsers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_users_getUsers) Set_id(M_id []TLObject) {
	t.M_id = M_id
}

func (t *TL_users_getUsers) Get_id() []TLObject {
	return t.M_id
}

func New_TL_users_getUsers() *TL_users_getUsers {
	return &TL_users_getUsers{
		M_classID: TL_CLASS_users_getUsers,
	}
}

func (t *TL_users_getUsers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_users_getUsers))
	ec.Vector(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_users_getUsers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Vector()

	return dc.err
}

func (t *TL_users_getUsers) String() string {
	return fmt.Sprintf("- users_getUsers#d91a548\n-- id : %v\n", t.M_id)
}

// users_getFullUser#ca30a5b1
type TL_users_getFullUser struct {
	M_classID int32
	M_id      TLObject
}

func (t *TL_users_getFullUser) ClassID() int32 {
	return t.M_classID
}

func (t *TL_users_getFullUser) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_users_getFullUser) Get_id() TLObject {
	return t.M_id
}

func New_TL_users_getFullUser() *TL_users_getFullUser {
	return &TL_users_getFullUser{
		M_classID: TL_CLASS_users_getFullUser,
	}
}

func (t *TL_users_getFullUser) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_users_getFullUser))
	ec.TLObject(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_users_getFullUser) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()

	return dc.err
}

func (t *TL_users_getFullUser) String() string {
	return fmt.Sprintf("- users_getFullUser#ca30a5b1\n-- id : %v\n", t.M_id)
}

// contacts_getStatuses#c4a353ee
type TL_contacts_getStatuses struct {
	M_classID int32
}

func (t *TL_contacts_getStatuses) ClassID() int32 {
	return t.M_classID
}

func New_TL_contacts_getStatuses() *TL_contacts_getStatuses {
	return &TL_contacts_getStatuses{
		M_classID: TL_CLASS_contacts_getStatuses,
	}
}

func (t *TL_contacts_getStatuses) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_getStatuses))

	return ec.GetBuffer()
}

func (t *TL_contacts_getStatuses) Decode(b []byte) error {
	return nil
}

func (t *TL_contacts_getStatuses) String() string {
	return fmt.Sprintf("- contacts_getStatuses#c4a353ee\n")
}

// contacts_getContacts#c023849f
type TL_contacts_getContacts struct {
	M_classID int32
	M_hash    int32
}

func (t *TL_contacts_getContacts) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_getContacts) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_contacts_getContacts) Get_hash() int32 {
	return t.M_hash
}

func New_TL_contacts_getContacts() *TL_contacts_getContacts {
	return &TL_contacts_getContacts{
		M_classID: TL_CLASS_contacts_getContacts,
	}
}

func (t *TL_contacts_getContacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_getContacts))
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_contacts_getContacts) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_contacts_getContacts) String() string {
	return fmt.Sprintf("- contacts_getContacts#c023849f\n-- hash : %v\n", t.M_hash)
}

// contacts_importContacts#2c800be5
type TL_contacts_importContacts struct {
	M_classID  int32
	M_contacts []TLObject
}

func (t *TL_contacts_importContacts) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_importContacts) Set_contacts(M_contacts []TLObject) {
	t.M_contacts = M_contacts
}

func (t *TL_contacts_importContacts) Get_contacts() []TLObject {
	return t.M_contacts
}

func New_TL_contacts_importContacts() *TL_contacts_importContacts {
	return &TL_contacts_importContacts{
		M_classID: TL_CLASS_contacts_importContacts,
	}
}

func (t *TL_contacts_importContacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_importContacts))
	ec.Vector(t.Get_contacts())

	return ec.GetBuffer()
}

func (t *TL_contacts_importContacts) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_contacts = dc.Vector()

	return dc.err
}

func (t *TL_contacts_importContacts) String() string {
	return fmt.Sprintf("- contacts_importContacts#2c800be5\n-- contacts : %v\n", t.M_contacts)
}

// contacts_deleteContact#8e953744
type TL_contacts_deleteContact struct {
	M_classID int32
	M_id      TLObject
}

func (t *TL_contacts_deleteContact) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_deleteContact) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_contacts_deleteContact) Get_id() TLObject {
	return t.M_id
}

func New_TL_contacts_deleteContact() *TL_contacts_deleteContact {
	return &TL_contacts_deleteContact{
		M_classID: TL_CLASS_contacts_deleteContact,
	}
}

func (t *TL_contacts_deleteContact) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_deleteContact))
	ec.TLObject(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_contacts_deleteContact) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()

	return dc.err
}

func (t *TL_contacts_deleteContact) String() string {
	return fmt.Sprintf("- contacts_deleteContact#8e953744\n-- id : %v\n", t.M_id)
}

// contacts_deleteContacts#59ab389e
type TL_contacts_deleteContacts struct {
	M_classID int32
	M_id      []TLObject
}

func (t *TL_contacts_deleteContacts) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_deleteContacts) Set_id(M_id []TLObject) {
	t.M_id = M_id
}

func (t *TL_contacts_deleteContacts) Get_id() []TLObject {
	return t.M_id
}

func New_TL_contacts_deleteContacts() *TL_contacts_deleteContacts {
	return &TL_contacts_deleteContacts{
		M_classID: TL_CLASS_contacts_deleteContacts,
	}
}

func (t *TL_contacts_deleteContacts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_deleteContacts))
	ec.Vector(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_contacts_deleteContacts) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Vector()

	return dc.err
}

func (t *TL_contacts_deleteContacts) String() string {
	return fmt.Sprintf("- contacts_deleteContacts#59ab389e\n-- id : %v\n", t.M_id)
}

// contacts_block#332b49fc
type TL_contacts_block struct {
	M_classID int32
	M_id      TLObject
}

func (t *TL_contacts_block) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_block) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_contacts_block) Get_id() TLObject {
	return t.M_id
}

func New_TL_contacts_block() *TL_contacts_block {
	return &TL_contacts_block{
		M_classID: TL_CLASS_contacts_block,
	}
}

func (t *TL_contacts_block) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_block))
	ec.TLObject(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_contacts_block) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()

	return dc.err
}

func (t *TL_contacts_block) String() string {
	return fmt.Sprintf("- contacts_block#332b49fc\n-- id : %v\n", t.M_id)
}

// contacts_unblock#e54100bd
type TL_contacts_unblock struct {
	M_classID int32
	M_id      TLObject
}

func (t *TL_contacts_unblock) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_unblock) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_contacts_unblock) Get_id() TLObject {
	return t.M_id
}

func New_TL_contacts_unblock() *TL_contacts_unblock {
	return &TL_contacts_unblock{
		M_classID: TL_CLASS_contacts_unblock,
	}
}

func (t *TL_contacts_unblock) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_unblock))
	ec.TLObject(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_contacts_unblock) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()

	return dc.err
}

func (t *TL_contacts_unblock) String() string {
	return fmt.Sprintf("- contacts_unblock#e54100bd\n-- id : %v\n", t.M_id)
}

// contacts_getBlocked#f57c350f
type TL_contacts_getBlocked struct {
	M_classID int32
	M_offset  int32
	M_limit   int32
}

func (t *TL_contacts_getBlocked) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_getBlocked) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_contacts_getBlocked) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_contacts_getBlocked) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_contacts_getBlocked) Get_limit() int32 {
	return t.M_limit
}

func New_TL_contacts_getBlocked() *TL_contacts_getBlocked {
	return &TL_contacts_getBlocked{
		M_classID: TL_CLASS_contacts_getBlocked,
	}
}

func (t *TL_contacts_getBlocked) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_getBlocked))
	ec.Int(t.Get_offset())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_contacts_getBlocked) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_offset = dc.Int()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_contacts_getBlocked) String() string {
	return fmt.Sprintf("- contacts_getBlocked#f57c350f\n-- offset : %v\n-- limit : %v\n", t.M_offset, t.M_limit)
}

// contacts_exportCard#84e53737
type TL_contacts_exportCard struct {
	M_classID int32
}

func (t *TL_contacts_exportCard) ClassID() int32 {
	return t.M_classID
}

func New_TL_contacts_exportCard() *TL_contacts_exportCard {
	return &TL_contacts_exportCard{
		M_classID: TL_CLASS_contacts_exportCard,
	}
}

func (t *TL_contacts_exportCard) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_exportCard))

	return ec.GetBuffer()
}

func (t *TL_contacts_exportCard) Decode(b []byte) error {
	return nil
}

func (t *TL_contacts_exportCard) String() string {
	return fmt.Sprintf("- contacts_exportCard#84e53737\n")
}

// contacts_importCard#4fe196fe
type TL_contacts_importCard struct {
	M_classID     int32
	M_export_card []int32
}

func (t *TL_contacts_importCard) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_importCard) Set_export_card(M_export_card []int32) {
	t.M_export_card = M_export_card
}

func (t *TL_contacts_importCard) Get_export_card() []int32 {
	return t.M_export_card
}

func New_TL_contacts_importCard() *TL_contacts_importCard {
	return &TL_contacts_importCard{
		M_classID: TL_CLASS_contacts_importCard,
	}
}

func (t *TL_contacts_importCard) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_importCard))
	ec.VectorInt(t.Get_export_card())

	return ec.GetBuffer()
}

func (t *TL_contacts_importCard) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_export_card = dc.VectorInt()

	return dc.err
}

func (t *TL_contacts_importCard) String() string {
	return fmt.Sprintf("- contacts_importCard#4fe196fe\n-- export_card : %v\n", t.M_export_card)
}

// contacts_search#11f812d8
type TL_contacts_search struct {
	M_classID int32
	M_q       string
	M_limit   int32
}

func (t *TL_contacts_search) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_search) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_contacts_search) Get_q() string {
	return t.M_q
}

func (t *TL_contacts_search) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_contacts_search) Get_limit() int32 {
	return t.M_limit
}

func New_TL_contacts_search() *TL_contacts_search {
	return &TL_contacts_search{
		M_classID: TL_CLASS_contacts_search,
	}
}

func (t *TL_contacts_search) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_search))
	ec.String(t.Get_q())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_contacts_search) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_q = dc.String()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_contacts_search) String() string {
	return fmt.Sprintf("- contacts_search#11f812d8\n-- q : %v\n-- limit : %v\n", t.M_q, t.M_limit)
}

// contacts_resolveUsername#f93ccba3
type TL_contacts_resolveUsername struct {
	M_classID  int32
	M_username string
}

func (t *TL_contacts_resolveUsername) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_resolveUsername) Set_username(M_username string) {
	t.M_username = M_username
}

func (t *TL_contacts_resolveUsername) Get_username() string {
	return t.M_username
}

func New_TL_contacts_resolveUsername() *TL_contacts_resolveUsername {
	return &TL_contacts_resolveUsername{
		M_classID: TL_CLASS_contacts_resolveUsername,
	}
}

func (t *TL_contacts_resolveUsername) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_resolveUsername))
	ec.String(t.Get_username())

	return ec.GetBuffer()
}

func (t *TL_contacts_resolveUsername) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_username = dc.String()

	return dc.err
}

func (t *TL_contacts_resolveUsername) String() string {
	return fmt.Sprintf("- contacts_resolveUsername#f93ccba3\n-- username : %v\n", t.M_username)
}

// contacts_getTopPeers#d4982db5
type TL_contacts_getTopPeers struct {
	M_classID        int32
	M_flags          TLObject
	M_correspondents TLObject
	M_bots_pm        TLObject
	M_bots_inline    TLObject
	M_phone_calls    TLObject
	M_groups         TLObject
	M_channels       TLObject
	M_offset         int32
	M_limit          int32
	M_hash           int32
}

func (t *TL_contacts_getTopPeers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_getTopPeers) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_contacts_getTopPeers) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_contacts_getTopPeers) Set_correspondents(M_correspondents TLObject) {
	t.M_correspondents = M_correspondents
}

func (t *TL_contacts_getTopPeers) Get_correspondents() TLObject {
	return t.M_correspondents
}

func (t *TL_contacts_getTopPeers) Set_bots_pm(M_bots_pm TLObject) {
	t.M_bots_pm = M_bots_pm
}

func (t *TL_contacts_getTopPeers) Get_bots_pm() TLObject {
	return t.M_bots_pm
}

func (t *TL_contacts_getTopPeers) Set_bots_inline(M_bots_inline TLObject) {
	t.M_bots_inline = M_bots_inline
}

func (t *TL_contacts_getTopPeers) Get_bots_inline() TLObject {
	return t.M_bots_inline
}

func (t *TL_contacts_getTopPeers) Set_phone_calls(M_phone_calls TLObject) {
	t.M_phone_calls = M_phone_calls
}

func (t *TL_contacts_getTopPeers) Get_phone_calls() TLObject {
	return t.M_phone_calls
}

func (t *TL_contacts_getTopPeers) Set_groups(M_groups TLObject) {
	t.M_groups = M_groups
}

func (t *TL_contacts_getTopPeers) Get_groups() TLObject {
	return t.M_groups
}

func (t *TL_contacts_getTopPeers) Set_channels(M_channels TLObject) {
	t.M_channels = M_channels
}

func (t *TL_contacts_getTopPeers) Get_channels() TLObject {
	return t.M_channels
}

func (t *TL_contacts_getTopPeers) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_contacts_getTopPeers) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_contacts_getTopPeers) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_contacts_getTopPeers) Get_limit() int32 {
	return t.M_limit
}

func (t *TL_contacts_getTopPeers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_contacts_getTopPeers) Get_hash() int32 {
	return t.M_hash
}

func New_TL_contacts_getTopPeers() *TL_contacts_getTopPeers {
	return &TL_contacts_getTopPeers{
		M_classID: TL_CLASS_contacts_getTopPeers,
	}
}

func (t *TL_contacts_getTopPeers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_getTopPeers))
	ec.TLObject(t.Get_correspondents())
	ec.TLObject(t.Get_bots_pm())
	ec.TLObject(t.Get_bots_inline())
	ec.TLObject(t.Get_phone_calls())
	ec.TLObject(t.Get_groups())
	ec.TLObject(t.Get_channels())
	ec.Int(t.Get_offset())
	ec.Int(t.Get_limit())
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_contacts_getTopPeers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_correspondents = dc.TLObject()
	t.M_bots_pm = dc.TLObject()
	t.M_bots_inline = dc.TLObject()
	t.M_phone_calls = dc.TLObject()
	t.M_groups = dc.TLObject()
	t.M_channels = dc.TLObject()
	t.M_offset = dc.Int()
	t.M_limit = dc.Int()
	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_contacts_getTopPeers) String() string {
	return fmt.Sprintf("- contacts_getTopPeers#d4982db5\n-- flags : %v\n-- correspondents : %v\n-- bots_pm : %v\n-- bots_inline : %v\n-- phone_calls : %v\n-- groups : %v\n-- channels : %v\n-- offset : %v\n-- limit : %v\n-- hash : %v\n", t.M_flags, t.M_correspondents, t.M_bots_pm, t.M_bots_inline, t.M_phone_calls, t.M_groups, t.M_channels, t.M_offset, t.M_limit, t.M_hash)
}

// contacts_resetTopPeerRating#1ae373ac
type TL_contacts_resetTopPeerRating struct {
	M_classID  int32
	M_category TLObject
	M_peer     TLObject
}

func (t *TL_contacts_resetTopPeerRating) ClassID() int32 {
	return t.M_classID
}

func (t *TL_contacts_resetTopPeerRating) Set_category(M_category TLObject) {
	t.M_category = M_category
}

func (t *TL_contacts_resetTopPeerRating) Get_category() TLObject {
	return t.M_category
}

func (t *TL_contacts_resetTopPeerRating) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_contacts_resetTopPeerRating) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_contacts_resetTopPeerRating() *TL_contacts_resetTopPeerRating {
	return &TL_contacts_resetTopPeerRating{
		M_classID: TL_CLASS_contacts_resetTopPeerRating,
	}
}

func (t *TL_contacts_resetTopPeerRating) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_resetTopPeerRating))
	ec.TLObject(t.Get_category())
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_contacts_resetTopPeerRating) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_category = dc.TLObject()
	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_contacts_resetTopPeerRating) String() string {
	return fmt.Sprintf("- contacts_resetTopPeerRating#1ae373ac\n-- category : %v\n-- peer : %v\n", t.M_category, t.M_peer)
}

// contacts_resetSaved#879537f1
type TL_contacts_resetSaved struct {
	M_classID int32
}

func (t *TL_contacts_resetSaved) ClassID() int32 {
	return t.M_classID
}

func New_TL_contacts_resetSaved() *TL_contacts_resetSaved {
	return &TL_contacts_resetSaved{
		M_classID: TL_CLASS_contacts_resetSaved,
	}
}

func (t *TL_contacts_resetSaved) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_contacts_resetSaved))

	return ec.GetBuffer()
}

func (t *TL_contacts_resetSaved) Decode(b []byte) error {
	return nil
}

func (t *TL_contacts_resetSaved) String() string {
	return fmt.Sprintf("- contacts_resetSaved#879537f1\n")
}

// messages_getMessages#4222fa74
type TL_messages_getMessages struct {
	M_classID int32
	M_id      []int32
}

func (t *TL_messages_getMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getMessages) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_messages_getMessages) Get_id() []int32 {
	return t.M_id
}

func New_TL_messages_getMessages() *TL_messages_getMessages {
	return &TL_messages_getMessages{
		M_classID: TL_CLASS_messages_getMessages,
	}
}

func (t *TL_messages_getMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getMessages))
	ec.VectorInt(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_messages_getMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.VectorInt()

	return dc.err
}

func (t *TL_messages_getMessages) String() string {
	return fmt.Sprintf("- messages_getMessages#4222fa74\n-- id : %v\n", t.M_id)
}

// messages_getDialogs#191ba9c5
type TL_messages_getDialogs struct {
	M_classID        int32
	M_flags          TLObject
	M_exclude_pinned TLObject
	M_offset_date    int32
	M_offset_id      int32
	M_offset_peer    TLObject
	M_limit          int32
}

func (t *TL_messages_getDialogs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getDialogs) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_getDialogs) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_getDialogs) Set_exclude_pinned(M_exclude_pinned TLObject) {
	t.M_exclude_pinned = M_exclude_pinned
}

func (t *TL_messages_getDialogs) Get_exclude_pinned() TLObject {
	return t.M_exclude_pinned
}

func (t *TL_messages_getDialogs) Set_offset_date(M_offset_date int32) {
	t.M_offset_date = M_offset_date
}

func (t *TL_messages_getDialogs) Get_offset_date() int32 {
	return t.M_offset_date
}

func (t *TL_messages_getDialogs) Set_offset_id(M_offset_id int32) {
	t.M_offset_id = M_offset_id
}

func (t *TL_messages_getDialogs) Get_offset_id() int32 {
	return t.M_offset_id
}

func (t *TL_messages_getDialogs) Set_offset_peer(M_offset_peer TLObject) {
	t.M_offset_peer = M_offset_peer
}

func (t *TL_messages_getDialogs) Get_offset_peer() TLObject {
	return t.M_offset_peer
}

func (t *TL_messages_getDialogs) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_messages_getDialogs) Get_limit() int32 {
	return t.M_limit
}

func New_TL_messages_getDialogs() *TL_messages_getDialogs {
	return &TL_messages_getDialogs{
		M_classID: TL_CLASS_messages_getDialogs,
	}
}

func (t *TL_messages_getDialogs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getDialogs))
	ec.TLObject(t.Get_exclude_pinned())
	ec.Int(t.Get_offset_date())
	ec.Int(t.Get_offset_id())
	ec.TLObject(t.Get_offset_peer())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_messages_getDialogs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_exclude_pinned = dc.TLObject()
	t.M_offset_date = dc.Int()
	t.M_offset_id = dc.Int()
	t.M_offset_peer = dc.TLObject()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_messages_getDialogs) String() string {
	return fmt.Sprintf("- messages_getDialogs#191ba9c5\n-- flags : %v\n-- exclude_pinned : %v\n-- offset_date : %v\n-- offset_id : %v\n-- offset_peer : %v\n-- limit : %v\n", t.M_flags, t.M_exclude_pinned, t.M_offset_date, t.M_offset_id, t.M_offset_peer, t.M_limit)
}

// messages_getHistory#dcbb8260
type TL_messages_getHistory struct {
	M_classID     int32
	M_peer        TLObject
	M_offset_id   int32
	M_offset_date int32
	M_add_offset  int32
	M_limit       int32
	M_max_id      int32
	M_min_id      int32
	M_hash        int32
}

func (t *TL_messages_getHistory) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getHistory) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_getHistory) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_getHistory) Set_offset_id(M_offset_id int32) {
	t.M_offset_id = M_offset_id
}

func (t *TL_messages_getHistory) Get_offset_id() int32 {
	return t.M_offset_id
}

func (t *TL_messages_getHistory) Set_offset_date(M_offset_date int32) {
	t.M_offset_date = M_offset_date
}

func (t *TL_messages_getHistory) Get_offset_date() int32 {
	return t.M_offset_date
}

func (t *TL_messages_getHistory) Set_add_offset(M_add_offset int32) {
	t.M_add_offset = M_add_offset
}

func (t *TL_messages_getHistory) Get_add_offset() int32 {
	return t.M_add_offset
}

func (t *TL_messages_getHistory) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_messages_getHistory) Get_limit() int32 {
	return t.M_limit
}

func (t *TL_messages_getHistory) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_messages_getHistory) Get_max_id() int32 {
	return t.M_max_id
}

func (t *TL_messages_getHistory) Set_min_id(M_min_id int32) {
	t.M_min_id = M_min_id
}

func (t *TL_messages_getHistory) Get_min_id() int32 {
	return t.M_min_id
}

func (t *TL_messages_getHistory) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_getHistory) Get_hash() int32 {
	return t.M_hash
}

func New_TL_messages_getHistory() *TL_messages_getHistory {
	return &TL_messages_getHistory{
		M_classID: TL_CLASS_messages_getHistory,
	}
}

func (t *TL_messages_getHistory) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getHistory))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_offset_id())
	ec.Int(t.Get_offset_date())
	ec.Int(t.Get_add_offset())
	ec.Int(t.Get_limit())
	ec.Int(t.Get_max_id())
	ec.Int(t.Get_min_id())
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_getHistory) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_offset_id = dc.Int()
	t.M_offset_date = dc.Int()
	t.M_add_offset = dc.Int()
	t.M_limit = dc.Int()
	t.M_max_id = dc.Int()
	t.M_min_id = dc.Int()
	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_messages_getHistory) String() string {
	return fmt.Sprintf("- messages_getHistory#dcbb8260\n-- peer : %v\n-- offset_id : %v\n-- offset_date : %v\n-- add_offset : %v\n-- limit : %v\n-- max_id : %v\n-- min_id : %v\n-- hash : %v\n", t.M_peer, t.M_offset_id, t.M_offset_date, t.M_add_offset, t.M_limit, t.M_max_id, t.M_min_id, t.M_hash)
}

// messages_search#39e9ea0
type TL_messages_search struct {
	M_classID    int32
	M_flags      TLObject
	M_peer       TLObject
	M_q          string
	M_from_id    TLObject
	M_filter     TLObject
	M_min_date   int32
	M_max_date   int32
	M_offset_id  int32
	M_add_offset int32
	M_limit      int32
	M_max_id     int32
	M_min_id     int32
}

func (t *TL_messages_search) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_search) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_search) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_search) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_search) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_search) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_messages_search) Get_q() string {
	return t.M_q
}

func (t *TL_messages_search) Set_from_id(M_from_id TLObject) {
	t.M_from_id = M_from_id
}

func (t *TL_messages_search) Get_from_id() TLObject {
	return t.M_from_id
}

func (t *TL_messages_search) Set_filter(M_filter TLObject) {
	t.M_filter = M_filter
}

func (t *TL_messages_search) Get_filter() TLObject {
	return t.M_filter
}

func (t *TL_messages_search) Set_min_date(M_min_date int32) {
	t.M_min_date = M_min_date
}

func (t *TL_messages_search) Get_min_date() int32 {
	return t.M_min_date
}

func (t *TL_messages_search) Set_max_date(M_max_date int32) {
	t.M_max_date = M_max_date
}

func (t *TL_messages_search) Get_max_date() int32 {
	return t.M_max_date
}

func (t *TL_messages_search) Set_offset_id(M_offset_id int32) {
	t.M_offset_id = M_offset_id
}

func (t *TL_messages_search) Get_offset_id() int32 {
	return t.M_offset_id
}

func (t *TL_messages_search) Set_add_offset(M_add_offset int32) {
	t.M_add_offset = M_add_offset
}

func (t *TL_messages_search) Get_add_offset() int32 {
	return t.M_add_offset
}

func (t *TL_messages_search) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_messages_search) Get_limit() int32 {
	return t.M_limit
}

func (t *TL_messages_search) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_messages_search) Get_max_id() int32 {
	return t.M_max_id
}

func (t *TL_messages_search) Set_min_id(M_min_id int32) {
	t.M_min_id = M_min_id
}

func (t *TL_messages_search) Get_min_id() int32 {
	return t.M_min_id
}

func New_TL_messages_search() *TL_messages_search {
	return &TL_messages_search{
		M_classID: TL_CLASS_messages_search,
	}
}

func (t *TL_messages_search) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_search))
	ec.TLObject(t.Get_peer())
	ec.String(t.Get_q())
	ec.TLObject(t.Get_from_id())
	ec.TLObject(t.Get_filter())
	ec.Int(t.Get_min_date())
	ec.Int(t.Get_max_date())
	ec.Int(t.Get_offset_id())
	ec.Int(t.Get_add_offset())
	ec.Int(t.Get_limit())
	ec.Int(t.Get_max_id())
	ec.Int(t.Get_min_id())

	return ec.GetBuffer()
}

func (t *TL_messages_search) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_q = dc.String()
	t.M_from_id = dc.TLObject()
	t.M_filter = dc.TLObject()
	t.M_min_date = dc.Int()
	t.M_max_date = dc.Int()
	t.M_offset_id = dc.Int()
	t.M_add_offset = dc.Int()
	t.M_limit = dc.Int()
	t.M_max_id = dc.Int()
	t.M_min_id = dc.Int()

	return dc.err
}

func (t *TL_messages_search) String() string {
	return fmt.Sprintf("- messages_search#39e9ea0\n-- flags : %v\n-- peer : %v\n-- q : %v\n-- from_id : %v\n-- filter : %v\n-- min_date : %v\n-- max_date : %v\n-- offset_id : %v\n-- add_offset : %v\n-- limit : %v\n-- max_id : %v\n-- min_id : %v\n", t.M_flags, t.M_peer, t.M_q, t.M_from_id, t.M_filter, t.M_min_date, t.M_max_date, t.M_offset_id, t.M_add_offset, t.M_limit, t.M_max_id, t.M_min_id)
}

// messages_readHistory#e306d3a
type TL_messages_readHistory struct {
	M_classID int32
	M_peer    TLObject
	M_max_id  int32
}

func (t *TL_messages_readHistory) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_readHistory) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_readHistory) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_readHistory) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_messages_readHistory) Get_max_id() int32 {
	return t.M_max_id
}

func New_TL_messages_readHistory() *TL_messages_readHistory {
	return &TL_messages_readHistory{
		M_classID: TL_CLASS_messages_readHistory,
	}
}

func (t *TL_messages_readHistory) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_readHistory))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_max_id())

	return ec.GetBuffer()
}

func (t *TL_messages_readHistory) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_max_id = dc.Int()

	return dc.err
}

func (t *TL_messages_readHistory) String() string {
	return fmt.Sprintf("- messages_readHistory#e306d3a\n-- peer : %v\n-- max_id : %v\n", t.M_peer, t.M_max_id)
}

// messages_deleteHistory#1c015b09
type TL_messages_deleteHistory struct {
	M_classID    int32
	M_flags      TLObject
	M_just_clear TLObject
	M_peer       TLObject
	M_max_id     int32
}

func (t *TL_messages_deleteHistory) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_deleteHistory) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_deleteHistory) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_deleteHistory) Set_just_clear(M_just_clear TLObject) {
	t.M_just_clear = M_just_clear
}

func (t *TL_messages_deleteHistory) Get_just_clear() TLObject {
	return t.M_just_clear
}

func (t *TL_messages_deleteHistory) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_deleteHistory) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_deleteHistory) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_messages_deleteHistory) Get_max_id() int32 {
	return t.M_max_id
}

func New_TL_messages_deleteHistory() *TL_messages_deleteHistory {
	return &TL_messages_deleteHistory{
		M_classID: TL_CLASS_messages_deleteHistory,
	}
}

func (t *TL_messages_deleteHistory) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_deleteHistory))
	ec.TLObject(t.Get_just_clear())
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_max_id())

	return ec.GetBuffer()
}

func (t *TL_messages_deleteHistory) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_just_clear = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_max_id = dc.Int()

	return dc.err
}

func (t *TL_messages_deleteHistory) String() string {
	return fmt.Sprintf("- messages_deleteHistory#1c015b09\n-- flags : %v\n-- just_clear : %v\n-- peer : %v\n-- max_id : %v\n", t.M_flags, t.M_just_clear, t.M_peer, t.M_max_id)
}

// messages_deleteMessages#e58e95d2
type TL_messages_deleteMessages struct {
	M_classID int32
	M_flags   TLObject
	M_revoke  TLObject
	M_id      []int32
}

func (t *TL_messages_deleteMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_deleteMessages) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_deleteMessages) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_deleteMessages) Set_revoke(M_revoke TLObject) {
	t.M_revoke = M_revoke
}

func (t *TL_messages_deleteMessages) Get_revoke() TLObject {
	return t.M_revoke
}

func (t *TL_messages_deleteMessages) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_messages_deleteMessages) Get_id() []int32 {
	return t.M_id
}

func New_TL_messages_deleteMessages() *TL_messages_deleteMessages {
	return &TL_messages_deleteMessages{
		M_classID: TL_CLASS_messages_deleteMessages,
	}
}

func (t *TL_messages_deleteMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_deleteMessages))
	ec.TLObject(t.Get_revoke())
	ec.VectorInt(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_messages_deleteMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_revoke = dc.TLObject()
	t.M_id = dc.VectorInt()

	return dc.err
}

func (t *TL_messages_deleteMessages) String() string {
	return fmt.Sprintf("- messages_deleteMessages#e58e95d2\n-- flags : %v\n-- revoke : %v\n-- id : %v\n", t.M_flags, t.M_revoke, t.M_id)
}

// messages_receivedMessages#5a954c0
type TL_messages_receivedMessages struct {
	M_classID int32
	M_max_id  int32
}

func (t *TL_messages_receivedMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_receivedMessages) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_messages_receivedMessages) Get_max_id() int32 {
	return t.M_max_id
}

func New_TL_messages_receivedMessages() *TL_messages_receivedMessages {
	return &TL_messages_receivedMessages{
		M_classID: TL_CLASS_messages_receivedMessages,
	}
}

func (t *TL_messages_receivedMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_receivedMessages))
	ec.Int(t.Get_max_id())

	return ec.GetBuffer()
}

func (t *TL_messages_receivedMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_max_id = dc.Int()

	return dc.err
}

func (t *TL_messages_receivedMessages) String() string {
	return fmt.Sprintf("- messages_receivedMessages#5a954c0\n-- max_id : %v\n", t.M_max_id)
}

// messages_setTyping#a3825e50
type TL_messages_setTyping struct {
	M_classID int32
	M_peer    TLObject
	M_action  TLObject
}

func (t *TL_messages_setTyping) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_setTyping) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_setTyping) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_setTyping) Set_action(M_action TLObject) {
	t.M_action = M_action
}

func (t *TL_messages_setTyping) Get_action() TLObject {
	return t.M_action
}

func New_TL_messages_setTyping() *TL_messages_setTyping {
	return &TL_messages_setTyping{
		M_classID: TL_CLASS_messages_setTyping,
	}
}

func (t *TL_messages_setTyping) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_setTyping))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_action())

	return ec.GetBuffer()
}

func (t *TL_messages_setTyping) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_action = dc.TLObject()

	return dc.err
}

func (t *TL_messages_setTyping) String() string {
	return fmt.Sprintf("- messages_setTyping#a3825e50\n-- peer : %v\n-- action : %v\n", t.M_peer, t.M_action)
}

// messages_sendMessage#fa88427a
type TL_messages_sendMessage struct {
	M_classID         int32
	M_flags           TLObject
	M_no_webpage      TLObject
	M_silent          TLObject
	M_background      TLObject
	M_clear_draft     TLObject
	M_peer            TLObject
	M_reply_to_msg_id TLObject
	M_message         string
	M_random_id       int64
	M_reply_markup    TLObject
	M_entities        []TLObject
}

func (t *TL_messages_sendMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sendMessage) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_sendMessage) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_sendMessage) Set_no_webpage(M_no_webpage TLObject) {
	t.M_no_webpage = M_no_webpage
}

func (t *TL_messages_sendMessage) Get_no_webpage() TLObject {
	return t.M_no_webpage
}

func (t *TL_messages_sendMessage) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_messages_sendMessage) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_messages_sendMessage) Set_background(M_background TLObject) {
	t.M_background = M_background
}

func (t *TL_messages_sendMessage) Get_background() TLObject {
	return t.M_background
}

func (t *TL_messages_sendMessage) Set_clear_draft(M_clear_draft TLObject) {
	t.M_clear_draft = M_clear_draft
}

func (t *TL_messages_sendMessage) Get_clear_draft() TLObject {
	return t.M_clear_draft
}

func (t *TL_messages_sendMessage) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_sendMessage) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_sendMessage) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_messages_sendMessage) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_messages_sendMessage) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_messages_sendMessage) Get_message() string {
	return t.M_message
}

func (t *TL_messages_sendMessage) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_sendMessage) Get_random_id() int64 {
	return t.M_random_id
}

func (t *TL_messages_sendMessage) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_messages_sendMessage) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func (t *TL_messages_sendMessage) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_messages_sendMessage) Get_entities() []TLObject {
	return t.M_entities
}

func New_TL_messages_sendMessage() *TL_messages_sendMessage {
	return &TL_messages_sendMessage{
		M_classID: TL_CLASS_messages_sendMessage,
	}
}

func (t *TL_messages_sendMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sendMessage))
	ec.TLObject(t.Get_no_webpage())
	ec.TLObject(t.Get_silent())
	ec.TLObject(t.Get_background())
	ec.TLObject(t.Get_clear_draft())
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.String(t.Get_message())
	ec.Long(t.Get_random_id())
	ec.TLObject(t.Get_reply_markup())
	ec.Vector(t.Get_entities())

	return ec.GetBuffer()
}

func (t *TL_messages_sendMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_no_webpage = dc.TLObject()
	t.M_silent = dc.TLObject()
	t.M_background = dc.TLObject()
	t.M_clear_draft = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_message = dc.String()
	t.M_random_id = dc.Long()
	t.M_reply_markup = dc.TLObject()
	t.M_entities = dc.Vector()

	return dc.err
}

func (t *TL_messages_sendMessage) String() string {
	return fmt.Sprintf("- messages_sendMessage#fa88427a\n-- flags : %v\n-- no_webpage : %v\n-- silent : %v\n-- background : %v\n-- clear_draft : %v\n-- peer : %v\n-- reply_to_msg_id : %v\n-- message : %v\n-- random_id : %v\n-- reply_markup : %v\n-- entities : %v\n", t.M_flags, t.M_no_webpage, t.M_silent, t.M_background, t.M_clear_draft, t.M_peer, t.M_reply_to_msg_id, t.M_message, t.M_random_id, t.M_reply_markup, t.M_entities)
}

// messages_sendMedia#c8f16791
type TL_messages_sendMedia struct {
	M_classID         int32
	M_flags           TLObject
	M_silent          TLObject
	M_background      TLObject
	M_clear_draft     TLObject
	M_peer            TLObject
	M_reply_to_msg_id TLObject
	M_media           TLObject
	M_random_id       int64
	M_reply_markup    TLObject
}

func (t *TL_messages_sendMedia) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sendMedia) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_sendMedia) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_sendMedia) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_messages_sendMedia) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_messages_sendMedia) Set_background(M_background TLObject) {
	t.M_background = M_background
}

func (t *TL_messages_sendMedia) Get_background() TLObject {
	return t.M_background
}

func (t *TL_messages_sendMedia) Set_clear_draft(M_clear_draft TLObject) {
	t.M_clear_draft = M_clear_draft
}

func (t *TL_messages_sendMedia) Get_clear_draft() TLObject {
	return t.M_clear_draft
}

func (t *TL_messages_sendMedia) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_sendMedia) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_sendMedia) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_messages_sendMedia) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_messages_sendMedia) Set_media(M_media TLObject) {
	t.M_media = M_media
}

func (t *TL_messages_sendMedia) Get_media() TLObject {
	return t.M_media
}

func (t *TL_messages_sendMedia) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_sendMedia) Get_random_id() int64 {
	return t.M_random_id
}

func (t *TL_messages_sendMedia) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_messages_sendMedia) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func New_TL_messages_sendMedia() *TL_messages_sendMedia {
	return &TL_messages_sendMedia{
		M_classID: TL_CLASS_messages_sendMedia,
	}
}

func (t *TL_messages_sendMedia) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sendMedia))
	ec.TLObject(t.Get_silent())
	ec.TLObject(t.Get_background())
	ec.TLObject(t.Get_clear_draft())
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.TLObject(t.Get_media())
	ec.Long(t.Get_random_id())
	ec.TLObject(t.Get_reply_markup())

	return ec.GetBuffer()
}

func (t *TL_messages_sendMedia) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_silent = dc.TLObject()
	t.M_background = dc.TLObject()
	t.M_clear_draft = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_media = dc.TLObject()
	t.M_random_id = dc.Long()
	t.M_reply_markup = dc.TLObject()

	return dc.err
}

func (t *TL_messages_sendMedia) String() string {
	return fmt.Sprintf("- messages_sendMedia#c8f16791\n-- flags : %v\n-- silent : %v\n-- background : %v\n-- clear_draft : %v\n-- peer : %v\n-- reply_to_msg_id : %v\n-- media : %v\n-- random_id : %v\n-- reply_markup : %v\n", t.M_flags, t.M_silent, t.M_background, t.M_clear_draft, t.M_peer, t.M_reply_to_msg_id, t.M_media, t.M_random_id, t.M_reply_markup)
}

// messages_forwardMessages#708e0195
type TL_messages_forwardMessages struct {
	M_classID       int32
	M_flags         TLObject
	M_silent        TLObject
	M_background    TLObject
	M_with_my_score TLObject
	M_grouped       TLObject
	M_from_peer     TLObject
	M_id            []int32
	M_random_id     []int64
	M_to_peer       TLObject
}

func (t *TL_messages_forwardMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_forwardMessages) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_forwardMessages) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_forwardMessages) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_messages_forwardMessages) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_messages_forwardMessages) Set_background(M_background TLObject) {
	t.M_background = M_background
}

func (t *TL_messages_forwardMessages) Get_background() TLObject {
	return t.M_background
}

func (t *TL_messages_forwardMessages) Set_with_my_score(M_with_my_score TLObject) {
	t.M_with_my_score = M_with_my_score
}

func (t *TL_messages_forwardMessages) Get_with_my_score() TLObject {
	return t.M_with_my_score
}

func (t *TL_messages_forwardMessages) Set_grouped(M_grouped TLObject) {
	t.M_grouped = M_grouped
}

func (t *TL_messages_forwardMessages) Get_grouped() TLObject {
	return t.M_grouped
}

func (t *TL_messages_forwardMessages) Set_from_peer(M_from_peer TLObject) {
	t.M_from_peer = M_from_peer
}

func (t *TL_messages_forwardMessages) Get_from_peer() TLObject {
	return t.M_from_peer
}

func (t *TL_messages_forwardMessages) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_messages_forwardMessages) Get_id() []int32 {
	return t.M_id
}

func (t *TL_messages_forwardMessages) Set_random_id(M_random_id []int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_forwardMessages) Get_random_id() []int64 {
	return t.M_random_id
}

func (t *TL_messages_forwardMessages) Set_to_peer(M_to_peer TLObject) {
	t.M_to_peer = M_to_peer
}

func (t *TL_messages_forwardMessages) Get_to_peer() TLObject {
	return t.M_to_peer
}

func New_TL_messages_forwardMessages() *TL_messages_forwardMessages {
	return &TL_messages_forwardMessages{
		M_classID: TL_CLASS_messages_forwardMessages,
	}
}

func (t *TL_messages_forwardMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_forwardMessages))
	ec.TLObject(t.Get_silent())
	ec.TLObject(t.Get_background())
	ec.TLObject(t.Get_with_my_score())
	ec.TLObject(t.Get_grouped())
	ec.TLObject(t.Get_from_peer())
	ec.VectorInt(t.Get_id())
	ec.VectorLong(t.Get_random_id())
	ec.TLObject(t.Get_to_peer())

	return ec.GetBuffer()
}

func (t *TL_messages_forwardMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_silent = dc.TLObject()
	t.M_background = dc.TLObject()
	t.M_with_my_score = dc.TLObject()
	t.M_grouped = dc.TLObject()
	t.M_from_peer = dc.TLObject()
	t.M_id = dc.VectorInt()
	t.M_random_id = dc.VectorLong()
	t.M_to_peer = dc.TLObject()

	return dc.err
}

func (t *TL_messages_forwardMessages) String() string {
	return fmt.Sprintf("- messages_forwardMessages#708e0195\n-- flags : %v\n-- silent : %v\n-- background : %v\n-- with_my_score : %v\n-- grouped : %v\n-- from_peer : %v\n-- id : %v\n-- random_id : %v\n-- to_peer : %v\n", t.M_flags, t.M_silent, t.M_background, t.M_with_my_score, t.M_grouped, t.M_from_peer, t.M_id, t.M_random_id, t.M_to_peer)
}

// messages_reportSpam#cf1592db
type TL_messages_reportSpam struct {
	M_classID int32
	M_peer    TLObject
}

func (t *TL_messages_reportSpam) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_reportSpam) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_reportSpam) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_messages_reportSpam() *TL_messages_reportSpam {
	return &TL_messages_reportSpam{
		M_classID: TL_CLASS_messages_reportSpam,
	}
}

func (t *TL_messages_reportSpam) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_reportSpam))
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_messages_reportSpam) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_messages_reportSpam) String() string {
	return fmt.Sprintf("- messages_reportSpam#cf1592db\n-- peer : %v\n", t.M_peer)
}

// messages_hideReportSpam#a8f1709b
type TL_messages_hideReportSpam struct {
	M_classID int32
	M_peer    TLObject
}

func (t *TL_messages_hideReportSpam) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_hideReportSpam) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_hideReportSpam) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_messages_hideReportSpam() *TL_messages_hideReportSpam {
	return &TL_messages_hideReportSpam{
		M_classID: TL_CLASS_messages_hideReportSpam,
	}
}

func (t *TL_messages_hideReportSpam) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_hideReportSpam))
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_messages_hideReportSpam) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_messages_hideReportSpam) String() string {
	return fmt.Sprintf("- messages_hideReportSpam#a8f1709b\n-- peer : %v\n", t.M_peer)
}

// messages_getPeerSettings#3672e09c
type TL_messages_getPeerSettings struct {
	M_classID int32
	M_peer    TLObject
}

func (t *TL_messages_getPeerSettings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getPeerSettings) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_getPeerSettings) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_messages_getPeerSettings() *TL_messages_getPeerSettings {
	return &TL_messages_getPeerSettings{
		M_classID: TL_CLASS_messages_getPeerSettings,
	}
}

func (t *TL_messages_getPeerSettings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getPeerSettings))
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_messages_getPeerSettings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_messages_getPeerSettings) String() string {
	return fmt.Sprintf("- messages_getPeerSettings#3672e09c\n-- peer : %v\n", t.M_peer)
}

// messages_getChats#3c6aa187
type TL_messages_getChats struct {
	M_classID int32
	M_id      []int32
}

func (t *TL_messages_getChats) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getChats) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_messages_getChats) Get_id() []int32 {
	return t.M_id
}

func New_TL_messages_getChats() *TL_messages_getChats {
	return &TL_messages_getChats{
		M_classID: TL_CLASS_messages_getChats,
	}
}

func (t *TL_messages_getChats) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getChats))
	ec.VectorInt(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_messages_getChats) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.VectorInt()

	return dc.err
}

func (t *TL_messages_getChats) String() string {
	return fmt.Sprintf("- messages_getChats#3c6aa187\n-- id : %v\n", t.M_id)
}

// messages_getFullChat#3b831c66
type TL_messages_getFullChat struct {
	M_classID int32
	M_chat_id int32
}

func (t *TL_messages_getFullChat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getFullChat) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_getFullChat) Get_chat_id() int32 {
	return t.M_chat_id
}

func New_TL_messages_getFullChat() *TL_messages_getFullChat {
	return &TL_messages_getFullChat{
		M_classID: TL_CLASS_messages_getFullChat,
	}
}

func (t *TL_messages_getFullChat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getFullChat))
	ec.Int(t.Get_chat_id())

	return ec.GetBuffer()
}

func (t *TL_messages_getFullChat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()

	return dc.err
}

func (t *TL_messages_getFullChat) String() string {
	return fmt.Sprintf("- messages_getFullChat#3b831c66\n-- chat_id : %v\n", t.M_chat_id)
}

// messages_editChatTitle#dc452855
type TL_messages_editChatTitle struct {
	M_classID int32
	M_chat_id int32
	M_title   string
}

func (t *TL_messages_editChatTitle) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_editChatTitle) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_editChatTitle) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_messages_editChatTitle) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_messages_editChatTitle) Get_title() string {
	return t.M_title
}

func New_TL_messages_editChatTitle() *TL_messages_editChatTitle {
	return &TL_messages_editChatTitle{
		M_classID: TL_CLASS_messages_editChatTitle,
	}
}

func (t *TL_messages_editChatTitle) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_editChatTitle))
	ec.Int(t.Get_chat_id())
	ec.String(t.Get_title())

	return ec.GetBuffer()
}

func (t *TL_messages_editChatTitle) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_title = dc.String()

	return dc.err
}

func (t *TL_messages_editChatTitle) String() string {
	return fmt.Sprintf("- messages_editChatTitle#dc452855\n-- chat_id : %v\n-- title : %v\n", t.M_chat_id, t.M_title)
}

// messages_editChatPhoto#ca4c79d8
type TL_messages_editChatPhoto struct {
	M_classID int32
	M_chat_id int32
	M_photo   TLObject
}

func (t *TL_messages_editChatPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_editChatPhoto) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_editChatPhoto) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_messages_editChatPhoto) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_messages_editChatPhoto) Get_photo() TLObject {
	return t.M_photo
}

func New_TL_messages_editChatPhoto() *TL_messages_editChatPhoto {
	return &TL_messages_editChatPhoto{
		M_classID: TL_CLASS_messages_editChatPhoto,
	}
}

func (t *TL_messages_editChatPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_editChatPhoto))
	ec.Int(t.Get_chat_id())
	ec.TLObject(t.Get_photo())

	return ec.GetBuffer()
}

func (t *TL_messages_editChatPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_photo = dc.TLObject()

	return dc.err
}

func (t *TL_messages_editChatPhoto) String() string {
	return fmt.Sprintf("- messages_editChatPhoto#ca4c79d8\n-- chat_id : %v\n-- photo : %v\n", t.M_chat_id, t.M_photo)
}

// messages_addChatUser#f9a0aa09
type TL_messages_addChatUser struct {
	M_classID   int32
	M_chat_id   int32
	M_user_id   TLObject
	M_fwd_limit int32
}

func (t *TL_messages_addChatUser) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_addChatUser) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_addChatUser) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_messages_addChatUser) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_messages_addChatUser) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_messages_addChatUser) Set_fwd_limit(M_fwd_limit int32) {
	t.M_fwd_limit = M_fwd_limit
}

func (t *TL_messages_addChatUser) Get_fwd_limit() int32 {
	return t.M_fwd_limit
}

func New_TL_messages_addChatUser() *TL_messages_addChatUser {
	return &TL_messages_addChatUser{
		M_classID: TL_CLASS_messages_addChatUser,
	}
}

func (t *TL_messages_addChatUser) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_addChatUser))
	ec.Int(t.Get_chat_id())
	ec.TLObject(t.Get_user_id())
	ec.Int(t.Get_fwd_limit())

	return ec.GetBuffer()
}

func (t *TL_messages_addChatUser) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_user_id = dc.TLObject()
	t.M_fwd_limit = dc.Int()

	return dc.err
}

func (t *TL_messages_addChatUser) String() string {
	return fmt.Sprintf("- messages_addChatUser#f9a0aa09\n-- chat_id : %v\n-- user_id : %v\n-- fwd_limit : %v\n", t.M_chat_id, t.M_user_id, t.M_fwd_limit)
}

// messages_deleteChatUser#e0611f16
type TL_messages_deleteChatUser struct {
	M_classID int32
	M_chat_id int32
	M_user_id TLObject
}

func (t *TL_messages_deleteChatUser) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_deleteChatUser) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_deleteChatUser) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_messages_deleteChatUser) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_messages_deleteChatUser) Get_user_id() TLObject {
	return t.M_user_id
}

func New_TL_messages_deleteChatUser() *TL_messages_deleteChatUser {
	return &TL_messages_deleteChatUser{
		M_classID: TL_CLASS_messages_deleteChatUser,
	}
}

func (t *TL_messages_deleteChatUser) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_deleteChatUser))
	ec.Int(t.Get_chat_id())
	ec.TLObject(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_messages_deleteChatUser) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_user_id = dc.TLObject()

	return dc.err
}

func (t *TL_messages_deleteChatUser) String() string {
	return fmt.Sprintf("- messages_deleteChatUser#e0611f16\n-- chat_id : %v\n-- user_id : %v\n", t.M_chat_id, t.M_user_id)
}

// messages_createChat#9cb126e
type TL_messages_createChat struct {
	M_classID int32
	M_users   []TLObject
	M_title   string
}

func (t *TL_messages_createChat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_createChat) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_messages_createChat) Get_users() []TLObject {
	return t.M_users
}

func (t *TL_messages_createChat) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_messages_createChat) Get_title() string {
	return t.M_title
}

func New_TL_messages_createChat() *TL_messages_createChat {
	return &TL_messages_createChat{
		M_classID: TL_CLASS_messages_createChat,
	}
}

func (t *TL_messages_createChat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_createChat))
	ec.Vector(t.Get_users())
	ec.String(t.Get_title())

	return ec.GetBuffer()
}

func (t *TL_messages_createChat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_users = dc.Vector()
	t.M_title = dc.String()

	return dc.err
}

func (t *TL_messages_createChat) String() string {
	return fmt.Sprintf("- messages_createChat#9cb126e\n-- users : %v\n-- title : %v\n", t.M_users, t.M_title)
}

// messages_forwardMessage#33963bf9
type TL_messages_forwardMessage struct {
	M_classID   int32
	M_peer      TLObject
	M_id        int32
	M_random_id int64
}

func (t *TL_messages_forwardMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_forwardMessage) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_forwardMessage) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_forwardMessage) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_messages_forwardMessage) Get_id() int32 {
	return t.M_id
}

func (t *TL_messages_forwardMessage) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_forwardMessage) Get_random_id() int64 {
	return t.M_random_id
}

func New_TL_messages_forwardMessage() *TL_messages_forwardMessage {
	return &TL_messages_forwardMessage{
		M_classID: TL_CLASS_messages_forwardMessage,
	}
}

func (t *TL_messages_forwardMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_forwardMessage))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_id())
	ec.Long(t.Get_random_id())

	return ec.GetBuffer()
}

func (t *TL_messages_forwardMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_id = dc.Int()
	t.M_random_id = dc.Long()

	return dc.err
}

func (t *TL_messages_forwardMessage) String() string {
	return fmt.Sprintf("- messages_forwardMessage#33963bf9\n-- peer : %v\n-- id : %v\n-- random_id : %v\n", t.M_peer, t.M_id, t.M_random_id)
}

// messages_getDhConfig#26cf8950
type TL_messages_getDhConfig struct {
	M_classID       int32
	M_version       int32
	M_random_length int32
}

func (t *TL_messages_getDhConfig) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getDhConfig) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_messages_getDhConfig) Get_version() int32 {
	return t.M_version
}

func (t *TL_messages_getDhConfig) Set_random_length(M_random_length int32) {
	t.M_random_length = M_random_length
}

func (t *TL_messages_getDhConfig) Get_random_length() int32 {
	return t.M_random_length
}

func New_TL_messages_getDhConfig() *TL_messages_getDhConfig {
	return &TL_messages_getDhConfig{
		M_classID: TL_CLASS_messages_getDhConfig,
	}
}

func (t *TL_messages_getDhConfig) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getDhConfig))
	ec.Int(t.Get_version())
	ec.Int(t.Get_random_length())

	return ec.GetBuffer()
}

func (t *TL_messages_getDhConfig) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_version = dc.Int()
	t.M_random_length = dc.Int()

	return dc.err
}

func (t *TL_messages_getDhConfig) String() string {
	return fmt.Sprintf("- messages_getDhConfig#26cf8950\n-- version : %v\n-- random_length : %v\n", t.M_version, t.M_random_length)
}

// messages_requestEncryption#f64daf43
type TL_messages_requestEncryption struct {
	M_classID   int32
	M_user_id   TLObject
	M_random_id int32
	M_g_a       TLObject
}

func (t *TL_messages_requestEncryption) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_requestEncryption) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_messages_requestEncryption) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_messages_requestEncryption) Set_random_id(M_random_id int32) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_requestEncryption) Get_random_id() int32 {
	return t.M_random_id
}

func (t *TL_messages_requestEncryption) Set_g_a(M_g_a TLObject) {
	t.M_g_a = M_g_a
}

func (t *TL_messages_requestEncryption) Get_g_a() TLObject {
	return t.M_g_a
}

func New_TL_messages_requestEncryption() *TL_messages_requestEncryption {
	return &TL_messages_requestEncryption{
		M_classID: TL_CLASS_messages_requestEncryption,
	}
}

func (t *TL_messages_requestEncryption) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_requestEncryption))
	ec.TLObject(t.Get_user_id())
	ec.Int(t.Get_random_id())
	ec.TLObject(t.Get_g_a())

	return ec.GetBuffer()
}

func (t *TL_messages_requestEncryption) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.TLObject()
	t.M_random_id = dc.Int()
	t.M_g_a = dc.TLObject()

	return dc.err
}

func (t *TL_messages_requestEncryption) String() string {
	return fmt.Sprintf("- messages_requestEncryption#f64daf43\n-- user_id : %v\n-- random_id : %v\n-- g_a : %v\n", t.M_user_id, t.M_random_id, t.M_g_a)
}

// messages_acceptEncryption#3dbc0415
type TL_messages_acceptEncryption struct {
	M_classID         int32
	M_peer            TLObject
	M_g_b             TLObject
	M_key_fingerprint int64
}

func (t *TL_messages_acceptEncryption) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_acceptEncryption) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_acceptEncryption) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_acceptEncryption) Set_g_b(M_g_b TLObject) {
	t.M_g_b = M_g_b
}

func (t *TL_messages_acceptEncryption) Get_g_b() TLObject {
	return t.M_g_b
}

func (t *TL_messages_acceptEncryption) Set_key_fingerprint(M_key_fingerprint int64) {
	t.M_key_fingerprint = M_key_fingerprint
}

func (t *TL_messages_acceptEncryption) Get_key_fingerprint() int64 {
	return t.M_key_fingerprint
}

func New_TL_messages_acceptEncryption() *TL_messages_acceptEncryption {
	return &TL_messages_acceptEncryption{
		M_classID: TL_CLASS_messages_acceptEncryption,
	}
}

func (t *TL_messages_acceptEncryption) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_acceptEncryption))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_g_b())
	ec.Long(t.Get_key_fingerprint())

	return ec.GetBuffer()
}

func (t *TL_messages_acceptEncryption) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_g_b = dc.TLObject()
	t.M_key_fingerprint = dc.Long()

	return dc.err
}

func (t *TL_messages_acceptEncryption) String() string {
	return fmt.Sprintf("- messages_acceptEncryption#3dbc0415\n-- peer : %v\n-- g_b : %v\n-- key_fingerprint : %v\n", t.M_peer, t.M_g_b, t.M_key_fingerprint)
}

// messages_discardEncryption#edd923c5
type TL_messages_discardEncryption struct {
	M_classID int32
	M_chat_id int32
}

func (t *TL_messages_discardEncryption) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_discardEncryption) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_discardEncryption) Get_chat_id() int32 {
	return t.M_chat_id
}

func New_TL_messages_discardEncryption() *TL_messages_discardEncryption {
	return &TL_messages_discardEncryption{
		M_classID: TL_CLASS_messages_discardEncryption,
	}
}

func (t *TL_messages_discardEncryption) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_discardEncryption))
	ec.Int(t.Get_chat_id())

	return ec.GetBuffer()
}

func (t *TL_messages_discardEncryption) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()

	return dc.err
}

func (t *TL_messages_discardEncryption) String() string {
	return fmt.Sprintf("- messages_discardEncryption#edd923c5\n-- chat_id : %v\n", t.M_chat_id)
}

// messages_setEncryptedTyping#791451ed
type TL_messages_setEncryptedTyping struct {
	M_classID int32
	M_peer    TLObject
	M_typing  TLObject
}

func (t *TL_messages_setEncryptedTyping) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_setEncryptedTyping) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_setEncryptedTyping) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_setEncryptedTyping) Set_typing(M_typing TLObject) {
	t.M_typing = M_typing
}

func (t *TL_messages_setEncryptedTyping) Get_typing() TLObject {
	return t.M_typing
}

func New_TL_messages_setEncryptedTyping() *TL_messages_setEncryptedTyping {
	return &TL_messages_setEncryptedTyping{
		M_classID: TL_CLASS_messages_setEncryptedTyping,
	}
}

func (t *TL_messages_setEncryptedTyping) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_setEncryptedTyping))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_typing())

	return ec.GetBuffer()
}

func (t *TL_messages_setEncryptedTyping) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_typing = dc.TLObject()

	return dc.err
}

func (t *TL_messages_setEncryptedTyping) String() string {
	return fmt.Sprintf("- messages_setEncryptedTyping#791451ed\n-- peer : %v\n-- typing : %v\n", t.M_peer, t.M_typing)
}

// messages_readEncryptedHistory#7f4b690a
type TL_messages_readEncryptedHistory struct {
	M_classID  int32
	M_peer     TLObject
	M_max_date int32
}

func (t *TL_messages_readEncryptedHistory) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_readEncryptedHistory) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_readEncryptedHistory) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_readEncryptedHistory) Set_max_date(M_max_date int32) {
	t.M_max_date = M_max_date
}

func (t *TL_messages_readEncryptedHistory) Get_max_date() int32 {
	return t.M_max_date
}

func New_TL_messages_readEncryptedHistory() *TL_messages_readEncryptedHistory {
	return &TL_messages_readEncryptedHistory{
		M_classID: TL_CLASS_messages_readEncryptedHistory,
	}
}

func (t *TL_messages_readEncryptedHistory) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_readEncryptedHistory))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_max_date())

	return ec.GetBuffer()
}

func (t *TL_messages_readEncryptedHistory) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_max_date = dc.Int()

	return dc.err
}

func (t *TL_messages_readEncryptedHistory) String() string {
	return fmt.Sprintf("- messages_readEncryptedHistory#7f4b690a\n-- peer : %v\n-- max_date : %v\n", t.M_peer, t.M_max_date)
}

// messages_sendEncrypted#a9776773
type TL_messages_sendEncrypted struct {
	M_classID   int32
	M_peer      TLObject
	M_random_id int64
	M_data      TLObject
}

func (t *TL_messages_sendEncrypted) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sendEncrypted) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_sendEncrypted) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_sendEncrypted) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_sendEncrypted) Get_random_id() int64 {
	return t.M_random_id
}

func (t *TL_messages_sendEncrypted) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_messages_sendEncrypted) Get_data() TLObject {
	return t.M_data
}

func New_TL_messages_sendEncrypted() *TL_messages_sendEncrypted {
	return &TL_messages_sendEncrypted{
		M_classID: TL_CLASS_messages_sendEncrypted,
	}
}

func (t *TL_messages_sendEncrypted) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sendEncrypted))
	ec.TLObject(t.Get_peer())
	ec.Long(t.Get_random_id())
	ec.TLObject(t.Get_data())

	return ec.GetBuffer()
}

func (t *TL_messages_sendEncrypted) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_random_id = dc.Long()
	t.M_data = dc.TLObject()

	return dc.err
}

func (t *TL_messages_sendEncrypted) String() string {
	return fmt.Sprintf("- messages_sendEncrypted#a9776773\n-- peer : %v\n-- random_id : %v\n-- data : %v\n", t.M_peer, t.M_random_id, t.M_data)
}

// messages_sendEncryptedFile#9a901b66
type TL_messages_sendEncryptedFile struct {
	M_classID   int32
	M_peer      TLObject
	M_random_id int64
	M_data      TLObject
	M_file      TLObject
}

func (t *TL_messages_sendEncryptedFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sendEncryptedFile) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_sendEncryptedFile) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_sendEncryptedFile) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_sendEncryptedFile) Get_random_id() int64 {
	return t.M_random_id
}

func (t *TL_messages_sendEncryptedFile) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_messages_sendEncryptedFile) Get_data() TLObject {
	return t.M_data
}

func (t *TL_messages_sendEncryptedFile) Set_file(M_file TLObject) {
	t.M_file = M_file
}

func (t *TL_messages_sendEncryptedFile) Get_file() TLObject {
	return t.M_file
}

func New_TL_messages_sendEncryptedFile() *TL_messages_sendEncryptedFile {
	return &TL_messages_sendEncryptedFile{
		M_classID: TL_CLASS_messages_sendEncryptedFile,
	}
}

func (t *TL_messages_sendEncryptedFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sendEncryptedFile))
	ec.TLObject(t.Get_peer())
	ec.Long(t.Get_random_id())
	ec.TLObject(t.Get_data())
	ec.TLObject(t.Get_file())

	return ec.GetBuffer()
}

func (t *TL_messages_sendEncryptedFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_random_id = dc.Long()
	t.M_data = dc.TLObject()
	t.M_file = dc.TLObject()

	return dc.err
}

func (t *TL_messages_sendEncryptedFile) String() string {
	return fmt.Sprintf("- messages_sendEncryptedFile#9a901b66\n-- peer : %v\n-- random_id : %v\n-- data : %v\n-- file : %v\n", t.M_peer, t.M_random_id, t.M_data, t.M_file)
}

// messages_sendEncryptedService#32d439a4
type TL_messages_sendEncryptedService struct {
	M_classID   int32
	M_peer      TLObject
	M_random_id int64
	M_data      TLObject
}

func (t *TL_messages_sendEncryptedService) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sendEncryptedService) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_sendEncryptedService) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_sendEncryptedService) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_sendEncryptedService) Get_random_id() int64 {
	return t.M_random_id
}

func (t *TL_messages_sendEncryptedService) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_messages_sendEncryptedService) Get_data() TLObject {
	return t.M_data
}

func New_TL_messages_sendEncryptedService() *TL_messages_sendEncryptedService {
	return &TL_messages_sendEncryptedService{
		M_classID: TL_CLASS_messages_sendEncryptedService,
	}
}

func (t *TL_messages_sendEncryptedService) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sendEncryptedService))
	ec.TLObject(t.Get_peer())
	ec.Long(t.Get_random_id())
	ec.TLObject(t.Get_data())

	return ec.GetBuffer()
}

func (t *TL_messages_sendEncryptedService) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_random_id = dc.Long()
	t.M_data = dc.TLObject()

	return dc.err
}

func (t *TL_messages_sendEncryptedService) String() string {
	return fmt.Sprintf("- messages_sendEncryptedService#32d439a4\n-- peer : %v\n-- random_id : %v\n-- data : %v\n", t.M_peer, t.M_random_id, t.M_data)
}

// messages_receivedQueue#55a5bb66
type TL_messages_receivedQueue struct {
	M_classID int32
	M_max_qts int32
}

func (t *TL_messages_receivedQueue) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_receivedQueue) Set_max_qts(M_max_qts int32) {
	t.M_max_qts = M_max_qts
}

func (t *TL_messages_receivedQueue) Get_max_qts() int32 {
	return t.M_max_qts
}

func New_TL_messages_receivedQueue() *TL_messages_receivedQueue {
	return &TL_messages_receivedQueue{
		M_classID: TL_CLASS_messages_receivedQueue,
	}
}

func (t *TL_messages_receivedQueue) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_receivedQueue))
	ec.Int(t.Get_max_qts())

	return ec.GetBuffer()
}

func (t *TL_messages_receivedQueue) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_max_qts = dc.Int()

	return dc.err
}

func (t *TL_messages_receivedQueue) String() string {
	return fmt.Sprintf("- messages_receivedQueue#55a5bb66\n-- max_qts : %v\n", t.M_max_qts)
}

// messages_reportEncryptedSpam#4b0c8c0f
type TL_messages_reportEncryptedSpam struct {
	M_classID int32
	M_peer    TLObject
}

func (t *TL_messages_reportEncryptedSpam) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_reportEncryptedSpam) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_reportEncryptedSpam) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_messages_reportEncryptedSpam() *TL_messages_reportEncryptedSpam {
	return &TL_messages_reportEncryptedSpam{
		M_classID: TL_CLASS_messages_reportEncryptedSpam,
	}
}

func (t *TL_messages_reportEncryptedSpam) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_reportEncryptedSpam))
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_messages_reportEncryptedSpam) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_messages_reportEncryptedSpam) String() string {
	return fmt.Sprintf("- messages_reportEncryptedSpam#4b0c8c0f\n-- peer : %v\n", t.M_peer)
}

// messages_readMessageContents#36a73f77
type TL_messages_readMessageContents struct {
	M_classID int32
	M_id      []int32
}

func (t *TL_messages_readMessageContents) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_readMessageContents) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_messages_readMessageContents) Get_id() []int32 {
	return t.M_id
}

func New_TL_messages_readMessageContents() *TL_messages_readMessageContents {
	return &TL_messages_readMessageContents{
		M_classID: TL_CLASS_messages_readMessageContents,
	}
}

func (t *TL_messages_readMessageContents) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_readMessageContents))
	ec.VectorInt(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_messages_readMessageContents) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.VectorInt()

	return dc.err
}

func (t *TL_messages_readMessageContents) String() string {
	return fmt.Sprintf("- messages_readMessageContents#36a73f77\n-- id : %v\n", t.M_id)
}

// messages_getAllStickers#1c9618b1
type TL_messages_getAllStickers struct {
	M_classID int32
	M_hash    int32
}

func (t *TL_messages_getAllStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getAllStickers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_getAllStickers) Get_hash() int32 {
	return t.M_hash
}

func New_TL_messages_getAllStickers() *TL_messages_getAllStickers {
	return &TL_messages_getAllStickers{
		M_classID: TL_CLASS_messages_getAllStickers,
	}
}

func (t *TL_messages_getAllStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getAllStickers))
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_getAllStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_messages_getAllStickers) String() string {
	return fmt.Sprintf("- messages_getAllStickers#1c9618b1\n-- hash : %v\n", t.M_hash)
}

// messages_getWebPagePreview#25223e24
type TL_messages_getWebPagePreview struct {
	M_classID int32
	M_message string
}

func (t *TL_messages_getWebPagePreview) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getWebPagePreview) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_messages_getWebPagePreview) Get_message() string {
	return t.M_message
}

func New_TL_messages_getWebPagePreview() *TL_messages_getWebPagePreview {
	return &TL_messages_getWebPagePreview{
		M_classID: TL_CLASS_messages_getWebPagePreview,
	}
}

func (t *TL_messages_getWebPagePreview) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getWebPagePreview))
	ec.String(t.Get_message())

	return ec.GetBuffer()
}

func (t *TL_messages_getWebPagePreview) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_message = dc.String()

	return dc.err
}

func (t *TL_messages_getWebPagePreview) String() string {
	return fmt.Sprintf("- messages_getWebPagePreview#25223e24\n-- message : %v\n", t.M_message)
}

// messages_exportChatInvite#7d885289
type TL_messages_exportChatInvite struct {
	M_classID int32
	M_chat_id int32
}

func (t *TL_messages_exportChatInvite) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_exportChatInvite) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_exportChatInvite) Get_chat_id() int32 {
	return t.M_chat_id
}

func New_TL_messages_exportChatInvite() *TL_messages_exportChatInvite {
	return &TL_messages_exportChatInvite{
		M_classID: TL_CLASS_messages_exportChatInvite,
	}
}

func (t *TL_messages_exportChatInvite) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_exportChatInvite))
	ec.Int(t.Get_chat_id())

	return ec.GetBuffer()
}

func (t *TL_messages_exportChatInvite) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()

	return dc.err
}

func (t *TL_messages_exportChatInvite) String() string {
	return fmt.Sprintf("- messages_exportChatInvite#7d885289\n-- chat_id : %v\n", t.M_chat_id)
}

// messages_checkChatInvite#3eadb1bb
type TL_messages_checkChatInvite struct {
	M_classID int32
	M_hash    string
}

func (t *TL_messages_checkChatInvite) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_checkChatInvite) Set_hash(M_hash string) {
	t.M_hash = M_hash
}

func (t *TL_messages_checkChatInvite) Get_hash() string {
	return t.M_hash
}

func New_TL_messages_checkChatInvite() *TL_messages_checkChatInvite {
	return &TL_messages_checkChatInvite{
		M_classID: TL_CLASS_messages_checkChatInvite,
	}
}

func (t *TL_messages_checkChatInvite) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_checkChatInvite))
	ec.String(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_checkChatInvite) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.String()

	return dc.err
}

func (t *TL_messages_checkChatInvite) String() string {
	return fmt.Sprintf("- messages_checkChatInvite#3eadb1bb\n-- hash : %v\n", t.M_hash)
}

// messages_importChatInvite#6c50051c
type TL_messages_importChatInvite struct {
	M_classID int32
	M_hash    string
}

func (t *TL_messages_importChatInvite) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_importChatInvite) Set_hash(M_hash string) {
	t.M_hash = M_hash
}

func (t *TL_messages_importChatInvite) Get_hash() string {
	return t.M_hash
}

func New_TL_messages_importChatInvite() *TL_messages_importChatInvite {
	return &TL_messages_importChatInvite{
		M_classID: TL_CLASS_messages_importChatInvite,
	}
}

func (t *TL_messages_importChatInvite) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_importChatInvite))
	ec.String(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_importChatInvite) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.String()

	return dc.err
}

func (t *TL_messages_importChatInvite) String() string {
	return fmt.Sprintf("- messages_importChatInvite#6c50051c\n-- hash : %v\n", t.M_hash)
}

// messages_getStickerSet#2619a90e
type TL_messages_getStickerSet struct {
	M_classID    int32
	M_stickerset TLObject
}

func (t *TL_messages_getStickerSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getStickerSet) Set_stickerset(M_stickerset TLObject) {
	t.M_stickerset = M_stickerset
}

func (t *TL_messages_getStickerSet) Get_stickerset() TLObject {
	return t.M_stickerset
}

func New_TL_messages_getStickerSet() *TL_messages_getStickerSet {
	return &TL_messages_getStickerSet{
		M_classID: TL_CLASS_messages_getStickerSet,
	}
}

func (t *TL_messages_getStickerSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getStickerSet))
	ec.TLObject(t.Get_stickerset())

	return ec.GetBuffer()
}

func (t *TL_messages_getStickerSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_stickerset = dc.TLObject()

	return dc.err
}

func (t *TL_messages_getStickerSet) String() string {
	return fmt.Sprintf("- messages_getStickerSet#2619a90e\n-- stickerset : %v\n", t.M_stickerset)
}

// messages_installStickerSet#c78fe460
type TL_messages_installStickerSet struct {
	M_classID    int32
	M_stickerset TLObject
	M_archived   TLObject
}

func (t *TL_messages_installStickerSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_installStickerSet) Set_stickerset(M_stickerset TLObject) {
	t.M_stickerset = M_stickerset
}

func (t *TL_messages_installStickerSet) Get_stickerset() TLObject {
	return t.M_stickerset
}

func (t *TL_messages_installStickerSet) Set_archived(M_archived TLObject) {
	t.M_archived = M_archived
}

func (t *TL_messages_installStickerSet) Get_archived() TLObject {
	return t.M_archived
}

func New_TL_messages_installStickerSet() *TL_messages_installStickerSet {
	return &TL_messages_installStickerSet{
		M_classID: TL_CLASS_messages_installStickerSet,
	}
}

func (t *TL_messages_installStickerSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_installStickerSet))
	ec.TLObject(t.Get_stickerset())
	ec.TLObject(t.Get_archived())

	return ec.GetBuffer()
}

func (t *TL_messages_installStickerSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_stickerset = dc.TLObject()
	t.M_archived = dc.TLObject()

	return dc.err
}

func (t *TL_messages_installStickerSet) String() string {
	return fmt.Sprintf("- messages_installStickerSet#c78fe460\n-- stickerset : %v\n-- archived : %v\n", t.M_stickerset, t.M_archived)
}

// messages_uninstallStickerSet#f96e55de
type TL_messages_uninstallStickerSet struct {
	M_classID    int32
	M_stickerset TLObject
}

func (t *TL_messages_uninstallStickerSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_uninstallStickerSet) Set_stickerset(M_stickerset TLObject) {
	t.M_stickerset = M_stickerset
}

func (t *TL_messages_uninstallStickerSet) Get_stickerset() TLObject {
	return t.M_stickerset
}

func New_TL_messages_uninstallStickerSet() *TL_messages_uninstallStickerSet {
	return &TL_messages_uninstallStickerSet{
		M_classID: TL_CLASS_messages_uninstallStickerSet,
	}
}

func (t *TL_messages_uninstallStickerSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_uninstallStickerSet))
	ec.TLObject(t.Get_stickerset())

	return ec.GetBuffer()
}

func (t *TL_messages_uninstallStickerSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_stickerset = dc.TLObject()

	return dc.err
}

func (t *TL_messages_uninstallStickerSet) String() string {
	return fmt.Sprintf("- messages_uninstallStickerSet#f96e55de\n-- stickerset : %v\n", t.M_stickerset)
}

// messages_startBot#e6df7378
type TL_messages_startBot struct {
	M_classID     int32
	M_bot         TLObject
	M_peer        TLObject
	M_random_id   int64
	M_start_param string
}

func (t *TL_messages_startBot) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_startBot) Set_bot(M_bot TLObject) {
	t.M_bot = M_bot
}

func (t *TL_messages_startBot) Get_bot() TLObject {
	return t.M_bot
}

func (t *TL_messages_startBot) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_startBot) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_startBot) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_startBot) Get_random_id() int64 {
	return t.M_random_id
}

func (t *TL_messages_startBot) Set_start_param(M_start_param string) {
	t.M_start_param = M_start_param
}

func (t *TL_messages_startBot) Get_start_param() string {
	return t.M_start_param
}

func New_TL_messages_startBot() *TL_messages_startBot {
	return &TL_messages_startBot{
		M_classID: TL_CLASS_messages_startBot,
	}
}

func (t *TL_messages_startBot) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_startBot))
	ec.TLObject(t.Get_bot())
	ec.TLObject(t.Get_peer())
	ec.Long(t.Get_random_id())
	ec.String(t.Get_start_param())

	return ec.GetBuffer()
}

func (t *TL_messages_startBot) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_bot = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_random_id = dc.Long()
	t.M_start_param = dc.String()

	return dc.err
}

func (t *TL_messages_startBot) String() string {
	return fmt.Sprintf("- messages_startBot#e6df7378\n-- bot : %v\n-- peer : %v\n-- random_id : %v\n-- start_param : %v\n", t.M_bot, t.M_peer, t.M_random_id, t.M_start_param)
}

// messages_getMessagesViews#c4c8a55d
type TL_messages_getMessagesViews struct {
	M_classID   int32
	M_peer      TLObject
	M_id        []int32
	M_increment TLObject
}

func (t *TL_messages_getMessagesViews) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getMessagesViews) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_getMessagesViews) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_getMessagesViews) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_messages_getMessagesViews) Get_id() []int32 {
	return t.M_id
}

func (t *TL_messages_getMessagesViews) Set_increment(M_increment TLObject) {
	t.M_increment = M_increment
}

func (t *TL_messages_getMessagesViews) Get_increment() TLObject {
	return t.M_increment
}

func New_TL_messages_getMessagesViews() *TL_messages_getMessagesViews {
	return &TL_messages_getMessagesViews{
		M_classID: TL_CLASS_messages_getMessagesViews,
	}
}

func (t *TL_messages_getMessagesViews) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getMessagesViews))
	ec.TLObject(t.Get_peer())
	ec.VectorInt(t.Get_id())
	ec.TLObject(t.Get_increment())

	return ec.GetBuffer()
}

func (t *TL_messages_getMessagesViews) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_id = dc.VectorInt()
	t.M_increment = dc.TLObject()

	return dc.err
}

func (t *TL_messages_getMessagesViews) String() string {
	return fmt.Sprintf("- messages_getMessagesViews#c4c8a55d\n-- peer : %v\n-- id : %v\n-- increment : %v\n", t.M_peer, t.M_id, t.M_increment)
}

// messages_toggleChatAdmins#ec8bd9e1
type TL_messages_toggleChatAdmins struct {
	M_classID int32
	M_chat_id int32
	M_enabled TLObject
}

func (t *TL_messages_toggleChatAdmins) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_toggleChatAdmins) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_toggleChatAdmins) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_messages_toggleChatAdmins) Set_enabled(M_enabled TLObject) {
	t.M_enabled = M_enabled
}

func (t *TL_messages_toggleChatAdmins) Get_enabled() TLObject {
	return t.M_enabled
}

func New_TL_messages_toggleChatAdmins() *TL_messages_toggleChatAdmins {
	return &TL_messages_toggleChatAdmins{
		M_classID: TL_CLASS_messages_toggleChatAdmins,
	}
}

func (t *TL_messages_toggleChatAdmins) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_toggleChatAdmins))
	ec.Int(t.Get_chat_id())
	ec.TLObject(t.Get_enabled())

	return ec.GetBuffer()
}

func (t *TL_messages_toggleChatAdmins) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_enabled = dc.TLObject()

	return dc.err
}

func (t *TL_messages_toggleChatAdmins) String() string {
	return fmt.Sprintf("- messages_toggleChatAdmins#ec8bd9e1\n-- chat_id : %v\n-- enabled : %v\n", t.M_chat_id, t.M_enabled)
}

// messages_editChatAdmin#a9e69f2e
type TL_messages_editChatAdmin struct {
	M_classID  int32
	M_chat_id  int32
	M_user_id  TLObject
	M_is_admin TLObject
}

func (t *TL_messages_editChatAdmin) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_editChatAdmin) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_editChatAdmin) Get_chat_id() int32 {
	return t.M_chat_id
}

func (t *TL_messages_editChatAdmin) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_messages_editChatAdmin) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_messages_editChatAdmin) Set_is_admin(M_is_admin TLObject) {
	t.M_is_admin = M_is_admin
}

func (t *TL_messages_editChatAdmin) Get_is_admin() TLObject {
	return t.M_is_admin
}

func New_TL_messages_editChatAdmin() *TL_messages_editChatAdmin {
	return &TL_messages_editChatAdmin{
		M_classID: TL_CLASS_messages_editChatAdmin,
	}
}

func (t *TL_messages_editChatAdmin) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_editChatAdmin))
	ec.Int(t.Get_chat_id())
	ec.TLObject(t.Get_user_id())
	ec.TLObject(t.Get_is_admin())

	return ec.GetBuffer()
}

func (t *TL_messages_editChatAdmin) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()
	t.M_user_id = dc.TLObject()
	t.M_is_admin = dc.TLObject()

	return dc.err
}

func (t *TL_messages_editChatAdmin) String() string {
	return fmt.Sprintf("- messages_editChatAdmin#a9e69f2e\n-- chat_id : %v\n-- user_id : %v\n-- is_admin : %v\n", t.M_chat_id, t.M_user_id, t.M_is_admin)
}

// messages_migrateChat#15a3b8e3
type TL_messages_migrateChat struct {
	M_classID int32
	M_chat_id int32
}

func (t *TL_messages_migrateChat) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_migrateChat) Set_chat_id(M_chat_id int32) {
	t.M_chat_id = M_chat_id
}

func (t *TL_messages_migrateChat) Get_chat_id() int32 {
	return t.M_chat_id
}

func New_TL_messages_migrateChat() *TL_messages_migrateChat {
	return &TL_messages_migrateChat{
		M_classID: TL_CLASS_messages_migrateChat,
	}
}

func (t *TL_messages_migrateChat) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_migrateChat))
	ec.Int(t.Get_chat_id())

	return ec.GetBuffer()
}

func (t *TL_messages_migrateChat) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_chat_id = dc.Int()

	return dc.err
}

func (t *TL_messages_migrateChat) String() string {
	return fmt.Sprintf("- messages_migrateChat#15a3b8e3\n-- chat_id : %v\n", t.M_chat_id)
}

// messages_searchGlobal#9e3cacb0
type TL_messages_searchGlobal struct {
	M_classID     int32
	M_q           string
	M_offset_date int32
	M_offset_peer TLObject
	M_offset_id   int32
	M_limit       int32
}

func (t *TL_messages_searchGlobal) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_searchGlobal) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_messages_searchGlobal) Get_q() string {
	return t.M_q
}

func (t *TL_messages_searchGlobal) Set_offset_date(M_offset_date int32) {
	t.M_offset_date = M_offset_date
}

func (t *TL_messages_searchGlobal) Get_offset_date() int32 {
	return t.M_offset_date
}

func (t *TL_messages_searchGlobal) Set_offset_peer(M_offset_peer TLObject) {
	t.M_offset_peer = M_offset_peer
}

func (t *TL_messages_searchGlobal) Get_offset_peer() TLObject {
	return t.M_offset_peer
}

func (t *TL_messages_searchGlobal) Set_offset_id(M_offset_id int32) {
	t.M_offset_id = M_offset_id
}

func (t *TL_messages_searchGlobal) Get_offset_id() int32 {
	return t.M_offset_id
}

func (t *TL_messages_searchGlobal) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_messages_searchGlobal) Get_limit() int32 {
	return t.M_limit
}

func New_TL_messages_searchGlobal() *TL_messages_searchGlobal {
	return &TL_messages_searchGlobal{
		M_classID: TL_CLASS_messages_searchGlobal,
	}
}

func (t *TL_messages_searchGlobal) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_searchGlobal))
	ec.String(t.Get_q())
	ec.Int(t.Get_offset_date())
	ec.TLObject(t.Get_offset_peer())
	ec.Int(t.Get_offset_id())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_messages_searchGlobal) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_q = dc.String()
	t.M_offset_date = dc.Int()
	t.M_offset_peer = dc.TLObject()
	t.M_offset_id = dc.Int()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_messages_searchGlobal) String() string {
	return fmt.Sprintf("- messages_searchGlobal#9e3cacb0\n-- q : %v\n-- offset_date : %v\n-- offset_peer : %v\n-- offset_id : %v\n-- limit : %v\n", t.M_q, t.M_offset_date, t.M_offset_peer, t.M_offset_id, t.M_limit)
}

// messages_reorderStickerSets#78337739
type TL_messages_reorderStickerSets struct {
	M_classID int32
	M_flags   TLObject
	M_masks   TLObject
	M_order   []int64
}

func (t *TL_messages_reorderStickerSets) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_reorderStickerSets) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_reorderStickerSets) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_reorderStickerSets) Set_masks(M_masks TLObject) {
	t.M_masks = M_masks
}

func (t *TL_messages_reorderStickerSets) Get_masks() TLObject {
	return t.M_masks
}

func (t *TL_messages_reorderStickerSets) Set_order(M_order []int64) {
	t.M_order = M_order
}

func (t *TL_messages_reorderStickerSets) Get_order() []int64 {
	return t.M_order
}

func New_TL_messages_reorderStickerSets() *TL_messages_reorderStickerSets {
	return &TL_messages_reorderStickerSets{
		M_classID: TL_CLASS_messages_reorderStickerSets,
	}
}

func (t *TL_messages_reorderStickerSets) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_reorderStickerSets))
	ec.TLObject(t.Get_masks())
	ec.VectorLong(t.Get_order())

	return ec.GetBuffer()
}

func (t *TL_messages_reorderStickerSets) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_masks = dc.TLObject()
	t.M_order = dc.VectorLong()

	return dc.err
}

func (t *TL_messages_reorderStickerSets) String() string {
	return fmt.Sprintf("- messages_reorderStickerSets#78337739\n-- flags : %v\n-- masks : %v\n-- order : %v\n", t.M_flags, t.M_masks, t.M_order)
}

// messages_getDocumentByHash#338e2464
type TL_messages_getDocumentByHash struct {
	M_classID   int32
	M_sha256    TLObject
	M_size      int32
	M_mime_type string
}

func (t *TL_messages_getDocumentByHash) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getDocumentByHash) Set_sha256(M_sha256 TLObject) {
	t.M_sha256 = M_sha256
}

func (t *TL_messages_getDocumentByHash) Get_sha256() TLObject {
	return t.M_sha256
}

func (t *TL_messages_getDocumentByHash) Set_size(M_size int32) {
	t.M_size = M_size
}

func (t *TL_messages_getDocumentByHash) Get_size() int32 {
	return t.M_size
}

func (t *TL_messages_getDocumentByHash) Set_mime_type(M_mime_type string) {
	t.M_mime_type = M_mime_type
}

func (t *TL_messages_getDocumentByHash) Get_mime_type() string {
	return t.M_mime_type
}

func New_TL_messages_getDocumentByHash() *TL_messages_getDocumentByHash {
	return &TL_messages_getDocumentByHash{
		M_classID: TL_CLASS_messages_getDocumentByHash,
	}
}

func (t *TL_messages_getDocumentByHash) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getDocumentByHash))
	ec.TLObject(t.Get_sha256())
	ec.Int(t.Get_size())
	ec.String(t.Get_mime_type())

	return ec.GetBuffer()
}

func (t *TL_messages_getDocumentByHash) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_sha256 = dc.TLObject()
	t.M_size = dc.Int()
	t.M_mime_type = dc.String()

	return dc.err
}

func (t *TL_messages_getDocumentByHash) String() string {
	return fmt.Sprintf("- messages_getDocumentByHash#338e2464\n-- sha256 : %v\n-- size : %v\n-- mime_type : %v\n", t.M_sha256, t.M_size, t.M_mime_type)
}

// messages_searchGifs#bf9a776b
type TL_messages_searchGifs struct {
	M_classID int32
	M_q       string
	M_offset  int32
}

func (t *TL_messages_searchGifs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_searchGifs) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_messages_searchGifs) Get_q() string {
	return t.M_q
}

func (t *TL_messages_searchGifs) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_messages_searchGifs) Get_offset() int32 {
	return t.M_offset
}

func New_TL_messages_searchGifs() *TL_messages_searchGifs {
	return &TL_messages_searchGifs{
		M_classID: TL_CLASS_messages_searchGifs,
	}
}

func (t *TL_messages_searchGifs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_searchGifs))
	ec.String(t.Get_q())
	ec.Int(t.Get_offset())

	return ec.GetBuffer()
}

func (t *TL_messages_searchGifs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_q = dc.String()
	t.M_offset = dc.Int()

	return dc.err
}

func (t *TL_messages_searchGifs) String() string {
	return fmt.Sprintf("- messages_searchGifs#bf9a776b\n-- q : %v\n-- offset : %v\n", t.M_q, t.M_offset)
}

// messages_getSavedGifs#83bf3d52
type TL_messages_getSavedGifs struct {
	M_classID int32
	M_hash    int32
}

func (t *TL_messages_getSavedGifs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getSavedGifs) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_getSavedGifs) Get_hash() int32 {
	return t.M_hash
}

func New_TL_messages_getSavedGifs() *TL_messages_getSavedGifs {
	return &TL_messages_getSavedGifs{
		M_classID: TL_CLASS_messages_getSavedGifs,
	}
}

func (t *TL_messages_getSavedGifs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getSavedGifs))
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_getSavedGifs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_messages_getSavedGifs) String() string {
	return fmt.Sprintf("- messages_getSavedGifs#83bf3d52\n-- hash : %v\n", t.M_hash)
}

// messages_saveGif#327a30cb
type TL_messages_saveGif struct {
	M_classID int32
	M_id      TLObject
	M_unsave  TLObject
}

func (t *TL_messages_saveGif) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_saveGif) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_messages_saveGif) Get_id() TLObject {
	return t.M_id
}

func (t *TL_messages_saveGif) Set_unsave(M_unsave TLObject) {
	t.M_unsave = M_unsave
}

func (t *TL_messages_saveGif) Get_unsave() TLObject {
	return t.M_unsave
}

func New_TL_messages_saveGif() *TL_messages_saveGif {
	return &TL_messages_saveGif{
		M_classID: TL_CLASS_messages_saveGif,
	}
}

func (t *TL_messages_saveGif) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_saveGif))
	ec.TLObject(t.Get_id())
	ec.TLObject(t.Get_unsave())

	return ec.GetBuffer()
}

func (t *TL_messages_saveGif) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()
	t.M_unsave = dc.TLObject()

	return dc.err
}

func (t *TL_messages_saveGif) String() string {
	return fmt.Sprintf("- messages_saveGif#327a30cb\n-- id : %v\n-- unsave : %v\n", t.M_id, t.M_unsave)
}

// messages_getInlineBotResults#514e999d
type TL_messages_getInlineBotResults struct {
	M_classID   int32
	M_flags     TLObject
	M_bot       TLObject
	M_peer      TLObject
	M_geo_point TLObject
	M_query     string
	M_offset    string
}

func (t *TL_messages_getInlineBotResults) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getInlineBotResults) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_getInlineBotResults) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_getInlineBotResults) Set_bot(M_bot TLObject) {
	t.M_bot = M_bot
}

func (t *TL_messages_getInlineBotResults) Get_bot() TLObject {
	return t.M_bot
}

func (t *TL_messages_getInlineBotResults) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_getInlineBotResults) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_getInlineBotResults) Set_geo_point(M_geo_point TLObject) {
	t.M_geo_point = M_geo_point
}

func (t *TL_messages_getInlineBotResults) Get_geo_point() TLObject {
	return t.M_geo_point
}

func (t *TL_messages_getInlineBotResults) Set_query(M_query string) {
	t.M_query = M_query
}

func (t *TL_messages_getInlineBotResults) Get_query() string {
	return t.M_query
}

func (t *TL_messages_getInlineBotResults) Set_offset(M_offset string) {
	t.M_offset = M_offset
}

func (t *TL_messages_getInlineBotResults) Get_offset() string {
	return t.M_offset
}

func New_TL_messages_getInlineBotResults() *TL_messages_getInlineBotResults {
	return &TL_messages_getInlineBotResults{
		M_classID: TL_CLASS_messages_getInlineBotResults,
	}
}

func (t *TL_messages_getInlineBotResults) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getInlineBotResults))
	ec.TLObject(t.Get_bot())
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_geo_point())
	ec.String(t.Get_query())
	ec.String(t.Get_offset())

	return ec.GetBuffer()
}

func (t *TL_messages_getInlineBotResults) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_bot = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_geo_point = dc.TLObject()
	t.M_query = dc.String()
	t.M_offset = dc.String()

	return dc.err
}

func (t *TL_messages_getInlineBotResults) String() string {
	return fmt.Sprintf("- messages_getInlineBotResults#514e999d\n-- flags : %v\n-- bot : %v\n-- peer : %v\n-- geo_point : %v\n-- query : %v\n-- offset : %v\n", t.M_flags, t.M_bot, t.M_peer, t.M_geo_point, t.M_query, t.M_offset)
}

// messages_setInlineBotResults#eb5ea206
type TL_messages_setInlineBotResults struct {
	M_classID     int32
	M_flags       TLObject
	M_gallery     TLObject
	M_private     TLObject
	M_query_id    int64
	M_results     []TLObject
	M_cache_time  int32
	M_next_offset TLObject
	M_switch_pm   TLObject
}

func (t *TL_messages_setInlineBotResults) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_setInlineBotResults) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_setInlineBotResults) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_setInlineBotResults) Set_gallery(M_gallery TLObject) {
	t.M_gallery = M_gallery
}

func (t *TL_messages_setInlineBotResults) Get_gallery() TLObject {
	return t.M_gallery
}

func (t *TL_messages_setInlineBotResults) Set_private(M_private TLObject) {
	t.M_private = M_private
}

func (t *TL_messages_setInlineBotResults) Get_private() TLObject {
	return t.M_private
}

func (t *TL_messages_setInlineBotResults) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_messages_setInlineBotResults) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_messages_setInlineBotResults) Set_results(M_results []TLObject) {
	t.M_results = M_results
}

func (t *TL_messages_setInlineBotResults) Get_results() []TLObject {
	return t.M_results
}

func (t *TL_messages_setInlineBotResults) Set_cache_time(M_cache_time int32) {
	t.M_cache_time = M_cache_time
}

func (t *TL_messages_setInlineBotResults) Get_cache_time() int32 {
	return t.M_cache_time
}

func (t *TL_messages_setInlineBotResults) Set_next_offset(M_next_offset TLObject) {
	t.M_next_offset = M_next_offset
}

func (t *TL_messages_setInlineBotResults) Get_next_offset() TLObject {
	return t.M_next_offset
}

func (t *TL_messages_setInlineBotResults) Set_switch_pm(M_switch_pm TLObject) {
	t.M_switch_pm = M_switch_pm
}

func (t *TL_messages_setInlineBotResults) Get_switch_pm() TLObject {
	return t.M_switch_pm
}

func New_TL_messages_setInlineBotResults() *TL_messages_setInlineBotResults {
	return &TL_messages_setInlineBotResults{
		M_classID: TL_CLASS_messages_setInlineBotResults,
	}
}

func (t *TL_messages_setInlineBotResults) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_setInlineBotResults))
	ec.TLObject(t.Get_gallery())
	ec.TLObject(t.Get_private())
	ec.Long(t.Get_query_id())
	ec.Vector(t.Get_results())
	ec.Int(t.Get_cache_time())
	ec.TLObject(t.Get_next_offset())
	ec.TLObject(t.Get_switch_pm())

	return ec.GetBuffer()
}

func (t *TL_messages_setInlineBotResults) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_gallery = dc.TLObject()
	t.M_private = dc.TLObject()
	t.M_query_id = dc.Long()
	t.M_results = dc.Vector()
	t.M_cache_time = dc.Int()
	t.M_next_offset = dc.TLObject()
	t.M_switch_pm = dc.TLObject()

	return dc.err
}

func (t *TL_messages_setInlineBotResults) String() string {
	return fmt.Sprintf("- messages_setInlineBotResults#eb5ea206\n-- flags : %v\n-- gallery : %v\n-- private : %v\n-- query_id : %v\n-- results : %v\n-- cache_time : %v\n-- next_offset : %v\n-- switch_pm : %v\n", t.M_flags, t.M_gallery, t.M_private, t.M_query_id, t.M_results, t.M_cache_time, t.M_next_offset, t.M_switch_pm)
}

// messages_sendInlineBotResult#b16e06fe
type TL_messages_sendInlineBotResult struct {
	M_classID         int32
	M_flags           TLObject
	M_silent          TLObject
	M_background      TLObject
	M_clear_draft     TLObject
	M_peer            TLObject
	M_reply_to_msg_id TLObject
	M_random_id       int64
	M_query_id        int64
	M_id              string
}

func (t *TL_messages_sendInlineBotResult) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sendInlineBotResult) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_sendInlineBotResult) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_sendInlineBotResult) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_messages_sendInlineBotResult) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_messages_sendInlineBotResult) Set_background(M_background TLObject) {
	t.M_background = M_background
}

func (t *TL_messages_sendInlineBotResult) Get_background() TLObject {
	return t.M_background
}

func (t *TL_messages_sendInlineBotResult) Set_clear_draft(M_clear_draft TLObject) {
	t.M_clear_draft = M_clear_draft
}

func (t *TL_messages_sendInlineBotResult) Get_clear_draft() TLObject {
	return t.M_clear_draft
}

func (t *TL_messages_sendInlineBotResult) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_sendInlineBotResult) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_sendInlineBotResult) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_messages_sendInlineBotResult) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_messages_sendInlineBotResult) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_sendInlineBotResult) Get_random_id() int64 {
	return t.M_random_id
}

func (t *TL_messages_sendInlineBotResult) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_messages_sendInlineBotResult) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_messages_sendInlineBotResult) Set_id(M_id string) {
	t.M_id = M_id
}

func (t *TL_messages_sendInlineBotResult) Get_id() string {
	return t.M_id
}

func New_TL_messages_sendInlineBotResult() *TL_messages_sendInlineBotResult {
	return &TL_messages_sendInlineBotResult{
		M_classID: TL_CLASS_messages_sendInlineBotResult,
	}
}

func (t *TL_messages_sendInlineBotResult) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sendInlineBotResult))
	ec.TLObject(t.Get_silent())
	ec.TLObject(t.Get_background())
	ec.TLObject(t.Get_clear_draft())
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.Long(t.Get_random_id())
	ec.Long(t.Get_query_id())
	ec.String(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_messages_sendInlineBotResult) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_silent = dc.TLObject()
	t.M_background = dc.TLObject()
	t.M_clear_draft = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_random_id = dc.Long()
	t.M_query_id = dc.Long()
	t.M_id = dc.String()

	return dc.err
}

func (t *TL_messages_sendInlineBotResult) String() string {
	return fmt.Sprintf("- messages_sendInlineBotResult#b16e06fe\n-- flags : %v\n-- silent : %v\n-- background : %v\n-- clear_draft : %v\n-- peer : %v\n-- reply_to_msg_id : %v\n-- random_id : %v\n-- query_id : %v\n-- id : %v\n", t.M_flags, t.M_silent, t.M_background, t.M_clear_draft, t.M_peer, t.M_reply_to_msg_id, t.M_random_id, t.M_query_id, t.M_id)
}

// messages_getMessageEditData#fda68d36
type TL_messages_getMessageEditData struct {
	M_classID int32
	M_peer    TLObject
	M_id      int32
}

func (t *TL_messages_getMessageEditData) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getMessageEditData) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_getMessageEditData) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_getMessageEditData) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_messages_getMessageEditData) Get_id() int32 {
	return t.M_id
}

func New_TL_messages_getMessageEditData() *TL_messages_getMessageEditData {
	return &TL_messages_getMessageEditData{
		M_classID: TL_CLASS_messages_getMessageEditData,
	}
}

func (t *TL_messages_getMessageEditData) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getMessageEditData))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_messages_getMessageEditData) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_id = dc.Int()

	return dc.err
}

func (t *TL_messages_getMessageEditData) String() string {
	return fmt.Sprintf("- messages_getMessageEditData#fda68d36\n-- peer : %v\n-- id : %v\n", t.M_peer, t.M_id)
}

// messages_editMessage#5d1b8dd
type TL_messages_editMessage struct {
	M_classID       int32
	M_flags         TLObject
	M_no_webpage    TLObject
	M_stop_geo_live TLObject
	M_peer          TLObject
	M_id            int32
	M_message       TLObject
	M_reply_markup  TLObject
	M_entities      []TLObject
	M_geo_point     TLObject
}

func (t *TL_messages_editMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_editMessage) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_editMessage) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_editMessage) Set_no_webpage(M_no_webpage TLObject) {
	t.M_no_webpage = M_no_webpage
}

func (t *TL_messages_editMessage) Get_no_webpage() TLObject {
	return t.M_no_webpage
}

func (t *TL_messages_editMessage) Set_stop_geo_live(M_stop_geo_live TLObject) {
	t.M_stop_geo_live = M_stop_geo_live
}

func (t *TL_messages_editMessage) Get_stop_geo_live() TLObject {
	return t.M_stop_geo_live
}

func (t *TL_messages_editMessage) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_editMessage) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_editMessage) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_messages_editMessage) Get_id() int32 {
	return t.M_id
}

func (t *TL_messages_editMessage) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_messages_editMessage) Get_message() TLObject {
	return t.M_message
}

func (t *TL_messages_editMessage) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_messages_editMessage) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func (t *TL_messages_editMessage) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_messages_editMessage) Get_entities() []TLObject {
	return t.M_entities
}

func (t *TL_messages_editMessage) Set_geo_point(M_geo_point TLObject) {
	t.M_geo_point = M_geo_point
}

func (t *TL_messages_editMessage) Get_geo_point() TLObject {
	return t.M_geo_point
}

func New_TL_messages_editMessage() *TL_messages_editMessage {
	return &TL_messages_editMessage{
		M_classID: TL_CLASS_messages_editMessage,
	}
}

func (t *TL_messages_editMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_editMessage))
	ec.TLObject(t.Get_no_webpage())
	ec.TLObject(t.Get_stop_geo_live())
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_message())
	ec.TLObject(t.Get_reply_markup())
	ec.Vector(t.Get_entities())
	ec.TLObject(t.Get_geo_point())

	return ec.GetBuffer()
}

func (t *TL_messages_editMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_no_webpage = dc.TLObject()
	t.M_stop_geo_live = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_id = dc.Int()
	t.M_message = dc.TLObject()
	t.M_reply_markup = dc.TLObject()
	t.M_entities = dc.Vector()
	t.M_geo_point = dc.TLObject()

	return dc.err
}

func (t *TL_messages_editMessage) String() string {
	return fmt.Sprintf("- messages_editMessage#5d1b8dd\n-- flags : %v\n-- no_webpage : %v\n-- stop_geo_live : %v\n-- peer : %v\n-- id : %v\n-- message : %v\n-- reply_markup : %v\n-- entities : %v\n-- geo_point : %v\n", t.M_flags, t.M_no_webpage, t.M_stop_geo_live, t.M_peer, t.M_id, t.M_message, t.M_reply_markup, t.M_entities, t.M_geo_point)
}

// messages_editInlineBotMessage#b0e08243
type TL_messages_editInlineBotMessage struct {
	M_classID       int32
	M_flags         TLObject
	M_no_webpage    TLObject
	M_stop_geo_live TLObject
	M_id            TLObject
	M_message       TLObject
	M_reply_markup  TLObject
	M_entities      []TLObject
	M_geo_point     TLObject
}

func (t *TL_messages_editInlineBotMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_editInlineBotMessage) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_editInlineBotMessage) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_editInlineBotMessage) Set_no_webpage(M_no_webpage TLObject) {
	t.M_no_webpage = M_no_webpage
}

func (t *TL_messages_editInlineBotMessage) Get_no_webpage() TLObject {
	return t.M_no_webpage
}

func (t *TL_messages_editInlineBotMessage) Set_stop_geo_live(M_stop_geo_live TLObject) {
	t.M_stop_geo_live = M_stop_geo_live
}

func (t *TL_messages_editInlineBotMessage) Get_stop_geo_live() TLObject {
	return t.M_stop_geo_live
}

func (t *TL_messages_editInlineBotMessage) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_messages_editInlineBotMessage) Get_id() TLObject {
	return t.M_id
}

func (t *TL_messages_editInlineBotMessage) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_messages_editInlineBotMessage) Get_message() TLObject {
	return t.M_message
}

func (t *TL_messages_editInlineBotMessage) Set_reply_markup(M_reply_markup TLObject) {
	t.M_reply_markup = M_reply_markup
}

func (t *TL_messages_editInlineBotMessage) Get_reply_markup() TLObject {
	return t.M_reply_markup
}

func (t *TL_messages_editInlineBotMessage) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_messages_editInlineBotMessage) Get_entities() []TLObject {
	return t.M_entities
}

func (t *TL_messages_editInlineBotMessage) Set_geo_point(M_geo_point TLObject) {
	t.M_geo_point = M_geo_point
}

func (t *TL_messages_editInlineBotMessage) Get_geo_point() TLObject {
	return t.M_geo_point
}

func New_TL_messages_editInlineBotMessage() *TL_messages_editInlineBotMessage {
	return &TL_messages_editInlineBotMessage{
		M_classID: TL_CLASS_messages_editInlineBotMessage,
	}
}

func (t *TL_messages_editInlineBotMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_editInlineBotMessage))
	ec.TLObject(t.Get_no_webpage())
	ec.TLObject(t.Get_stop_geo_live())
	ec.TLObject(t.Get_id())
	ec.TLObject(t.Get_message())
	ec.TLObject(t.Get_reply_markup())
	ec.Vector(t.Get_entities())
	ec.TLObject(t.Get_geo_point())

	return ec.GetBuffer()
}

func (t *TL_messages_editInlineBotMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_no_webpage = dc.TLObject()
	t.M_stop_geo_live = dc.TLObject()
	t.M_id = dc.TLObject()
	t.M_message = dc.TLObject()
	t.M_reply_markup = dc.TLObject()
	t.M_entities = dc.Vector()
	t.M_geo_point = dc.TLObject()

	return dc.err
}

func (t *TL_messages_editInlineBotMessage) String() string {
	return fmt.Sprintf("- messages_editInlineBotMessage#b0e08243\n-- flags : %v\n-- no_webpage : %v\n-- stop_geo_live : %v\n-- id : %v\n-- message : %v\n-- reply_markup : %v\n-- entities : %v\n-- geo_point : %v\n", t.M_flags, t.M_no_webpage, t.M_stop_geo_live, t.M_id, t.M_message, t.M_reply_markup, t.M_entities, t.M_geo_point)
}

// messages_getBotCallbackAnswer#810a9fec
type TL_messages_getBotCallbackAnswer struct {
	M_classID int32
	M_flags   TLObject
	M_game    TLObject
	M_peer    TLObject
	M_msg_id  int32
	M_data    TLObject
}

func (t *TL_messages_getBotCallbackAnswer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getBotCallbackAnswer) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_getBotCallbackAnswer) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_getBotCallbackAnswer) Set_game(M_game TLObject) {
	t.M_game = M_game
}

func (t *TL_messages_getBotCallbackAnswer) Get_game() TLObject {
	return t.M_game
}

func (t *TL_messages_getBotCallbackAnswer) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_getBotCallbackAnswer) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_getBotCallbackAnswer) Set_msg_id(M_msg_id int32) {
	t.M_msg_id = M_msg_id
}

func (t *TL_messages_getBotCallbackAnswer) Get_msg_id() int32 {
	return t.M_msg_id
}

func (t *TL_messages_getBotCallbackAnswer) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_messages_getBotCallbackAnswer) Get_data() TLObject {
	return t.M_data
}

func New_TL_messages_getBotCallbackAnswer() *TL_messages_getBotCallbackAnswer {
	return &TL_messages_getBotCallbackAnswer{
		M_classID: TL_CLASS_messages_getBotCallbackAnswer,
	}
}

func (t *TL_messages_getBotCallbackAnswer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getBotCallbackAnswer))
	ec.TLObject(t.Get_game())
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_msg_id())
	ec.TLObject(t.Get_data())

	return ec.GetBuffer()
}

func (t *TL_messages_getBotCallbackAnswer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_game = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_msg_id = dc.Int()
	t.M_data = dc.TLObject()

	return dc.err
}

func (t *TL_messages_getBotCallbackAnswer) String() string {
	return fmt.Sprintf("- messages_getBotCallbackAnswer#810a9fec\n-- flags : %v\n-- game : %v\n-- peer : %v\n-- msg_id : %v\n-- data : %v\n", t.M_flags, t.M_game, t.M_peer, t.M_msg_id, t.M_data)
}

// messages_setBotCallbackAnswer#d58f130a
type TL_messages_setBotCallbackAnswer struct {
	M_classID    int32
	M_flags      TLObject
	M_alert      TLObject
	M_query_id   int64
	M_message    TLObject
	M_url        TLObject
	M_cache_time int32
}

func (t *TL_messages_setBotCallbackAnswer) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_setBotCallbackAnswer) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_setBotCallbackAnswer) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_setBotCallbackAnswer) Set_alert(M_alert TLObject) {
	t.M_alert = M_alert
}

func (t *TL_messages_setBotCallbackAnswer) Get_alert() TLObject {
	return t.M_alert
}

func (t *TL_messages_setBotCallbackAnswer) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_messages_setBotCallbackAnswer) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_messages_setBotCallbackAnswer) Set_message(M_message TLObject) {
	t.M_message = M_message
}

func (t *TL_messages_setBotCallbackAnswer) Get_message() TLObject {
	return t.M_message
}

func (t *TL_messages_setBotCallbackAnswer) Set_url(M_url TLObject) {
	t.M_url = M_url
}

func (t *TL_messages_setBotCallbackAnswer) Get_url() TLObject {
	return t.M_url
}

func (t *TL_messages_setBotCallbackAnswer) Set_cache_time(M_cache_time int32) {
	t.M_cache_time = M_cache_time
}

func (t *TL_messages_setBotCallbackAnswer) Get_cache_time() int32 {
	return t.M_cache_time
}

func New_TL_messages_setBotCallbackAnswer() *TL_messages_setBotCallbackAnswer {
	return &TL_messages_setBotCallbackAnswer{
		M_classID: TL_CLASS_messages_setBotCallbackAnswer,
	}
}

func (t *TL_messages_setBotCallbackAnswer) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_setBotCallbackAnswer))
	ec.TLObject(t.Get_alert())
	ec.Long(t.Get_query_id())
	ec.TLObject(t.Get_message())
	ec.TLObject(t.Get_url())
	ec.Int(t.Get_cache_time())

	return ec.GetBuffer()
}

func (t *TL_messages_setBotCallbackAnswer) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_alert = dc.TLObject()
	t.M_query_id = dc.Long()
	t.M_message = dc.TLObject()
	t.M_url = dc.TLObject()
	t.M_cache_time = dc.Int()

	return dc.err
}

func (t *TL_messages_setBotCallbackAnswer) String() string {
	return fmt.Sprintf("- messages_setBotCallbackAnswer#d58f130a\n-- flags : %v\n-- alert : %v\n-- query_id : %v\n-- message : %v\n-- url : %v\n-- cache_time : %v\n", t.M_flags, t.M_alert, t.M_query_id, t.M_message, t.M_url, t.M_cache_time)
}

// messages_getPeerDialogs#2d9776b9
type TL_messages_getPeerDialogs struct {
	M_classID int32
	M_peers   []TLObject
}

func (t *TL_messages_getPeerDialogs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getPeerDialogs) Set_peers(M_peers []TLObject) {
	t.M_peers = M_peers
}

func (t *TL_messages_getPeerDialogs) Get_peers() []TLObject {
	return t.M_peers
}

func New_TL_messages_getPeerDialogs() *TL_messages_getPeerDialogs {
	return &TL_messages_getPeerDialogs{
		M_classID: TL_CLASS_messages_getPeerDialogs,
	}
}

func (t *TL_messages_getPeerDialogs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getPeerDialogs))
	ec.Vector(t.Get_peers())

	return ec.GetBuffer()
}

func (t *TL_messages_getPeerDialogs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peers = dc.Vector()

	return dc.err
}

func (t *TL_messages_getPeerDialogs) String() string {
	return fmt.Sprintf("- messages_getPeerDialogs#2d9776b9\n-- peers : %v\n", t.M_peers)
}

// messages_saveDraft#bc39e14b
type TL_messages_saveDraft struct {
	M_classID         int32
	M_flags           TLObject
	M_no_webpage      TLObject
	M_reply_to_msg_id TLObject
	M_peer            TLObject
	M_message         string
	M_entities        []TLObject
}

func (t *TL_messages_saveDraft) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_saveDraft) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_saveDraft) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_saveDraft) Set_no_webpage(M_no_webpage TLObject) {
	t.M_no_webpage = M_no_webpage
}

func (t *TL_messages_saveDraft) Get_no_webpage() TLObject {
	return t.M_no_webpage
}

func (t *TL_messages_saveDraft) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_messages_saveDraft) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_messages_saveDraft) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_saveDraft) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_saveDraft) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_messages_saveDraft) Get_message() string {
	return t.M_message
}

func (t *TL_messages_saveDraft) Set_entities(M_entities []TLObject) {
	t.M_entities = M_entities
}

func (t *TL_messages_saveDraft) Get_entities() []TLObject {
	return t.M_entities
}

func New_TL_messages_saveDraft() *TL_messages_saveDraft {
	return &TL_messages_saveDraft{
		M_classID: TL_CLASS_messages_saveDraft,
	}
}

func (t *TL_messages_saveDraft) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_saveDraft))
	ec.TLObject(t.Get_no_webpage())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.TLObject(t.Get_peer())
	ec.String(t.Get_message())
	ec.Vector(t.Get_entities())

	return ec.GetBuffer()
}

func (t *TL_messages_saveDraft) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_no_webpage = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_message = dc.String()
	t.M_entities = dc.Vector()

	return dc.err
}

func (t *TL_messages_saveDraft) String() string {
	return fmt.Sprintf("- messages_saveDraft#bc39e14b\n-- flags : %v\n-- no_webpage : %v\n-- reply_to_msg_id : %v\n-- peer : %v\n-- message : %v\n-- entities : %v\n", t.M_flags, t.M_no_webpage, t.M_reply_to_msg_id, t.M_peer, t.M_message, t.M_entities)
}

// messages_getAllDrafts#6a3f8d65
type TL_messages_getAllDrafts struct {
	M_classID int32
}

func (t *TL_messages_getAllDrafts) ClassID() int32 {
	return t.M_classID
}

func New_TL_messages_getAllDrafts() *TL_messages_getAllDrafts {
	return &TL_messages_getAllDrafts{
		M_classID: TL_CLASS_messages_getAllDrafts,
	}
}

func (t *TL_messages_getAllDrafts) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getAllDrafts))

	return ec.GetBuffer()
}

func (t *TL_messages_getAllDrafts) Decode(b []byte) error {
	return nil
}

func (t *TL_messages_getAllDrafts) String() string {
	return fmt.Sprintf("- messages_getAllDrafts#6a3f8d65\n")
}

// messages_getFeaturedStickers#2dacca4f
type TL_messages_getFeaturedStickers struct {
	M_classID int32
	M_hash    int32
}

func (t *TL_messages_getFeaturedStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getFeaturedStickers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_getFeaturedStickers) Get_hash() int32 {
	return t.M_hash
}

func New_TL_messages_getFeaturedStickers() *TL_messages_getFeaturedStickers {
	return &TL_messages_getFeaturedStickers{
		M_classID: TL_CLASS_messages_getFeaturedStickers,
	}
}

func (t *TL_messages_getFeaturedStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getFeaturedStickers))
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_getFeaturedStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_messages_getFeaturedStickers) String() string {
	return fmt.Sprintf("- messages_getFeaturedStickers#2dacca4f\n-- hash : %v\n", t.M_hash)
}

// messages_readFeaturedStickers#5b118126
type TL_messages_readFeaturedStickers struct {
	M_classID int32
	M_id      []int64
}

func (t *TL_messages_readFeaturedStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_readFeaturedStickers) Set_id(M_id []int64) {
	t.M_id = M_id
}

func (t *TL_messages_readFeaturedStickers) Get_id() []int64 {
	return t.M_id
}

func New_TL_messages_readFeaturedStickers() *TL_messages_readFeaturedStickers {
	return &TL_messages_readFeaturedStickers{
		M_classID: TL_CLASS_messages_readFeaturedStickers,
	}
}

func (t *TL_messages_readFeaturedStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_readFeaturedStickers))
	ec.VectorLong(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_messages_readFeaturedStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.VectorLong()

	return dc.err
}

func (t *TL_messages_readFeaturedStickers) String() string {
	return fmt.Sprintf("- messages_readFeaturedStickers#5b118126\n-- id : %v\n", t.M_id)
}

// messages_getRecentStickers#5ea192c9
type TL_messages_getRecentStickers struct {
	M_classID  int32
	M_flags    TLObject
	M_attached TLObject
	M_hash     int32
}

func (t *TL_messages_getRecentStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getRecentStickers) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_getRecentStickers) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_getRecentStickers) Set_attached(M_attached TLObject) {
	t.M_attached = M_attached
}

func (t *TL_messages_getRecentStickers) Get_attached() TLObject {
	return t.M_attached
}

func (t *TL_messages_getRecentStickers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_getRecentStickers) Get_hash() int32 {
	return t.M_hash
}

func New_TL_messages_getRecentStickers() *TL_messages_getRecentStickers {
	return &TL_messages_getRecentStickers{
		M_classID: TL_CLASS_messages_getRecentStickers,
	}
}

func (t *TL_messages_getRecentStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getRecentStickers))
	ec.TLObject(t.Get_attached())
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_getRecentStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_attached = dc.TLObject()
	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_messages_getRecentStickers) String() string {
	return fmt.Sprintf("- messages_getRecentStickers#5ea192c9\n-- flags : %v\n-- attached : %v\n-- hash : %v\n", t.M_flags, t.M_attached, t.M_hash)
}

// messages_saveRecentSticker#392718f8
type TL_messages_saveRecentSticker struct {
	M_classID  int32
	M_flags    TLObject
	M_attached TLObject
	M_id       TLObject
	M_unsave   TLObject
}

func (t *TL_messages_saveRecentSticker) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_saveRecentSticker) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_saveRecentSticker) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_saveRecentSticker) Set_attached(M_attached TLObject) {
	t.M_attached = M_attached
}

func (t *TL_messages_saveRecentSticker) Get_attached() TLObject {
	return t.M_attached
}

func (t *TL_messages_saveRecentSticker) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_messages_saveRecentSticker) Get_id() TLObject {
	return t.M_id
}

func (t *TL_messages_saveRecentSticker) Set_unsave(M_unsave TLObject) {
	t.M_unsave = M_unsave
}

func (t *TL_messages_saveRecentSticker) Get_unsave() TLObject {
	return t.M_unsave
}

func New_TL_messages_saveRecentSticker() *TL_messages_saveRecentSticker {
	return &TL_messages_saveRecentSticker{
		M_classID: TL_CLASS_messages_saveRecentSticker,
	}
}

func (t *TL_messages_saveRecentSticker) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_saveRecentSticker))
	ec.TLObject(t.Get_attached())
	ec.TLObject(t.Get_id())
	ec.TLObject(t.Get_unsave())

	return ec.GetBuffer()
}

func (t *TL_messages_saveRecentSticker) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_attached = dc.TLObject()
	t.M_id = dc.TLObject()
	t.M_unsave = dc.TLObject()

	return dc.err
}

func (t *TL_messages_saveRecentSticker) String() string {
	return fmt.Sprintf("- messages_saveRecentSticker#392718f8\n-- flags : %v\n-- attached : %v\n-- id : %v\n-- unsave : %v\n", t.M_flags, t.M_attached, t.M_id, t.M_unsave)
}

// messages_clearRecentStickers#8999602d
type TL_messages_clearRecentStickers struct {
	M_classID  int32
	M_flags    TLObject
	M_attached TLObject
}

func (t *TL_messages_clearRecentStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_clearRecentStickers) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_clearRecentStickers) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_clearRecentStickers) Set_attached(M_attached TLObject) {
	t.M_attached = M_attached
}

func (t *TL_messages_clearRecentStickers) Get_attached() TLObject {
	return t.M_attached
}

func New_TL_messages_clearRecentStickers() *TL_messages_clearRecentStickers {
	return &TL_messages_clearRecentStickers{
		M_classID: TL_CLASS_messages_clearRecentStickers,
	}
}

func (t *TL_messages_clearRecentStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_clearRecentStickers))
	ec.TLObject(t.Get_attached())

	return ec.GetBuffer()
}

func (t *TL_messages_clearRecentStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_attached = dc.TLObject()

	return dc.err
}

func (t *TL_messages_clearRecentStickers) String() string {
	return fmt.Sprintf("- messages_clearRecentStickers#8999602d\n-- flags : %v\n-- attached : %v\n", t.M_flags, t.M_attached)
}

// messages_getArchivedStickers#57f17692
type TL_messages_getArchivedStickers struct {
	M_classID   int32
	M_flags     TLObject
	M_masks     TLObject
	M_offset_id int64
	M_limit     int32
}

func (t *TL_messages_getArchivedStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getArchivedStickers) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_getArchivedStickers) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_getArchivedStickers) Set_masks(M_masks TLObject) {
	t.M_masks = M_masks
}

func (t *TL_messages_getArchivedStickers) Get_masks() TLObject {
	return t.M_masks
}

func (t *TL_messages_getArchivedStickers) Set_offset_id(M_offset_id int64) {
	t.M_offset_id = M_offset_id
}

func (t *TL_messages_getArchivedStickers) Get_offset_id() int64 {
	return t.M_offset_id
}

func (t *TL_messages_getArchivedStickers) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_messages_getArchivedStickers) Get_limit() int32 {
	return t.M_limit
}

func New_TL_messages_getArchivedStickers() *TL_messages_getArchivedStickers {
	return &TL_messages_getArchivedStickers{
		M_classID: TL_CLASS_messages_getArchivedStickers,
	}
}

func (t *TL_messages_getArchivedStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getArchivedStickers))
	ec.TLObject(t.Get_masks())
	ec.Long(t.Get_offset_id())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_messages_getArchivedStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_masks = dc.TLObject()
	t.M_offset_id = dc.Long()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_messages_getArchivedStickers) String() string {
	return fmt.Sprintf("- messages_getArchivedStickers#57f17692\n-- flags : %v\n-- masks : %v\n-- offset_id : %v\n-- limit : %v\n", t.M_flags, t.M_masks, t.M_offset_id, t.M_limit)
}

// messages_getMaskStickers#65b8c79f
type TL_messages_getMaskStickers struct {
	M_classID int32
	M_hash    int32
}

func (t *TL_messages_getMaskStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getMaskStickers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_getMaskStickers) Get_hash() int32 {
	return t.M_hash
}

func New_TL_messages_getMaskStickers() *TL_messages_getMaskStickers {
	return &TL_messages_getMaskStickers{
		M_classID: TL_CLASS_messages_getMaskStickers,
	}
}

func (t *TL_messages_getMaskStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getMaskStickers))
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_getMaskStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_messages_getMaskStickers) String() string {
	return fmt.Sprintf("- messages_getMaskStickers#65b8c79f\n-- hash : %v\n", t.M_hash)
}

// messages_getAttachedStickers#cc5b67cc
type TL_messages_getAttachedStickers struct {
	M_classID int32
	M_media   TLObject
}

func (t *TL_messages_getAttachedStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getAttachedStickers) Set_media(M_media TLObject) {
	t.M_media = M_media
}

func (t *TL_messages_getAttachedStickers) Get_media() TLObject {
	return t.M_media
}

func New_TL_messages_getAttachedStickers() *TL_messages_getAttachedStickers {
	return &TL_messages_getAttachedStickers{
		M_classID: TL_CLASS_messages_getAttachedStickers,
	}
}

func (t *TL_messages_getAttachedStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getAttachedStickers))
	ec.TLObject(t.Get_media())

	return ec.GetBuffer()
}

func (t *TL_messages_getAttachedStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_media = dc.TLObject()

	return dc.err
}

func (t *TL_messages_getAttachedStickers) String() string {
	return fmt.Sprintf("- messages_getAttachedStickers#cc5b67cc\n-- media : %v\n", t.M_media)
}

// messages_setGameScore#8ef8ecc0
type TL_messages_setGameScore struct {
	M_classID      int32
	M_flags        TLObject
	M_edit_message TLObject
	M_force        TLObject
	M_peer         TLObject
	M_id           int32
	M_user_id      TLObject
	M_score        int32
}

func (t *TL_messages_setGameScore) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_setGameScore) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_setGameScore) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_setGameScore) Set_edit_message(M_edit_message TLObject) {
	t.M_edit_message = M_edit_message
}

func (t *TL_messages_setGameScore) Get_edit_message() TLObject {
	return t.M_edit_message
}

func (t *TL_messages_setGameScore) Set_force(M_force TLObject) {
	t.M_force = M_force
}

func (t *TL_messages_setGameScore) Get_force() TLObject {
	return t.M_force
}

func (t *TL_messages_setGameScore) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_setGameScore) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_setGameScore) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_messages_setGameScore) Get_id() int32 {
	return t.M_id
}

func (t *TL_messages_setGameScore) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_messages_setGameScore) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_messages_setGameScore) Set_score(M_score int32) {
	t.M_score = M_score
}

func (t *TL_messages_setGameScore) Get_score() int32 {
	return t.M_score
}

func New_TL_messages_setGameScore() *TL_messages_setGameScore {
	return &TL_messages_setGameScore{
		M_classID: TL_CLASS_messages_setGameScore,
	}
}

func (t *TL_messages_setGameScore) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_setGameScore))
	ec.TLObject(t.Get_edit_message())
	ec.TLObject(t.Get_force())
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_user_id())
	ec.Int(t.Get_score())

	return ec.GetBuffer()
}

func (t *TL_messages_setGameScore) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_edit_message = dc.TLObject()
	t.M_force = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_id = dc.Int()
	t.M_user_id = dc.TLObject()
	t.M_score = dc.Int()

	return dc.err
}

func (t *TL_messages_setGameScore) String() string {
	return fmt.Sprintf("- messages_setGameScore#8ef8ecc0\n-- flags : %v\n-- edit_message : %v\n-- force : %v\n-- peer : %v\n-- id : %v\n-- user_id : %v\n-- score : %v\n", t.M_flags, t.M_edit_message, t.M_force, t.M_peer, t.M_id, t.M_user_id, t.M_score)
}

// messages_setInlineGameScore#15ad9f64
type TL_messages_setInlineGameScore struct {
	M_classID      int32
	M_flags        TLObject
	M_edit_message TLObject
	M_force        TLObject
	M_id           TLObject
	M_user_id      TLObject
	M_score        int32
}

func (t *TL_messages_setInlineGameScore) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_setInlineGameScore) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_setInlineGameScore) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_setInlineGameScore) Set_edit_message(M_edit_message TLObject) {
	t.M_edit_message = M_edit_message
}

func (t *TL_messages_setInlineGameScore) Get_edit_message() TLObject {
	return t.M_edit_message
}

func (t *TL_messages_setInlineGameScore) Set_force(M_force TLObject) {
	t.M_force = M_force
}

func (t *TL_messages_setInlineGameScore) Get_force() TLObject {
	return t.M_force
}

func (t *TL_messages_setInlineGameScore) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_messages_setInlineGameScore) Get_id() TLObject {
	return t.M_id
}

func (t *TL_messages_setInlineGameScore) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_messages_setInlineGameScore) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_messages_setInlineGameScore) Set_score(M_score int32) {
	t.M_score = M_score
}

func (t *TL_messages_setInlineGameScore) Get_score() int32 {
	return t.M_score
}

func New_TL_messages_setInlineGameScore() *TL_messages_setInlineGameScore {
	return &TL_messages_setInlineGameScore{
		M_classID: TL_CLASS_messages_setInlineGameScore,
	}
}

func (t *TL_messages_setInlineGameScore) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_setInlineGameScore))
	ec.TLObject(t.Get_edit_message())
	ec.TLObject(t.Get_force())
	ec.TLObject(t.Get_id())
	ec.TLObject(t.Get_user_id())
	ec.Int(t.Get_score())

	return ec.GetBuffer()
}

func (t *TL_messages_setInlineGameScore) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_edit_message = dc.TLObject()
	t.M_force = dc.TLObject()
	t.M_id = dc.TLObject()
	t.M_user_id = dc.TLObject()
	t.M_score = dc.Int()

	return dc.err
}

func (t *TL_messages_setInlineGameScore) String() string {
	return fmt.Sprintf("- messages_setInlineGameScore#15ad9f64\n-- flags : %v\n-- edit_message : %v\n-- force : %v\n-- id : %v\n-- user_id : %v\n-- score : %v\n", t.M_flags, t.M_edit_message, t.M_force, t.M_id, t.M_user_id, t.M_score)
}

// messages_getGameHighScores#e822649d
type TL_messages_getGameHighScores struct {
	M_classID int32
	M_peer    TLObject
	M_id      int32
	M_user_id TLObject
}

func (t *TL_messages_getGameHighScores) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getGameHighScores) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_getGameHighScores) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_getGameHighScores) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_messages_getGameHighScores) Get_id() int32 {
	return t.M_id
}

func (t *TL_messages_getGameHighScores) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_messages_getGameHighScores) Get_user_id() TLObject {
	return t.M_user_id
}

func New_TL_messages_getGameHighScores() *TL_messages_getGameHighScores {
	return &TL_messages_getGameHighScores{
		M_classID: TL_CLASS_messages_getGameHighScores,
	}
}

func (t *TL_messages_getGameHighScores) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getGameHighScores))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_id())
	ec.TLObject(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_messages_getGameHighScores) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_id = dc.Int()
	t.M_user_id = dc.TLObject()

	return dc.err
}

func (t *TL_messages_getGameHighScores) String() string {
	return fmt.Sprintf("- messages_getGameHighScores#e822649d\n-- peer : %v\n-- id : %v\n-- user_id : %v\n", t.M_peer, t.M_id, t.M_user_id)
}

// messages_getInlineGameHighScores#f635e1b
type TL_messages_getInlineGameHighScores struct {
	M_classID int32
	M_id      TLObject
	M_user_id TLObject
}

func (t *TL_messages_getInlineGameHighScores) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getInlineGameHighScores) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_messages_getInlineGameHighScores) Get_id() TLObject {
	return t.M_id
}

func (t *TL_messages_getInlineGameHighScores) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_messages_getInlineGameHighScores) Get_user_id() TLObject {
	return t.M_user_id
}

func New_TL_messages_getInlineGameHighScores() *TL_messages_getInlineGameHighScores {
	return &TL_messages_getInlineGameHighScores{
		M_classID: TL_CLASS_messages_getInlineGameHighScores,
	}
}

func (t *TL_messages_getInlineGameHighScores) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getInlineGameHighScores))
	ec.TLObject(t.Get_id())
	ec.TLObject(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_messages_getInlineGameHighScores) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()
	t.M_user_id = dc.TLObject()

	return dc.err
}

func (t *TL_messages_getInlineGameHighScores) String() string {
	return fmt.Sprintf("- messages_getInlineGameHighScores#f635e1b\n-- id : %v\n-- user_id : %v\n", t.M_id, t.M_user_id)
}

// messages_getCommonChats#d0a48c4
type TL_messages_getCommonChats struct {
	M_classID int32
	M_user_id TLObject
	M_max_id  int32
	M_limit   int32
}

func (t *TL_messages_getCommonChats) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getCommonChats) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_messages_getCommonChats) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_messages_getCommonChats) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_messages_getCommonChats) Get_max_id() int32 {
	return t.M_max_id
}

func (t *TL_messages_getCommonChats) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_messages_getCommonChats) Get_limit() int32 {
	return t.M_limit
}

func New_TL_messages_getCommonChats() *TL_messages_getCommonChats {
	return &TL_messages_getCommonChats{
		M_classID: TL_CLASS_messages_getCommonChats,
	}
}

func (t *TL_messages_getCommonChats) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getCommonChats))
	ec.TLObject(t.Get_user_id())
	ec.Int(t.Get_max_id())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_messages_getCommonChats) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.TLObject()
	t.M_max_id = dc.Int()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_messages_getCommonChats) String() string {
	return fmt.Sprintf("- messages_getCommonChats#d0a48c4\n-- user_id : %v\n-- max_id : %v\n-- limit : %v\n", t.M_user_id, t.M_max_id, t.M_limit)
}

// messages_getAllChats#eba80ff0
type TL_messages_getAllChats struct {
	M_classID    int32
	M_except_ids []int32
}

func (t *TL_messages_getAllChats) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getAllChats) Set_except_ids(M_except_ids []int32) {
	t.M_except_ids = M_except_ids
}

func (t *TL_messages_getAllChats) Get_except_ids() []int32 {
	return t.M_except_ids
}

func New_TL_messages_getAllChats() *TL_messages_getAllChats {
	return &TL_messages_getAllChats{
		M_classID: TL_CLASS_messages_getAllChats,
	}
}

func (t *TL_messages_getAllChats) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getAllChats))
	ec.VectorInt(t.Get_except_ids())

	return ec.GetBuffer()
}

func (t *TL_messages_getAllChats) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_except_ids = dc.VectorInt()

	return dc.err
}

func (t *TL_messages_getAllChats) String() string {
	return fmt.Sprintf("- messages_getAllChats#eba80ff0\n-- except_ids : %v\n", t.M_except_ids)
}

// messages_getWebPage#32ca8f91
type TL_messages_getWebPage struct {
	M_classID int32
	M_url     string
	M_hash    int32
}

func (t *TL_messages_getWebPage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getWebPage) Set_url(M_url string) {
	t.M_url = M_url
}

func (t *TL_messages_getWebPage) Get_url() string {
	return t.M_url
}

func (t *TL_messages_getWebPage) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_getWebPage) Get_hash() int32 {
	return t.M_hash
}

func New_TL_messages_getWebPage() *TL_messages_getWebPage {
	return &TL_messages_getWebPage{
		M_classID: TL_CLASS_messages_getWebPage,
	}
}

func (t *TL_messages_getWebPage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getWebPage))
	ec.String(t.Get_url())
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_getWebPage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_url = dc.String()
	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_messages_getWebPage) String() string {
	return fmt.Sprintf("- messages_getWebPage#32ca8f91\n-- url : %v\n-- hash : %v\n", t.M_url, t.M_hash)
}

// messages_toggleDialogPin#3289be6a
type TL_messages_toggleDialogPin struct {
	M_classID int32
	M_flags   TLObject
	M_pinned  TLObject
	M_peer    TLObject
}

func (t *TL_messages_toggleDialogPin) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_toggleDialogPin) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_toggleDialogPin) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_toggleDialogPin) Set_pinned(M_pinned TLObject) {
	t.M_pinned = M_pinned
}

func (t *TL_messages_toggleDialogPin) Get_pinned() TLObject {
	return t.M_pinned
}

func (t *TL_messages_toggleDialogPin) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_toggleDialogPin) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_messages_toggleDialogPin() *TL_messages_toggleDialogPin {
	return &TL_messages_toggleDialogPin{
		M_classID: TL_CLASS_messages_toggleDialogPin,
	}
}

func (t *TL_messages_toggleDialogPin) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_toggleDialogPin))
	ec.TLObject(t.Get_pinned())
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_messages_toggleDialogPin) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pinned = dc.TLObject()
	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_messages_toggleDialogPin) String() string {
	return fmt.Sprintf("- messages_toggleDialogPin#3289be6a\n-- flags : %v\n-- pinned : %v\n-- peer : %v\n", t.M_flags, t.M_pinned, t.M_peer)
}

// messages_reorderPinnedDialogs#959ff644
type TL_messages_reorderPinnedDialogs struct {
	M_classID int32
	M_flags   TLObject
	M_force   TLObject
	M_order   []TLObject
}

func (t *TL_messages_reorderPinnedDialogs) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_reorderPinnedDialogs) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_reorderPinnedDialogs) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_reorderPinnedDialogs) Set_force(M_force TLObject) {
	t.M_force = M_force
}

func (t *TL_messages_reorderPinnedDialogs) Get_force() TLObject {
	return t.M_force
}

func (t *TL_messages_reorderPinnedDialogs) Set_order(M_order []TLObject) {
	t.M_order = M_order
}

func (t *TL_messages_reorderPinnedDialogs) Get_order() []TLObject {
	return t.M_order
}

func New_TL_messages_reorderPinnedDialogs() *TL_messages_reorderPinnedDialogs {
	return &TL_messages_reorderPinnedDialogs{
		M_classID: TL_CLASS_messages_reorderPinnedDialogs,
	}
}

func (t *TL_messages_reorderPinnedDialogs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_reorderPinnedDialogs))
	ec.TLObject(t.Get_force())
	ec.Vector(t.Get_order())

	return ec.GetBuffer()
}

func (t *TL_messages_reorderPinnedDialogs) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_force = dc.TLObject()
	t.M_order = dc.Vector()

	return dc.err
}

func (t *TL_messages_reorderPinnedDialogs) String() string {
	return fmt.Sprintf("- messages_reorderPinnedDialogs#959ff644\n-- flags : %v\n-- force : %v\n-- order : %v\n", t.M_flags, t.M_force, t.M_order)
}

// messages_getPinnedDialogs#e254d64e
type TL_messages_getPinnedDialogs struct {
	M_classID int32
}

func (t *TL_messages_getPinnedDialogs) ClassID() int32 {
	return t.M_classID
}

func New_TL_messages_getPinnedDialogs() *TL_messages_getPinnedDialogs {
	return &TL_messages_getPinnedDialogs{
		M_classID: TL_CLASS_messages_getPinnedDialogs,
	}
}

func (t *TL_messages_getPinnedDialogs) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getPinnedDialogs))

	return ec.GetBuffer()
}

func (t *TL_messages_getPinnedDialogs) Decode(b []byte) error {
	return nil
}

func (t *TL_messages_getPinnedDialogs) String() string {
	return fmt.Sprintf("- messages_getPinnedDialogs#e254d64e\n")
}

// messages_setBotShippingResults#e5f672fa
type TL_messages_setBotShippingResults struct {
	M_classID          int32
	M_flags            TLObject
	M_query_id         int64
	M_error            TLObject
	M_shipping_options []TLObject
}

func (t *TL_messages_setBotShippingResults) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_setBotShippingResults) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_setBotShippingResults) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_setBotShippingResults) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_messages_setBotShippingResults) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_messages_setBotShippingResults) Set_error(M_error TLObject) {
	t.M_error = M_error
}

func (t *TL_messages_setBotShippingResults) Get_error() TLObject {
	return t.M_error
}

func (t *TL_messages_setBotShippingResults) Set_shipping_options(M_shipping_options []TLObject) {
	t.M_shipping_options = M_shipping_options
}

func (t *TL_messages_setBotShippingResults) Get_shipping_options() []TLObject {
	return t.M_shipping_options
}

func New_TL_messages_setBotShippingResults() *TL_messages_setBotShippingResults {
	return &TL_messages_setBotShippingResults{
		M_classID: TL_CLASS_messages_setBotShippingResults,
	}
}

func (t *TL_messages_setBotShippingResults) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_setBotShippingResults))
	ec.Long(t.Get_query_id())
	ec.TLObject(t.Get_error())
	ec.Vector(t.Get_shipping_options())

	return ec.GetBuffer()
}

func (t *TL_messages_setBotShippingResults) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_query_id = dc.Long()
	t.M_error = dc.TLObject()
	t.M_shipping_options = dc.Vector()

	return dc.err
}

func (t *TL_messages_setBotShippingResults) String() string {
	return fmt.Sprintf("- messages_setBotShippingResults#e5f672fa\n-- flags : %v\n-- query_id : %v\n-- error : %v\n-- shipping_options : %v\n", t.M_flags, t.M_query_id, t.M_error, t.M_shipping_options)
}

// messages_setBotPrecheckoutResults#9c2dd95
type TL_messages_setBotPrecheckoutResults struct {
	M_classID  int32
	M_flags    TLObject
	M_success  TLObject
	M_query_id int64
	M_error    TLObject
}

func (t *TL_messages_setBotPrecheckoutResults) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_setBotPrecheckoutResults) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_setBotPrecheckoutResults) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_setBotPrecheckoutResults) Set_success(M_success TLObject) {
	t.M_success = M_success
}

func (t *TL_messages_setBotPrecheckoutResults) Get_success() TLObject {
	return t.M_success
}

func (t *TL_messages_setBotPrecheckoutResults) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_messages_setBotPrecheckoutResults) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_messages_setBotPrecheckoutResults) Set_error(M_error TLObject) {
	t.M_error = M_error
}

func (t *TL_messages_setBotPrecheckoutResults) Get_error() TLObject {
	return t.M_error
}

func New_TL_messages_setBotPrecheckoutResults() *TL_messages_setBotPrecheckoutResults {
	return &TL_messages_setBotPrecheckoutResults{
		M_classID: TL_CLASS_messages_setBotPrecheckoutResults,
	}
}

func (t *TL_messages_setBotPrecheckoutResults) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_setBotPrecheckoutResults))
	ec.TLObject(t.Get_success())
	ec.Long(t.Get_query_id())
	ec.TLObject(t.Get_error())

	return ec.GetBuffer()
}

func (t *TL_messages_setBotPrecheckoutResults) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_success = dc.TLObject()
	t.M_query_id = dc.Long()
	t.M_error = dc.TLObject()

	return dc.err
}

func (t *TL_messages_setBotPrecheckoutResults) String() string {
	return fmt.Sprintf("- messages_setBotPrecheckoutResults#9c2dd95\n-- flags : %v\n-- success : %v\n-- query_id : %v\n-- error : %v\n", t.M_flags, t.M_success, t.M_query_id, t.M_error)
}

// messages_uploadMedia#519bc2b1
type TL_messages_uploadMedia struct {
	M_classID int32
	M_peer    TLObject
	M_media   TLObject
}

func (t *TL_messages_uploadMedia) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_uploadMedia) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_uploadMedia) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_uploadMedia) Set_media(M_media TLObject) {
	t.M_media = M_media
}

func (t *TL_messages_uploadMedia) Get_media() TLObject {
	return t.M_media
}

func New_TL_messages_uploadMedia() *TL_messages_uploadMedia {
	return &TL_messages_uploadMedia{
		M_classID: TL_CLASS_messages_uploadMedia,
	}
}

func (t *TL_messages_uploadMedia) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_uploadMedia))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_media())

	return ec.GetBuffer()
}

func (t *TL_messages_uploadMedia) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_media = dc.TLObject()

	return dc.err
}

func (t *TL_messages_uploadMedia) String() string {
	return fmt.Sprintf("- messages_uploadMedia#519bc2b1\n-- peer : %v\n-- media : %v\n", t.M_peer, t.M_media)
}

// messages_sendScreenshotNotification#c97df020
type TL_messages_sendScreenshotNotification struct {
	M_classID         int32
	M_peer            TLObject
	M_reply_to_msg_id int32
	M_random_id       int64
}

func (t *TL_messages_sendScreenshotNotification) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sendScreenshotNotification) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_sendScreenshotNotification) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_sendScreenshotNotification) Set_reply_to_msg_id(M_reply_to_msg_id int32) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_messages_sendScreenshotNotification) Get_reply_to_msg_id() int32 {
	return t.M_reply_to_msg_id
}

func (t *TL_messages_sendScreenshotNotification) Set_random_id(M_random_id int64) {
	t.M_random_id = M_random_id
}

func (t *TL_messages_sendScreenshotNotification) Get_random_id() int64 {
	return t.M_random_id
}

func New_TL_messages_sendScreenshotNotification() *TL_messages_sendScreenshotNotification {
	return &TL_messages_sendScreenshotNotification{
		M_classID: TL_CLASS_messages_sendScreenshotNotification,
	}
}

func (t *TL_messages_sendScreenshotNotification) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sendScreenshotNotification))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_reply_to_msg_id())
	ec.Long(t.Get_random_id())

	return ec.GetBuffer()
}

func (t *TL_messages_sendScreenshotNotification) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_reply_to_msg_id = dc.Int()
	t.M_random_id = dc.Long()

	return dc.err
}

func (t *TL_messages_sendScreenshotNotification) String() string {
	return fmt.Sprintf("- messages_sendScreenshotNotification#c97df020\n-- peer : %v\n-- reply_to_msg_id : %v\n-- random_id : %v\n", t.M_peer, t.M_reply_to_msg_id, t.M_random_id)
}

// messages_getFavedStickers#21ce0b0e
type TL_messages_getFavedStickers struct {
	M_classID int32
	M_hash    int32
}

func (t *TL_messages_getFavedStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getFavedStickers) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_messages_getFavedStickers) Get_hash() int32 {
	return t.M_hash
}

func New_TL_messages_getFavedStickers() *TL_messages_getFavedStickers {
	return &TL_messages_getFavedStickers{
		M_classID: TL_CLASS_messages_getFavedStickers,
	}
}

func (t *TL_messages_getFavedStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getFavedStickers))
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_messages_getFavedStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_messages_getFavedStickers) String() string {
	return fmt.Sprintf("- messages_getFavedStickers#21ce0b0e\n-- hash : %v\n", t.M_hash)
}

// messages_faveSticker#b9ffc55b
type TL_messages_faveSticker struct {
	M_classID int32
	M_id      TLObject
	M_unfave  TLObject
}

func (t *TL_messages_faveSticker) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_faveSticker) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_messages_faveSticker) Get_id() TLObject {
	return t.M_id
}

func (t *TL_messages_faveSticker) Set_unfave(M_unfave TLObject) {
	t.M_unfave = M_unfave
}

func (t *TL_messages_faveSticker) Get_unfave() TLObject {
	return t.M_unfave
}

func New_TL_messages_faveSticker() *TL_messages_faveSticker {
	return &TL_messages_faveSticker{
		M_classID: TL_CLASS_messages_faveSticker,
	}
}

func (t *TL_messages_faveSticker) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_faveSticker))
	ec.TLObject(t.Get_id())
	ec.TLObject(t.Get_unfave())

	return ec.GetBuffer()
}

func (t *TL_messages_faveSticker) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()
	t.M_unfave = dc.TLObject()

	return dc.err
}

func (t *TL_messages_faveSticker) String() string {
	return fmt.Sprintf("- messages_faveSticker#b9ffc55b\n-- id : %v\n-- unfave : %v\n", t.M_id, t.M_unfave)
}

// messages_getUnreadMentions#46578472
type TL_messages_getUnreadMentions struct {
	M_classID    int32
	M_peer       TLObject
	M_offset_id  int32
	M_add_offset int32
	M_limit      int32
	M_max_id     int32
	M_min_id     int32
}

func (t *TL_messages_getUnreadMentions) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getUnreadMentions) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_getUnreadMentions) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_getUnreadMentions) Set_offset_id(M_offset_id int32) {
	t.M_offset_id = M_offset_id
}

func (t *TL_messages_getUnreadMentions) Get_offset_id() int32 {
	return t.M_offset_id
}

func (t *TL_messages_getUnreadMentions) Set_add_offset(M_add_offset int32) {
	t.M_add_offset = M_add_offset
}

func (t *TL_messages_getUnreadMentions) Get_add_offset() int32 {
	return t.M_add_offset
}

func (t *TL_messages_getUnreadMentions) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_messages_getUnreadMentions) Get_limit() int32 {
	return t.M_limit
}

func (t *TL_messages_getUnreadMentions) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_messages_getUnreadMentions) Get_max_id() int32 {
	return t.M_max_id
}

func (t *TL_messages_getUnreadMentions) Set_min_id(M_min_id int32) {
	t.M_min_id = M_min_id
}

func (t *TL_messages_getUnreadMentions) Get_min_id() int32 {
	return t.M_min_id
}

func New_TL_messages_getUnreadMentions() *TL_messages_getUnreadMentions {
	return &TL_messages_getUnreadMentions{
		M_classID: TL_CLASS_messages_getUnreadMentions,
	}
}

func (t *TL_messages_getUnreadMentions) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getUnreadMentions))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_offset_id())
	ec.Int(t.Get_add_offset())
	ec.Int(t.Get_limit())
	ec.Int(t.Get_max_id())
	ec.Int(t.Get_min_id())

	return ec.GetBuffer()
}

func (t *TL_messages_getUnreadMentions) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_offset_id = dc.Int()
	t.M_add_offset = dc.Int()
	t.M_limit = dc.Int()
	t.M_max_id = dc.Int()
	t.M_min_id = dc.Int()

	return dc.err
}

func (t *TL_messages_getUnreadMentions) String() string {
	return fmt.Sprintf("- messages_getUnreadMentions#46578472\n-- peer : %v\n-- offset_id : %v\n-- add_offset : %v\n-- limit : %v\n-- max_id : %v\n-- min_id : %v\n", t.M_peer, t.M_offset_id, t.M_add_offset, t.M_limit, t.M_max_id, t.M_min_id)
}

// messages_readMentions#f0189d3
type TL_messages_readMentions struct {
	M_classID int32
	M_peer    TLObject
}

func (t *TL_messages_readMentions) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_readMentions) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_readMentions) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_messages_readMentions() *TL_messages_readMentions {
	return &TL_messages_readMentions{
		M_classID: TL_CLASS_messages_readMentions,
	}
}

func (t *TL_messages_readMentions) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_readMentions))
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_messages_readMentions) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_messages_readMentions) String() string {
	return fmt.Sprintf("- messages_readMentions#f0189d3\n-- peer : %v\n", t.M_peer)
}

// messages_getRecentLocations#249431e2
type TL_messages_getRecentLocations struct {
	M_classID int32
	M_peer    TLObject
	M_limit   int32
}

func (t *TL_messages_getRecentLocations) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_getRecentLocations) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_getRecentLocations) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_getRecentLocations) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_messages_getRecentLocations) Get_limit() int32 {
	return t.M_limit
}

func New_TL_messages_getRecentLocations() *TL_messages_getRecentLocations {
	return &TL_messages_getRecentLocations{
		M_classID: TL_CLASS_messages_getRecentLocations,
	}
}

func (t *TL_messages_getRecentLocations) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_getRecentLocations))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_messages_getRecentLocations) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_messages_getRecentLocations) String() string {
	return fmt.Sprintf("- messages_getRecentLocations#249431e2\n-- peer : %v\n-- limit : %v\n", t.M_peer, t.M_limit)
}

// messages_sendMultiMedia#2095512f
type TL_messages_sendMultiMedia struct {
	M_classID         int32
	M_flags           TLObject
	M_silent          TLObject
	M_background      TLObject
	M_clear_draft     TLObject
	M_peer            TLObject
	M_reply_to_msg_id TLObject
	M_multi_media     []TLObject
}

func (t *TL_messages_sendMultiMedia) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_sendMultiMedia) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_messages_sendMultiMedia) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_messages_sendMultiMedia) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_messages_sendMultiMedia) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_messages_sendMultiMedia) Set_background(M_background TLObject) {
	t.M_background = M_background
}

func (t *TL_messages_sendMultiMedia) Get_background() TLObject {
	return t.M_background
}

func (t *TL_messages_sendMultiMedia) Set_clear_draft(M_clear_draft TLObject) {
	t.M_clear_draft = M_clear_draft
}

func (t *TL_messages_sendMultiMedia) Get_clear_draft() TLObject {
	return t.M_clear_draft
}

func (t *TL_messages_sendMultiMedia) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_sendMultiMedia) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_sendMultiMedia) Set_reply_to_msg_id(M_reply_to_msg_id TLObject) {
	t.M_reply_to_msg_id = M_reply_to_msg_id
}

func (t *TL_messages_sendMultiMedia) Get_reply_to_msg_id() TLObject {
	return t.M_reply_to_msg_id
}

func (t *TL_messages_sendMultiMedia) Set_multi_media(M_multi_media []TLObject) {
	t.M_multi_media = M_multi_media
}

func (t *TL_messages_sendMultiMedia) Get_multi_media() []TLObject {
	return t.M_multi_media
}

func New_TL_messages_sendMultiMedia() *TL_messages_sendMultiMedia {
	return &TL_messages_sendMultiMedia{
		M_classID: TL_CLASS_messages_sendMultiMedia,
	}
}

func (t *TL_messages_sendMultiMedia) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_sendMultiMedia))
	ec.TLObject(t.Get_silent())
	ec.TLObject(t.Get_background())
	ec.TLObject(t.Get_clear_draft())
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_reply_to_msg_id())
	ec.Vector(t.Get_multi_media())

	return ec.GetBuffer()
}

func (t *TL_messages_sendMultiMedia) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_silent = dc.TLObject()
	t.M_background = dc.TLObject()
	t.M_clear_draft = dc.TLObject()
	t.M_peer = dc.TLObject()
	t.M_reply_to_msg_id = dc.TLObject()
	t.M_multi_media = dc.Vector()

	return dc.err
}

func (t *TL_messages_sendMultiMedia) String() string {
	return fmt.Sprintf("- messages_sendMultiMedia#2095512f\n-- flags : %v\n-- silent : %v\n-- background : %v\n-- clear_draft : %v\n-- peer : %v\n-- reply_to_msg_id : %v\n-- multi_media : %v\n", t.M_flags, t.M_silent, t.M_background, t.M_clear_draft, t.M_peer, t.M_reply_to_msg_id, t.M_multi_media)
}

// messages_uploadEncryptedFile#5057c497
type TL_messages_uploadEncryptedFile struct {
	M_classID int32
	M_peer    TLObject
	M_file    TLObject
}

func (t *TL_messages_uploadEncryptedFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_messages_uploadEncryptedFile) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_messages_uploadEncryptedFile) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_messages_uploadEncryptedFile) Set_file(M_file TLObject) {
	t.M_file = M_file
}

func (t *TL_messages_uploadEncryptedFile) Get_file() TLObject {
	return t.M_file
}

func New_TL_messages_uploadEncryptedFile() *TL_messages_uploadEncryptedFile {
	return &TL_messages_uploadEncryptedFile{
		M_classID: TL_CLASS_messages_uploadEncryptedFile,
	}
}

func (t *TL_messages_uploadEncryptedFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_messages_uploadEncryptedFile))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_file())

	return ec.GetBuffer()
}

func (t *TL_messages_uploadEncryptedFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_file = dc.TLObject()

	return dc.err
}

func (t *TL_messages_uploadEncryptedFile) String() string {
	return fmt.Sprintf("- messages_uploadEncryptedFile#5057c497\n-- peer : %v\n-- file : %v\n", t.M_peer, t.M_file)
}

// updates_getState#edd4882a
type TL_updates_getState struct {
	M_classID int32
}

func (t *TL_updates_getState) ClassID() int32 {
	return t.M_classID
}

func New_TL_updates_getState() *TL_updates_getState {
	return &TL_updates_getState{
		M_classID: TL_CLASS_updates_getState,
	}
}

func (t *TL_updates_getState) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_getState))

	return ec.GetBuffer()
}

func (t *TL_updates_getState) Decode(b []byte) error {
	return nil
}

func (t *TL_updates_getState) String() string {
	return fmt.Sprintf("- updates_getState#edd4882a\n")
}

// updates_getDifference#25939651
type TL_updates_getDifference struct {
	M_classID         int32
	M_flags           TLObject
	M_pts             int32
	M_pts_total_limit TLObject
	M_date            int32
	M_qts             int32
}

func (t *TL_updates_getDifference) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_getDifference) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updates_getDifference) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updates_getDifference) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updates_getDifference) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updates_getDifference) Set_pts_total_limit(M_pts_total_limit TLObject) {
	t.M_pts_total_limit = M_pts_total_limit
}

func (t *TL_updates_getDifference) Get_pts_total_limit() TLObject {
	return t.M_pts_total_limit
}

func (t *TL_updates_getDifference) Set_date(M_date int32) {
	t.M_date = M_date
}

func (t *TL_updates_getDifference) Get_date() int32 {
	return t.M_date
}

func (t *TL_updates_getDifference) Set_qts(M_qts int32) {
	t.M_qts = M_qts
}

func (t *TL_updates_getDifference) Get_qts() int32 {
	return t.M_qts
}

func New_TL_updates_getDifference() *TL_updates_getDifference {
	return &TL_updates_getDifference{
		M_classID: TL_CLASS_updates_getDifference,
	}
}

func (t *TL_updates_getDifference) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_getDifference))
	ec.Int(t.Get_pts())
	ec.TLObject(t.Get_pts_total_limit())
	ec.Int(t.Get_date())
	ec.Int(t.Get_qts())

	return ec.GetBuffer()
}

func (t *TL_updates_getDifference) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pts = dc.Int()
	t.M_pts_total_limit = dc.TLObject()
	t.M_date = dc.Int()
	t.M_qts = dc.Int()

	return dc.err
}

func (t *TL_updates_getDifference) String() string {
	return fmt.Sprintf("- updates_getDifference#25939651\n-- flags : %v\n-- pts : %v\n-- pts_total_limit : %v\n-- date : %v\n-- qts : %v\n", t.M_flags, t.M_pts, t.M_pts_total_limit, t.M_date, t.M_qts)
}

// updates_getChannelDifference#3173d78
type TL_updates_getChannelDifference struct {
	M_classID int32
	M_flags   TLObject
	M_force   TLObject
	M_channel TLObject
	M_filter  TLObject
	M_pts     int32
	M_limit   int32
}

func (t *TL_updates_getChannelDifference) ClassID() int32 {
	return t.M_classID
}

func (t *TL_updates_getChannelDifference) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_updates_getChannelDifference) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_updates_getChannelDifference) Set_force(M_force TLObject) {
	t.M_force = M_force
}

func (t *TL_updates_getChannelDifference) Get_force() TLObject {
	return t.M_force
}

func (t *TL_updates_getChannelDifference) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_updates_getChannelDifference) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_updates_getChannelDifference) Set_filter(M_filter TLObject) {
	t.M_filter = M_filter
}

func (t *TL_updates_getChannelDifference) Get_filter() TLObject {
	return t.M_filter
}

func (t *TL_updates_getChannelDifference) Set_pts(M_pts int32) {
	t.M_pts = M_pts
}

func (t *TL_updates_getChannelDifference) Get_pts() int32 {
	return t.M_pts
}

func (t *TL_updates_getChannelDifference) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_updates_getChannelDifference) Get_limit() int32 {
	return t.M_limit
}

func New_TL_updates_getChannelDifference() *TL_updates_getChannelDifference {
	return &TL_updates_getChannelDifference{
		M_classID: TL_CLASS_updates_getChannelDifference,
	}
}

func (t *TL_updates_getChannelDifference) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_updates_getChannelDifference))
	ec.TLObject(t.Get_force())
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_filter())
	ec.Int(t.Get_pts())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_updates_getChannelDifference) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_force = dc.TLObject()
	t.M_channel = dc.TLObject()
	t.M_filter = dc.TLObject()
	t.M_pts = dc.Int()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_updates_getChannelDifference) String() string {
	return fmt.Sprintf("- updates_getChannelDifference#3173d78\n-- flags : %v\n-- force : %v\n-- channel : %v\n-- filter : %v\n-- pts : %v\n-- limit : %v\n", t.M_flags, t.M_force, t.M_channel, t.M_filter, t.M_pts, t.M_limit)
}

// photos_updateProfilePhoto#f0bb5152
type TL_photos_updateProfilePhoto struct {
	M_classID int32
	M_id      TLObject
}

func (t *TL_photos_updateProfilePhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photos_updateProfilePhoto) Set_id(M_id TLObject) {
	t.M_id = M_id
}

func (t *TL_photos_updateProfilePhoto) Get_id() TLObject {
	return t.M_id
}

func New_TL_photos_updateProfilePhoto() *TL_photos_updateProfilePhoto {
	return &TL_photos_updateProfilePhoto{
		M_classID: TL_CLASS_photos_updateProfilePhoto,
	}
}

func (t *TL_photos_updateProfilePhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photos_updateProfilePhoto))
	ec.TLObject(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_photos_updateProfilePhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.TLObject()

	return dc.err
}

func (t *TL_photos_updateProfilePhoto) String() string {
	return fmt.Sprintf("- photos_updateProfilePhoto#f0bb5152\n-- id : %v\n", t.M_id)
}

// photos_uploadProfilePhoto#4f32c098
type TL_photos_uploadProfilePhoto struct {
	M_classID int32
	M_file    TLObject
}

func (t *TL_photos_uploadProfilePhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photos_uploadProfilePhoto) Set_file(M_file TLObject) {
	t.M_file = M_file
}

func (t *TL_photos_uploadProfilePhoto) Get_file() TLObject {
	return t.M_file
}

func New_TL_photos_uploadProfilePhoto() *TL_photos_uploadProfilePhoto {
	return &TL_photos_uploadProfilePhoto{
		M_classID: TL_CLASS_photos_uploadProfilePhoto,
	}
}

func (t *TL_photos_uploadProfilePhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photos_uploadProfilePhoto))
	ec.TLObject(t.Get_file())

	return ec.GetBuffer()
}

func (t *TL_photos_uploadProfilePhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_file = dc.TLObject()

	return dc.err
}

func (t *TL_photos_uploadProfilePhoto) String() string {
	return fmt.Sprintf("- photos_uploadProfilePhoto#4f32c098\n-- file : %v\n", t.M_file)
}

// photos_deletePhotos#87cf7f2f
type TL_photos_deletePhotos struct {
	M_classID int32
	M_id      []TLObject
}

func (t *TL_photos_deletePhotos) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photos_deletePhotos) Set_id(M_id []TLObject) {
	t.M_id = M_id
}

func (t *TL_photos_deletePhotos) Get_id() []TLObject {
	return t.M_id
}

func New_TL_photos_deletePhotos() *TL_photos_deletePhotos {
	return &TL_photos_deletePhotos{
		M_classID: TL_CLASS_photos_deletePhotos,
	}
}

func (t *TL_photos_deletePhotos) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photos_deletePhotos))
	ec.Vector(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_photos_deletePhotos) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Vector()

	return dc.err
}

func (t *TL_photos_deletePhotos) String() string {
	return fmt.Sprintf("- photos_deletePhotos#87cf7f2f\n-- id : %v\n", t.M_id)
}

// photos_getUserPhotos#91cd32a8
type TL_photos_getUserPhotos struct {
	M_classID int32
	M_user_id TLObject
	M_offset  int32
	M_max_id  int64
	M_limit   int32
}

func (t *TL_photos_getUserPhotos) ClassID() int32 {
	return t.M_classID
}

func (t *TL_photos_getUserPhotos) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_photos_getUserPhotos) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_photos_getUserPhotos) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_photos_getUserPhotos) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_photos_getUserPhotos) Set_max_id(M_max_id int64) {
	t.M_max_id = M_max_id
}

func (t *TL_photos_getUserPhotos) Get_max_id() int64 {
	return t.M_max_id
}

func (t *TL_photos_getUserPhotos) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_photos_getUserPhotos) Get_limit() int32 {
	return t.M_limit
}

func New_TL_photos_getUserPhotos() *TL_photos_getUserPhotos {
	return &TL_photos_getUserPhotos{
		M_classID: TL_CLASS_photos_getUserPhotos,
	}
}

func (t *TL_photos_getUserPhotos) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_photos_getUserPhotos))
	ec.TLObject(t.Get_user_id())
	ec.Int(t.Get_offset())
	ec.Long(t.Get_max_id())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_photos_getUserPhotos) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.TLObject()
	t.M_offset = dc.Int()
	t.M_max_id = dc.Long()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_photos_getUserPhotos) String() string {
	return fmt.Sprintf("- photos_getUserPhotos#91cd32a8\n-- user_id : %v\n-- offset : %v\n-- max_id : %v\n-- limit : %v\n", t.M_user_id, t.M_offset, t.M_max_id, t.M_limit)
}

// upload_saveFilePart#b304a621
type TL_upload_saveFilePart struct {
	M_classID   int32
	M_file_id   int64
	M_file_part int32
	M_bytes     TLObject
}

func (t *TL_upload_saveFilePart) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_saveFilePart) Set_file_id(M_file_id int64) {
	t.M_file_id = M_file_id
}

func (t *TL_upload_saveFilePart) Get_file_id() int64 {
	return t.M_file_id
}

func (t *TL_upload_saveFilePart) Set_file_part(M_file_part int32) {
	t.M_file_part = M_file_part
}

func (t *TL_upload_saveFilePart) Get_file_part() int32 {
	return t.M_file_part
}

func (t *TL_upload_saveFilePart) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_upload_saveFilePart) Get_bytes() TLObject {
	return t.M_bytes
}

func New_TL_upload_saveFilePart() *TL_upload_saveFilePart {
	return &TL_upload_saveFilePart{
		M_classID: TL_CLASS_upload_saveFilePart,
	}
}

func (t *TL_upload_saveFilePart) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_saveFilePart))
	ec.Long(t.Get_file_id())
	ec.Int(t.Get_file_part())
	ec.TLObject(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_upload_saveFilePart) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_file_id = dc.Long()
	t.M_file_part = dc.Int()
	t.M_bytes = dc.TLObject()

	return dc.err
}

func (t *TL_upload_saveFilePart) String() string {
	return fmt.Sprintf("- upload_saveFilePart#b304a621\n-- file_id : %v\n-- file_part : %v\n-- bytes : %v\n", t.M_file_id, t.M_file_part, t.M_bytes)
}

// upload_getFile#e3a6cfb5
type TL_upload_getFile struct {
	M_classID  int32
	M_location TLObject
	M_offset   int32
	M_limit    int32
}

func (t *TL_upload_getFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_getFile) Set_location(M_location TLObject) {
	t.M_location = M_location
}

func (t *TL_upload_getFile) Get_location() TLObject {
	return t.M_location
}

func (t *TL_upload_getFile) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_upload_getFile) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_upload_getFile) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_upload_getFile) Get_limit() int32 {
	return t.M_limit
}

func New_TL_upload_getFile() *TL_upload_getFile {
	return &TL_upload_getFile{
		M_classID: TL_CLASS_upload_getFile,
	}
}

func (t *TL_upload_getFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_getFile))
	ec.TLObject(t.Get_location())
	ec.Int(t.Get_offset())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_upload_getFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_location = dc.TLObject()
	t.M_offset = dc.Int()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_upload_getFile) String() string {
	return fmt.Sprintf("- upload_getFile#e3a6cfb5\n-- location : %v\n-- offset : %v\n-- limit : %v\n", t.M_location, t.M_offset, t.M_limit)
}

// upload_saveBigFilePart#de7b673d
type TL_upload_saveBigFilePart struct {
	M_classID          int32
	M_file_id          int64
	M_file_part        int32
	M_file_total_parts int32
	M_bytes            TLObject
}

func (t *TL_upload_saveBigFilePart) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_saveBigFilePart) Set_file_id(M_file_id int64) {
	t.M_file_id = M_file_id
}

func (t *TL_upload_saveBigFilePart) Get_file_id() int64 {
	return t.M_file_id
}

func (t *TL_upload_saveBigFilePart) Set_file_part(M_file_part int32) {
	t.M_file_part = M_file_part
}

func (t *TL_upload_saveBigFilePart) Get_file_part() int32 {
	return t.M_file_part
}

func (t *TL_upload_saveBigFilePart) Set_file_total_parts(M_file_total_parts int32) {
	t.M_file_total_parts = M_file_total_parts
}

func (t *TL_upload_saveBigFilePart) Get_file_total_parts() int32 {
	return t.M_file_total_parts
}

func (t *TL_upload_saveBigFilePart) Set_bytes(M_bytes TLObject) {
	t.M_bytes = M_bytes
}

func (t *TL_upload_saveBigFilePart) Get_bytes() TLObject {
	return t.M_bytes
}

func New_TL_upload_saveBigFilePart() *TL_upload_saveBigFilePart {
	return &TL_upload_saveBigFilePart{
		M_classID: TL_CLASS_upload_saveBigFilePart,
	}
}

func (t *TL_upload_saveBigFilePart) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_saveBigFilePart))
	ec.Long(t.Get_file_id())
	ec.Int(t.Get_file_part())
	ec.Int(t.Get_file_total_parts())
	ec.TLObject(t.Get_bytes())

	return ec.GetBuffer()
}

func (t *TL_upload_saveBigFilePart) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_file_id = dc.Long()
	t.M_file_part = dc.Int()
	t.M_file_total_parts = dc.Int()
	t.M_bytes = dc.TLObject()

	return dc.err
}

func (t *TL_upload_saveBigFilePart) String() string {
	return fmt.Sprintf("- upload_saveBigFilePart#de7b673d\n-- file_id : %v\n-- file_part : %v\n-- file_total_parts : %v\n-- bytes : %v\n", t.M_file_id, t.M_file_part, t.M_file_total_parts, t.M_bytes)
}

// upload_getWebFile#24e6818d
type TL_upload_getWebFile struct {
	M_classID  int32
	M_location TLObject
	M_offset   int32
	M_limit    int32
}

func (t *TL_upload_getWebFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_getWebFile) Set_location(M_location TLObject) {
	t.M_location = M_location
}

func (t *TL_upload_getWebFile) Get_location() TLObject {
	return t.M_location
}

func (t *TL_upload_getWebFile) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_upload_getWebFile) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_upload_getWebFile) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_upload_getWebFile) Get_limit() int32 {
	return t.M_limit
}

func New_TL_upload_getWebFile() *TL_upload_getWebFile {
	return &TL_upload_getWebFile{
		M_classID: TL_CLASS_upload_getWebFile,
	}
}

func (t *TL_upload_getWebFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_getWebFile))
	ec.TLObject(t.Get_location())
	ec.Int(t.Get_offset())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_upload_getWebFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_location = dc.TLObject()
	t.M_offset = dc.Int()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_upload_getWebFile) String() string {
	return fmt.Sprintf("- upload_getWebFile#24e6818d\n-- location : %v\n-- offset : %v\n-- limit : %v\n", t.M_location, t.M_offset, t.M_limit)
}

// upload_getCdnFile#2000bcc3
type TL_upload_getCdnFile struct {
	M_classID    int32
	M_file_token TLObject
	M_offset     int32
	M_limit      int32
}

func (t *TL_upload_getCdnFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_getCdnFile) Set_file_token(M_file_token TLObject) {
	t.M_file_token = M_file_token
}

func (t *TL_upload_getCdnFile) Get_file_token() TLObject {
	return t.M_file_token
}

func (t *TL_upload_getCdnFile) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_upload_getCdnFile) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_upload_getCdnFile) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_upload_getCdnFile) Get_limit() int32 {
	return t.M_limit
}

func New_TL_upload_getCdnFile() *TL_upload_getCdnFile {
	return &TL_upload_getCdnFile{
		M_classID: TL_CLASS_upload_getCdnFile,
	}
}

func (t *TL_upload_getCdnFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_getCdnFile))
	ec.TLObject(t.Get_file_token())
	ec.Int(t.Get_offset())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_upload_getCdnFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_file_token = dc.TLObject()
	t.M_offset = dc.Int()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_upload_getCdnFile) String() string {
	return fmt.Sprintf("- upload_getCdnFile#2000bcc3\n-- file_token : %v\n-- offset : %v\n-- limit : %v\n", t.M_file_token, t.M_offset, t.M_limit)
}

// upload_reuploadCdnFile#1af91c09
type TL_upload_reuploadCdnFile struct {
	M_classID       int32
	M_file_token    TLObject
	M_request_token TLObject
}

func (t *TL_upload_reuploadCdnFile) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_reuploadCdnFile) Set_file_token(M_file_token TLObject) {
	t.M_file_token = M_file_token
}

func (t *TL_upload_reuploadCdnFile) Get_file_token() TLObject {
	return t.M_file_token
}

func (t *TL_upload_reuploadCdnFile) Set_request_token(M_request_token TLObject) {
	t.M_request_token = M_request_token
}

func (t *TL_upload_reuploadCdnFile) Get_request_token() TLObject {
	return t.M_request_token
}

func New_TL_upload_reuploadCdnFile() *TL_upload_reuploadCdnFile {
	return &TL_upload_reuploadCdnFile{
		M_classID: TL_CLASS_upload_reuploadCdnFile,
	}
}

func (t *TL_upload_reuploadCdnFile) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_reuploadCdnFile))
	ec.TLObject(t.Get_file_token())
	ec.TLObject(t.Get_request_token())

	return ec.GetBuffer()
}

func (t *TL_upload_reuploadCdnFile) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_file_token = dc.TLObject()
	t.M_request_token = dc.TLObject()

	return dc.err
}

func (t *TL_upload_reuploadCdnFile) String() string {
	return fmt.Sprintf("- upload_reuploadCdnFile#1af91c09\n-- file_token : %v\n-- request_token : %v\n", t.M_file_token, t.M_request_token)
}

// upload_getCdnFileHashes#f715c87b
type TL_upload_getCdnFileHashes struct {
	M_classID    int32
	M_file_token TLObject
	M_offset     int32
}

func (t *TL_upload_getCdnFileHashes) ClassID() int32 {
	return t.M_classID
}

func (t *TL_upload_getCdnFileHashes) Set_file_token(M_file_token TLObject) {
	t.M_file_token = M_file_token
}

func (t *TL_upload_getCdnFileHashes) Get_file_token() TLObject {
	return t.M_file_token
}

func (t *TL_upload_getCdnFileHashes) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_upload_getCdnFileHashes) Get_offset() int32 {
	return t.M_offset
}

func New_TL_upload_getCdnFileHashes() *TL_upload_getCdnFileHashes {
	return &TL_upload_getCdnFileHashes{
		M_classID: TL_CLASS_upload_getCdnFileHashes,
	}
}

func (t *TL_upload_getCdnFileHashes) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_upload_getCdnFileHashes))
	ec.TLObject(t.Get_file_token())
	ec.Int(t.Get_offset())

	return ec.GetBuffer()
}

func (t *TL_upload_getCdnFileHashes) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_file_token = dc.TLObject()
	t.M_offset = dc.Int()

	return dc.err
}

func (t *TL_upload_getCdnFileHashes) String() string {
	return fmt.Sprintf("- upload_getCdnFileHashes#f715c87b\n-- file_token : %v\n-- offset : %v\n", t.M_file_token, t.M_offset)
}

// help_getConfig#c4f9186b
type TL_help_getConfig struct {
	M_classID int32
}

func (t *TL_help_getConfig) ClassID() int32 {
	return t.M_classID
}

func New_TL_help_getConfig() *TL_help_getConfig {
	return &TL_help_getConfig{
		M_classID: TL_CLASS_help_getConfig,
	}
}

func (t *TL_help_getConfig) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getConfig))

	return ec.GetBuffer()
}

func (t *TL_help_getConfig) Decode(b []byte) error {
	return nil
}

func (t *TL_help_getConfig) String() string {
	return fmt.Sprintf("- help_getConfig#c4f9186b\n")
}

// help_getNearestDc#1fb33026
type TL_help_getNearestDc struct {
	M_classID int32
}

func (t *TL_help_getNearestDc) ClassID() int32 {
	return t.M_classID
}

func New_TL_help_getNearestDc() *TL_help_getNearestDc {
	return &TL_help_getNearestDc{
		M_classID: TL_CLASS_help_getNearestDc,
	}
}

func (t *TL_help_getNearestDc) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getNearestDc))

	return ec.GetBuffer()
}

func (t *TL_help_getNearestDc) Decode(b []byte) error {
	return nil
}

func (t *TL_help_getNearestDc) String() string {
	return fmt.Sprintf("- help_getNearestDc#1fb33026\n")
}

// help_getAppUpdate#ae2de196
type TL_help_getAppUpdate struct {
	M_classID int32
}

func (t *TL_help_getAppUpdate) ClassID() int32 {
	return t.M_classID
}

func New_TL_help_getAppUpdate() *TL_help_getAppUpdate {
	return &TL_help_getAppUpdate{
		M_classID: TL_CLASS_help_getAppUpdate,
	}
}

func (t *TL_help_getAppUpdate) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getAppUpdate))

	return ec.GetBuffer()
}

func (t *TL_help_getAppUpdate) Decode(b []byte) error {
	return nil
}

func (t *TL_help_getAppUpdate) String() string {
	return fmt.Sprintf("- help_getAppUpdate#ae2de196\n")
}

// help_saveAppLog#6f02f748
type TL_help_saveAppLog struct {
	M_classID int32
	M_events  []TLObject
}

func (t *TL_help_saveAppLog) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_saveAppLog) Set_events(M_events []TLObject) {
	t.M_events = M_events
}

func (t *TL_help_saveAppLog) Get_events() []TLObject {
	return t.M_events
}

func New_TL_help_saveAppLog() *TL_help_saveAppLog {
	return &TL_help_saveAppLog{
		M_classID: TL_CLASS_help_saveAppLog,
	}
}

func (t *TL_help_saveAppLog) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_saveAppLog))
	ec.Vector(t.Get_events())

	return ec.GetBuffer()
}

func (t *TL_help_saveAppLog) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_events = dc.Vector()

	return dc.err
}

func (t *TL_help_saveAppLog) String() string {
	return fmt.Sprintf("- help_saveAppLog#6f02f748\n-- events : %v\n", t.M_events)
}

// help_getInviteText#4d392343
type TL_help_getInviteText struct {
	M_classID int32
}

func (t *TL_help_getInviteText) ClassID() int32 {
	return t.M_classID
}

func New_TL_help_getInviteText() *TL_help_getInviteText {
	return &TL_help_getInviteText{
		M_classID: TL_CLASS_help_getInviteText,
	}
}

func (t *TL_help_getInviteText) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getInviteText))

	return ec.GetBuffer()
}

func (t *TL_help_getInviteText) Decode(b []byte) error {
	return nil
}

func (t *TL_help_getInviteText) String() string {
	return fmt.Sprintf("- help_getInviteText#4d392343\n")
}

// help_getSupport#9cdf08cd
type TL_help_getSupport struct {
	M_classID int32
}

func (t *TL_help_getSupport) ClassID() int32 {
	return t.M_classID
}

func New_TL_help_getSupport() *TL_help_getSupport {
	return &TL_help_getSupport{
		M_classID: TL_CLASS_help_getSupport,
	}
}

func (t *TL_help_getSupport) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getSupport))

	return ec.GetBuffer()
}

func (t *TL_help_getSupport) Decode(b []byte) error {
	return nil
}

func (t *TL_help_getSupport) String() string {
	return fmt.Sprintf("- help_getSupport#9cdf08cd\n")
}

// help_getAppChangelog#9010ef6f
type TL_help_getAppChangelog struct {
	M_classID          int32
	M_prev_app_version string
}

func (t *TL_help_getAppChangelog) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_getAppChangelog) Set_prev_app_version(M_prev_app_version string) {
	t.M_prev_app_version = M_prev_app_version
}

func (t *TL_help_getAppChangelog) Get_prev_app_version() string {
	return t.M_prev_app_version
}

func New_TL_help_getAppChangelog() *TL_help_getAppChangelog {
	return &TL_help_getAppChangelog{
		M_classID: TL_CLASS_help_getAppChangelog,
	}
}

func (t *TL_help_getAppChangelog) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getAppChangelog))
	ec.String(t.Get_prev_app_version())

	return ec.GetBuffer()
}

func (t *TL_help_getAppChangelog) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_prev_app_version = dc.String()

	return dc.err
}

func (t *TL_help_getAppChangelog) String() string {
	return fmt.Sprintf("- help_getAppChangelog#9010ef6f\n-- prev_app_version : %v\n", t.M_prev_app_version)
}

// help_getTermsOfService#350170f3
type TL_help_getTermsOfService struct {
	M_classID int32
}

func (t *TL_help_getTermsOfService) ClassID() int32 {
	return t.M_classID
}

func New_TL_help_getTermsOfService() *TL_help_getTermsOfService {
	return &TL_help_getTermsOfService{
		M_classID: TL_CLASS_help_getTermsOfService,
	}
}

func (t *TL_help_getTermsOfService) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getTermsOfService))

	return ec.GetBuffer()
}

func (t *TL_help_getTermsOfService) Decode(b []byte) error {
	return nil
}

func (t *TL_help_getTermsOfService) String() string {
	return fmt.Sprintf("- help_getTermsOfService#350170f3\n")
}

// help_setBotUpdatesStatus#ec22cfcd
type TL_help_setBotUpdatesStatus struct {
	M_classID               int32
	M_pending_updates_count int32
	M_message               string
}

func (t *TL_help_setBotUpdatesStatus) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_setBotUpdatesStatus) Set_pending_updates_count(M_pending_updates_count int32) {
	t.M_pending_updates_count = M_pending_updates_count
}

func (t *TL_help_setBotUpdatesStatus) Get_pending_updates_count() int32 {
	return t.M_pending_updates_count
}

func (t *TL_help_setBotUpdatesStatus) Set_message(M_message string) {
	t.M_message = M_message
}

func (t *TL_help_setBotUpdatesStatus) Get_message() string {
	return t.M_message
}

func New_TL_help_setBotUpdatesStatus() *TL_help_setBotUpdatesStatus {
	return &TL_help_setBotUpdatesStatus{
		M_classID: TL_CLASS_help_setBotUpdatesStatus,
	}
}

func (t *TL_help_setBotUpdatesStatus) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_setBotUpdatesStatus))
	ec.Int(t.Get_pending_updates_count())
	ec.String(t.Get_message())

	return ec.GetBuffer()
}

func (t *TL_help_setBotUpdatesStatus) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_pending_updates_count = dc.Int()
	t.M_message = dc.String()

	return dc.err
}

func (t *TL_help_setBotUpdatesStatus) String() string {
	return fmt.Sprintf("- help_setBotUpdatesStatus#ec22cfcd\n-- pending_updates_count : %v\n-- message : %v\n", t.M_pending_updates_count, t.M_message)
}

// help_getCdnConfig#52029342
type TL_help_getCdnConfig struct {
	M_classID int32
}

func (t *TL_help_getCdnConfig) ClassID() int32 {
	return t.M_classID
}

func New_TL_help_getCdnConfig() *TL_help_getCdnConfig {
	return &TL_help_getCdnConfig{
		M_classID: TL_CLASS_help_getCdnConfig,
	}
}

func (t *TL_help_getCdnConfig) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getCdnConfig))

	return ec.GetBuffer()
}

func (t *TL_help_getCdnConfig) Decode(b []byte) error {
	return nil
}

func (t *TL_help_getCdnConfig) String() string {
	return fmt.Sprintf("- help_getCdnConfig#52029342\n")
}

// help_getRecentMeUrls#3dc0f114
type TL_help_getRecentMeUrls struct {
	M_classID int32
	M_referer string
}

func (t *TL_help_getRecentMeUrls) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_getRecentMeUrls) Set_referer(M_referer string) {
	t.M_referer = M_referer
}

func (t *TL_help_getRecentMeUrls) Get_referer() string {
	return t.M_referer
}

func New_TL_help_getRecentMeUrls() *TL_help_getRecentMeUrls {
	return &TL_help_getRecentMeUrls{
		M_classID: TL_CLASS_help_getRecentMeUrls,
	}
}

func (t *TL_help_getRecentMeUrls) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getRecentMeUrls))
	ec.String(t.Get_referer())

	return ec.GetBuffer()
}

func (t *TL_help_getRecentMeUrls) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_referer = dc.String()

	return dc.err
}

func (t *TL_help_getRecentMeUrls) String() string {
	return fmt.Sprintf("- help_getRecentMeUrls#3dc0f114\n-- referer : %v\n", t.M_referer)
}

// channels_readHistory#cc104937
type TL_channels_readHistory struct {
	M_classID int32
	M_channel TLObject
	M_max_id  int32
}

func (t *TL_channels_readHistory) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_readHistory) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_readHistory) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_readHistory) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_channels_readHistory) Get_max_id() int32 {
	return t.M_max_id
}

func New_TL_channels_readHistory() *TL_channels_readHistory {
	return &TL_channels_readHistory{
		M_classID: TL_CLASS_channels_readHistory,
	}
}

func (t *TL_channels_readHistory) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_readHistory))
	ec.TLObject(t.Get_channel())
	ec.Int(t.Get_max_id())

	return ec.GetBuffer()
}

func (t *TL_channels_readHistory) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_max_id = dc.Int()

	return dc.err
}

func (t *TL_channels_readHistory) String() string {
	return fmt.Sprintf("- channels_readHistory#cc104937\n-- channel : %v\n-- max_id : %v\n", t.M_channel, t.M_max_id)
}

// channels_deleteMessages#84c1fd4e
type TL_channels_deleteMessages struct {
	M_classID int32
	M_channel TLObject
	M_id      []int32
}

func (t *TL_channels_deleteMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_deleteMessages) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_deleteMessages) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_deleteMessages) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_channels_deleteMessages) Get_id() []int32 {
	return t.M_id
}

func New_TL_channels_deleteMessages() *TL_channels_deleteMessages {
	return &TL_channels_deleteMessages{
		M_classID: TL_CLASS_channels_deleteMessages,
	}
}

func (t *TL_channels_deleteMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_deleteMessages))
	ec.TLObject(t.Get_channel())
	ec.VectorInt(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_channels_deleteMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_id = dc.VectorInt()

	return dc.err
}

func (t *TL_channels_deleteMessages) String() string {
	return fmt.Sprintf("- channels_deleteMessages#84c1fd4e\n-- channel : %v\n-- id : %v\n", t.M_channel, t.M_id)
}

// channels_deleteUserHistory#d10dd71b
type TL_channels_deleteUserHistory struct {
	M_classID int32
	M_channel TLObject
	M_user_id TLObject
}

func (t *TL_channels_deleteUserHistory) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_deleteUserHistory) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_deleteUserHistory) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_deleteUserHistory) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_channels_deleteUserHistory) Get_user_id() TLObject {
	return t.M_user_id
}

func New_TL_channels_deleteUserHistory() *TL_channels_deleteUserHistory {
	return &TL_channels_deleteUserHistory{
		M_classID: TL_CLASS_channels_deleteUserHistory,
	}
}

func (t *TL_channels_deleteUserHistory) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_deleteUserHistory))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_channels_deleteUserHistory) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_user_id = dc.TLObject()

	return dc.err
}

func (t *TL_channels_deleteUserHistory) String() string {
	return fmt.Sprintf("- channels_deleteUserHistory#d10dd71b\n-- channel : %v\n-- user_id : %v\n", t.M_channel, t.M_user_id)
}

// channels_reportSpam#fe087810
type TL_channels_reportSpam struct {
	M_classID int32
	M_channel TLObject
	M_user_id TLObject
	M_id      []int32
}

func (t *TL_channels_reportSpam) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_reportSpam) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_reportSpam) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_reportSpam) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_channels_reportSpam) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_channels_reportSpam) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_channels_reportSpam) Get_id() []int32 {
	return t.M_id
}

func New_TL_channels_reportSpam() *TL_channels_reportSpam {
	return &TL_channels_reportSpam{
		M_classID: TL_CLASS_channels_reportSpam,
	}
}

func (t *TL_channels_reportSpam) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_reportSpam))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_user_id())
	ec.VectorInt(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_channels_reportSpam) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_user_id = dc.TLObject()
	t.M_id = dc.VectorInt()

	return dc.err
}

func (t *TL_channels_reportSpam) String() string {
	return fmt.Sprintf("- channels_reportSpam#fe087810\n-- channel : %v\n-- user_id : %v\n-- id : %v\n", t.M_channel, t.M_user_id, t.M_id)
}

// channels_getMessages#93d7b347
type TL_channels_getMessages struct {
	M_classID int32
	M_channel TLObject
	M_id      []int32
}

func (t *TL_channels_getMessages) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_getMessages) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_getMessages) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_getMessages) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_channels_getMessages) Get_id() []int32 {
	return t.M_id
}

func New_TL_channels_getMessages() *TL_channels_getMessages {
	return &TL_channels_getMessages{
		M_classID: TL_CLASS_channels_getMessages,
	}
}

func (t *TL_channels_getMessages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_getMessages))
	ec.TLObject(t.Get_channel())
	ec.VectorInt(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_channels_getMessages) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_id = dc.VectorInt()

	return dc.err
}

func (t *TL_channels_getMessages) String() string {
	return fmt.Sprintf("- channels_getMessages#93d7b347\n-- channel : %v\n-- id : %v\n", t.M_channel, t.M_id)
}

// channels_getParticipants#123e05e9
type TL_channels_getParticipants struct {
	M_classID int32
	M_channel TLObject
	M_filter  TLObject
	M_offset  int32
	M_limit   int32
	M_hash    int32
}

func (t *TL_channels_getParticipants) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_getParticipants) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_getParticipants) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_getParticipants) Set_filter(M_filter TLObject) {
	t.M_filter = M_filter
}

func (t *TL_channels_getParticipants) Get_filter() TLObject {
	return t.M_filter
}

func (t *TL_channels_getParticipants) Set_offset(M_offset int32) {
	t.M_offset = M_offset
}

func (t *TL_channels_getParticipants) Get_offset() int32 {
	return t.M_offset
}

func (t *TL_channels_getParticipants) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_channels_getParticipants) Get_limit() int32 {
	return t.M_limit
}

func (t *TL_channels_getParticipants) Set_hash(M_hash int32) {
	t.M_hash = M_hash
}

func (t *TL_channels_getParticipants) Get_hash() int32 {
	return t.M_hash
}

func New_TL_channels_getParticipants() *TL_channels_getParticipants {
	return &TL_channels_getParticipants{
		M_classID: TL_CLASS_channels_getParticipants,
	}
}

func (t *TL_channels_getParticipants) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_getParticipants))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_filter())
	ec.Int(t.Get_offset())
	ec.Int(t.Get_limit())
	ec.Int(t.Get_hash())

	return ec.GetBuffer()
}

func (t *TL_channels_getParticipants) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_filter = dc.TLObject()
	t.M_offset = dc.Int()
	t.M_limit = dc.Int()
	t.M_hash = dc.Int()

	return dc.err
}

func (t *TL_channels_getParticipants) String() string {
	return fmt.Sprintf("- channels_getParticipants#123e05e9\n-- channel : %v\n-- filter : %v\n-- offset : %v\n-- limit : %v\n-- hash : %v\n", t.M_channel, t.M_filter, t.M_offset, t.M_limit, t.M_hash)
}

// channels_getParticipant#546dd7a6
type TL_channels_getParticipant struct {
	M_classID int32
	M_channel TLObject
	M_user_id TLObject
}

func (t *TL_channels_getParticipant) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_getParticipant) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_getParticipant) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_getParticipant) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_channels_getParticipant) Get_user_id() TLObject {
	return t.M_user_id
}

func New_TL_channels_getParticipant() *TL_channels_getParticipant {
	return &TL_channels_getParticipant{
		M_classID: TL_CLASS_channels_getParticipant,
	}
}

func (t *TL_channels_getParticipant) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_getParticipant))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_user_id())

	return ec.GetBuffer()
}

func (t *TL_channels_getParticipant) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_user_id = dc.TLObject()

	return dc.err
}

func (t *TL_channels_getParticipant) String() string {
	return fmt.Sprintf("- channels_getParticipant#546dd7a6\n-- channel : %v\n-- user_id : %v\n", t.M_channel, t.M_user_id)
}

// channels_getChannels#a7f6bbb
type TL_channels_getChannels struct {
	M_classID int32
	M_id      []TLObject
}

func (t *TL_channels_getChannels) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_getChannels) Set_id(M_id []TLObject) {
	t.M_id = M_id
}

func (t *TL_channels_getChannels) Get_id() []TLObject {
	return t.M_id
}

func New_TL_channels_getChannels() *TL_channels_getChannels {
	return &TL_channels_getChannels{
		M_classID: TL_CLASS_channels_getChannels,
	}
}

func (t *TL_channels_getChannels) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_getChannels))
	ec.Vector(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_channels_getChannels) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Vector()

	return dc.err
}

func (t *TL_channels_getChannels) String() string {
	return fmt.Sprintf("- channels_getChannels#a7f6bbb\n-- id : %v\n", t.M_id)
}

// channels_getFullChannel#8736a09
type TL_channels_getFullChannel struct {
	M_classID int32
	M_channel TLObject
}

func (t *TL_channels_getFullChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_getFullChannel) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_getFullChannel) Get_channel() TLObject {
	return t.M_channel
}

func New_TL_channels_getFullChannel() *TL_channels_getFullChannel {
	return &TL_channels_getFullChannel{
		M_classID: TL_CLASS_channels_getFullChannel,
	}
}

func (t *TL_channels_getFullChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_getFullChannel))
	ec.TLObject(t.Get_channel())

	return ec.GetBuffer()
}

func (t *TL_channels_getFullChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()

	return dc.err
}

func (t *TL_channels_getFullChannel) String() string {
	return fmt.Sprintf("- channels_getFullChannel#8736a09\n-- channel : %v\n", t.M_channel)
}

// channels_createChannel#f4893d7f
type TL_channels_createChannel struct {
	M_classID   int32
	M_flags     TLObject
	M_broadcast TLObject
	M_megagroup TLObject
	M_title     string
	M_about     string
}

func (t *TL_channels_createChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_createChannel) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channels_createChannel) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channels_createChannel) Set_broadcast(M_broadcast TLObject) {
	t.M_broadcast = M_broadcast
}

func (t *TL_channels_createChannel) Get_broadcast() TLObject {
	return t.M_broadcast
}

func (t *TL_channels_createChannel) Set_megagroup(M_megagroup TLObject) {
	t.M_megagroup = M_megagroup
}

func (t *TL_channels_createChannel) Get_megagroup() TLObject {
	return t.M_megagroup
}

func (t *TL_channels_createChannel) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_channels_createChannel) Get_title() string {
	return t.M_title
}

func (t *TL_channels_createChannel) Set_about(M_about string) {
	t.M_about = M_about
}

func (t *TL_channels_createChannel) Get_about() string {
	return t.M_about
}

func New_TL_channels_createChannel() *TL_channels_createChannel {
	return &TL_channels_createChannel{
		M_classID: TL_CLASS_channels_createChannel,
	}
}

func (t *TL_channels_createChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_createChannel))
	ec.TLObject(t.Get_broadcast())
	ec.TLObject(t.Get_megagroup())
	ec.String(t.Get_title())
	ec.String(t.Get_about())

	return ec.GetBuffer()
}

func (t *TL_channels_createChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_broadcast = dc.TLObject()
	t.M_megagroup = dc.TLObject()
	t.M_title = dc.String()
	t.M_about = dc.String()

	return dc.err
}

func (t *TL_channels_createChannel) String() string {
	return fmt.Sprintf("- channels_createChannel#f4893d7f\n-- flags : %v\n-- broadcast : %v\n-- megagroup : %v\n-- title : %v\n-- about : %v\n", t.M_flags, t.M_broadcast, t.M_megagroup, t.M_title, t.M_about)
}

// channels_editAbout#13e27f1e
type TL_channels_editAbout struct {
	M_classID int32
	M_channel TLObject
	M_about   string
}

func (t *TL_channels_editAbout) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_editAbout) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_editAbout) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_editAbout) Set_about(M_about string) {
	t.M_about = M_about
}

func (t *TL_channels_editAbout) Get_about() string {
	return t.M_about
}

func New_TL_channels_editAbout() *TL_channels_editAbout {
	return &TL_channels_editAbout{
		M_classID: TL_CLASS_channels_editAbout,
	}
}

func (t *TL_channels_editAbout) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_editAbout))
	ec.TLObject(t.Get_channel())
	ec.String(t.Get_about())

	return ec.GetBuffer()
}

func (t *TL_channels_editAbout) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_about = dc.String()

	return dc.err
}

func (t *TL_channels_editAbout) String() string {
	return fmt.Sprintf("- channels_editAbout#13e27f1e\n-- channel : %v\n-- about : %v\n", t.M_channel, t.M_about)
}

// channels_editAdmin#20b88214
type TL_channels_editAdmin struct {
	M_classID      int32
	M_channel      TLObject
	M_user_id      TLObject
	M_admin_rights TLObject
}

func (t *TL_channels_editAdmin) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_editAdmin) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_editAdmin) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_editAdmin) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_channels_editAdmin) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_channels_editAdmin) Set_admin_rights(M_admin_rights TLObject) {
	t.M_admin_rights = M_admin_rights
}

func (t *TL_channels_editAdmin) Get_admin_rights() TLObject {
	return t.M_admin_rights
}

func New_TL_channels_editAdmin() *TL_channels_editAdmin {
	return &TL_channels_editAdmin{
		M_classID: TL_CLASS_channels_editAdmin,
	}
}

func (t *TL_channels_editAdmin) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_editAdmin))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_user_id())
	ec.TLObject(t.Get_admin_rights())

	return ec.GetBuffer()
}

func (t *TL_channels_editAdmin) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_user_id = dc.TLObject()
	t.M_admin_rights = dc.TLObject()

	return dc.err
}

func (t *TL_channels_editAdmin) String() string {
	return fmt.Sprintf("- channels_editAdmin#20b88214\n-- channel : %v\n-- user_id : %v\n-- admin_rights : %v\n", t.M_channel, t.M_user_id, t.M_admin_rights)
}

// channels_editTitle#566decd0
type TL_channels_editTitle struct {
	M_classID int32
	M_channel TLObject
	M_title   string
}

func (t *TL_channels_editTitle) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_editTitle) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_editTitle) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_editTitle) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_channels_editTitle) Get_title() string {
	return t.M_title
}

func New_TL_channels_editTitle() *TL_channels_editTitle {
	return &TL_channels_editTitle{
		M_classID: TL_CLASS_channels_editTitle,
	}
}

func (t *TL_channels_editTitle) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_editTitle))
	ec.TLObject(t.Get_channel())
	ec.String(t.Get_title())

	return ec.GetBuffer()
}

func (t *TL_channels_editTitle) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_title = dc.String()

	return dc.err
}

func (t *TL_channels_editTitle) String() string {
	return fmt.Sprintf("- channels_editTitle#566decd0\n-- channel : %v\n-- title : %v\n", t.M_channel, t.M_title)
}

// channels_editPhoto#f12e57c9
type TL_channels_editPhoto struct {
	M_classID int32
	M_channel TLObject
	M_photo   TLObject
}

func (t *TL_channels_editPhoto) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_editPhoto) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_editPhoto) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_editPhoto) Set_photo(M_photo TLObject) {
	t.M_photo = M_photo
}

func (t *TL_channels_editPhoto) Get_photo() TLObject {
	return t.M_photo
}

func New_TL_channels_editPhoto() *TL_channels_editPhoto {
	return &TL_channels_editPhoto{
		M_classID: TL_CLASS_channels_editPhoto,
	}
}

func (t *TL_channels_editPhoto) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_editPhoto))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_photo())

	return ec.GetBuffer()
}

func (t *TL_channels_editPhoto) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_photo = dc.TLObject()

	return dc.err
}

func (t *TL_channels_editPhoto) String() string {
	return fmt.Sprintf("- channels_editPhoto#f12e57c9\n-- channel : %v\n-- photo : %v\n", t.M_channel, t.M_photo)
}

// channels_checkUsername#10e6bd2c
type TL_channels_checkUsername struct {
	M_classID  int32
	M_channel  TLObject
	M_username string
}

func (t *TL_channels_checkUsername) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_checkUsername) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_checkUsername) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_checkUsername) Set_username(M_username string) {
	t.M_username = M_username
}

func (t *TL_channels_checkUsername) Get_username() string {
	return t.M_username
}

func New_TL_channels_checkUsername() *TL_channels_checkUsername {
	return &TL_channels_checkUsername{
		M_classID: TL_CLASS_channels_checkUsername,
	}
}

func (t *TL_channels_checkUsername) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_checkUsername))
	ec.TLObject(t.Get_channel())
	ec.String(t.Get_username())

	return ec.GetBuffer()
}

func (t *TL_channels_checkUsername) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_username = dc.String()

	return dc.err
}

func (t *TL_channels_checkUsername) String() string {
	return fmt.Sprintf("- channels_checkUsername#10e6bd2c\n-- channel : %v\n-- username : %v\n", t.M_channel, t.M_username)
}

// channels_updateUsername#3514b3de
type TL_channels_updateUsername struct {
	M_classID  int32
	M_channel  TLObject
	M_username string
}

func (t *TL_channels_updateUsername) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_updateUsername) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_updateUsername) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_updateUsername) Set_username(M_username string) {
	t.M_username = M_username
}

func (t *TL_channels_updateUsername) Get_username() string {
	return t.M_username
}

func New_TL_channels_updateUsername() *TL_channels_updateUsername {
	return &TL_channels_updateUsername{
		M_classID: TL_CLASS_channels_updateUsername,
	}
}

func (t *TL_channels_updateUsername) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_updateUsername))
	ec.TLObject(t.Get_channel())
	ec.String(t.Get_username())

	return ec.GetBuffer()
}

func (t *TL_channels_updateUsername) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_username = dc.String()

	return dc.err
}

func (t *TL_channels_updateUsername) String() string {
	return fmt.Sprintf("- channels_updateUsername#3514b3de\n-- channel : %v\n-- username : %v\n", t.M_channel, t.M_username)
}

// channels_joinChannel#24b524c5
type TL_channels_joinChannel struct {
	M_classID int32
	M_channel TLObject
}

func (t *TL_channels_joinChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_joinChannel) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_joinChannel) Get_channel() TLObject {
	return t.M_channel
}

func New_TL_channels_joinChannel() *TL_channels_joinChannel {
	return &TL_channels_joinChannel{
		M_classID: TL_CLASS_channels_joinChannel,
	}
}

func (t *TL_channels_joinChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_joinChannel))
	ec.TLObject(t.Get_channel())

	return ec.GetBuffer()
}

func (t *TL_channels_joinChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()

	return dc.err
}

func (t *TL_channels_joinChannel) String() string {
	return fmt.Sprintf("- channels_joinChannel#24b524c5\n-- channel : %v\n", t.M_channel)
}

// channels_leaveChannel#f836aa95
type TL_channels_leaveChannel struct {
	M_classID int32
	M_channel TLObject
}

func (t *TL_channels_leaveChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_leaveChannel) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_leaveChannel) Get_channel() TLObject {
	return t.M_channel
}

func New_TL_channels_leaveChannel() *TL_channels_leaveChannel {
	return &TL_channels_leaveChannel{
		M_classID: TL_CLASS_channels_leaveChannel,
	}
}

func (t *TL_channels_leaveChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_leaveChannel))
	ec.TLObject(t.Get_channel())

	return ec.GetBuffer()
}

func (t *TL_channels_leaveChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()

	return dc.err
}

func (t *TL_channels_leaveChannel) String() string {
	return fmt.Sprintf("- channels_leaveChannel#f836aa95\n-- channel : %v\n", t.M_channel)
}

// channels_inviteToChannel#199f3a6c
type TL_channels_inviteToChannel struct {
	M_classID int32
	M_channel TLObject
	M_users   []TLObject
}

func (t *TL_channels_inviteToChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_inviteToChannel) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_inviteToChannel) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_inviteToChannel) Set_users(M_users []TLObject) {
	t.M_users = M_users
}

func (t *TL_channels_inviteToChannel) Get_users() []TLObject {
	return t.M_users
}

func New_TL_channels_inviteToChannel() *TL_channels_inviteToChannel {
	return &TL_channels_inviteToChannel{
		M_classID: TL_CLASS_channels_inviteToChannel,
	}
}

func (t *TL_channels_inviteToChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_inviteToChannel))
	ec.TLObject(t.Get_channel())
	ec.Vector(t.Get_users())

	return ec.GetBuffer()
}

func (t *TL_channels_inviteToChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_users = dc.Vector()

	return dc.err
}

func (t *TL_channels_inviteToChannel) String() string {
	return fmt.Sprintf("- channels_inviteToChannel#199f3a6c\n-- channel : %v\n-- users : %v\n", t.M_channel, t.M_users)
}

// channels_exportInvite#c7560885
type TL_channels_exportInvite struct {
	M_classID int32
	M_channel TLObject
}

func (t *TL_channels_exportInvite) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_exportInvite) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_exportInvite) Get_channel() TLObject {
	return t.M_channel
}

func New_TL_channels_exportInvite() *TL_channels_exportInvite {
	return &TL_channels_exportInvite{
		M_classID: TL_CLASS_channels_exportInvite,
	}
}

func (t *TL_channels_exportInvite) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_exportInvite))
	ec.TLObject(t.Get_channel())

	return ec.GetBuffer()
}

func (t *TL_channels_exportInvite) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()

	return dc.err
}

func (t *TL_channels_exportInvite) String() string {
	return fmt.Sprintf("- channels_exportInvite#c7560885\n-- channel : %v\n", t.M_channel)
}

// channels_deleteChannel#c0111fe3
type TL_channels_deleteChannel struct {
	M_classID int32
	M_channel TLObject
}

func (t *TL_channels_deleteChannel) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_deleteChannel) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_deleteChannel) Get_channel() TLObject {
	return t.M_channel
}

func New_TL_channels_deleteChannel() *TL_channels_deleteChannel {
	return &TL_channels_deleteChannel{
		M_classID: TL_CLASS_channels_deleteChannel,
	}
}

func (t *TL_channels_deleteChannel) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_deleteChannel))
	ec.TLObject(t.Get_channel())

	return ec.GetBuffer()
}

func (t *TL_channels_deleteChannel) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()

	return dc.err
}

func (t *TL_channels_deleteChannel) String() string {
	return fmt.Sprintf("- channels_deleteChannel#c0111fe3\n-- channel : %v\n", t.M_channel)
}

// channels_toggleInvites#49609307
type TL_channels_toggleInvites struct {
	M_classID int32
	M_channel TLObject
	M_enabled TLObject
}

func (t *TL_channels_toggleInvites) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_toggleInvites) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_toggleInvites) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_toggleInvites) Set_enabled(M_enabled TLObject) {
	t.M_enabled = M_enabled
}

func (t *TL_channels_toggleInvites) Get_enabled() TLObject {
	return t.M_enabled
}

func New_TL_channels_toggleInvites() *TL_channels_toggleInvites {
	return &TL_channels_toggleInvites{
		M_classID: TL_CLASS_channels_toggleInvites,
	}
}

func (t *TL_channels_toggleInvites) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_toggleInvites))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_enabled())

	return ec.GetBuffer()
}

func (t *TL_channels_toggleInvites) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_enabled = dc.TLObject()

	return dc.err
}

func (t *TL_channels_toggleInvites) String() string {
	return fmt.Sprintf("- channels_toggleInvites#49609307\n-- channel : %v\n-- enabled : %v\n", t.M_channel, t.M_enabled)
}

// channels_exportMessageLink#c846d22d
type TL_channels_exportMessageLink struct {
	M_classID int32
	M_channel TLObject
	M_id      int32
}

func (t *TL_channels_exportMessageLink) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_exportMessageLink) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_exportMessageLink) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_exportMessageLink) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_channels_exportMessageLink) Get_id() int32 {
	return t.M_id
}

func New_TL_channels_exportMessageLink() *TL_channels_exportMessageLink {
	return &TL_channels_exportMessageLink{
		M_classID: TL_CLASS_channels_exportMessageLink,
	}
}

func (t *TL_channels_exportMessageLink) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_exportMessageLink))
	ec.TLObject(t.Get_channel())
	ec.Int(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_channels_exportMessageLink) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_id = dc.Int()

	return dc.err
}

func (t *TL_channels_exportMessageLink) String() string {
	return fmt.Sprintf("- channels_exportMessageLink#c846d22d\n-- channel : %v\n-- id : %v\n", t.M_channel, t.M_id)
}

// channels_toggleSignatures#1f69b606
type TL_channels_toggleSignatures struct {
	M_classID int32
	M_channel TLObject
	M_enabled TLObject
}

func (t *TL_channels_toggleSignatures) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_toggleSignatures) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_toggleSignatures) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_toggleSignatures) Set_enabled(M_enabled TLObject) {
	t.M_enabled = M_enabled
}

func (t *TL_channels_toggleSignatures) Get_enabled() TLObject {
	return t.M_enabled
}

func New_TL_channels_toggleSignatures() *TL_channels_toggleSignatures {
	return &TL_channels_toggleSignatures{
		M_classID: TL_CLASS_channels_toggleSignatures,
	}
}

func (t *TL_channels_toggleSignatures) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_toggleSignatures))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_enabled())

	return ec.GetBuffer()
}

func (t *TL_channels_toggleSignatures) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_enabled = dc.TLObject()

	return dc.err
}

func (t *TL_channels_toggleSignatures) String() string {
	return fmt.Sprintf("- channels_toggleSignatures#1f69b606\n-- channel : %v\n-- enabled : %v\n", t.M_channel, t.M_enabled)
}

// channels_updatePinnedMessage#a72ded52
type TL_channels_updatePinnedMessage struct {
	M_classID int32
	M_flags   TLObject
	M_silent  TLObject
	M_channel TLObject
	M_id      int32
}

func (t *TL_channels_updatePinnedMessage) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_updatePinnedMessage) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channels_updatePinnedMessage) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channels_updatePinnedMessage) Set_silent(M_silent TLObject) {
	t.M_silent = M_silent
}

func (t *TL_channels_updatePinnedMessage) Get_silent() TLObject {
	return t.M_silent
}

func (t *TL_channels_updatePinnedMessage) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_updatePinnedMessage) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_updatePinnedMessage) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_channels_updatePinnedMessage) Get_id() int32 {
	return t.M_id
}

func New_TL_channels_updatePinnedMessage() *TL_channels_updatePinnedMessage {
	return &TL_channels_updatePinnedMessage{
		M_classID: TL_CLASS_channels_updatePinnedMessage,
	}
}

func (t *TL_channels_updatePinnedMessage) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_updatePinnedMessage))
	ec.TLObject(t.Get_silent())
	ec.TLObject(t.Get_channel())
	ec.Int(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_channels_updatePinnedMessage) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_silent = dc.TLObject()
	t.M_channel = dc.TLObject()
	t.M_id = dc.Int()

	return dc.err
}

func (t *TL_channels_updatePinnedMessage) String() string {
	return fmt.Sprintf("- channels_updatePinnedMessage#a72ded52\n-- flags : %v\n-- silent : %v\n-- channel : %v\n-- id : %v\n", t.M_flags, t.M_silent, t.M_channel, t.M_id)
}

// channels_getAdminedPublicChannels#8d8d82d7
type TL_channels_getAdminedPublicChannels struct {
	M_classID int32
}

func (t *TL_channels_getAdminedPublicChannels) ClassID() int32 {
	return t.M_classID
}

func New_TL_channels_getAdminedPublicChannels() *TL_channels_getAdminedPublicChannels {
	return &TL_channels_getAdminedPublicChannels{
		M_classID: TL_CLASS_channels_getAdminedPublicChannels,
	}
}

func (t *TL_channels_getAdminedPublicChannels) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_getAdminedPublicChannels))

	return ec.GetBuffer()
}

func (t *TL_channels_getAdminedPublicChannels) Decode(b []byte) error {
	return nil
}

func (t *TL_channels_getAdminedPublicChannels) String() string {
	return fmt.Sprintf("- channels_getAdminedPublicChannels#8d8d82d7\n")
}

// channels_editBanned#bfd915cd
type TL_channels_editBanned struct {
	M_classID       int32
	M_channel       TLObject
	M_user_id       TLObject
	M_banned_rights TLObject
}

func (t *TL_channels_editBanned) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_editBanned) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_editBanned) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_editBanned) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_channels_editBanned) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_channels_editBanned) Set_banned_rights(M_banned_rights TLObject) {
	t.M_banned_rights = M_banned_rights
}

func (t *TL_channels_editBanned) Get_banned_rights() TLObject {
	return t.M_banned_rights
}

func New_TL_channels_editBanned() *TL_channels_editBanned {
	return &TL_channels_editBanned{
		M_classID: TL_CLASS_channels_editBanned,
	}
}

func (t *TL_channels_editBanned) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_editBanned))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_user_id())
	ec.TLObject(t.Get_banned_rights())

	return ec.GetBuffer()
}

func (t *TL_channels_editBanned) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_user_id = dc.TLObject()
	t.M_banned_rights = dc.TLObject()

	return dc.err
}

func (t *TL_channels_editBanned) String() string {
	return fmt.Sprintf("- channels_editBanned#bfd915cd\n-- channel : %v\n-- user_id : %v\n-- banned_rights : %v\n", t.M_channel, t.M_user_id, t.M_banned_rights)
}

// channels_getAdminLog#33ddf480
type TL_channels_getAdminLog struct {
	M_classID       int32
	M_flags         TLObject
	M_channel       TLObject
	M_q             string
	M_events_filter TLObject
	M_admins        []TLObject
	M_max_id        int64
	M_min_id        int64
	M_limit         int32
}

func (t *TL_channels_getAdminLog) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_getAdminLog) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_channels_getAdminLog) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_channels_getAdminLog) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_getAdminLog) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_getAdminLog) Set_q(M_q string) {
	t.M_q = M_q
}

func (t *TL_channels_getAdminLog) Get_q() string {
	return t.M_q
}

func (t *TL_channels_getAdminLog) Set_events_filter(M_events_filter TLObject) {
	t.M_events_filter = M_events_filter
}

func (t *TL_channels_getAdminLog) Get_events_filter() TLObject {
	return t.M_events_filter
}

func (t *TL_channels_getAdminLog) Set_admins(M_admins []TLObject) {
	t.M_admins = M_admins
}

func (t *TL_channels_getAdminLog) Get_admins() []TLObject {
	return t.M_admins
}

func (t *TL_channels_getAdminLog) Set_max_id(M_max_id int64) {
	t.M_max_id = M_max_id
}

func (t *TL_channels_getAdminLog) Get_max_id() int64 {
	return t.M_max_id
}

func (t *TL_channels_getAdminLog) Set_min_id(M_min_id int64) {
	t.M_min_id = M_min_id
}

func (t *TL_channels_getAdminLog) Get_min_id() int64 {
	return t.M_min_id
}

func (t *TL_channels_getAdminLog) Set_limit(M_limit int32) {
	t.M_limit = M_limit
}

func (t *TL_channels_getAdminLog) Get_limit() int32 {
	return t.M_limit
}

func New_TL_channels_getAdminLog() *TL_channels_getAdminLog {
	return &TL_channels_getAdminLog{
		M_classID: TL_CLASS_channels_getAdminLog,
	}
}

func (t *TL_channels_getAdminLog) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_getAdminLog))
	ec.TLObject(t.Get_channel())
	ec.String(t.Get_q())
	ec.TLObject(t.Get_events_filter())
	ec.Vector(t.Get_admins())
	ec.Long(t.Get_max_id())
	ec.Long(t.Get_min_id())
	ec.Int(t.Get_limit())

	return ec.GetBuffer()
}

func (t *TL_channels_getAdminLog) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_q = dc.String()
	t.M_events_filter = dc.TLObject()
	t.M_admins = dc.Vector()
	t.M_max_id = dc.Long()
	t.M_min_id = dc.Long()
	t.M_limit = dc.Int()

	return dc.err
}

func (t *TL_channels_getAdminLog) String() string {
	return fmt.Sprintf("- channels_getAdminLog#33ddf480\n-- flags : %v\n-- channel : %v\n-- q : %v\n-- events_filter : %v\n-- admins : %v\n-- max_id : %v\n-- min_id : %v\n-- limit : %v\n", t.M_flags, t.M_channel, t.M_q, t.M_events_filter, t.M_admins, t.M_max_id, t.M_min_id, t.M_limit)
}

// channels_setStickers#ea8ca4f9
type TL_channels_setStickers struct {
	M_classID    int32
	M_channel    TLObject
	M_stickerset TLObject
}

func (t *TL_channels_setStickers) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_setStickers) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_setStickers) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_setStickers) Set_stickerset(M_stickerset TLObject) {
	t.M_stickerset = M_stickerset
}

func (t *TL_channels_setStickers) Get_stickerset() TLObject {
	return t.M_stickerset
}

func New_TL_channels_setStickers() *TL_channels_setStickers {
	return &TL_channels_setStickers{
		M_classID: TL_CLASS_channels_setStickers,
	}
}

func (t *TL_channels_setStickers) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_setStickers))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_stickerset())

	return ec.GetBuffer()
}

func (t *TL_channels_setStickers) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_stickerset = dc.TLObject()

	return dc.err
}

func (t *TL_channels_setStickers) String() string {
	return fmt.Sprintf("- channels_setStickers#ea8ca4f9\n-- channel : %v\n-- stickerset : %v\n", t.M_channel, t.M_stickerset)
}

// channels_readMessageContents#eab5dc38
type TL_channels_readMessageContents struct {
	M_classID int32
	M_channel TLObject
	M_id      []int32
}

func (t *TL_channels_readMessageContents) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_readMessageContents) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_readMessageContents) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_readMessageContents) Set_id(M_id []int32) {
	t.M_id = M_id
}

func (t *TL_channels_readMessageContents) Get_id() []int32 {
	return t.M_id
}

func New_TL_channels_readMessageContents() *TL_channels_readMessageContents {
	return &TL_channels_readMessageContents{
		M_classID: TL_CLASS_channels_readMessageContents,
	}
}

func (t *TL_channels_readMessageContents) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_readMessageContents))
	ec.TLObject(t.Get_channel())
	ec.VectorInt(t.Get_id())

	return ec.GetBuffer()
}

func (t *TL_channels_readMessageContents) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_id = dc.VectorInt()

	return dc.err
}

func (t *TL_channels_readMessageContents) String() string {
	return fmt.Sprintf("- channels_readMessageContents#eab5dc38\n-- channel : %v\n-- id : %v\n", t.M_channel, t.M_id)
}

// channels_deleteHistory#af369d42
type TL_channels_deleteHistory struct {
	M_classID int32
	M_channel TLObject
	M_max_id  int32
}

func (t *TL_channels_deleteHistory) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_deleteHistory) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_deleteHistory) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_deleteHistory) Set_max_id(M_max_id int32) {
	t.M_max_id = M_max_id
}

func (t *TL_channels_deleteHistory) Get_max_id() int32 {
	return t.M_max_id
}

func New_TL_channels_deleteHistory() *TL_channels_deleteHistory {
	return &TL_channels_deleteHistory{
		M_classID: TL_CLASS_channels_deleteHistory,
	}
}

func (t *TL_channels_deleteHistory) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_deleteHistory))
	ec.TLObject(t.Get_channel())
	ec.Int(t.Get_max_id())

	return ec.GetBuffer()
}

func (t *TL_channels_deleteHistory) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_max_id = dc.Int()

	return dc.err
}

func (t *TL_channels_deleteHistory) String() string {
	return fmt.Sprintf("- channels_deleteHistory#af369d42\n-- channel : %v\n-- max_id : %v\n", t.M_channel, t.M_max_id)
}

// channels_togglePreHistoryHidden#eabbb94c
type TL_channels_togglePreHistoryHidden struct {
	M_classID int32
	M_channel TLObject
	M_enabled TLObject
}

func (t *TL_channels_togglePreHistoryHidden) ClassID() int32 {
	return t.M_classID
}

func (t *TL_channels_togglePreHistoryHidden) Set_channel(M_channel TLObject) {
	t.M_channel = M_channel
}

func (t *TL_channels_togglePreHistoryHidden) Get_channel() TLObject {
	return t.M_channel
}

func (t *TL_channels_togglePreHistoryHidden) Set_enabled(M_enabled TLObject) {
	t.M_enabled = M_enabled
}

func (t *TL_channels_togglePreHistoryHidden) Get_enabled() TLObject {
	return t.M_enabled
}

func New_TL_channels_togglePreHistoryHidden() *TL_channels_togglePreHistoryHidden {
	return &TL_channels_togglePreHistoryHidden{
		M_classID: TL_CLASS_channels_togglePreHistoryHidden,
	}
}

func (t *TL_channels_togglePreHistoryHidden) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_channels_togglePreHistoryHidden))
	ec.TLObject(t.Get_channel())
	ec.TLObject(t.Get_enabled())

	return ec.GetBuffer()
}

func (t *TL_channels_togglePreHistoryHidden) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_channel = dc.TLObject()
	t.M_enabled = dc.TLObject()

	return dc.err
}

func (t *TL_channels_togglePreHistoryHidden) String() string {
	return fmt.Sprintf("- channels_togglePreHistoryHidden#eabbb94c\n-- channel : %v\n-- enabled : %v\n", t.M_channel, t.M_enabled)
}

// bots_sendCustomRequest#aa2769ed
type TL_bots_sendCustomRequest struct {
	M_classID       int32
	M_custom_method string
	M_params        TLObject
}

func (t *TL_bots_sendCustomRequest) ClassID() int32 {
	return t.M_classID
}

func (t *TL_bots_sendCustomRequest) Set_custom_method(M_custom_method string) {
	t.M_custom_method = M_custom_method
}

func (t *TL_bots_sendCustomRequest) Get_custom_method() string {
	return t.M_custom_method
}

func (t *TL_bots_sendCustomRequest) Set_params(M_params TLObject) {
	t.M_params = M_params
}

func (t *TL_bots_sendCustomRequest) Get_params() TLObject {
	return t.M_params
}

func New_TL_bots_sendCustomRequest() *TL_bots_sendCustomRequest {
	return &TL_bots_sendCustomRequest{
		M_classID: TL_CLASS_bots_sendCustomRequest,
	}
}

func (t *TL_bots_sendCustomRequest) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_bots_sendCustomRequest))
	ec.String(t.Get_custom_method())
	ec.TLObject(t.Get_params())

	return ec.GetBuffer()
}

func (t *TL_bots_sendCustomRequest) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_custom_method = dc.String()
	t.M_params = dc.TLObject()

	return dc.err
}

func (t *TL_bots_sendCustomRequest) String() string {
	return fmt.Sprintf("- bots_sendCustomRequest#aa2769ed\n-- custom_method : %v\n-- params : %v\n", t.M_custom_method, t.M_params)
}

// bots_answerWebhookJSONQuery#e6213f4d
type TL_bots_answerWebhookJSONQuery struct {
	M_classID  int32
	M_query_id int64
	M_data     TLObject
}

func (t *TL_bots_answerWebhookJSONQuery) ClassID() int32 {
	return t.M_classID
}

func (t *TL_bots_answerWebhookJSONQuery) Set_query_id(M_query_id int64) {
	t.M_query_id = M_query_id
}

func (t *TL_bots_answerWebhookJSONQuery) Get_query_id() int64 {
	return t.M_query_id
}

func (t *TL_bots_answerWebhookJSONQuery) Set_data(M_data TLObject) {
	t.M_data = M_data
}

func (t *TL_bots_answerWebhookJSONQuery) Get_data() TLObject {
	return t.M_data
}

func New_TL_bots_answerWebhookJSONQuery() *TL_bots_answerWebhookJSONQuery {
	return &TL_bots_answerWebhookJSONQuery{
		M_classID: TL_CLASS_bots_answerWebhookJSONQuery,
	}
}

func (t *TL_bots_answerWebhookJSONQuery) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_bots_answerWebhookJSONQuery))
	ec.Long(t.Get_query_id())
	ec.TLObject(t.Get_data())

	return ec.GetBuffer()
}

func (t *TL_bots_answerWebhookJSONQuery) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_query_id = dc.Long()
	t.M_data = dc.TLObject()

	return dc.err
}

func (t *TL_bots_answerWebhookJSONQuery) String() string {
	return fmt.Sprintf("- bots_answerWebhookJSONQuery#e6213f4d\n-- query_id : %v\n-- data : %v\n", t.M_query_id, t.M_data)
}

// payments_getPaymentForm#99f09745
type TL_payments_getPaymentForm struct {
	M_classID int32
	M_msg_id  int32
}

func (t *TL_payments_getPaymentForm) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_getPaymentForm) Set_msg_id(M_msg_id int32) {
	t.M_msg_id = M_msg_id
}

func (t *TL_payments_getPaymentForm) Get_msg_id() int32 {
	return t.M_msg_id
}

func New_TL_payments_getPaymentForm() *TL_payments_getPaymentForm {
	return &TL_payments_getPaymentForm{
		M_classID: TL_CLASS_payments_getPaymentForm,
	}
}

func (t *TL_payments_getPaymentForm) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_getPaymentForm))
	ec.Int(t.Get_msg_id())

	return ec.GetBuffer()
}

func (t *TL_payments_getPaymentForm) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_id = dc.Int()

	return dc.err
}

func (t *TL_payments_getPaymentForm) String() string {
	return fmt.Sprintf("- payments_getPaymentForm#99f09745\n-- msg_id : %v\n", t.M_msg_id)
}

// payments_getPaymentReceipt#a092a980
type TL_payments_getPaymentReceipt struct {
	M_classID int32
	M_msg_id  int32
}

func (t *TL_payments_getPaymentReceipt) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_getPaymentReceipt) Set_msg_id(M_msg_id int32) {
	t.M_msg_id = M_msg_id
}

func (t *TL_payments_getPaymentReceipt) Get_msg_id() int32 {
	return t.M_msg_id
}

func New_TL_payments_getPaymentReceipt() *TL_payments_getPaymentReceipt {
	return &TL_payments_getPaymentReceipt{
		M_classID: TL_CLASS_payments_getPaymentReceipt,
	}
}

func (t *TL_payments_getPaymentReceipt) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_getPaymentReceipt))
	ec.Int(t.Get_msg_id())

	return ec.GetBuffer()
}

func (t *TL_payments_getPaymentReceipt) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_id = dc.Int()

	return dc.err
}

func (t *TL_payments_getPaymentReceipt) String() string {
	return fmt.Sprintf("- payments_getPaymentReceipt#a092a980\n-- msg_id : %v\n", t.M_msg_id)
}

// payments_validateRequestedInfo#770a8e74
type TL_payments_validateRequestedInfo struct {
	M_classID int32
	M_flags   TLObject
	M_save    TLObject
	M_msg_id  int32
	M_info    TLObject
}

func (t *TL_payments_validateRequestedInfo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_validateRequestedInfo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_payments_validateRequestedInfo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_payments_validateRequestedInfo) Set_save(M_save TLObject) {
	t.M_save = M_save
}

func (t *TL_payments_validateRequestedInfo) Get_save() TLObject {
	return t.M_save
}

func (t *TL_payments_validateRequestedInfo) Set_msg_id(M_msg_id int32) {
	t.M_msg_id = M_msg_id
}

func (t *TL_payments_validateRequestedInfo) Get_msg_id() int32 {
	return t.M_msg_id
}

func (t *TL_payments_validateRequestedInfo) Set_info(M_info TLObject) {
	t.M_info = M_info
}

func (t *TL_payments_validateRequestedInfo) Get_info() TLObject {
	return t.M_info
}

func New_TL_payments_validateRequestedInfo() *TL_payments_validateRequestedInfo {
	return &TL_payments_validateRequestedInfo{
		M_classID: TL_CLASS_payments_validateRequestedInfo,
	}
}

func (t *TL_payments_validateRequestedInfo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_validateRequestedInfo))
	ec.TLObject(t.Get_save())
	ec.Int(t.Get_msg_id())
	ec.TLObject(t.Get_info())

	return ec.GetBuffer()
}

func (t *TL_payments_validateRequestedInfo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_save = dc.TLObject()
	t.M_msg_id = dc.Int()
	t.M_info = dc.TLObject()

	return dc.err
}

func (t *TL_payments_validateRequestedInfo) String() string {
	return fmt.Sprintf("- payments_validateRequestedInfo#770a8e74\n-- flags : %v\n-- save : %v\n-- msg_id : %v\n-- info : %v\n", t.M_flags, t.M_save, t.M_msg_id, t.M_info)
}

// payments_sendPaymentForm#2b8879b3
type TL_payments_sendPaymentForm struct {
	M_classID            int32
	M_flags              TLObject
	M_msg_id             int32
	M_requested_info_id  TLObject
	M_shipping_option_id TLObject
	M_credentials        TLObject
}

func (t *TL_payments_sendPaymentForm) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_sendPaymentForm) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_payments_sendPaymentForm) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_payments_sendPaymentForm) Set_msg_id(M_msg_id int32) {
	t.M_msg_id = M_msg_id
}

func (t *TL_payments_sendPaymentForm) Get_msg_id() int32 {
	return t.M_msg_id
}

func (t *TL_payments_sendPaymentForm) Set_requested_info_id(M_requested_info_id TLObject) {
	t.M_requested_info_id = M_requested_info_id
}

func (t *TL_payments_sendPaymentForm) Get_requested_info_id() TLObject {
	return t.M_requested_info_id
}

func (t *TL_payments_sendPaymentForm) Set_shipping_option_id(M_shipping_option_id TLObject) {
	t.M_shipping_option_id = M_shipping_option_id
}

func (t *TL_payments_sendPaymentForm) Get_shipping_option_id() TLObject {
	return t.M_shipping_option_id
}

func (t *TL_payments_sendPaymentForm) Set_credentials(M_credentials TLObject) {
	t.M_credentials = M_credentials
}

func (t *TL_payments_sendPaymentForm) Get_credentials() TLObject {
	return t.M_credentials
}

func New_TL_payments_sendPaymentForm() *TL_payments_sendPaymentForm {
	return &TL_payments_sendPaymentForm{
		M_classID: TL_CLASS_payments_sendPaymentForm,
	}
}

func (t *TL_payments_sendPaymentForm) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_sendPaymentForm))
	ec.Int(t.Get_msg_id())
	ec.TLObject(t.Get_requested_info_id())
	ec.TLObject(t.Get_shipping_option_id())
	ec.TLObject(t.Get_credentials())

	return ec.GetBuffer()
}

func (t *TL_payments_sendPaymentForm) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_msg_id = dc.Int()
	t.M_requested_info_id = dc.TLObject()
	t.M_shipping_option_id = dc.TLObject()
	t.M_credentials = dc.TLObject()

	return dc.err
}

func (t *TL_payments_sendPaymentForm) String() string {
	return fmt.Sprintf("- payments_sendPaymentForm#2b8879b3\n-- flags : %v\n-- msg_id : %v\n-- requested_info_id : %v\n-- shipping_option_id : %v\n-- credentials : %v\n", t.M_flags, t.M_msg_id, t.M_requested_info_id, t.M_shipping_option_id, t.M_credentials)
}

// payments_getSavedInfo#227d824b
type TL_payments_getSavedInfo struct {
	M_classID int32
}

func (t *TL_payments_getSavedInfo) ClassID() int32 {
	return t.M_classID
}

func New_TL_payments_getSavedInfo() *TL_payments_getSavedInfo {
	return &TL_payments_getSavedInfo{
		M_classID: TL_CLASS_payments_getSavedInfo,
	}
}

func (t *TL_payments_getSavedInfo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_getSavedInfo))

	return ec.GetBuffer()
}

func (t *TL_payments_getSavedInfo) Decode(b []byte) error {
	return nil
}

func (t *TL_payments_getSavedInfo) String() string {
	return fmt.Sprintf("- payments_getSavedInfo#227d824b\n")
}

// payments_clearSavedInfo#d83d70c1
type TL_payments_clearSavedInfo struct {
	M_classID     int32
	M_flags       TLObject
	M_credentials TLObject
	M_info        TLObject
}

func (t *TL_payments_clearSavedInfo) ClassID() int32 {
	return t.M_classID
}

func (t *TL_payments_clearSavedInfo) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_payments_clearSavedInfo) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_payments_clearSavedInfo) Set_credentials(M_credentials TLObject) {
	t.M_credentials = M_credentials
}

func (t *TL_payments_clearSavedInfo) Get_credentials() TLObject {
	return t.M_credentials
}

func (t *TL_payments_clearSavedInfo) Set_info(M_info TLObject) {
	t.M_info = M_info
}

func (t *TL_payments_clearSavedInfo) Get_info() TLObject {
	return t.M_info
}

func New_TL_payments_clearSavedInfo() *TL_payments_clearSavedInfo {
	return &TL_payments_clearSavedInfo{
		M_classID: TL_CLASS_payments_clearSavedInfo,
	}
}

func (t *TL_payments_clearSavedInfo) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_payments_clearSavedInfo))
	ec.TLObject(t.Get_credentials())
	ec.TLObject(t.Get_info())

	return ec.GetBuffer()
}

func (t *TL_payments_clearSavedInfo) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_credentials = dc.TLObject()
	t.M_info = dc.TLObject()

	return dc.err
}

func (t *TL_payments_clearSavedInfo) String() string {
	return fmt.Sprintf("- payments_clearSavedInfo#d83d70c1\n-- flags : %v\n-- credentials : %v\n-- info : %v\n", t.M_flags, t.M_credentials, t.M_info)
}

// stickers_createStickerSet#9bd86e6a
type TL_stickers_createStickerSet struct {
	M_classID    int32
	M_flags      TLObject
	M_masks      TLObject
	M_user_id    TLObject
	M_title      string
	M_short_name string
	M_stickers   []TLObject
}

func (t *TL_stickers_createStickerSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_stickers_createStickerSet) Set_flags(M_flags TLObject) {
	t.M_flags = M_flags
}

func (t *TL_stickers_createStickerSet) Get_flags() TLObject {
	return t.M_flags
}

func (t *TL_stickers_createStickerSet) Set_masks(M_masks TLObject) {
	t.M_masks = M_masks
}

func (t *TL_stickers_createStickerSet) Get_masks() TLObject {
	return t.M_masks
}

func (t *TL_stickers_createStickerSet) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_stickers_createStickerSet) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_stickers_createStickerSet) Set_title(M_title string) {
	t.M_title = M_title
}

func (t *TL_stickers_createStickerSet) Get_title() string {
	return t.M_title
}

func (t *TL_stickers_createStickerSet) Set_short_name(M_short_name string) {
	t.M_short_name = M_short_name
}

func (t *TL_stickers_createStickerSet) Get_short_name() string {
	return t.M_short_name
}

func (t *TL_stickers_createStickerSet) Set_stickers(M_stickers []TLObject) {
	t.M_stickers = M_stickers
}

func (t *TL_stickers_createStickerSet) Get_stickers() []TLObject {
	return t.M_stickers
}

func New_TL_stickers_createStickerSet() *TL_stickers_createStickerSet {
	return &TL_stickers_createStickerSet{
		M_classID: TL_CLASS_stickers_createStickerSet,
	}
}

func (t *TL_stickers_createStickerSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_stickers_createStickerSet))
	ec.TLObject(t.Get_masks())
	ec.TLObject(t.Get_user_id())
	ec.String(t.Get_title())
	ec.String(t.Get_short_name())
	ec.Vector(t.Get_stickers())

	return ec.GetBuffer()
}

func (t *TL_stickers_createStickerSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_masks = dc.TLObject()
	t.M_user_id = dc.TLObject()
	t.M_title = dc.String()
	t.M_short_name = dc.String()
	t.M_stickers = dc.Vector()

	return dc.err
}

func (t *TL_stickers_createStickerSet) String() string {
	return fmt.Sprintf("- stickers_createStickerSet#9bd86e6a\n-- flags : %v\n-- masks : %v\n-- user_id : %v\n-- title : %v\n-- short_name : %v\n-- stickers : %v\n", t.M_flags, t.M_masks, t.M_user_id, t.M_title, t.M_short_name, t.M_stickers)
}

// stickers_removeStickerFromSet#f7760f51
type TL_stickers_removeStickerFromSet struct {
	M_classID int32
	M_sticker TLObject
}

func (t *TL_stickers_removeStickerFromSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_stickers_removeStickerFromSet) Set_sticker(M_sticker TLObject) {
	t.M_sticker = M_sticker
}

func (t *TL_stickers_removeStickerFromSet) Get_sticker() TLObject {
	return t.M_sticker
}

func New_TL_stickers_removeStickerFromSet() *TL_stickers_removeStickerFromSet {
	return &TL_stickers_removeStickerFromSet{
		M_classID: TL_CLASS_stickers_removeStickerFromSet,
	}
}

func (t *TL_stickers_removeStickerFromSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_stickers_removeStickerFromSet))
	ec.TLObject(t.Get_sticker())

	return ec.GetBuffer()
}

func (t *TL_stickers_removeStickerFromSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_sticker = dc.TLObject()

	return dc.err
}

func (t *TL_stickers_removeStickerFromSet) String() string {
	return fmt.Sprintf("- stickers_removeStickerFromSet#f7760f51\n-- sticker : %v\n", t.M_sticker)
}

// stickers_changeStickerPosition#ffb6d4ca
type TL_stickers_changeStickerPosition struct {
	M_classID  int32
	M_sticker  TLObject
	M_position int32
}

func (t *TL_stickers_changeStickerPosition) ClassID() int32 {
	return t.M_classID
}

func (t *TL_stickers_changeStickerPosition) Set_sticker(M_sticker TLObject) {
	t.M_sticker = M_sticker
}

func (t *TL_stickers_changeStickerPosition) Get_sticker() TLObject {
	return t.M_sticker
}

func (t *TL_stickers_changeStickerPosition) Set_position(M_position int32) {
	t.M_position = M_position
}

func (t *TL_stickers_changeStickerPosition) Get_position() int32 {
	return t.M_position
}

func New_TL_stickers_changeStickerPosition() *TL_stickers_changeStickerPosition {
	return &TL_stickers_changeStickerPosition{
		M_classID: TL_CLASS_stickers_changeStickerPosition,
	}
}

func (t *TL_stickers_changeStickerPosition) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_stickers_changeStickerPosition))
	ec.TLObject(t.Get_sticker())
	ec.Int(t.Get_position())

	return ec.GetBuffer()
}

func (t *TL_stickers_changeStickerPosition) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_sticker = dc.TLObject()
	t.M_position = dc.Int()

	return dc.err
}

func (t *TL_stickers_changeStickerPosition) String() string {
	return fmt.Sprintf("- stickers_changeStickerPosition#ffb6d4ca\n-- sticker : %v\n-- position : %v\n", t.M_sticker, t.M_position)
}

// stickers_addStickerToSet#8653febe
type TL_stickers_addStickerToSet struct {
	M_classID    int32
	M_stickerset TLObject
	M_sticker    TLObject
}

func (t *TL_stickers_addStickerToSet) ClassID() int32 {
	return t.M_classID
}

func (t *TL_stickers_addStickerToSet) Set_stickerset(M_stickerset TLObject) {
	t.M_stickerset = M_stickerset
}

func (t *TL_stickers_addStickerToSet) Get_stickerset() TLObject {
	return t.M_stickerset
}

func (t *TL_stickers_addStickerToSet) Set_sticker(M_sticker TLObject) {
	t.M_sticker = M_sticker
}

func (t *TL_stickers_addStickerToSet) Get_sticker() TLObject {
	return t.M_sticker
}

func New_TL_stickers_addStickerToSet() *TL_stickers_addStickerToSet {
	return &TL_stickers_addStickerToSet{
		M_classID: TL_CLASS_stickers_addStickerToSet,
	}
}

func (t *TL_stickers_addStickerToSet) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_stickers_addStickerToSet))
	ec.TLObject(t.Get_stickerset())
	ec.TLObject(t.Get_sticker())

	return ec.GetBuffer()
}

func (t *TL_stickers_addStickerToSet) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_stickerset = dc.TLObject()
	t.M_sticker = dc.TLObject()

	return dc.err
}

func (t *TL_stickers_addStickerToSet) String() string {
	return fmt.Sprintf("- stickers_addStickerToSet#8653febe\n-- stickerset : %v\n-- sticker : %v\n", t.M_stickerset, t.M_sticker)
}

// phone_getCallConfig#55451fa9
type TL_phone_getCallConfig struct {
	M_classID int32
}

func (t *TL_phone_getCallConfig) ClassID() int32 {
	return t.M_classID
}

func New_TL_phone_getCallConfig() *TL_phone_getCallConfig {
	return &TL_phone_getCallConfig{
		M_classID: TL_CLASS_phone_getCallConfig,
	}
}

func (t *TL_phone_getCallConfig) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phone_getCallConfig))

	return ec.GetBuffer()
}

func (t *TL_phone_getCallConfig) Decode(b []byte) error {
	return nil
}

func (t *TL_phone_getCallConfig) String() string {
	return fmt.Sprintf("- phone_getCallConfig#55451fa9\n")
}

// phone_requestCall#5b95b3d4
type TL_phone_requestCall struct {
	M_classID   int32
	M_user_id   TLObject
	M_random_id int32
	M_g_a_hash  TLObject
	M_protocol  TLObject
}

func (t *TL_phone_requestCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phone_requestCall) Set_user_id(M_user_id TLObject) {
	t.M_user_id = M_user_id
}

func (t *TL_phone_requestCall) Get_user_id() TLObject {
	return t.M_user_id
}

func (t *TL_phone_requestCall) Set_random_id(M_random_id int32) {
	t.M_random_id = M_random_id
}

func (t *TL_phone_requestCall) Get_random_id() int32 {
	return t.M_random_id
}

func (t *TL_phone_requestCall) Set_g_a_hash(M_g_a_hash TLObject) {
	t.M_g_a_hash = M_g_a_hash
}

func (t *TL_phone_requestCall) Get_g_a_hash() TLObject {
	return t.M_g_a_hash
}

func (t *TL_phone_requestCall) Set_protocol(M_protocol TLObject) {
	t.M_protocol = M_protocol
}

func (t *TL_phone_requestCall) Get_protocol() TLObject {
	return t.M_protocol
}

func New_TL_phone_requestCall() *TL_phone_requestCall {
	return &TL_phone_requestCall{
		M_classID: TL_CLASS_phone_requestCall,
	}
}

func (t *TL_phone_requestCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phone_requestCall))
	ec.TLObject(t.Get_user_id())
	ec.Int(t.Get_random_id())
	ec.TLObject(t.Get_g_a_hash())
	ec.TLObject(t.Get_protocol())

	return ec.GetBuffer()
}

func (t *TL_phone_requestCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_user_id = dc.TLObject()
	t.M_random_id = dc.Int()
	t.M_g_a_hash = dc.TLObject()
	t.M_protocol = dc.TLObject()

	return dc.err
}

func (t *TL_phone_requestCall) String() string {
	return fmt.Sprintf("- phone_requestCall#5b95b3d4\n-- user_id : %v\n-- random_id : %v\n-- g_a_hash : %v\n-- protocol : %v\n", t.M_user_id, t.M_random_id, t.M_g_a_hash, t.M_protocol)
}

// phone_acceptCall#3bd2b4a0
type TL_phone_acceptCall struct {
	M_classID  int32
	M_peer     TLObject
	M_g_b      TLObject
	M_protocol TLObject
}

func (t *TL_phone_acceptCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phone_acceptCall) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_phone_acceptCall) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_phone_acceptCall) Set_g_b(M_g_b TLObject) {
	t.M_g_b = M_g_b
}

func (t *TL_phone_acceptCall) Get_g_b() TLObject {
	return t.M_g_b
}

func (t *TL_phone_acceptCall) Set_protocol(M_protocol TLObject) {
	t.M_protocol = M_protocol
}

func (t *TL_phone_acceptCall) Get_protocol() TLObject {
	return t.M_protocol
}

func New_TL_phone_acceptCall() *TL_phone_acceptCall {
	return &TL_phone_acceptCall{
		M_classID: TL_CLASS_phone_acceptCall,
	}
}

func (t *TL_phone_acceptCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phone_acceptCall))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_g_b())
	ec.TLObject(t.Get_protocol())

	return ec.GetBuffer()
}

func (t *TL_phone_acceptCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_g_b = dc.TLObject()
	t.M_protocol = dc.TLObject()

	return dc.err
}

func (t *TL_phone_acceptCall) String() string {
	return fmt.Sprintf("- phone_acceptCall#3bd2b4a0\n-- peer : %v\n-- g_b : %v\n-- protocol : %v\n", t.M_peer, t.M_g_b, t.M_protocol)
}

// phone_confirmCall#2efe1722
type TL_phone_confirmCall struct {
	M_classID         int32
	M_peer            TLObject
	M_g_a             TLObject
	M_key_fingerprint int64
	M_protocol        TLObject
}

func (t *TL_phone_confirmCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phone_confirmCall) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_phone_confirmCall) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_phone_confirmCall) Set_g_a(M_g_a TLObject) {
	t.M_g_a = M_g_a
}

func (t *TL_phone_confirmCall) Get_g_a() TLObject {
	return t.M_g_a
}

func (t *TL_phone_confirmCall) Set_key_fingerprint(M_key_fingerprint int64) {
	t.M_key_fingerprint = M_key_fingerprint
}

func (t *TL_phone_confirmCall) Get_key_fingerprint() int64 {
	return t.M_key_fingerprint
}

func (t *TL_phone_confirmCall) Set_protocol(M_protocol TLObject) {
	t.M_protocol = M_protocol
}

func (t *TL_phone_confirmCall) Get_protocol() TLObject {
	return t.M_protocol
}

func New_TL_phone_confirmCall() *TL_phone_confirmCall {
	return &TL_phone_confirmCall{
		M_classID: TL_CLASS_phone_confirmCall,
	}
}

func (t *TL_phone_confirmCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phone_confirmCall))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_g_a())
	ec.Long(t.Get_key_fingerprint())
	ec.TLObject(t.Get_protocol())

	return ec.GetBuffer()
}

func (t *TL_phone_confirmCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_g_a = dc.TLObject()
	t.M_key_fingerprint = dc.Long()
	t.M_protocol = dc.TLObject()

	return dc.err
}

func (t *TL_phone_confirmCall) String() string {
	return fmt.Sprintf("- phone_confirmCall#2efe1722\n-- peer : %v\n-- g_a : %v\n-- key_fingerprint : %v\n-- protocol : %v\n", t.M_peer, t.M_g_a, t.M_key_fingerprint, t.M_protocol)
}

// phone_receivedCall#17d54f61
type TL_phone_receivedCall struct {
	M_classID int32
	M_peer    TLObject
}

func (t *TL_phone_receivedCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phone_receivedCall) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_phone_receivedCall) Get_peer() TLObject {
	return t.M_peer
}

func New_TL_phone_receivedCall() *TL_phone_receivedCall {
	return &TL_phone_receivedCall{
		M_classID: TL_CLASS_phone_receivedCall,
	}
}

func (t *TL_phone_receivedCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phone_receivedCall))
	ec.TLObject(t.Get_peer())

	return ec.GetBuffer()
}

func (t *TL_phone_receivedCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()

	return dc.err
}

func (t *TL_phone_receivedCall) String() string {
	return fmt.Sprintf("- phone_receivedCall#17d54f61\n-- peer : %v\n", t.M_peer)
}

// phone_discardCall#78d413a6
type TL_phone_discardCall struct {
	M_classID       int32
	M_peer          TLObject
	M_duration      int32
	M_reason        TLObject
	M_connection_id int64
}

func (t *TL_phone_discardCall) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phone_discardCall) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_phone_discardCall) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_phone_discardCall) Set_duration(M_duration int32) {
	t.M_duration = M_duration
}

func (t *TL_phone_discardCall) Get_duration() int32 {
	return t.M_duration
}

func (t *TL_phone_discardCall) Set_reason(M_reason TLObject) {
	t.M_reason = M_reason
}

func (t *TL_phone_discardCall) Get_reason() TLObject {
	return t.M_reason
}

func (t *TL_phone_discardCall) Set_connection_id(M_connection_id int64) {
	t.M_connection_id = M_connection_id
}

func (t *TL_phone_discardCall) Get_connection_id() int64 {
	return t.M_connection_id
}

func New_TL_phone_discardCall() *TL_phone_discardCall {
	return &TL_phone_discardCall{
		M_classID: TL_CLASS_phone_discardCall,
	}
}

func (t *TL_phone_discardCall) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phone_discardCall))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_duration())
	ec.TLObject(t.Get_reason())
	ec.Long(t.Get_connection_id())

	return ec.GetBuffer()
}

func (t *TL_phone_discardCall) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_duration = dc.Int()
	t.M_reason = dc.TLObject()
	t.M_connection_id = dc.Long()

	return dc.err
}

func (t *TL_phone_discardCall) String() string {
	return fmt.Sprintf("- phone_discardCall#78d413a6\n-- peer : %v\n-- duration : %v\n-- reason : %v\n-- connection_id : %v\n", t.M_peer, t.M_duration, t.M_reason, t.M_connection_id)
}

// phone_setCallRating#1c536a34
type TL_phone_setCallRating struct {
	M_classID int32
	M_peer    TLObject
	M_rating  int32
	M_comment string
}

func (t *TL_phone_setCallRating) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phone_setCallRating) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_phone_setCallRating) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_phone_setCallRating) Set_rating(M_rating int32) {
	t.M_rating = M_rating
}

func (t *TL_phone_setCallRating) Get_rating() int32 {
	return t.M_rating
}

func (t *TL_phone_setCallRating) Set_comment(M_comment string) {
	t.M_comment = M_comment
}

func (t *TL_phone_setCallRating) Get_comment() string {
	return t.M_comment
}

func New_TL_phone_setCallRating() *TL_phone_setCallRating {
	return &TL_phone_setCallRating{
		M_classID: TL_CLASS_phone_setCallRating,
	}
}

func (t *TL_phone_setCallRating) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phone_setCallRating))
	ec.TLObject(t.Get_peer())
	ec.Int(t.Get_rating())
	ec.String(t.Get_comment())

	return ec.GetBuffer()
}

func (t *TL_phone_setCallRating) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_rating = dc.Int()
	t.M_comment = dc.String()

	return dc.err
}

func (t *TL_phone_setCallRating) String() string {
	return fmt.Sprintf("- phone_setCallRating#1c536a34\n-- peer : %v\n-- rating : %v\n-- comment : %v\n", t.M_peer, t.M_rating, t.M_comment)
}

// phone_saveCallDebug#277add7e
type TL_phone_saveCallDebug struct {
	M_classID int32
	M_peer    TLObject
	M_debug   TLObject
}

func (t *TL_phone_saveCallDebug) ClassID() int32 {
	return t.M_classID
}

func (t *TL_phone_saveCallDebug) Set_peer(M_peer TLObject) {
	t.M_peer = M_peer
}

func (t *TL_phone_saveCallDebug) Get_peer() TLObject {
	return t.M_peer
}

func (t *TL_phone_saveCallDebug) Set_debug(M_debug TLObject) {
	t.M_debug = M_debug
}

func (t *TL_phone_saveCallDebug) Get_debug() TLObject {
	return t.M_debug
}

func New_TL_phone_saveCallDebug() *TL_phone_saveCallDebug {
	return &TL_phone_saveCallDebug{
		M_classID: TL_CLASS_phone_saveCallDebug,
	}
}

func (t *TL_phone_saveCallDebug) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_phone_saveCallDebug))
	ec.TLObject(t.Get_peer())
	ec.TLObject(t.Get_debug())

	return ec.GetBuffer()
}

func (t *TL_phone_saveCallDebug) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_peer = dc.TLObject()
	t.M_debug = dc.TLObject()

	return dc.err
}

func (t *TL_phone_saveCallDebug) String() string {
	return fmt.Sprintf("- phone_saveCallDebug#277add7e\n-- peer : %v\n-- debug : %v\n", t.M_peer, t.M_debug)
}

// langpack_getLangPack#9ab5c58e
type TL_langpack_getLangPack struct {
	M_classID   int32
	M_lang_code string
}

func (t *TL_langpack_getLangPack) ClassID() int32 {
	return t.M_classID
}

func (t *TL_langpack_getLangPack) Set_lang_code(M_lang_code string) {
	t.M_lang_code = M_lang_code
}

func (t *TL_langpack_getLangPack) Get_lang_code() string {
	return t.M_lang_code
}

func New_TL_langpack_getLangPack() *TL_langpack_getLangPack {
	return &TL_langpack_getLangPack{
		M_classID: TL_CLASS_langpack_getLangPack,
	}
}

func (t *TL_langpack_getLangPack) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_langpack_getLangPack))
	ec.String(t.Get_lang_code())

	return ec.GetBuffer()
}

func (t *TL_langpack_getLangPack) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_lang_code = dc.String()

	return dc.err
}

func (t *TL_langpack_getLangPack) String() string {
	return fmt.Sprintf("- langpack_getLangPack#9ab5c58e\n-- lang_code : %v\n", t.M_lang_code)
}

// langpack_getStrings#2e1ee318
type TL_langpack_getStrings struct {
	M_classID   int32
	M_lang_code string
	M_keys      []string
}

func (t *TL_langpack_getStrings) ClassID() int32 {
	return t.M_classID
}

func (t *TL_langpack_getStrings) Set_lang_code(M_lang_code string) {
	t.M_lang_code = M_lang_code
}

func (t *TL_langpack_getStrings) Get_lang_code() string {
	return t.M_lang_code
}

func (t *TL_langpack_getStrings) Set_keys(M_keys []string) {
	t.M_keys = M_keys
}

func (t *TL_langpack_getStrings) Get_keys() []string {
	return t.M_keys
}

func New_TL_langpack_getStrings() *TL_langpack_getStrings {
	return &TL_langpack_getStrings{
		M_classID: TL_CLASS_langpack_getStrings,
	}
}

func (t *TL_langpack_getStrings) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_langpack_getStrings))
	ec.String(t.Get_lang_code())
	ec.VectorString(t.Get_keys())

	return ec.GetBuffer()
}

func (t *TL_langpack_getStrings) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_lang_code = dc.String()
	t.M_keys = dc.VectorString()

	return dc.err
}

func (t *TL_langpack_getStrings) String() string {
	return fmt.Sprintf("- langpack_getStrings#2e1ee318\n-- lang_code : %v\n-- keys : %v\n", t.M_lang_code, t.M_keys)
}

// langpack_getDifference#b2e4d7d
type TL_langpack_getDifference struct {
	M_classID      int32
	M_from_version int32
}

func (t *TL_langpack_getDifference) ClassID() int32 {
	return t.M_classID
}

func (t *TL_langpack_getDifference) Set_from_version(M_from_version int32) {
	t.M_from_version = M_from_version
}

func (t *TL_langpack_getDifference) Get_from_version() int32 {
	return t.M_from_version
}

func New_TL_langpack_getDifference() *TL_langpack_getDifference {
	return &TL_langpack_getDifference{
		M_classID: TL_CLASS_langpack_getDifference,
	}
}

func (t *TL_langpack_getDifference) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_langpack_getDifference))
	ec.Int(t.Get_from_version())

	return ec.GetBuffer()
}

func (t *TL_langpack_getDifference) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_from_version = dc.Int()

	return dc.err
}

func (t *TL_langpack_getDifference) String() string {
	return fmt.Sprintf("- langpack_getDifference#b2e4d7d\n-- from_version : %v\n", t.M_from_version)
}

// langpack_getLanguages#800fd57d
type TL_langpack_getLanguages struct {
	M_classID int32
}

func (t *TL_langpack_getLanguages) ClassID() int32 {
	return t.M_classID
}

func New_TL_langpack_getLanguages() *TL_langpack_getLanguages {
	return &TL_langpack_getLanguages{
		M_classID: TL_CLASS_langpack_getLanguages,
	}
}

func (t *TL_langpack_getLanguages) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_langpack_getLanguages))

	return ec.GetBuffer()
}

func (t *TL_langpack_getLanguages) Decode(b []byte) error {
	return nil
}

func (t *TL_langpack_getLanguages) String() string {
	return fmt.Sprintf("- langpack_getLanguages#800fd57d\n")
}

// schemeNotModified#263c9c58
type TL_schemeNotModified struct {
	M_classID int32
}

func (t *TL_schemeNotModified) ClassID() int32 {
	return t.M_classID
}

func New_TL_schemeNotModified() *TL_schemeNotModified {
	return &TL_schemeNotModified{
		M_classID: TL_CLASS_schemeNotModified,
	}
}

func (t *TL_schemeNotModified) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_schemeNotModified))

	return ec.GetBuffer()
}

func (t *TL_schemeNotModified) Decode(b []byte) error {
	return nil
}

func (t *TL_schemeNotModified) String() string {
	return fmt.Sprintf("- schemeNotModified#263c9c58\n")
}

// scheme#4e6ef65e
type TL_scheme struct {
	M_classID    int32
	M_scheme_raw string
	M_types      []TLObject
	M_methods    []TLObject
	M_version    int32
}

func (t *TL_scheme) ClassID() int32 {
	return t.M_classID
}

func (t *TL_scheme) Set_scheme_raw(M_scheme_raw string) {
	t.M_scheme_raw = M_scheme_raw
}

func (t *TL_scheme) Get_scheme_raw() string {
	return t.M_scheme_raw
}

func (t *TL_scheme) Set_types(M_types []TLObject) {
	t.M_types = M_types
}

func (t *TL_scheme) Get_types() []TLObject {
	return t.M_types
}

func (t *TL_scheme) Set_methods(M_methods []TLObject) {
	t.M_methods = M_methods
}

func (t *TL_scheme) Get_methods() []TLObject {
	return t.M_methods
}

func (t *TL_scheme) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_scheme) Get_version() int32 {
	return t.M_version
}

func New_TL_scheme() *TL_scheme {
	return &TL_scheme{
		M_classID: TL_CLASS_scheme,
	}
}

func (t *TL_scheme) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_scheme))
	ec.String(t.Get_scheme_raw())
	ec.Vector(t.Get_types())
	ec.Vector(t.Get_methods())
	ec.Int(t.Get_version())

	return ec.GetBuffer()
}

func (t *TL_scheme) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_scheme_raw = dc.String()
	t.M_types = dc.Vector()
	t.M_methods = dc.Vector()
	t.M_version = dc.Int()

	return dc.err
}

func (t *TL_scheme) String() string {
	return fmt.Sprintf("- scheme#4e6ef65e\n-- scheme_raw : %v\n-- types : %v\n-- methods : %v\n-- version : %v\n", t.M_scheme_raw, t.M_types, t.M_methods, t.M_version)
}

// schemeParam#21b59bef
type TL_schemeParam struct {
	M_classID int32
	M_name    string
	M_type    string
}

func (t *TL_schemeParam) ClassID() int32 {
	return t.M_classID
}

func (t *TL_schemeParam) Set_name(M_name string) {
	t.M_name = M_name
}

func (t *TL_schemeParam) Get_name() string {
	return t.M_name
}

func (t *TL_schemeParam) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_schemeParam) Get_type() string {
	return t.M_type
}

func New_TL_schemeParam() *TL_schemeParam {
	return &TL_schemeParam{
		M_classID: TL_CLASS_schemeParam,
	}
}

func (t *TL_schemeParam) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_schemeParam))
	ec.String(t.Get_name())
	ec.String(t.Get_type())

	return ec.GetBuffer()
}

func (t *TL_schemeParam) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_name = dc.String()
	t.M_type = dc.String()

	return dc.err
}

func (t *TL_schemeParam) String() string {
	return fmt.Sprintf("- schemeParam#21b59bef\n-- name : %v\n-- type : %v\n", t.M_name, t.M_type)
}

// schemeMethod#479357c0
type TL_schemeMethod struct {
	M_classID int32
	M_id      int32
	M_method  string
	M_params  []TLObject
	M_type    string
}

func (t *TL_schemeMethod) ClassID() int32 {
	return t.M_classID
}

func (t *TL_schemeMethod) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_schemeMethod) Get_id() int32 {
	return t.M_id
}

func (t *TL_schemeMethod) Set_method(M_method string) {
	t.M_method = M_method
}

func (t *TL_schemeMethod) Get_method() string {
	return t.M_method
}

func (t *TL_schemeMethod) Set_params(M_params []TLObject) {
	t.M_params = M_params
}

func (t *TL_schemeMethod) Get_params() []TLObject {
	return t.M_params
}

func (t *TL_schemeMethod) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_schemeMethod) Get_type() string {
	return t.M_type
}

func New_TL_schemeMethod() *TL_schemeMethod {
	return &TL_schemeMethod{
		M_classID: TL_CLASS_schemeMethod,
	}
}

func (t *TL_schemeMethod) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_schemeMethod))
	ec.Int(t.Get_id())
	ec.String(t.Get_method())
	ec.Vector(t.Get_params())
	ec.String(t.Get_type())

	return ec.GetBuffer()
}

func (t *TL_schemeMethod) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_method = dc.String()
	t.M_params = dc.Vector()
	t.M_type = dc.String()

	return dc.err
}

func (t *TL_schemeMethod) String() string {
	return fmt.Sprintf("- schemeMethod#479357c0\n-- id : %v\n-- method : %v\n-- params : %v\n-- type : %v\n", t.M_id, t.M_method, t.M_params, t.M_type)
}

// schemeType#a8e1e989
type TL_schemeType struct {
	M_classID   int32
	M_id        int32
	M_predicate string
	M_params    []TLObject
	M_type      string
}

func (t *TL_schemeType) ClassID() int32 {
	return t.M_classID
}

func (t *TL_schemeType) Set_id(M_id int32) {
	t.M_id = M_id
}

func (t *TL_schemeType) Get_id() int32 {
	return t.M_id
}

func (t *TL_schemeType) Set_predicate(M_predicate string) {
	t.M_predicate = M_predicate
}

func (t *TL_schemeType) Get_predicate() string {
	return t.M_predicate
}

func (t *TL_schemeType) Set_params(M_params []TLObject) {
	t.M_params = M_params
}

func (t *TL_schemeType) Get_params() []TLObject {
	return t.M_params
}

func (t *TL_schemeType) Set_type(M_type string) {
	t.M_type = M_type
}

func (t *TL_schemeType) Get_type() string {
	return t.M_type
}

func New_TL_schemeType() *TL_schemeType {
	return &TL_schemeType{
		M_classID: TL_CLASS_schemeType,
	}
}

func (t *TL_schemeType) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_schemeType))
	ec.Int(t.Get_id())
	ec.String(t.Get_predicate())
	ec.Vector(t.Get_params())
	ec.String(t.Get_type())

	return ec.GetBuffer()
}

func (t *TL_schemeType) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_id = dc.Int()
	t.M_predicate = dc.String()
	t.M_params = dc.Vector()
	t.M_type = dc.String()

	return dc.err
}

func (t *TL_schemeType) String() string {
	return fmt.Sprintf("- schemeType#a8e1e989\n-- id : %v\n-- predicate : %v\n-- params : %v\n-- type : %v\n", t.M_id, t.M_predicate, t.M_params, t.M_type)
}

// help_getScheme#dbb69a9e
type TL_help_getScheme struct {
	M_classID int32
	M_version int32
}

func (t *TL_help_getScheme) ClassID() int32 {
	return t.M_classID
}

func (t *TL_help_getScheme) Set_version(M_version int32) {
	t.M_version = M_version
}

func (t *TL_help_getScheme) Get_version() int32 {
	return t.M_version
}

func New_TL_help_getScheme() *TL_help_getScheme {
	return &TL_help_getScheme{
		M_classID: TL_CLASS_help_getScheme,
	}
}

func (t *TL_help_getScheme) Encode() []byte {
	ec := NewMTPEncodeBuffer(512)

	ec.Int(int32(TL_CLASS_help_getScheme))
	ec.Int(t.Get_version())

	return ec.GetBuffer()
}

func (t *TL_help_getScheme) Decode(b []byte) error {
	dc := NewMTPDecodeBuffer(b)

	t.M_version = dc.Int()

	return dc.err
}

func (t *TL_help_getScheme) String() string {
	return fmt.Sprintf("- help_getScheme#dbb69a9e\n-- version : %v\n", t.M_version)
}
